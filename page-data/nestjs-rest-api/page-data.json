{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/nestjs-rest-api/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/nestjs-logging/"},"frontmatter":{"title":"NestJS에서 로깅(logging)하기"}},"node":{"html":"<p>분산 시스템 환경에서 가장 흔하게 접할 수 있는 백앤드(backend) 애플리케이션은 아마도 특정한 도메인의 데이터를 관리해주는 REST API일 텐데요.\n이번 포스팅에서는 NestJS를 이용하면 얼마나 효과적으로 이러한 전형적인 REST API를 개발할 수 있는지 알아보겠습니다.</p>\n<h2 id=\"실습-프로젝트-구성\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"실습 프로젝트 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 프로젝트 구성</h2>\n<p>먼저 간단한 실습을 위해서 NestJS 프로젝트가 하나 필요할 것 같은데요.\n터미널에서 NestJS CLI 도구의 <code>nest new</code> 명령어를 실행하여 새로운 프로젝트를 구성하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest new our-nestjs\n⚡  We will scaffold your app <span class=\"token keyword\">in</span> a few seconds<span class=\"token punctuation\">..</span>\n\n? Which package manager would you ❤️  to use? <span class=\"token punctuation\">(</span>Use arrow keys<span class=\"token punctuation\">)</span>\n❯ <span class=\"token function\">npm</span>\n  <span class=\"token function\">yarn</span>\n  <span class=\"token function\">pnpm</span></code></pre></div>\n<blockquote>\n<p>NestJS CLI를 설치하고 NestJS 프로젝트를 구성하는 기본적인 방법은 <a href=\"/nestjs/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"코드-자동-생성\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%9E%90%EB%8F%99-%EC%83%9D%EC%84%B1\" aria-label=\"코드 자동 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 자동 생성</h2>\n<p>REST API는 대부분의 경우 유지보수가 용이하도록 여러 레이어(layer)로 나누어서 설계하지요?</p>\n<p>관례적으로 컨트롤러(controller) 클래스는 HTTP 요청을 받아서 응답하고, 서비스(service) 클래스는 비지니스 로직을 처리합니다.\n또한 엔티티(entity) 클래스는 해당 애플리케이션에서 관리되는 하나의 데이터를 나타내기 위해서 사용되며, DTO(entity) 클래스는 외부로 부터 유입되는 데이터를 나타내기 위해서 사용됩니다.</p>\n<p>이러한 클래스들을 하나씩 손수 일일이 생성하는 것은 상당히 지루어하고 번거로운 작업이 될 수 있는데요.\n다행이도 NestJS CLI는 REST API를 개발하는데 필요한 클래스를 일괄적으로 자동 생성해주는 <code>nest generate resource</code>라는 명령어를 제공하고 있습니다.</p>\n<p>실습 프로젝트에서는 유저 정보를 관리하기 위한 REST API를 개발하려고 하는데요.\n따라서 <code>nest generate resource</code> 명령어의 인자로 <code>users</code>를 넘겨서 실행하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest generate resource <span class=\"token function\">users</span>\n? What transport layer <span class=\"token keyword\">do</span> you use? REST API\n? Would you like to generate CRUD entry points? Yes\nCREATE src/users/users.controller.spec.ts <span class=\"token punctuation\">(</span><span class=\"token number\">566</span> bytes<span class=\"token punctuation\">)</span>\nCREATE src/users/users.controller.ts <span class=\"token punctuation\">(</span><span class=\"token number\">894</span> bytes<span class=\"token punctuation\">)</span>\nCREATE src/users/users.module.ts <span class=\"token punctuation\">(</span><span class=\"token number\">247</span> bytes<span class=\"token punctuation\">)</span>\nCREATE src/users/users.service.spec.ts <span class=\"token punctuation\">(</span><span class=\"token number\">453</span> bytes<span class=\"token punctuation\">)</span>\nCREATE src/users/users.service.ts <span class=\"token punctuation\">(</span><span class=\"token number\">609</span> bytes<span class=\"token punctuation\">)</span>\nCREATE src/users/dto/create-user.dto.ts <span class=\"token punctuation\">(</span><span class=\"token number\">30</span> bytes<span class=\"token punctuation\">)</span>\nCREATE src/users/dto/update-user.dto.ts <span class=\"token punctuation\">(</span><span class=\"token number\">169</span> bytes<span class=\"token punctuation\">)</span>\nCREATE src/users/entities/user.entity.ts <span class=\"token punctuation\">(</span><span class=\"token number\">21</span> bytes<span class=\"token punctuation\">)</span>\nUPDATE package.json <span class=\"token punctuation\">(</span><span class=\"token number\">2004</span> bytes<span class=\"token punctuation\">)</span>\nUPDATE src/app.module.ts <span class=\"token punctuation\">(</span><span class=\"token number\">312</span> bytes<span class=\"token punctuation\">)</span>\n✔ Packages installed successfully.</code></pre></div>\n<p>그러면 <code>src/users/</code> 디렉토리 안에 총 8개의 파일이 생성되고, <code>app.module.ts</code> 파일에서 추가된 모듈을 불러오도록 수정되는 것을 볼 수 있으실 겁니다.</p>\n<h2 id=\"entity\" style=\"position:relative;\"><a href=\"#entity\" aria-label=\"entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity</h2>\n<p>많은 REST API가 뒷 단에 데이터베이스를 두고 요청받은 HTTP 메서드(POST PATCH GET DELETE)에 따라 소위 CRUD(Create Update Read Delete) 작업을 처리하게 되는데요.</p>\n<p>NestJS에서는 엔티티(entity) 클래스를 통해서 REST API에서 관리하는 데이터를 모델링(modeling)합니다.</p>\n<p>예를 들어서, 엔티티 클래스의 인스턴스(instance)는 관계형 데이터베이스를 사용하다면 어떤 테이블의 하나의 레코드(record)가 될 것이고,\nNoSQL 데이터베이스를 사용한다면 어떤 컬렉션(collection)의 하나의 아이템(item) 또는 문서(document)가 될 것입니다.</p>\n<p>실습 프로젝트에서 <code>src/users/entities/</code> 디렉토리 안에 있는 <code>user.entity.ts</code> 파일을 열어보면 비어있는 <code>User</code> 클래스가 있을텐데요.\n우리는 이 클래스 안에 REST API가 관리해야하는 속성들을 나열해줘야 합니다.</p>\n<p>우선 각 유저를 유일하게 식별하기 위한 <code>id</code> 속성이 필요할 것 같고요.\n유저의 이름과 이메일, 전화번호를 저장하기 위한 <code>name</code>, <code>email</code>, <code>phone</code> 속성도 추가하겠습니다.\n그리고 각 유저 데이터가 언제 생성되었고 수정되었는지를 추적하기 위한 <code>createdAt</code>, <code>updatedAt</code> 속성을 추가하도록 하겠습니다.</p>\n<div class=\"gatsby-code-title\">user.entity.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  phone<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  createdAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n  updatedAt<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"dto\" style=\"position:relative;\"><a href=\"#dto\" aria-label=\"dto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DTO</h2>\n<p>REST API에서는 일반적으로 <code>POST</code> 방식의 엔드포인트(endpoint)를 통해 생성할 데이터가 들어오고 <code>PATCH</code> 방식의 엔드포인트를 통해서 수정할 데이터가 들어오는데요.</p>\n<p>NestJS에서는 DTO(data transfer object) 클래스를 통해서 이렇게 외부로 부터 유입되는 데이터를 모델링합니다.\n따라서 생성할 유저를 나타낼 DTO 클래스와 수정할 유저 데이터를 나타낼 DTO 클래스가 필요할 것 같은데요.</p>\n<p>실습 프로젝트에서 <code>src/users/dto</code> 디렉토리에 들어가보면 <code>create-user.dto.ts</code> 파일과 <code>update-user.dto.ts</code> 파일이 보일텐데요.\n이 파일을 각각 열어보면 NestJS CLI가 이미 만들어 놓은 <code>CreateUserDto</code> 클래스와 <code>UpdateUserDto</code> 클래스가 확인될 것입니다.</p>\n<p>먼저 <code>create-user.dto.ts</code> 파일을 열고 <code>CreateUserDto</code> 클래스에 <code>name</code>, <code>email</code>, <code>phone</code> 속성을 추가합니다.\n위에서 엔티티 클래스에 추가했던 <code>id</code>, <code>createdAt</code>, <code>updatedAt</code> 속성을 DTO 클래스에 제외하는 이유는 이러한 속성은 애플리케이션 내부적으로 결정되므로 DTO 클래스를 통해서 외부로 부터 받을 필요가 없기 때문입니다.</p>\n<div class=\"gatsby-code-title\">create-user.dto.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateUserDto</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  phone<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>update-user.dto.ts</code> 파일에 있는 <code>UpdateUserDto</code> 클래스의 경우 별도로 수정해줄 부분없이 그대로 사용할 수 있는데요.\n대부분의 REST API에서 데이터 생성용 DTO 클래스와 데이터 수정용 DTO 클래스의 차이는 단지 속성을 필수적으로 받아야하는지 말아야하는지 밖에 없습니다.</p>\n<p><code>UpdateUserDto</code> 클래스를 보면 NestJS에서 제공하는 유틸리티 타입인 <code>PartialType</code>을 통해서 <code>CreateUserDto</code> 클래스를 확장하되 모든 속성을 선택적으로 입력받도록 하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PartialType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/mapped-types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CreateUserDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./create-user.dto\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdateUserDto</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PartialType</span><span class=\"token punctuation\">(</span>CreateUserDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"service\" style=\"position:relative;\"><a href=\"#service\" aria-label=\"service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service</h2>\n<p>이제 실제 비지니스 로직을 담당하는 서비스 클래스를 구현할 차례인데요.\n실제 프로젝트에서는 데이터베이스를 사용하여 데이터를 저장하겠지만 실습 프로젝트에서는 최대한 간단한 코드를 위해서 배열에 데이터를 저장하겠습니다.</p>\n<p>실습 프로젝트에서 <code>src/users/</code> 디렉토리 안에 있는 <code>users.service.ts</code> 파일을 열어보면 5개의 메서드로 구성된 <code>UsersService</code> 클래스가 있을텐데요.\n우리는 이제부터 각 메서드가 배열에 접근하여 데이터를 조회, 추가, 수정, 삭제하도록 코드를 작성해주기면 하면 됩니다.</p>\n<div class=\"gatsby-code-title\">users.service.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> NotFoundException <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CreateUserDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./dto/create-user.dto\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UpdateUserDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./dto/update-user.dto\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./entities/user.entity\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> users<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>createUserDto<span class=\"token operator\">:</span> CreateUserDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>createUserDto<span class=\"token punctuation\">,</span> createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> found <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> u<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>found<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> found<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> updateUserDto<span class=\"token operator\">:</span> UpdateUserDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> found <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>found<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>updateUserDto<span class=\"token punctuation\">,</span> updatedAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> u<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 주의깊게 볼 부분은 <code>findOne()</code> 메서드는 주어진 <code>id</code>에 부합하는 데이터가 없을 경우에 <code>NotFoundException</code> 예외를 던진다는 것입니다.\n<code>NotFoundException</code> 예외는 NestJS에서 잡아서 <code>404 Not Found</code>로 응답하기 때문에 호출자에게 존재하지 않는 데이터를 요청했다고 명시적으로 알려줄 수 있습니다.</p>\n<p><code>id</code>를 인자로 받는 <code>update()</code> 메서드와 <code>remove()</code> 메서드도 내부적으로 <code>findOne()</code> 메서드를 호출하기 때문에 호출자에게 동일한 피드백을 줄 수 있습니다.</p>\n<h2 id=\"controller\" style=\"position:relative;\"><a href=\"#controller\" aria-label=\"controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controller</h2>\n<p>마지막으로 실제로 HTTP 요청을 받아서 응답해주는 컨트롤러(controller) 클래스를 살펴보도록 하겠습니다.</p>\n<p>실습 프로젝트에서 <code>src/users/</code> 디렉토리 안에 있는 <code>users.controller.ts</code> 파일을 열어보면 이미 <code>UsersController</code> 클래스 안에 5개 엔드포인트를 처리할 수 있는 메서드가 구현되어 있는 것을 볼 수 있습니다.</p>\n<p>내부적으로 위에서 작성한 <code>UsersService</code>의 메서드를 호출하도록 각 요청 핸들러 메서드가 잘 구현이 되어 있기 때문에 추가로 수정해줘야 할 부분은 크게 없습니다.</p>\n<div class=\"gatsby-code-title\">users.controller.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Controller<span class=\"token punctuation\">,</span>\n  Get<span class=\"token punctuation\">,</span>\n  Post<span class=\"token punctuation\">,</span>\n  Body<span class=\"token punctuation\">,</span>\n  Patch<span class=\"token punctuation\">,</span>\n  Param<span class=\"token punctuation\">,</span>\n  Delete<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UsersService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CreateUserDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./dto/create-user.dto\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UpdateUserDto <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./dto/update-user.dto\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> usersService<span class=\"token operator\">:</span> UsersService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Post</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Body</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> createUserDto<span class=\"token operator\">:</span> CreateUserDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usersService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>createUserDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usersService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\":id\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usersService<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Patch</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\":id\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Body</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> updateUserDto<span class=\"token operator\">:</span> UpdateUserDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usersService<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">,</span> updateUserDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Delete</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\":id\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usersService<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기까지 하면 기본적인 CRUD 기능을 수행을 하는 REST API가 완성이 되는데요.\n당연히 실제 프로젝트에서는 제대로 된 데이터베이스를 사용하여 데이터를 영속적으로 저장을 해야겠고요.\n미들웨어(middleware), 파이프(pipe), 가드(guard)와 같은 NestJS에서 제공하는 부가 기능도 활용할 수 있겠습니다.</p>\n<h2 id=\"자동-문서화\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%8F%99-%EB%AC%B8%EC%84%9C%ED%99%94\" aria-label=\"자동 문서화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동 문서화</h2>\n<p>REST API를 개발할 때 문서화도 중요하지만 간과하기 쉬운 부분인데요.</p>\n<p>NestJS는 REST API의 실제 코드에서 Open API 규격에 맞는 문서를 자동으로 추출할 수 있는 Swagger 통합도 지원하는데요.\n이렇게 만든 문서 페이지에서는 실제 REST API 호출도 가능하기 때문에 테스트 측면에서도 매우 유용하게 활용할 수 있습니다.</p>\n<p>그러면 실습 프로젝트에 Swagger를 설정하기 위해서 먼저 <code>@nestjs/swagger</code>라는 npm 패키지를 프로젝트에 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i @nestjs/swagger\n\nwarn preInstall No repository field\n┌ <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>/4<span class=\"token punctuation\">]</span> 🔍  Resolving dependencies\n└ Completed <span class=\"token keyword\">in</span> <span class=\"token number\">7</span>.524s\n┌ <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>/4<span class=\"token punctuation\">]</span> 🚚  Fetching dependencies\n│ info pruneDeps Excluding <span class=\"token number\">1</span> dependency. For <span class=\"token function\">more</span> information use <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token parameter variable\">--verbose</span><span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">.</span>\n└ Completed <span class=\"token keyword\">in</span> <span class=\"token number\">3</span>.728s\n┌ <span class=\"token punctuation\">[</span><span class=\"token number\">3</span>/4<span class=\"token punctuation\">]</span> 🔗  Linking dependencies\n└ Completed <span class=\"token keyword\">in</span> <span class=\"token number\">40</span>.713s\ninfo security We found <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">install</span><span class=\"token variable\">`</span></span> scripts <span class=\"token function\">which</span> turbo skips <span class=\"token keyword\">for</span> security reasons. For\n<span class=\"token function\">more</span> information see https://turbo.sh/install-scripts.\n└─ @nestjs/core@9.2.1\n\nsuccess Saved lockfile <span class=\"token string\">\"package-lock.json\"</span>\nsuccess Updated <span class=\"token string\">\"package.json\"</span>\n\nsuccess Install finished <span class=\"token keyword\">in</span> <span class=\"token number\">52</span>.061s</code></pre></div>\n<p>그 다음 <code>src/</code> 디렉토리에 있는 <code>main.ts</code> 파일을 열어서, NestJS 앱이 구동될 때 Swagger도 셋업이 되도록 수정해줍니다.</p>\n<div class=\"gatsby-code-title\">main.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/core\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DocumentBuilder<span class=\"token punctuation\">,</span> SwaggerModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/swagger\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.module\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DocumentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Users API\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The is a sample REST API\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> document <span class=\"token operator\">=</span> SwaggerModule<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  SwaggerModule<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"api\"</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로 프로젝트 최상위 경로에 있는 <code>nest-cli.json</code> 파일에 <code>@nestjs/swagger</code>를 플러그인으로 설정해줍니다.\n이렇게 해주면 굳이 엔티티 클래스와와 DTO 클래스에 일일이 Swagger 관련 데코레이터를 추가해주지 않아도 Swagger에게 스키마로 인식되게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"<span class=\"token variable\">$schema</span>\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://json.schemastore.org/nest-cli\"</span>,\n  <span class=\"token string\">\"collection\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"@nestjs/schematics\"</span>,\n  <span class=\"token string\">\"sourceRoot\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"src\"</span>,\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"deleteOutDir\"</span><span class=\"token builtin class-name\">:</span> true,\n    <span class=\"token string\">\"plugins\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"@nestjs/swagger\"</span>,\n        <span class=\"token string\">\"options\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string\">\"introspectComments\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>실습 프로젝트의 코드는 아래에서 직접 확인하고 실행해볼 수 있습니다.</p>\n<iframe src=\"https://stackblitz.com/edit/nestjs-rest-api?ctl=1&embed=1&file=src/main.ts&view=preview\"\nstyle=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 NestJS를 이용하여 유저 정보를 관리해주는 간단한 REST API를 개발해보았습니다.\n만약에 이러한 REST API를 기존에 백앤드 애플리케이션 개발에 많이 사용되던 Express를 사용해서 구현했다면 NestJS 대비 얼마나 많은 노력이 들어갔을까요?\n본 포스팅을 통해서 NestJS가 개발 생산성에 얼마나 큰 도움이 될 수 있는지 느낄 수 있으셨으면 좋겠습니다.</p>\n<p>NestJS에 관련된 다른 포스팅은 <a href=\"/?tag=NestJS\">관련 태그</a>를 참고 바라겠습니다.</p>","timeToRead":8,"fields":{"slug":"/nestjs-rest-api/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","REST","API","CLI"]},"frontmatter":{"title":"NestJS로 REST API 찍어내기","date":"Jan 9, 2023"}},"next":{"fields":{"slug":"/nestjs/"},"frontmatter":{"title":"NestJS 처음 시작하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}