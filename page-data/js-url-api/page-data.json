{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-url-api/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-prettier-config/"},"frontmatter":{"title":"Prettier 상세 설정 가이드"}},"node":{"html":"<p>웹 개발에서 URL을 다루는 일은 참 빈번하게 발생하죠?\n프론트엔드에서는 URL로 다른 웹페이지로 링크를 걸고, CSS와 자바스크립트 코드를 불러오며, 이미지, 오디오, 비디오와 같은 멀티미디어도 제공할 수 있습니다.\n반면에 백엔드에서는 요청 URL의 경로에 따라서 DB에 저장되어 있는 데이터를 조회하고 URL의 쿼리 스트링으로 넘어온 매개변수에 따라서 다른 데이터 처리를 해줄 수 있습니다.</p>\n<p>이번 글에서는 웹 주소를 좀 더 안전하게 다룰 수 있도록 도와주는 자바스크립트의 URL API에 대해 알아보겠습니다.</p>\n<h2 id=\"url이란\" style=\"position:relative;\"><a href=\"#url%EC%9D%B4%EB%9E%80\" aria-label=\"url이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL이란?</h2>\n<p>우리는 거의 매일 URL을 사용하고 있으면서도, URL이 정작 무엇인지 진지하게 생각해볼 기회는 많지 않은 것 같죠?</p>\n<p>URL은 Uniform Resource Locator의 약자로 쉽게 말해 웹에서 사용되는 주소를 의미하는데요.\n현실 세계에서도 모든 건물의 세대에 유일한 주소가 등록되어 있어서 우체부나 택배 기사가 배달을 할 수 있는 것처럼,\n인터넷에도 모든 자원(resource)에 유일한 주소가 부여되어 있어야지 브라우저가 웹사이트를 방문하고 이미지나 오디오, 비디오를 불러올 수 있습니다.</p>\n<p>현실 세계에도 국가마다 다른 주소 시스템이 있는 것처럼 URL에도 미리 약속된 규약이 있고 공식적으로 <a href=\"https://url.spec.whatwg.org/\">문서화</a>가 되어 있는데요.\n웹 개발자로서 URL을 다룰 때 관련 웹 표준에 대해서 잘 이해하고 있으면 큰 도움이 됩니다.</p>\n<h2 id=\"url의-구성-요소\" style=\"position:relative;\"><a href=\"#url%EC%9D%98-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C\" aria-label=\"url의 구성 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL의 구성 요소</h2>\n<p>자바스크립트의 URL API에 대해서 본격적으로 배우기 전에 먼저 URL이 어떻게 구성되어 있는지 대해서 짚고 넘어가는 게 좋을 것 같아요.</p>\n<p>그럼 아래와 같은 전형적인 URL을 가지고 함께 생각해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">https://example.org:8080/foo/bar?q<span class=\"token operator\">=</span>baz<span class=\"token comment\">#bang</span></code></pre></div>\n<p>맨 앞 부분인 <code>http:</code>는 스키마(scheme) 또는 프로토콜(protocol)을 나타내는데요.\n즉, 브라우저가 웹 서버와 접속할 때 사용해야 할 통신 프로토콜을 의미합니다.\n다양한 프로토콜이 있지만 웹에서는 보통 웹사이트에 접근할 때는 <code>http:</code> 또는 좀 더 안전한 <code>https:</code>가 많이 사용됩니다.</p>\n<p>다음으로 <code>example.org</code> 부분은 호스트 네임(hostname)이라고 하는데 이와 같이 사람이 읽기 쉬운 도메인 네임(domain name)이 될 수도 있고, <code>127.0.0.1</code>처럼 컴퓨터가 바로 이해할 수 있는 형태인 IP 주소가 될 수도 있습니다.</p>\n<p>호스트 네임 뒤에 <code>:</code> 기호가 나오고 다음에 나오는 숫자는 포트(port)를 의미하는데요.\n현실 세계에 비유하지만 호스트 네임이 아파트 한 동이고 포트를 각 호라고 볼 수 있을 것 같아요.\n하나의 서버에는 여러 개의 출입구가 있고 각 출입구에 이렇게 번호가 붙어있다고 상상할 수 있을 것 같습니다.</p>\n<p>그런데 기본 포트로 접근하는 경우에는 URL에서 포트 부분을 생략할 수 있는데요.\n예를 들어, <code>http:</code> 프로토콜을 사용할 때는 80 포트, <code>https:</code> 프로토콜을 사용할 때는 443 포트가 기본 포트입니다.\n따라서 만약에 URL 주소로 <code>https://example.org/</code>을 사용하다면 <code>https://example.org:443/</code>을 사용하는 것과 동일한 효과가 납니다.</p>\n<p>지금까지 살펴본 프로토콜, 호스트 네임, 포트를 묶어서 출처(origin)이라고도 하는데요.\n브라우저에서 보안 상의 이유로 다른 출처로의 HTTP 요청을 제한하는 CORS(Cross-Origin Resource Sharing)의 토대가 되는 개념이니 참고 바랍니다.</p>\n<p>그 다음에 나오는 <code>/foo/bar</code>는 경로(pathname)라고 하며 서버에서 해당 리소스가 어디에 위치하는지를 나타냅니다.\n과거에는 실제로 서버의 하드 드라이브 내에서 물리적인 파일의 경로를 사용하고, 그래서 경로 맨 뒤에 파일 확장자까지 붙는 경우가 많았는데요.\n요즘에는 웹 서버의 자체적인 라우팅(routing)을 통해서 논리적인 위치를 사용하는 경우가 더 많은 것 같습니다.</p>\n<p><code>?q=baz</code> 부분은 보통 쿼리 스트링(query string)라고 하는데 검색 매개변수(search parameter)라고도 부르기도 합니다.\n웹 서버에서는 URL의 쿼리 스트링을 분석하여 요청한 리소스를 응답하기 전에 다양한 추가 작업을 수행할 수 있는데요.\n비단 검색 뿐만 아니라 필터링(filtering), 페이지네이션(pagination), 정렬(sorting) 등 다양한 용도로 사용됩니다.\n<code>?key1=value1&#x26;key2=value2&#x26;...</code> 형태로 여러 개의 키와 값의 쌍을 매개변수로 명시할 수 있으며, <code>?key=value1&#x26;key=value2</code>와 같이 하나의 키에 여러 개의 값을 사용할 수도 있습니다.</p>\n<p>URL의 제일 마지막 부분인 <code>#bang</code>은 앵커(anchor), 해시(hash), 조각(fragment) 등 다소 다양한 이름으로 불리는데요.\n리소스 내에서 특정 부분을 나타내는데 사용하며 긴 컨텐츠의 목차를 구현할 때 유용하게 사용됩니다.\n예를 들어, 목차 내의 해시가 붙어 있는 링크를 클릭하면 브라우저가 웹 페이지의 특정 섹션으로 자동으로 스크롤되게 할 수 있습니다.\n단, 해시는 클라이언트에서만 의미가 있는 부분이기 때문에 웹 서버로는 전송되지 않는다는 점에 주의하시기 바랍니다.</p>\n<h2 id=\"url-api-소개\" style=\"position:relative;\"><a href=\"#url-api-%EC%86%8C%EA%B0%9C\" aria-label=\"url api 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL API 소개</h2>\n<p>예전에는 자바스크립트에서 URL을 일반 문자열로 다루는 경우가 많았는데요.\n위에서 살펴본 것처럼 URL 문자열은 엄격한 규격을 따르기 때문에 일반 문자열을 다루듯이 다루면 버그가 생기기 쉽죠.\n따라서 URL에서 특정 요소를 추출하거나 조작하는데 적지 않은 노력과 주의가 필요했었습니다.</p>\n<p>이러한 문제점을 보완하기 위해서 현재 대부분의 브라우저와 Node.js와 같은 자바스크립트 런타임에서는 URL API를 지원하고 있는데요.\n이 웹 표준 API를 이용하면 웹 주소를 보다 쉽고 안전하게 자바스크립트로 다룰 수 있게 됩니다.</p>\n<p>URL API는 크게 웹주소를 다루기 위한 <code>URL</code>과 쿼리 스트링을 다루기 위한 <code>URLSearchParams</code>로 나누어지는데요.\n본 포스팅에서는 <code>URL</code>에 대해서만 살펴보고 <code>URLSearchParams</code>는 별도의 포스팅에서 다루도록 하겠습니다.</p>\n<h2 id=\"url-객체의-생성\" style=\"position:relative;\"><a href=\"#url-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-label=\"url 객체의 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL 객체의 생성</h2>\n<p>자바스크립트에서 URL API를 사용하려면 우선 URL 객체를 생성해야 하는데요.\n<code>URL()</code> 생성자에 문자열 형태의 웹 주소를 전달하면 URL 객체가 만들어 집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.org:8080/foo/bar?q=baz#bang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>URL()</code> 생성자는 인자로 넘어온 URL 문자열의 유효성을 검사하여 유효하지 않은 경우에는 에러를 발생시킵니다.\n그러므로 우리는 더욱 안전하게 자바스크립트로 URL을 다룰 수 있게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Failed to construct 'URL': Invalid URL</span></code></pre></div>\n<h2 id=\"url-객체의-속성\" style=\"position:relative;\"><a href=\"#url-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%86%8D%EC%84%B1\" aria-label=\"url 객체의 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL 객체의 속성</h2>\n<p>URL 객체에는 URL을 구성하고 있는 모든 요소들이 속성으로 저장되어 있어서 우리는 각 요소에 쉽게 접근할 수 있습니다.</p>\n<p>예를 들어, <code>https://example.org:8080/foo/bar?q=baz#bang</code>라는 URL 문자열을 가지고 URL 속성을 만들고 여러 속성에 접근해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.org:8080/foo/bar?q=baz#bang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https:'</span>\nurl<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'example.org'</span>\nurl<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">;</span> <span class=\"token comment\">// '8080'</span>\nurl<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span> <span class=\"token comment\">// '/foo/bar'</span>\nurl<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">;</span> <span class=\"token comment\">// '?q=baz'</span>\nurl<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span> <span class=\"token comment\">// '#bang'</span>\nurl<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">;</span> <span class=\"token comment\">// example.org:8080</span>\nurl<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080'</span>\nurl<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/foo/bar?q=baz#bang'</span></code></pre></div>\n<p>URL 객체의 속성은 읽을 수 있을 뿐만 아니라 쓸 수도 있는데요.\n특정 속성을 갱신함으로써 아주 쉽게 새로운 URL을 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">url<span class=\"token punctuation\">.</span>pathname <span class=\"token operator\">=</span> <span class=\"token string\">\"/new\"</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/new?q=baz#bang'</span>\nurl<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> <span class=\"token string\">\"#bangbangbang\"</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/new?q=baz#bangbangbang'</span></code></pre></div>\n<p>예외적으로 <code>origin</code> 속성은 읽기 전용이라서 주의가 필요한데요.\n다른 속성처럼 새로운 값을 할당하더라도 URL 객체에 반영이 되지 않기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">url<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> <span class=\"token string\">\"https://test.com:8443\"</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080'</span>\nurl<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/new?q=baz#bangbangbang'</span></code></pre></div>\n<p><code>origin</code> 속성을 편의 상 <code>protocol</code>, <code>hostname</code>, <code>port</code> 속성을 엮어 놓은 지름길이라고 생각하시면 기억이 쉬우실 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token punctuation\">.</span>protocol<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">//</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token punctuation\">.</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token punctuation\">.</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080'</span></code></pre></div>\n<p>참고로 URL 객체에는 <code>toString()</code>이라는 메서드도 있는데요.\n<code>href</code> 속성 대신에 쓸 수 있으며 차이점이라고 하면 <code>toString()</code>으로는 값을 읽을 수만 읽으며 쓸 수는 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">url<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/foo/bar?q=baz#bang'</span></code></pre></div>\n<h2 id=\"base-url-활용\" style=\"position:relative;\"><a href=\"#base-url-%ED%99%9C%EC%9A%A9\" aria-label=\"base url 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Base URL 활용</h2>\n<p><code>URL()</code> 생성자에 두 번째 인자로 기본(base) URL을 넘기면 첫 번째 인자로 절대 또는 상대 경로를 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/xx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://example.org:8080/foo/bar?q=baz#bang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl1<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/xx'</span>\n<span class=\"token keyword\">const</span> url2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://example.org:8080/foo/bar?q=baz#bang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl2<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/foo/xx'</span>\n<span class=\"token keyword\">const</span> url3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../xx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://example.org:8080/foo/bar?q=baz#bang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl3<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/xx'</span></code></pre></div>\n<p>이 기능은 특히 현재 브라우저에서 열린 URL을 기준으로 다른 URL을 만들 때 유용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/new\"</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnweUrl<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;현재 URL>/new</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 URL에 대한 핵심 개념을 짚어보고 자바스크립트에서 URL 객체를 통해 안전하게 웹 주소를 다를 수 있는 방법에 대해서 살펴보았습니다.</p>\n<p>다음 포스팅에서는 URL API의 다른 부분인 <code>URLSearchParams</code>에 대해서 다루도록 하겠습니다.</p>","timeToRead":6,"fields":{"slug":"/js-url-api/","tags":["JavaScript","Node.js","API","URL"]},"frontmatter":{"title":"자바스크립트의 URL API로 웹 주소 다루기","date":"Aug 5, 2023"}},"next":{"fields":{"slug":"/js-substr-substring/"},"frontmatter":{"title":"자바스크립트 문자열 자르기: substr()과 substring() 함수"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}