{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/github-actions-steps/","result":{"pageContext":{"previous":{"fields":{"slug":"/eslint-config/"},"frontmatter":{"title":"ESLint 상세 설정 가이드"}},"node":{"html":"<p><a href=\"/github-actions-basics/\">지난 포스팅</a>에서는 GitHub Actions의 4가지 핵심적인 개념인 워크플로우(workflow), 작업(job), 단계(step), 액션(action)에 대해서 가볍게 살펴보았는데요.</p>\n<p>이번 포스팅에서는 작업(Job)의 근간이 되는 단계(step)에 대해서 좀 더 깊이 다뤄보도록 하겠습니다.</p>\n<h2 id=\"github-actions에서-단계step이란\" style=\"position:relative;\"><a href=\"#github-actions%EC%97%90%EC%84%9C-%EB%8B%A8%EA%B3%84step%EC%9D%B4%EB%9E%80\" aria-label=\"github actions에서 단계step이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Actions에서 단계(step)이란?</h2>\n<p>GitHub Actions에서 하나의 작업(job)은 순차적으로 실행되는 여러 단계(step)로 모델링이 되는데요.\n이 단계는 단순한 커맨드(command)나 스크립트(script)가 될 수도 있고 액션(action)이라고 하는 좀 더 복잡한 명령 단위일 수도 있습니다.</p>\n<p>워크플로우 파일에서는 <code>jobs.&#x3C;job_id>.steps</code> 아래에 단계를 <code>-</code> 기호를 사용하여 리스트 형식으로 나열합니다.\n커맨드나 스크립트를 실행할 때는 <code>run</code> 속성을 사용하며, 액션을 사용할 때는 <code>uses</code> 속성을 사용합니다.</p>\n<p>예를 들어 자바스크립트 프로젝트에서 테스트를 돌리려면 CI 서버로 코드를 내려 받고, npm 패키지를 설치한 후, 테스트를 실행해야할텐데요.\n이 3단계의 작업은 아래와 같이 <code>steps</code> 속성을 통해서 명시할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/steps.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Steps\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm test</code></pre></div>\n<p>서로 격리된 환경, 즉 독립된 CI 서버에서 돌아가는 작업(job)과 달리, 단계(step)는 동일한 CI 서버에서 순차적으로 수행됩니다.\n따라서 이전 단계의 처리 결과를 다음 단계에서 활용할 수 있는 특징을 가지고 있습니다.</p>\n<h2 id=\"단계-간-출력-값-전달\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EA%B3%84-%EA%B0%84-%EC%B6%9C%EB%A0%A5-%EA%B0%92-%EC%A0%84%EB%8B%AC\" aria-label=\"단계 간 출력 값 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단계 간 출력 값 전달</h2>\n<p>단계는 순차적으로 수행되기 때문에 이전 단계에서 발생한 결과물을 다음 단계로 전달하는 것이 가능합니다.\n즉, 어떤 단계에서 특정 값을 출력으로 내보내면 그 단계 이후로 실행되는 모든 단계에서 해당 출력 값을 불러올 수 있습니다.</p>\n<p>출력 변수의 값을 쓰려면 GitHub Actions의 명령어(command)인 <code>::set-output name={name}::{value}</code> 문법을 사용해야하고,\n출력 변수의 값을 읽으려면 GitHub Actions의 명령어(command)인 GitHub Actions의 문맥(context)인 <code>steps.&#x3C;step_id>.outputs.&#x3C;output_name></code> 문법을 사용해야합니다.</p>\n<p>예를 들어, 다음과 같이 2 단계(step)로 이뤄진 작업(job)을 생각해볼까요?\n첫 번째 단계에서는 <code>foo</code>라는 이름으로 <code>bar</code>라는 값을 출력(output)을 쓰고 있고 두 번째 단계에서는 <code>foo</code>에 저장된 값을 읽어와 콘솔에 출력하고 있습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/steps.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Steps\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">foobar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> set<span class=\"token punctuation\">-</span>foo\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>set<span class=\"token punctuation\">-</span>output name=foo<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>bar\"\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.set<span class=\"token punctuation\">-</span>foo.outputs.foo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-code-title\">foobar</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"::set-output name=foo::bar\"</span>\n☑️ Run <span class=\"token builtin class-name\">echo</span> bar\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> bar</span><span class=\"gatsby-highlight-code-line\">bar</span>☑️ Complete Job</code></pre></div>\n<p>다른 예로, 첫 번째 단계와 두 번째 단계에서 무작위 숫자를 생성한 후, 그 이후 단계에서 두 숫자를 가지고 사칙 연산을 해볼까요?</p>\n<div class=\"gatsby-code-title\">.github/workflows/steps.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Steps\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">calculate</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> gen<span class=\"token punctuation\">-</span>num1\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>set<span class=\"token punctuation\">-</span>output name=num<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>$(($RANDOM % 10 + 1))\"\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> gen<span class=\"token punctuation\">-</span>num2\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>set<span class=\"token punctuation\">-</span>output name=num<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>$(($RANDOM % 10 + 1))\"\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $(($<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.gen<span class=\"token punctuation\">-</span>num1.outputs.num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> + $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.gen<span class=\"token punctuation\">-</span>num2.outputs.num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>))\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $(($<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.gen<span class=\"token punctuation\">-</span>num1.outputs.num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">-</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.gen<span class=\"token punctuation\">-</span>num2.outputs.num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>))\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $(($<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.gen<span class=\"token punctuation\">-</span>num1.outputs.num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> * $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.gen<span class=\"token punctuation\">-</span>num2.outputs.num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>))\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $(($<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.gen<span class=\"token punctuation\">-</span>num1.outputs.num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> / $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.gen<span class=\"token punctuation\">-</span>num2.outputs.num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>))</code></pre></div>\n<div class=\"gatsby-code-title\">foobar</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"::set-output name=num::<span class=\"token variable\"><span class=\"token variable\">$((</span>$RANDOM <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\"</span>\n☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"::set-output name=num::<span class=\"token variable\"><span class=\"token variable\">$((</span>$RANDOM <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\"</span>\n☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token variable\">))</span></span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token variable\">))</span></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token number\">14</span></span>☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token number\">9</span><span class=\"token variable\">))</span></span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token number\">9</span><span class=\"token variable\">))</span></span></span><span class=\"gatsby-highlight-code-line\">-4</span>☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">9</span><span class=\"token variable\">))</span></span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">9</span><span class=\"token variable\">))</span></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token number\">45</span></span>☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token variable\">))</span></span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token variable\">))</span></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token number\">0</span></span>☑️ Complete Job</code></pre></div>\n<h2 id=\"단계의-선택적-수행\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EA%B3%84%EC%9D%98-%EC%84%A0%ED%83%9D%EC%A0%81-%EC%88%98%ED%96%89\" aria-label=\"단계의 선택적 수행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단계의 선택적 수행</h2>\n<p>작업(job)을 <code>if</code> 속성을 통해 실행 여부를 통제하는 것 것처럼 단계(step) 수준에서도 <code>if</code> 속성을 사용할 수 있습니다.</p>\n<blockquote>\n<p>GitHub Actions의 작업(job)에 대한 자세한 설명은 <a href=\"/github-actions-jobs\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<p>예를 들어, 첫 번째 단계에서 <code>0</code> 또는 <code>1</code>을 무작위로 생성하고, 그 결과가 <code>0</code>이면 두 번째 단계, <code>1</code>이면 세 번째 단계가 수행하는 작업을 셋업해보겠습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/steps.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Steps\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">zeroone</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> gen<span class=\"token punctuation\">-</span>num\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>set<span class=\"token punctuation\">-</span>output name=num<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>$(($RANDOM % 2))\"\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> steps.gen<span class=\"token punctuation\">-</span>num.outputs.num == 0\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo zero\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> steps.gen<span class=\"token punctuation\">-</span>num.outputs.num == 1\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo one</code></pre></div>\n<p>만약에 첫 번째 단계에서 생성한 숫자가 <code>1</code>이라면 아래와 같이 두 번째 단계는 생략되어 수행이 안 되고, 세 번째 단계만 수행되는 것을 볼 수 있을 것입니다.</p>\n<div class=\"gatsby-code-title\">zeroone</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"::set-output name=num::<span class=\"token variable\"><span class=\"token variable\">$((</span>$RANDOM <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span>\"</span>\n<span class=\"gatsby-highlight-code-line\">🚫 Run <span class=\"token builtin class-name\">echo</span> zero</span><span class=\"gatsby-highlight-code-line\">☑️ Run <span class=\"token builtin class-name\">echo</span> one</span>☑️ Complete Job</code></pre></div>\n<h2 id=\"불안정한-단계의-실패-무시\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EC%95%88%EC%A0%95%ED%95%9C-%EB%8B%A8%EA%B3%84%EC%9D%98-%EC%8B%A4%ED%8C%A8-%EB%AC%B4%EC%8B%9C\" aria-label=\"불안정한 단계의 실패 무시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불안정한 단계의 실패 무시</h2>\n<p>GitHub Actions에서는 기본적으로 작업(job) 실행 도중에 어떤 단계(step)가 실패하면 그 이후의 단계는 실행되지 않고 작업이 중단되는데요.\n대부분의 경우 이러한 GitHub Actions의 기본 처리 방식이 불필요한 단계를 생략할 수 있어서 합리적으로 여겨집니다.</p>\n<p>하지만 실제 프로젝트에서는 성패가 오락가락하는 불안정한 단계가 있을 수 있죠?\n대표적인 예로, 테스트 케이스 중에서 성패 여부를 종잡을 수 없는 녀석이 있을 수 있는데요.\n이런 상황에서 테스트 단계가 실패할 때 마다 해당 작업 전체가 중단된다면 팀 전체가 곤란해질 것입니다.</p>\n<p>이런 경우를 대비해서 단계(step)는 <code>continue-on-error</code> 속성을 지원하는데요.\n이 속성을 <code>true</code>로 설정해줄 경우, 해당 단계가 실패하더라도 작업은 중단되지 않고 남은 단계를 계속해서 실행해 줍니다.</p>\n<p>예를 들어, 다음 작업에서 첫 번째 단계는 항상 실패하게 되지만 <code>continue-on-error</code> 속성이 <code>true</code>로 설정되어 있기 때문에 두 번째 단계에서 <code>I don't care!</code>가 콘솔에 출력됩니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/steps.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Steps\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ignore</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> flaky\n        <span class=\"token key atrule\">continue-on-error</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> exit 1\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"I don't care<span class=\"token tag\">!</span>\"</code></pre></div>\n<div class=\"gatsby-code-title\">ignore</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I don't care!\"</span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I don't care!\"</span></span><span class=\"gatsby-highlight-code-line\">I don't care<span class=\"token operator\">!</span></span>☑️ Complete Job</code></pre></div>\n<h2 id=\"이전-단계의-성패-여부와-상관없이-다음-단계-수행\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84-%EB%8B%A8%EA%B3%84%EC%9D%98-%EC%84%B1%ED%8C%A8-%EC%97%AC%EB%B6%80%EC%99%80-%EC%83%81%EA%B4%80%EC%97%86%EC%9D%B4-%EB%8B%A4%EC%9D%8C-%EB%8B%A8%EA%B3%84-%EC%88%98%ED%96%89\" aria-label=\"이전 단계의 성패 여부와 상관없이 다음 단계 수행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전 단계의 성패 여부와 상관없이 다음 단계 수행</h2>\n<p>만약에 이전 단계의 성패 여부와 상관없이 무조건 수행되야 하는 단계가 있으면 어떻게 해야할까요?\n흔한 사례로, 작업의 실행 결과를 이메일이나 메세징 애플리케이션으로 통보해야할 때를 들 수 있겠네요.\n작업의 실행 결과가 성공이든 실패든 통보를 받고 싶을테니까요.</p>\n<p>이럴 경우에는 무조건 수행되야하는 단계의 <code>if</code> 속성에 <code>always()</code>라는 GitHub Actions의 표현식(expression)을 설정해주면 되는데요.</p>\n<p>예를 들어, 첫 번째 단계를 랜덤하게 성공하거나 실패하게 한 다음에, 두 번째 단계에서 항상 첫 번째 단계의 결과가 출력되도록 작업 설정을 해보겠습니다.\n특정 단계의 출력 결과를 확인하기 위해서 <code>steps.&#x3C;step_id>.outcome</code>이라는 GitHub Actions의 문맥(context) 사용하고 있습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/steps.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Steps\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">notify</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> random\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> if <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> $(($RANDOM % 2)) == 0 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>; then exit 0; else exit 1; fi\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> always() <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.random.outcome <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약에 첫 번째 단계가 성공했다면, 두 번째 단계에서 <code>success</code>가 콘솔에 출력될 것입니다.</p>\n<div class=\"gatsby-code-title\">notify</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$RANDOM <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n☑️ Run <span class=\"token builtin class-name\">echo</span> success\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> success</span><span class=\"gatsby-highlight-code-line\">success</span>☑️ Complete Job</code></pre></div>\n<p>하지만 첫 번째 단계가 실패했다면, 두 번째 단계에서 <code>failure</code>가 콘솔에 출력될 것입니다.</p>\n<div class=\"gatsby-code-title\">notify</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n❌  Run <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$RANDOM <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\n▶ Run <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>$RANDOM <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token variable\">))</span></span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">fi</span>\nError: Process completed with <span class=\"token builtin class-name\">exit</span> code <span class=\"token number\">1</span>.\n☑️ Run <span class=\"token builtin class-name\">echo</span> failure\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> failure</span><span class=\"gatsby-highlight-code-line\">failure</span>☑️ Complete Job</code></pre></div>\n<p>이를 통해 우리는 첫 번째 단계의 결과가 어찌됐든 무조건 두 번째 단계가 수행되는 것을 알 수 있습니다.</p>\n<h2 id=\"이전-단계가-실패했을-때만-다음-단계-수행\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84-%EB%8B%A8%EA%B3%84%EA%B0%80-%EC%8B%A4%ED%8C%A8%ED%96%88%EC%9D%84-%EB%95%8C%EB%A7%8C-%EB%8B%A4%EC%9D%8C-%EB%8B%A8%EA%B3%84-%EC%88%98%ED%96%89\" aria-label=\"이전 단계가 실패했을 때만 다음 단계 수행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전 단계가 실패했을 때만 다음 단계 수행</h2>\n<p>간혹, 어떤 단계가 실패했을 때만 예비로 수행될 백업(backup) 단계를 설정해야 될 때가 있는데요.\n이 경우에는 해당 백업 단계의 <code>if</code> 속성에 <code>failure()</code>라는 GitHub Actions의 표현식(expression)을 설정해주면 됩니다.</p>\n<p>예를 들어, 첫 번째 단계를 무조건 실패하게 하고, 두 번째 단계가 대신 수행되도록 작업 설정해보겠습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/steps.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Steps\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">backup</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> original\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> exit 1\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backup\n        <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> failure() <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo backup</code></pre></div>\n<div class=\"gatsby-code-title\">backup</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n❌ original\n▶ Run <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\nError: Process completed with <span class=\"token builtin class-name\">exit</span> code <span class=\"token number\">1</span>.\n☑️ backup\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> backup</span><span class=\"gatsby-highlight-code-line\">backup</span>☑️ Complete Job</code></pre></div>\n<p>이 번에는 첫 번째 단계가 무조건 통과하게 워크플로우를 수정해볼까요?</p>\n<div class=\"gatsby-code-title\">.github/workflows/steps.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Steps\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">backup</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> original\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> exit 0\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backup\n        <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> failure() <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo backup</code></pre></div>\n<p>이 번에는 두 번째 단계가 수행되지 않은 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-code-title\">backup</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ original\n▶ Run <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n<span class=\"gatsby-highlight-code-line\">🚫 backup</span>☑️ Complete Job</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 GitHub Actions에서 단계(step)의 수행을 제어하는 다양한 방법에 대해서 살펴보았습니다.\n의도치 않게 GitHub Actions의 명령어(command), 문맥(context), 표현식(expression)에 대해서도 살짝 다루게 되었는데요.\n이 부분에 대해서는 추후 별도의 포스팅을 통해서 자세히 다루면 좋을 것 같습니다.</p>","timeToRead":7,"fields":{"slug":"/github-actions-steps/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions 단계(step) 고급 설정","date":"Jun 5, 2022"}},"next":{"fields":{"slug":"/git-config/"},"frontmatter":{"title":"git config 명령어 사용법"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}