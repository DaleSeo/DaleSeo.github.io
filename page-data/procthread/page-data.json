{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/procthread/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/threads/"},"frontmatter":{"title":"자바 쓰레드"}},"node":{"html":"<blockquote>\n<p>본 포스팅는 오라클 자바 튜토리얼의 <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html\">Processes and Threads</a>를 번역하였습니다.</p>\n</blockquote>\n<p>동시 프로그래밍(Concurrent Programming)에는 프로세스와 쓰레드, 이 두가지 기본 실행단위가 있습니다.\n자바 프로그래밍 언어에서는 동시 프로그래밍은 주로 쓰레드와 관련이 있지만 프로세스 또한 중요합니다.</p>\n<p>컴퓨터는 보통 여러 개의 활성화된 프로세스와 쓰레드를 가지고 있습니다.\n이것은 심지어 동시에 하나의 쓰레드 밖에 실제로 처리할 수 없는 싱글 코어를 가진 시스템에서도 마찬가지입니다.\n싱글 코어의 처리 시간은 운영체제의 시분활(time slicing) 기능을 통해 여러 프로세서와 쓰레드 간에 공유되어 집니다.</p>\n<p>멀티 코어나 프로세스가 탑재된 컴퓨터들이 점점 더 일반화되고 있습니다.\n이것은 시스템의 프로세스와 쓰레드의 동시 처리 능력을 현저하게 향상시킵니다.\n하지만 동시성(concurrency)은 멀티 프로세서나 코어 없이 단순한 시스템 상에서도 가능한 일입니다.</p>\n<h2 id=\"프로세스-processes\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-processes\" aria-label=\"프로세스 processes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 (Processes)</h2>\n<p>프로세스는 독립적인 실행 환경을 가집니다.\n프로세스는 보통 완전하고 자체적인 기본 실행 자원 세트를 가지고 있습니다.\n좀 더 자세히 얘기하면, 각 프로세스는 전용 메모리 공간을 할당받습니다.</p>\n<p>프로세스는 종종 프로그램과 애플리케이션에 대해 동기적으로 보입니다.\n그러나 사용자가 하나의 애플리케이션으로 보는 것이 사실 한 세트의 협력하는 프로세스들일 수 도 있습니다.\n프로세스 간의 통신을 촉진하기 위해서, 대부분 운영체제들은 파이프나 소켓과 같은 IPC(Inter Process Communication)를 지원합니다.\nIPC는 단지 같은 시스템 상에서 프로세스 간에 통신을 위해서 사용될 뿐만 아니라 다른 시스템 간의 프로세스들이 통신하기 위해서도 사용됩니다.</p>\n<p>대부분 자바 가상 마신의 구현은 단일 프로세스로서 돌아갑니다.\n자바 애플리케이션은 <code>ProcessBuilder</code> 객체를 이용해서 추가적인 프로세스를 생성할 수 있습니다.\n멀티 프로세스 애플리케이션은 본 수업의 범위에서 벗어납니다.</p>\n<h2 id=\"쓰레드-threads\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C-threads\" aria-label=\"쓰레드 threads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드 (Threads)</h2>\n<p>쓰레드는 때때로 경량 프로세스라고도 불립니다. 프로세스와 쓰레드 모두 실행 환경을 제공하지만 새로운 쓰레드를 생성하는 데는 새로운 프로세스 생성 대비 더 적은 자원이 필요합니다.</p>\n<p>쓰레드는 프로세스 안에서 존재하며, 모든 프로세스는 적어도 하나의 쓰레드를 가집니다.\n쓰레드는 메모리와 열린 파일(open files)을 포함한 프로세스의 자원을 공유합니다.\n이것은 효율적인 통신에 도움이 되지만 잠재적인 문제의 소지를 낳기도 합니다.</p>\n<p>멀티 쓰레드 실행은 자바 플랫폼의 필수적인 기능입니다.\n모든 애플리케이션은 하나 이상의 쓰레드를 가지며 메모리 관리나 신호 처리 등을 하는 시스템 쓰레드들까지 포함시킨다면 그 보다 많은 쓰레드를 가지게 됩니다.\n그러나 프로그래머의 관점에서 보았을 때는 메인 쓰레드라고 불리는 단지 하나의 쓰레드에서 시작합니다.\n이 쓰레드는 추가적인 쓰레드들을 생성할 능력이 있으며 이는 다음 섹션에서 보여드리겠습니다.</p>","timeToRead":1,"fields":{"slug":"/procthread/","tags":["Java","Concurrency","Process","Thread"]},"frontmatter":{"title":"프로세스와 쓰레드","date":"Sep 11, 2016"}},"next":{"fields":{"slug":"/java-thread-runnable/"},"frontmatter":{"title":"자바: Thread 클래스와 Runnable 인터페이스"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}