{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-node-path/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-node-fs/"},"frontmatter":{"title":"Node.js의 fs 모듈로 파일 입출력 처리하기"}},"node":{"html":"<p>이번 포스팅에서는 Node.js에서 파일이나 디렉토리의 경로를 다룰 때 사용하는 <code>path</code> 모듈에 대해서 알아보겠습니다.</p>\n<h2 id=\"운영체제\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C\" aria-label=\"운영체제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영체제</h2>\n<p>파일이나 디렉토리의 경로를 다루는 게 뭐가 어렵다고 굳이 별도의 모듈이 필요할까요?</p>\n<p>사실 경로 처리는 많은 분들이 간과하지만 알고 보면 은근히 오류가 발생할 소지가 많은 부분인데요.</p>\n<p>일단 유닉스 계열 운영체제와 윈도우 운영체제는 서로 다른 문자로 디렉토리 구조를 표현합니다.\n유닉스 계열 운영체제에서는 <code>/</code> 문자를 사용하는 반면에 윈도우 운영체제에서는 <code>\\</code> 문자를 사용하죠.</p>\n<ul>\n<li>유닉스 계열</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">pwd</span>\n/Users/daleseo</code></pre></div>\n<ul>\n<li>윈도우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span>\nC:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>daleseo</code></pre></div>\n<p>또한 이 두 진영의 운영체제는 <code>PATH</code> 환경변수를 표현할 때도 서로 다룬 문자를 사용하여 여러 경로를 나열합니다.\n유닉스 계열 운영체제에서는 <code>:</code> 문자를 사용하는 반면에, 윈도우 운영체제에서는 <code>;</code> 문자를 사용합니다.</p>\n<ul>\n<li>유닉스 계열</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span>\n/Users/daleseo/.nvm/versions/node/v17.0.1/bin:/Users/daleseo/.pyenv/shims:/Users/daleseo/.pyenv/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></pre></div>\n<ul>\n<li>윈도우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> %<span class=\"token environment constant\">PATH</span>%\nC:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">\\</span>system32<span class=\"token punctuation\">;</span>C:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">;</span>C:<span class=\"token punctuation\">\\</span>Program Files<span class=\"token punctuation\">\\</span>node<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>C:<span class=\"token punctuation\">\\</span>Program Files<span class=\"token punctuation\">\\</span>python<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>C:<span class=\"token punctuation\">\\</span>Program Files<span class=\"token punctuation\">\\</span>java</code></pre></div>\n<p><code>/Users/daleseo</code>는 윈도우에서는 하나의 디렉토리로 인식되며, <code>C:\\Users\\daleseo</code>는 유닉스에서는 하나의 디렉토리로 인식됩니다.\n따라서 파일이나 디렉토리의 경로를 단순히 문자열을 이용하여 접근하면 프로그램이 특정 운영체제에서만 돌아갈 위험이 생깁니다.</p>\n<p>Node.js에서는 <code>path</code> 모듈을 제공하여 자바스크립트 개발자들이 이러한 위험없이 경로를 다룰 수 있도록 도와주는 것이지요.</p>\n<h2 id=\"불러오기\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" aria-label=\"불러오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불러오기</h2>\n<p><code>path</code> 모듈은 Node.js에 내장되어 있어 있기 때문에 별도의 라이브러리 설치없이 바로 불러와서 사용할 수 있습니다.</p>\n<p>CommonJS 모듈 시스템을 사용하는 프로젝트에서는 <code>require</code> 키워드로 불러오고, ES 모듈 시스템을 사용하는 프로젝트에서는 <code>import</code> 키워드를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CommonJS Modules</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES Modules</span>\n<span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"경로-구분자\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EA%B5%AC%EB%B6%84%EC%9E%90\" aria-label=\"경로 구분자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로 구분자</h2>\n<p><code>path</code> 모듈은 위에서 설명드린 운영체제 별로 상이할 수 있는 경로 관련 구분자를 <code>sep</code>와 <code>delimiter</code>라는 속성으로 제공하고 있습니다.</p>\n<p>예를 들어, MacOS를 사용하고 있는 제 컴퓨터에서는 다음과 같이 속성값이 확인됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sep</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">delimiter</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span>delimiter <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">sep</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">delimiter</span><span class=\"token operator\">:</span> <span class=\"token string\">':'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"경로-만들기\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"경로 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로 만들기</h2>\n<p>운영체제 별로 경로를 구분짓는 방법이 상이하기 때문에 코드가 실행되는 운영체제를 고려하여 경로를 만들어내는 것이 매우 중요합니다.</p>\n<p><code>join()</code> 함수는 여러 개의 문자열을 가변 인자(variadic arguments)로 받아서 하나의 완전한 경로로 조합해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Users\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"daleseo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Users/daleseo/test.txt'</span></code></pre></div>\n<p>MacOS에서는 위와 같이 <code>/</code> 문자를 사용하여 디렉토리를 구분해주고 있습니다.\n동일한 코드를 윈도우에서 실행했더라면 <code>'Users\\daleseo\\test.txt'</code>가 반환되었을 것입니다.</p>\n<p>경로를 만들어 내는 또 다른 방법으로 <code>resolve()</code> 함수를 사용할 수도 있는데요.\n<code>resolve()</code> 함수는 마치 터미널에서 <code>cd</code> 명령어를 연속해서 날리는 것처럼 작동을 하고 항상 절대 경로를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../daleseo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'/daleseo/test.txt'</span></code></pre></div>\n<p>예를 들어, 위와 같이 <code>resolve()</code> 함수를 사용하면, 터미널에서 아래와 같이 디렉토리를 이동 후에 도착하는 파일의 경로를 얻게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> Users\n$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/daleseo\n$ <span class=\"token function\">ls</span> test.txt</code></pre></div>\n<p>두번째 인자에서 <code>../</code>를 사용하여 상위 디렉토리로 이동했기 때문에 최종적인 경로는 <code>'/daleseo/test.txt'</code>이 되는 것입니다.</p>\n<p>이해를 돕기위해 이번에는 윈도우에서 살짝씩 다른 인자로 <code>resolve()</code> 함수를 호출해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ path.resolve<span class=\"token punctuation\">(</span><span class=\"token string\">'/a'</span>, <span class=\"token string\">'b'</span>, <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'C:\\a\\b\\c'</span>\n$ path.resolve<span class=\"token punctuation\">(</span><span class=\"token string\">'/a'</span>, <span class=\"token string\">'/b'</span>, <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'C:\\b\\c'</span>\n$ path.resolve<span class=\"token punctuation\">(</span><span class=\"token string\">'/a'</span>, <span class=\"token string\">'/b'</span>, <span class=\"token string\">'/c'</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'C:\\c'</span></code></pre></div>\n<p>여기서 눈 여겨 볼 부분은 개발자가 경로 구분자로 <code>/</code> 문자와 <code>\\</code> 문자 중 어떤 것을 사용하든 크게 상관이 없다는 것입니다.\n이것이 <code>path</code> 모듈을 사용해서 경로 처리를 할 때의 가장 큰 이점이되겠습니다.</p>\n<h2 id=\"디렉토리-얻기\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%96%BB%EA%B8%B0\" aria-label=\"디렉토리 얻기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디렉토리 얻기</h2>\n<p><code>dirname()</code> 함수를 사용하면 주어진 경로에서 파일 이름을 제외한 디렉토리 부분은 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/daleseo/test.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'/Users/daleseo'</span></code></pre></div>\n<h2 id=\"파일-이름-얻기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EB%A6%84-%EC%96%BB%EA%B8%B0\" aria-label=\"파일 이름 얻기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 이름 얻기</h2>\n<p><code>basename()</code> 함수를 사용하면 주어진 경로에서 파일 이름을 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/daleseo/test.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'test.txt'</span></code></pre></div>\n<p>두번째 인자로 <code>.</code>을 포함한 확장자를 넘기면 순수한 파일 이름만 얻게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/daleseo/test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'test'</span></code></pre></div>\n<h2 id=\"파일-확장자-얻기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%ED%99%95%EC%9E%A5%EC%9E%90-%EC%96%BB%EA%B8%B0\" aria-label=\"파일 확장자 얻기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 확장자 얻기</h2>\n<p><code>extname()</code> 함수를 사용하면 주어진 경로에서 파일의 <code>.</code>을 포함한 확장자를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/daleseo/test.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'.txt'</span></code></pre></div>\n<h2 id=\"절대-경로인지-알아내기\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EB%8C%80-%EA%B2%BD%EB%A1%9C%EC%9D%B8%EC%A7%80-%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0\" aria-label=\"절대 경로인지 알아내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절대 경로인지 알아내기</h2>\n<p>주어진 경로가 절대 경로인지 상대 경로인지 알아내려면 <code>isAbsolute()</code> 함수를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">isAbsolute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/daleseo/test.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">isAbsolute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./test.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">false</span></code></pre></div>\n<h2 id=\"경로-단순화-하기\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EB%8B%A8%EC%88%9C%ED%99%94-%ED%95%98%EA%B8%B0\" aria-label=\"경로 단순화 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로 단순화 하기</h2>\n<p><code>./</code>, <code>../</code>, <code>/</code> 문자를 남용한 경로는 파일 시스템에서 정확히 어느 위치를 나타내는지 햇갈리는 경우가 있습니다.\n이럴 때는 <code>normalize()</code> 함수를 사용하여 불필요한 부분을 정리하여 경로를 단순화 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/../daleseo//test.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'/daleseo/test.txt'</span></code></pre></div>\n<h2 id=\"상대-경로-구하기\" style=\"position:relative;\"><a href=\"#%EC%83%81%EB%8C%80-%EA%B2%BD%EB%A1%9C-%EA%B5%AC%ED%95%98%EA%B8%B0\" aria-label=\"상대 경로 구하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상대 경로 구하기</h2>\n<p>간혹 어떤 경로를 기준으로 다른 경로의 상대 경로를 알고 싶은 경우가 있습니다.\n이럴 때는 <code>relative()</code> 함수에 기준의 되는 경로를 첫번째 인자로 대상이 되는 경로를 두번째 인자로 넘기면 상대 경로를 구해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">relative</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/Users/daleseo/test.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'daleseo/test.txt'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">relative</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/daleseo/test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/Applications\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'../../../Applications'</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 많이 쓰이는 기능 위주로 Node.js의 <code>path</code> 모듈을 어떻게 활용할 수 있는지 살펴보았습니다.</p>\n<p>자바스크립트 코드를 작성할 때 간과하기 쉬운 부분은 바로 우리가 작성한 코드가 어느 운영체제에서 실행될지 알 수 없다는 것인데요.\n<code>path</code> 모듈을 잘 활용하셔서 파일이나 디렉토리의 경로를 안전하게 처리하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/js-node-path/","tags":["JavaScript","Node.js","path"]},"frontmatter":{"title":"Node.js의 path 모듈로 경로 다루기","date":"Nov 5, 2021"}},"next":{"fields":{"slug":"/gitignore/"},"frontmatter":{"title":".gitignore 파일 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}