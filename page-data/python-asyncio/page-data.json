{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-asyncio/","result":{"pageContext":{"previous":{"fields":{"slug":"/storybook/"},"frontmatter":{"title":"Storybook 소개 / 기본 사용법"}},"node":{"html":"<p>파이썬에서도 자바스크립트처럼 비동기로 작동하는 코드를 짤 수 있을까요? 네, <code>asyncio</code>를 사용하면 가능합니다!</p>\n<h2 id=\"동시-프로그래밍의-패러다임의-변화\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%8B%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84%EC%9D%98-%EB%B3%80%ED%99%94\" aria-label=\"동시 프로그래밍의 패러다임의 변화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시 프로그래밍의 패러다임의 변화</h2>\n<p>전통적으로 동시 프로그래밍(concurrent programming)은 여러 개의 쓰레드(thread)를 활용하여 이루어졌었습니다.\n하지만 쓰레드를 이용해서 직접 코딩을 해보신 분이라면 겪어보셨겠지만, thread safe한 프로그램을 작성하는 것은 생각보다 쉬운 일이 아닙니다.\n게다가 싱글 코어 프로세서에서 이러한 프로그램을 돌리면, 기대했던 동시 처리에 따른 성능 향상을 미미하거나 심지어 성능 저하되기도 합니다.</p>\n<p>이러한 이유로 최근에는 하나의 쓰레드로 동시 처리를 하는 비동기 프로그래밍(asynchronous programming)이 더욱 주목받고 있습니다.</p>\n<h2 id=\"비동기-프로그래밍\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"비동기 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 프로그래밍</h2>\n<p>웹 서버와 같은 애플리케이션을 생각해보면 CPU 연산 시간 대비 DB나 API와 연동 과정에서 발생하는 대기 시간이 훨씬 길다는 것을 알 수 있습니다.\n비동기 프로그래밍은 이러한 대기 시간을 낭비하지 않고 그 시간에 CPU가 다른 처리를 할 수 있도록 하는데 이를 흔히 non-blocking하다고 합니다.</p>\n<p>자바스크립트와 같이 애초에 비동기 방식으로 동작하도록 설계된 언어에서는 익숙한 개념이지만, 파이썬과 같이 기본적으로 동기 방식으로 동작하는 언어에서는 이 기념이 생소하게 느껴질 수도 있습니다.\n하지만 파이썬 3.4에서 <code>asyncio</code>가 표준 라이브러리로 추가되고, 파이썬 3.5에서 <code>async/await</code> 키워드가 문법으로 채택이 되면서, 파이썬도 이제 언어 자체적으로 비동기 프로그래밍이 가능해졌습니다.</p>\n<h2 id=\"핵심-문법\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EB%AC%B8%EB%B2%95\" aria-label=\"핵심 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 문법</h2>\n<p><code>def</code> 키워드로 선언하는 모든 함수는 파이썬에서 기본적으로 동기 방식으로 동작한다고 생각하시면 됩니다.</p>\n<p>예를 들어, 다음과 같이 선언된 함수는 동기 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">do_sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>기존 <code>def</code> 키워드 앞에 <code>async</code> 키워드까지 붙이면 이 함수는 비동기 처리되며, 이러한 비동기 함수를 파이썬에서는 코루틴(coroutine)이라고도 부릅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">do_async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>이러한 비동기 함수는 일반 동기 함수가 호출하듯이 호출하면 coroutine 객체가 리턴됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">do_async<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># &lt;coroutine object do_async at 0x1038de710></span></code></pre></div>\n<p>따라서 비동기 함수는 일반적으로 <code>async</code>로 선언된 다른 비동기 함수 내에서 <code>await</code> 키워드를 붙여서 호출해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main_async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> do_async<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>자바스크립트에서 async로 선언된 비동기 함수를 호출할 때 await 키워드를 붙이지 않으면 Promise 객체를 리턴하는 것과 같은 이치입니다.\n(<a href=\"/js-async-async-await/\">[자바스크립트] 비동기 처리 3부 - async/await</a> 참조)</p>\n</blockquote>\n<p><code>async</code>로 선언되지 않은 일반 동기 함수 내에서 비동기 함수를 호출하려면 <code>asyncio</code> 라이브러리의 이벤트 루프를 이용해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nloop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>main_async<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nloop<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>파이썬 3.7 이상에서는 다음과 같이 한 줄로 간단히 비동기 함수를 호출 할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main_async<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"실습-프로젝트\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"실습 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 프로젝트</h2>\n<p>지금부터 사용자 관리 애플리케이션을 흉내내는 실습 코드를 작성하면서 동기 처리하는 코드와 비동기 처리를 하는 코드를 비교해보도록 하겠습니다.</p>\n<p>억지스럽지만 시뮬레이션을 위해서 다음과 같은 가정을 해보겠습니다.</p>\n<ul>\n<li>애플리케이션을 사용자 데이터를 직접 보관하지 않고 외부 API를 호출해서 가져옵니다.</li>\n<li>외부 API는 1명의 사용자 데이터를 조회하는데 1초가 걸리고, 한 번에 여러 사용자의 데이터를 조회할 수 없습니다.</li>\n<li>각각 3명, 2명, 1명의 사용자 정보를 조회하는 요청 3개가 동시에 애플리케이션에 들어옵니다.</li>\n</ul>\n<h2 id=\"동기-프로그래밍\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"동기 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기 프로그래밍</h2>\n<p>먼저 사용자 데이터 조회를 전통적인 동기 방식으로 처리해주는 <code>find_users_sync</code> 함수를 작성합니다.\n의도적으로 1초의 지연 시간을 발생시키기 위해서 <code>time.sleep</code> 함수를 사용하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_users_sync</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\">명 중 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">번 째 사용자 조회 중 ...'</span></span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'> 총 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 명 사용자 동기 조회 완료!'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음, 애플리케이션에 들어온 3개의 요청을 동기 처리하는 <code>process_sync</code> 함수를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">process_sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    find_users_sync<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    find_users_sync<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    find_users_sync<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'>>> 동기 처리 총 소요 시간: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    process_sync<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 함수를 호출해보면 <code>find_users_sync</code> 함수가 총 6초 동안 3번 순차적으로 실행됨을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">3</span>명 중 <span class=\"token number\">1</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token number\">3</span>명 중 <span class=\"token number\">2</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token number\">3</span>명 중 <span class=\"token number\">3</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">></span> 총 <span class=\"token number\">3</span> 명 사용자 동기 조회 완료<span class=\"token operator\">!</span>\n<span class=\"token number\">2</span>명 중 <span class=\"token number\">1</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token number\">2</span>명 중 <span class=\"token number\">2</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">></span> 총 <span class=\"token number\">2</span> 명 사용자 동기 조회 완료<span class=\"token operator\">!</span>\n<span class=\"token number\">1</span>명 중 <span class=\"token number\">1</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">></span> 총 <span class=\"token number\">1</span> 명 사용자 동기 조회 완료<span class=\"token operator\">!</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> 동기 처리 총 소요 시간: <span class=\"token number\">6.020448923110962</span></code></pre></div>\n<p>만약에 싱글 쓰레드의 웹 서버가 이러한 방식으로 동작한다면 실제 사용자는 얼마나 오랫동안 지연을 경험을 하게 될까요?\n동기 처리에서는 첫 번째 함수의 실행이 끝나야 두 번째 함수가 실행되고, 마찬가지로 두 번째 함수가 끝나야 세 번째 함수가 실행됩니다.\n즉, 첫 번쨰 요청이 처리되는데는 3초, 두 번째 요청은 5초(3 + 2), 세 번째 요청은 6초(3 + 2 + 1)가 걸릴 것입니다.</p>\n<h2 id=\"비동기-프로그래밍-1\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-1\" aria-label=\"비동기 프로그래밍 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 프로그래밍</h2>\n<p>위에서 동기 처리되도록 작성된 코드를 파이썬의 <code>async/await</code> 키워드를 사용해서 한 번 비동기 처리될 수 있도록 개선해보도록 하겠습니다.\n기존의 함수 선언에 <code>async</code> 키워드를 붙여서 일반 동기 함수가 아닌 비동기 함수(coroutine)로 변경하였으며, <code>time.sleep</code> 함수 대신에 <code>asyncio.sleep</code> 함수를 사용하여 1초의 지연을 발생시켰습니다.</p>\n<p><code>time.sleep</code> 함수는 기다리는 동안 CPU를 그냥 놀리는 반면에, <code>asyncio.sleep</code> 함수는 CPU가 놀지 않고 다른 처리를 할 수 있도록 해줍니다.\n여기서 주의할 점은 <code>asyncio.sleep</code> 자체도 비동기 함수이기 때문에 호출할 때 반드시 <code>await</code> 키워드를 붙여야 한다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> asyncio\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">find_users_async</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\">명 중 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">번 째 사용자 조회 중 ...'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'> 총 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 명 사용자 비동기 조회 완료!'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>자 이제, 파이썬의 <code>asyncio</code> 라이브러리를 사용해서 위에서 작성한 함수를 비동기로 실행해보겠습니다.\n먼저 이벤트 루프가 3개의 함수 호출을 알아서 스케줄하여 비동기로 호출할 수 있도록 <code>asyncio.wait</code> 함수의 배열 인자로 3개의 함수 리턴값, 즉 coroutine 객체를 넘겨주도록 수정합니다.\n그리고 이렇게 수정된 <code>process_async</code> 비동기 함수를 호출할 때도, 함수의 리턴값인 coroutine 객체를, <code>asyncio.run</code> 함수에 넘겨줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">process_async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        find_users_async<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        find_users_async<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        find_users_async<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'>>> 비동기 처리 총 소요 시간: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>process_async<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>비동기 처리되도록 재작성된 코드를 실행해보면 호출 순서와 무방하게 실행 시간이 짧은 수록 먼저 처리되는 것을 알 수 있습니다.\n게다가 총 소요 시간도 6초에서 3초로 100% 단축되었음을 알 수 있습니다!</p>\n<p>실제 사용자 관점에서 생각해보면 3초가 걸리는 요청을 기다리지 않고, 1초가 걸리는 요청은 1초 만에 응답이 오고, 2초가 걸리는 요청은 2초 만에 응답이 올테니 매우 이상적이지 않을 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>명 중 <span class=\"token number\">1</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token number\">2</span>명 중 <span class=\"token number\">1</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token number\">3</span>명 중 <span class=\"token number\">1</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">></span> 총 <span class=\"token number\">1</span> 명 사용자 비동기 조회 완료<span class=\"token operator\">!</span>\n<span class=\"token number\">2</span>명 중 <span class=\"token number\">2</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token number\">3</span>명 중 <span class=\"token number\">2</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">></span> 총 <span class=\"token number\">2</span> 명 사용자 비동기 조회 완료<span class=\"token operator\">!</span>\n<span class=\"token number\">3</span>명 중 <span class=\"token number\">3</span>번 째 사용자 조회 중 <span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">></span> 총 <span class=\"token number\">3</span> 명 사용자 비동기 조회 완료<span class=\"token operator\">!</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> 비동기 처리 총 소요 시간: <span class=\"token number\">3.0041661262512207</span></code></pre></div>\n<p>기본적으로 비동기 처리는 정확히 실행 순서가 보장되지 않기 때문에, 여러분 PC에서 실행했을 때는 저와 약간 실행 순서가 다를 수도 있습니다.\n비록 동일한 실행 순서를 보장받지 못하더라도, 여기서 중요한 점은 CPU를 놀리지 않고 불필요한 지연없이 3개의 요청이 실행되어야 한다는 것입니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬의 <code>asyncio</code> 라이브러리를 이용해서 비동기 프로그래밍을 하는 방법과 동기 프로그래밍 대비 장점에 대해서 살펴보았습니다.\n파이썬으로 비동기 프로그래밍을 하는 것이 과거 그 어느 때 보다 쉬워진 만큼 앞으로 파이썬에서도 비동기로 처리되는 코드를 점점 더 많이 보게 될 것 같습니다.\n관련해서 기본 개념을 잡으시는데 도움이 되셨으면 좋겠습니다.</p>","timeToRead":6,"fields":{"slug":"/python-asyncio/","tags":["Python","파이썬","async","await","asyncio","cuncurrent","동시성"]},"frontmatter":{"title":"[파이썬] asyncio로 비동기 처리하기","date":"Jan 2, 2020"}},"next":{"fields":{"slug":"/google-oidc/"},"frontmatter":{"title":"구글 OpenID Connect 사용법"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}