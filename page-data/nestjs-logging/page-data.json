{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/nestjs-logging/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/react-children/"},"frontmatter":{"title":"React의 Children API 사용법"}},"node":{"html":"<p>로깅(logging)은 애플리케이션에서 발생하는 각종 이벤트에 대한 기록을 남기고 문제 발생 시 원인을 파악하는데 핵심적인 역할을 하는데요.\n이번 포스팅에서는 NestJS 앱에서 어떻게 로거(logger)를 사용하고 커스터마이징(customizing)할 수 있는지 알아보겠습니다.</p>\n<h2 id=\"실습-프로젝트-구성\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"실습 프로젝트 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 프로젝트 구성</h2>\n<p>먼저 간단한 실습을 위해서 NestJS 프로젝트가 하나 필요할 것 같은데요.\n터미널에서 NestJS CLI 도구의 <code>nest new</code> 명령어를 실행하여 새로운 프로젝트를 구성하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest new our-nestjs\n⚡  We will scaffold your app <span class=\"token keyword\">in</span> a few seconds<span class=\"token punctuation\">..</span>\n\n? Which package manager would you ❤️  to use? <span class=\"token punctuation\">(</span>Use arrow keys<span class=\"token punctuation\">)</span>\n❯ <span class=\"token function\">npm</span>\n  <span class=\"token function\">yarn</span>\n  <span class=\"token function\">pnpm</span></code></pre></div>\n<blockquote>\n<p>NestJS CLI를 설치하고 NestJS 프로젝트를 구성하는 기본적인 방법은 <a href=\"/nestjs/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"로거-사용하기\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B1%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"로거 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로거 사용하기</h2>\n<p>NestJS는 기본적으로 로거가 내장되어 있으며 서비스 클래스나 컨트롤러 클래스에서 로거를 매우 쉽게 사용할 수 있는데요.\n단순히 <code>@nestjs/common</code> 패키지에서 <code>Logger</code> 클래스를 불러온 후 인스턴스를 생성한 다음에 <code>log()</code>나 <code>warn()</code>, <code>debug()</code>와 같은 메서드를 호출하면 됩니다.</p>\n<p>이 때 <code>Logger()</code> 생성자의 인자로 <code>&#x3C;클래스명>.name</code>을 넘기주면 로거의 컨텍스트(context)가 클래스 이름으로 설정됩니다.\n이렇게 해주면 나중에 로그를 확인할 때 어느 클래스에서 찍히는 로그인지를 파악할 수 있어서 도움이 됩니다.</p>\n<p>보통 <code>Logger</code> 클래스의 인스턴스는 해당 클래스의 <code>logger</code> 속성에 할당해놓고 여러 메서드에서 접근하는 것이 관례인데요.\n예를 들어, <code>AppService</code> 클래스의 <code>getHello()</code> 메서드 안에서 <code>debug</code> 수준의 로그를 찍어보겠습니다.</p>\n<div class=\"gatsby-code-title\">src/app.service.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> Logger <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">(</span>AppService<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logging...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이번에는 내부적으로 <code>AppService</code> 클래스의 <code>getHello()</code> 메서드를 호출하는 <code>AppController</code> 클래스의 <code>getHello()</code> 메서드 안에서 <code>warn</code> 수준의 로그를 찍어볼까요?</p>\n<div class=\"gatsby-code-title\">src/app.controller.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get<span class=\"token punctuation\">,</span> Logger <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">(</span>AppController<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> appService<span class=\"token operator\">:</span> AppService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logging...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appService<span class=\"token punctuation\">.</span><span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 NestJS 앱을 구동하고 <code>GET /</code> 엔드포인트를 호출해보면 다음과 같은 로그가 찍히는 것을 확인할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">14</span>  - 01/11/2023, <span class=\"token number\">8</span>:23:41 PM     LOG <span class=\"token punctuation\">[</span>NestFactory<span class=\"token punctuation\">]</span> Starting Nest application<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">14</span>  - 01/11/2023, <span class=\"token number\">8</span>:23:41 PM     LOG <span class=\"token punctuation\">[</span>InstanceLoader<span class=\"token punctuation\">]</span> LoggerModule dependencies initialized +1ms\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">14</span>  - 01/11/2023, <span class=\"token number\">8</span>:23:41 PM     LOG <span class=\"token punctuation\">[</span>InstanceLoader<span class=\"token punctuation\">]</span> AppModule dependencies initialized +0ms\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">14</span>  - 01/11/2023, <span class=\"token number\">8</span>:23:41 PM     LOG <span class=\"token punctuation\">[</span>RoutesResolver<span class=\"token punctuation\">]</span> AppController <span class=\"token punctuation\">{</span>/<span class=\"token punctuation\">}</span>: +0ms\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">14</span>  - 01/11/2023, <span class=\"token number\">8</span>:23:41 PM     LOG <span class=\"token punctuation\">[</span>RouterExplorer<span class=\"token punctuation\">]</span> Mapped <span class=\"token punctuation\">{</span>/, GET<span class=\"token punctuation\">}</span> route +0ms\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">14</span>  - 01/11/2023, <span class=\"token number\">8</span>:23:41 PM     LOG <span class=\"token punctuation\">[</span>NestApplication<span class=\"token punctuation\">]</span> Nest application successfully started +0ms\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">14</span>  - 01/11/2023, <span class=\"token number\">8</span>:23:41 PM    WARN <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">]</span> Logging<span class=\"token punctuation\">..</span>.</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">14</span>  - 01/11/2023, <span class=\"token number\">8</span>:23:41 PM   DEBUG <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">]</span> Logging<span class=\"token punctuation\">..</span>.</span></code></pre></div>\n<p><code>Logger</code> 클래스의 인스턴스를 생성할 때 클래스 이름을 컨텍스트로 설정해줬기 때문에 로그 메시지 앞에 클래스 이름이 함께 출력이 되는데요.\n이를 통해 로그 메시지가 동일하더라도 <code>AppController</code> 클래스에서 찍히는 건지 <code>AppService</code> 클래스에서 찍히는 건지 쉽게 알아낼 수 있습니다.</p>\n<h2 id=\"로거-확장하기\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B1%B0-%ED%99%95%EC%9E%A5%ED%95%98%EA%B8%B0\" aria-label=\"로거 확장하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로거 확장하기</h2>\n<p>만약에 로그를 남기는 방식에 변화를 주고 싶다면 NestJS에 내장된 기본 로거를 어렵지 않게 확장할 수 있습니다.\n<code>@nestjs/common</code> 패키지의 <code>ConsoleLogger</code> 클래스를 확장(extend)하여 원하는 메서드만 오버라이드(override)해주면 됩니다.</p>\n<p>예를 들어, <code>debug</code> 수준과 <code>warn</code> 수준에서 로그가 찍힐 때 메시지 앞에 특정 이모지(emoji)를 함께 출력되도록 로거를 확장해보겠습니다.</p>\n<div class=\"gatsby-code-title\">src/my-logger.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ConsoleLogger<span class=\"token punctuation\">,</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLogger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsoleLogger</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🐛 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚨 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 확장한 로거는 NestJS 앱에 설정을 해줘야 기본 로거 대신에 사용이 되는데요.\n이 부분은 애플리케이션의 진입 지점(entry point)인 <code>main.ts</code> 파일에서 해줄 수 있습니다.</p>\n<p><code>NestFactory.create()</code>를 호출할 때 <code>logger</code> 옵션으로 확장한 로거 클래스의 인스턴스를 넘겨주면 되겠습니다.</p>\n<div class=\"gatsby-code-title\">src/main.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/core\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MyLogger <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./my-logger\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    logger<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>NestJS 앱을 재구동 후에 <code>GET /</code> 엔드포인트를 호출해보면 로그가 이모지와 함께 찍히는 것을 확인할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">40</span>  - 01/11/2023, <span class=\"token number\">8</span>:41:15 PM     LOG <span class=\"token punctuation\">[</span>NestFactory<span class=\"token punctuation\">]</span> Starting Nest application<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">40</span>  - 01/11/2023, <span class=\"token number\">8</span>:41:15 PM     LOG <span class=\"token punctuation\">[</span>InstanceLoader<span class=\"token punctuation\">]</span> AppModule dependencies initialized\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">40</span>  - 01/11/2023, <span class=\"token number\">8</span>:41:15 PM     LOG <span class=\"token punctuation\">[</span>RoutesResolver<span class=\"token punctuation\">]</span> AppController <span class=\"token punctuation\">{</span>/<span class=\"token punctuation\">}</span>:\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">40</span>  - 01/11/2023, <span class=\"token number\">8</span>:41:15 PM     LOG <span class=\"token punctuation\">[</span>RouterExplorer<span class=\"token punctuation\">]</span> Mapped <span class=\"token punctuation\">{</span>/, GET<span class=\"token punctuation\">}</span> route\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">40</span>  - 01/11/2023, <span class=\"token number\">8</span>:41:15 PM     LOG <span class=\"token punctuation\">[</span>NestApplication<span class=\"token punctuation\">]</span> Nest application successfully started\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">40</span>  - 01/11/2023, <span class=\"token number\">8</span>:41:17 PM    WARN <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">]</span> 🚨 Logging<span class=\"token punctuation\">..</span>.</span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">40</span>  - 01/11/2023, <span class=\"token number\">8</span>:41:17 PM   DEBUG <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">]</span> 🐛 Logging<span class=\"token punctuation\">..</span>.</span></code></pre></div>\n<h2 id=\"로거-구현하기\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B1%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"로거 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로거 구현하기</h2>\n<p>어느 정도 규모가 있는 프로젝트에서는 로거를 완전히 입맛에 맞게 밑바닥부터 새롭게 구현해야하는 경우가 생기기 마련인데요.\n이럴 때는 <code>@nestjs/common</code> 패키지의 <code>LoggerService</code> 인터페이스를 구현(implement)하는 경우가 많습니다.</p>\n<p>이 인테페이스는 총 6개의 메서드가 있는데요.\n이 중에서 <code>log</code>, <code>warn</code>, <code>error</code>는 반드시 구현해줘야 하고, <code>debug</code>, <code>verbose</code>는 선택적으로 구현이 가능합니다.</p>\n<p>상용 애플리케이션이라면 <a href=\"https://github.com/winstonjs/winston\">Winston</a>과 같은 외부 라이브러리를 도입하는 것을 고려하겠지만,\n본 실습에서는 간단한 코드를 위해서 자바스크립트의 <code>console</code> 전역 객체를 사용하여 로거를 구현해보겠습니다.</p>\n<div class=\"gatsby-code-title\">src/logger/logger.service.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> LoggerService <span class=\"token keyword\">as</span> NestLoggerService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NestLoggerService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🐛 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🚨 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🪵 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">💥 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>optionalParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 로거 서비스 클래스는 외부 라이브러리에 의존하지 하지 않기 때문에 굳이 그럴 필요는 없지만 완전한 예제를 위해서 별도의 모듈에 담아서 제공하도록 하겠습니다.</p>\n<div class=\"gatsby-code-title\">src/logger/logger.module.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LoggerService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./logger.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>LoggerService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>LoggerService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 로거를 별도의 모듈로 제공하는 경우에는 로거의 인스턴스를 직접 생성하는 대신에 다른 일반 서비스처럼 NestJS의 DI(의존성 주입)을 사용해야합니다.\n즉, <code>AppModule</code> 모듈에서 <code>LoggerModule</code> 모듈을 불러와야겠습니다.</p>\n<div class=\"gatsby-code-title\">src/app.module.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.controller'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.service'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LoggerModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./logger/logger.module'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>LoggerModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 <code>NestFactory.create()</code> 함수를 호출할 때 <code>bufferLogs</code> 옵션을 반드시 <code>true</code>로 설정해주는 것이 중요한데요.\n이렇게 해주지 않으면 NestJS 앱이 구동되는 초반에 잠시동안 내장 로거가 사용될 수 있기 때문입니다.</p>\n<div class=\"gatsby-code-title\">src/main.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/core\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.module\"</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LoggerService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./logger/logger.service\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    bufferLogs<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  app<span class=\"token punctuation\">.</span><span class=\"token function\">useLogger</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>LoggerService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 다시 NestJS 앱을 구동하고 <code>GET /</code> 엔드포인트를 호출해보면 로그가 다음과 같이 찍히는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">🪵 Starting Nest application<span class=\"token punctuation\">..</span>. NestFactory\n🪵 LoggerModule dependencies initialized InstanceLoader\n🪵 AppModule dependencies initialized InstanceLoader\n🪵 AppController <span class=\"token punctuation\">{</span>/<span class=\"token punctuation\">}</span>: RoutesResolver\n🪵 Mapped <span class=\"token punctuation\">{</span>/, GET<span class=\"token punctuation\">}</span> route RouterExplorer\n🪵 Nest application successfully started NestApplication\n<span class=\"gatsby-highlight-code-line\">🚨 Logging<span class=\"token punctuation\">..</span>. AppController</span><span class=\"gatsby-highlight-code-line\">🐛 Logging<span class=\"token punctuation\">..</span>. AppService</span></code></pre></div>\n<p>기존에 출력이 되던 로깅 레벨이나 날짜/시간, 컨텍스트 정보가 모두 생략되고 단순히 이모지와 로그 메시지만 출력되는 것을 볼 수 있습니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>실습 프로젝트의 코드는 아래에서 직접 확인하고 실행해볼 수 있습니다.</p>\n<iframe src=\"https://stackblitz.com/edit/nestjs-logging?ctl=1&embed=1&file=src/main.ts\"\nstyle=\"width:100%; height:800px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 간단한 실습을 통해서 NestJS에서 어떻게 로깅을 할 수 있는지에 대해서 살펴보았습니다.\n확장이 용이한 NestJS의 로깅 매커니즘을 활용하시는데 도움이 되었으면 좋겠습니다.</p>\n<p>NestJS에 관련된 다른 포스팅은 <a href=\"/?tag=NestJS\">관련 태그</a>를 참고 바라겠습니다.</p>","timeToRead":6,"fields":{"slug":"/nestjs-logging/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","logging","logger"]},"frontmatter":{"title":"NestJS에서 로깅(logging)하기","date":"Jan 11, 2023"}},"next":{"fields":{"slug":"/nestjs-rest-api/"},"frontmatter":{"title":"NestJS로 REST API 찍어내기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}