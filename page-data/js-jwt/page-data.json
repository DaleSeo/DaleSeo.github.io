{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-jwt/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/css-white-space/"},"frontmatter":{"title":"CSS의 white-space 속성 사용법"}},"node":{"html":"<p>이번 포스팅에서는 자바스크립트로 어떻게 JWT 토큰을 발급하고 검증하는지에 대해서 알아보겠습니다.</p>\n<h2 id=\"jsonwebtoken-패키지-설치\" style=\"position:relative;\"><a href=\"#jsonwebtoken-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"jsonwebtoken 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jsonwebtoken 패키지 설치</h2>\n<p>우선 Node.js의 패키지 매니저인 npm을 이용하여 <code>jsonwebtoken</code> 패키지를 설치하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i jsonwebtoken</code></pre></div>\n<p><code>jsonwebtoken</code>는 <a href=\"https://self-issued.info/docs/draft-ietf-oauth-json-web-token.html\">JWT 표준 명세서</a>를 자바스크립트 언어로 구현하고 있는 라이브러리입니다.\n따라서 JWT 기반으로 사용자 인증이나 인가를 하는 자바스크립트 서버 애플리케이션에서는 직접적으로든 간접적으로든 (<code>passport-jwt</code>와 같은 프레임워크를 통해서) <code>jsonwebtoken</code> 라이브러리를 사용하게 됩니다.</p>\n<p>설치한 <code>jsonwebtoken</code> 패키지는 CommonJS를 모듈 시스템으로 사용하는 자바스크립트 프로젝트에서는 <code>require</code> 키워드로 불러오면 되고요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jsonwebtoken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>반면에 ES 모듈 시스템을 사용하는 자바스크립트 프로젝트에서는 <code>import</code> 키워드로 불러올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> jwt <span class=\"token keyword\">from</span> <span class=\"token string\">\"jsonwebtoken\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"jwt-토큰\" style=\"position:relative;\"><a href=\"#jwt-%ED%86%A0%ED%81%B0\" aria-label=\"jwt 토큰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT 토큰</h2>\n<p>먼저 JWT 토큰을 이용해서 웹에서 서버와 클라이언트가 어떻게 안전하게 사용자 인증/인가 정보를 주고 받는지에 대해서 짚고 넘어가겠습니다.</p>\n<p>JWT(JSON Web Token) 토큰은 서버가 로그인을 완료한 클라이언트에게 발급해주는 긴 문자열인데요.\n이 문자열에는 사용자의 인증/인가 정보가 담겨있으며 클라이언트는 서버로 요청을 할 때 마다 이 정보를 제공해야 합니다.</p>\n<p>서버는 JWT 토큰을 발급할 때 클라이언트에게 보낼 데이터를 반드시 서명(sign)을 하게되어 있는데요.\n그래야지 클라이언트가 서버가 JWT 토큰을 보냈을 때 서버에서 토큰을 검증(verify)할 수 있기 때문입니다.</p>\n<p>여기서 서명(signing)이라는 작업은 우리가 실생활에서 중요한 계약을 할 때 서명을 한 후에 문서를 주고 받는 것처럼\n네트워크 상에서 서버와 클라이언트 간에 데이터를 주고 받을 때 검증 용으로 부수적인 정보를 추가하는 과정을 뜻합니다.</p>\n<p>이렇게 검증을 위해 추가된 데이터를 서명(signature)라고 하며 이 서명을 이용하면 서버에서는 송수신 과정에서 데이터의 위변조가 일어나지는 않았는지,\n또는 데이터를 돌려주는 주체가 토큰을 받았던 클라이언트가 맞는지 등을 검증할 수 있습니다.</p>\n<blockquote>\n<p>JWT 자체에 대해서는 <a href=\"/jwt/\">관련 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"토큰-발급하기\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EB%B0%9C%EA%B8%89%ED%95%98%EA%B8%B0\" aria-label=\"토큰 발급하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 발급하기</h2>\n<p>토큰을 발급할 때는 <code>jsonwebtoken</code> 라이브러리에서 제공하는 <code>sign()</code> 함수를 사용하는데요.\n첫 번째 인자로 토큰에 담을 JSON 데이터(payload) 두 번째 인자로는 키(key)를 받습니다.</p>\n<p>예를 들어서, 이메일 정보를 담고있는 JWT 토큰을 한번 발급해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@user.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 다음과 비슷한 <code>eyJ</code>로 시작하는 긴 문자열을 얻을 수 있는데요. 이것이 바로 발급된 토큰입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAdXNlci5jb20iLCJpYXQiOjE2Nzg5MjAxMjV9.7agGY4Sx7wWY0vZe25tfsrpIcDUHf5N6XP1W3MfxhWI</code></pre></div>\n<p>여기서 두 번째 인자로 넘기는 키는 나중에 해당 토큰을 검증할 때도 필요합니다.\n서명할 때 아무런 설정을 해주지 않으면 HS256이 기본 알고리즘으로 사용되는데 이 대칭키 알고리즘은 암호화와 복호화를 할 때 동일한 키를 사용하기 때문입니다.</p>\n<p>만약에 RS256과 같은 비대칭키 알고리즘을 사용하려면 두 번째 인자로 비밀키(private key)를 넘기고, 세 번째 인자를 통해 <code>algorithm</code> 옵션을 명시해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> privateKey <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"private.key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@user.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">algorithm</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RS256\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>대신에 이렇게 비대칭키 알고리즘을 사용하면 나중에 토큰을 검증할 때 동일한 키가 아닌 공개키(public key)를 사용해야합니다.\n(토큰을 발급해주는 서버와 토큰 검증해야하는 서버가 다를 경우 유용하겠죠?)</p>\n<p>토큰의 만료 시간을 지정하고 싶다면 세 번째 인자를 통해 <code>expiresIn</code> 옵션을 명시해주면 됩니다.</p>\n<p>예를 들어, 1시간 동안 토큰이 유효하길 원하다면 다음과 같이 토큰을 발급합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@user.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1h\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"토큰-검증하기\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0\" aria-label=\"토큰 검증하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 검증하기</h2>\n<p>JWT 토큰은 <code>jsonwebtoken</code> 라이브러리에서 제공하는 <code>verify()</code> 함수를 사용하여 검증할 수 있는데요.\n첫 번째 인자로는 토큰 문자열을 받고, 두 번째 인자로는 <code>sign()</code> 함수와 동일하게 키를 받습니다.</p>\n<p>예를 들어서, 토큰을 하나 발급받은 후에 바로 검증한 후 토큰에 저장된 데이터를 출력해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@user.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> verified <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>verified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 <code>sign()</code> 함수에 넘겼던 JSON 데이터 뿐만 아니라 <code>iat</code> 속성이 추가되어 있는 것을 볼 수 있을텐데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span> email: <span class=\"token string\">'test@user.com'</span>, iat: <span class=\"token number\">1678920125</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 JWT 토큰에 부가적으로 저장되는 메타 데이터를 클레임(claim)이라고 합니다.\n<code>iat</code> 클레임은 <code>issued at</code>의 약자로 해당 토큰이 발급된 시각에 대한 유닉스(Unix) 타임스탬프(timestamp)로 담고 있습니다.</p>\n<p>만약에 토큰을 발급했을 때와 다른 키를 사용하여 검증을 시도하면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@user.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> verified <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">\"your_secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>verified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 서명이 유효하지 않다는 오류가 발생하게 됩니다.\n해당 키로 서명을 복호화할 수 없기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/Users/daleseo/temp/our-jwt/node_modules/jsonwebtoken/verify.js:171\n      <span class=\"token builtin class-name\">return</span> done<span class=\"token punctuation\">(</span>new JsonWebTokenError<span class=\"token punctuation\">(</span><span class=\"token string\">'invalid signature'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n                  ^\nJsonWebTokenError: invalid signature</code></pre></div>\n<p>이번에는 1분 동안 유효한 토큰을 발급한 후에 검증해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@user.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1m\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> verified <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>verified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 JSON 데이터에 이번에는 <code>iat</code> 클레임과 더불어 <code>exp</code> 클레임이 추가되는 것을 볼 수 있는데요.\n<code>exp</code> 클레임은 <code>expiration time</code>의 약자로 만료 시각을 나타내며 <code>exp</code> 값에서 <code>iat</code> 값을 빼보면 정확히 60초가 나오는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">'test@user.com'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">iat</span><span class=\"token operator\">:</span> <span class=\"token number\">1678922236</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">exp</span><span class=\"token operator\">:</span> <span class=\"token number\">1678922296</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이번에는 만료 시간을 1초로 줄이고 토큰을 발급한 후에 1초 기다렸다가 검증을 해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@user.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1s\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> verified <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>verified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그려면 다음과 같이 토큰이 만료되었다는 오류가 발생할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/Users/daleseo/temp/our-jwt/node_modules/jsonwebtoken/verify.js:190\n        <span class=\"token builtin class-name\">return</span> done<span class=\"token punctuation\">(</span>new TokenExpiredError<span class=\"token punctuation\">(</span><span class=\"token string\">'jwt expired'</span>, new Date<span class=\"token punctuation\">(</span>payload.exp * <span class=\"token number\">1000</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ^\nTokenExpiredError: jwt expired</code></pre></div>\n<h2 id=\"토큰-읽기만-하기\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EC%9D%BD%EA%B8%B0%EB%A7%8C-%ED%95%98%EA%B8%B0\" aria-label=\"토큰 읽기만 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 읽기만 하기</h2>\n<p>토큰을 검증하지 않고 단순히 토큰에 저장된 데이터만 읽고 싶다면 <code>jsonwebtoken</code> 라이브러리에서 제공하는 <code>decode()</code> 함수를 사용할 수 있습니다.\n<code>decode()</code> 함수는 검증을 하지 않기 때문에 키를 인자로 받지 않고 그냥 토큰 문자열만 넘기면 됩니다.</p>\n<p>예를 들어, 1초 동안만 유효한 토큰을 발급한 다음 1초를 기다린 후 토큰에 저장된 데이터를 읽어서 출력해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@user.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1s\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> decoded <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 토큰이 만료되었음에도 불구하고 토큰이 담고 있는 JSON 데이터가 출력되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span> email: <span class=\"token string\">'test@user.com'</span>, iat: <span class=\"token number\">1678923334</span>, exp: <span class=\"token number\">1678923335</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>페이로드(payload) 뿐만 아니라 헤더(header)와 서명(signature)까지 읽고 싶다면 <code>decode()</code> 함수의 두 번째 인자를 통해서 <code>complete</code> 옵션을 <code>true</code>로 주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@user.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"our_secret\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> decoded <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">complete</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>헤더에 담긴 정보를 통해서 토큰 타입이 <code>JWT</code>이고 토큰이 발급될 때 <code>HS256</code> 알고리즘으로 서명되었다는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  header: <span class=\"token punctuation\">{</span> alg: <span class=\"token string\">'HS256'</span>, typ: <span class=\"token string\">'JWT'</span> <span class=\"token punctuation\">}</span>,\n  payload: <span class=\"token punctuation\">{</span> email: <span class=\"token string\">'test@user.com'</span>, iat: <span class=\"token number\">1678923622</span> <span class=\"token punctuation\">}</span>,\n  signature: <span class=\"token string\">'Ppj2VqDi5XTY3pE3zUzbHa2DgQBRAVsQ14kwMlpBOXE'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 <code>jsonwebtoken</code> 라이브러리를 사용해서 JWT 토큰을 발급하고 검증, 그리고 단순히 토큰에 저장된 데이터를 읽는 방법에 대해서 살펴보았습니다.\n참 이게 알고보면 간단한데 보통 다른 프레임워크나 라이브러리 통해서 간잡적으로 사용하는 경우가 많다보니 의외로 어렵게 느껴지는 것 같습니다.\n본 포스팅이 JWT와 좀 더 가까워지는데 도움이 되었으면 좋겠습니다.</p>\n<blockquote>\n<p>JWT에 연관된 포스팅은 <a href=\"/?tag=JWT\">JWT 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":6,"fields":{"slug":"/js-jwt/","tags":["JavaScript","Node.js","security","authentication","authorization","JWT"]},"frontmatter":{"title":"자바스크립트로 JWT 토큰을 발급하고 검증하기","date":"Mar 18, 2023"}},"next":{"fields":{"slug":"/jwt/"},"frontmatter":{"title":"JWT - Json Web Token"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}