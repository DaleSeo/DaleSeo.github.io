{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/rust-from-into/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/rust-serde/"},"frontmatter":{"title":"Rust 데이터 직렬화: Serde 라이브러리 사용법"}},"node":{"html":"<p>자료형 간의 명시적이고 안전한 데이터 변환은 Rust의 중요한 철학 중 하나입니다.\nRust는 <code>From</code>과 <code>Into</code>라는 표준 트레이트을 제공하여 데이터 변환을 안전하고 명확하게 할 수 있도록 돕는데요.</p>\n<p>이 글에서는 이 두 트레이트의 관계와 차이점, 그리고 활용법을 살펴보겠습니다.</p>\n<h2 id=\"from-트레이트이란\" style=\"position:relative;\"><a href=\"#from-%ED%8A%B8%EB%A0%88%EC%9D%B4%ED%8A%B8%EC%9D%B4%EB%9E%80\" aria-label=\"from 트레이트이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>From 트레이트이란?</h2>\n<p><code>From</code> 트레이트은 다른 자료형부터(from) 현재 자료형으로 변환하는 방법을 정의할 때 사용합니다.\n<code>From</code> 트레이트의 <code>from()</code> 메서드는 다른 제네릭(generic) 타입을 인자로 받고 자신의 타입을 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">From</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예를 들어, Rust에 내장된 <code>String</code> 자료형에는 <code>&#x26;str</code> 자료형으로 부터 변환되는 방법이 정의되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">From</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">from</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>String::from()</code> 메서드를 덕분에 우리는 <code>&#x26;str</code> 자료형을 <code>String</code> 자료형으로 편하게 바꿀 수 있는 것이지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rust\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"into-트레이트이란\" style=\"position:relative;\"><a href=\"#into-%ED%8A%B8%EB%A0%88%EC%9D%B4%ED%8A%B8%EC%9D%B4%EB%9E%80\" aria-label=\"into 트레이트이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Into 트레이트이란?</h2>\n<p><code>Into</code> 트레이트은 <code>From</code> 트레이트과 정반대의 반대 관점에서 데이터 변환 방법을 정의합니다.\n즉, 현재 자료형이 다른 자료형으로(into)로 변환되는 방법을 정의할 수 있습니다.</p>\n<p><code>Into</code> 트레이트의 <code>into()</code> 메서드는 자신의 타입을 인자로 받고 다른 제네릭(generic) 타입을 반환합니다,</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">Into</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">into</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>From</code> 트레이트을 구현하면 컴파일러가 <code>Into</code> 트레이트은 자동으로 구현해줍니다.\n따라서 <code>Into</code> 트레이트을 직접 구현한 일은 거의 없습니다.</p>\n<p>예를 들어, <code>&#x26;str</code> 자료형을 <code>String</code> 자료형으로 바꿀 때, <code>into()</code> 메서드를 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Rust\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"from-트레이트-구현\" style=\"position:relative;\"><a href=\"#from-%ED%8A%B8%EB%A0%88%EC%9D%B4%ED%8A%B8-%EA%B5%AC%ED%98%84\" aria-label=\"from 트레이트 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>From 트레이트 구현</h2>\n<p><a href=\"/rust-struct/\">구조체</a>나 <a href=\"/rust-enum/\">열거형</a>을 상대로 From 트레이트을 구현해보겠습니다.</p>\n<p>예를 들어, <code>x</code>와 <code>y</code> 필드로 이루어진 <code>Point</code> 구조체를 정의하고, 튜플로부터 반환하는 방법을 <code>From</code> 트레이트으로 구현해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">From</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">from</span><span class=\"token punctuation\">(</span>coords<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> coords<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>Point::from()</code> 메서드로도 변환할 수 있고, <code>튜플.into()</code> 메서드로도 변환할 수 있게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> point1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{point1:?}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> point2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{point2:?}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Point <span class=\"token punctuation\">{</span> x: <span class=\"token number\">1</span>, y: <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\nPoint <span class=\"token punctuation\">{</span> x: <span class=\"token number\">3</span>, y: <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"tryfrom과-tryinto-트레이트\" style=\"position:relative;\"><a href=\"#tryfrom%EA%B3%BC-tryinto-%ED%8A%B8%EB%A0%88%EC%9D%B4%ED%8A%B8\" aria-label=\"tryfrom과 tryinto 트레이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TryFrom과 TryInto 트레이트</h2>\n<p><code>From</code>과 <code>Into</code> 트레이트은 데이터 변환이 항상 성공하는 상황에서 사용합니다.\n데이터 변환이 실패할 가능성이 있다면 <code>TryFrom</code>과 <code>TryInto</code> 트레이트을 사용해야합니다.</p>\n<p>표준 라이브러리에 두 트레이트은 다음과 같이 정의되어 있습니다.\n<code>From</code>과 <code>Into</code> 트레이트과 다르게 반환 자료형이 <code>Result</code> 임을 알 수 있습니다.\n이를 통해서 데이터 변환이 실패햇을 때 발생할 수 있는 오류를 명시해줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">TryFrom</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sized</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">try_from</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">TryInto</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sized</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">try_into</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Error</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"tryfrom-구현\" style=\"position:relative;\"><a href=\"#tryfrom-%EA%B5%AC%ED%98%84\" aria-label=\"tryfrom 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TryFrom 구현</h2>\n<p><code>TryInto</code> 트레이트도 <code>TryFrom</code> 트레이트만 구현하면 컴파일러가 자동으로 구현해줍니다.</p>\n<p>이번엔느 필드 값으로 양의 정수만 허용하는 <code>PositivePoint</code> 구조체를 정의하고,\n<code>TryInto</code> 트레이트을 구현하여 음수가 포함된 튜플이 인자로 들어오면 오류를 발생시키도록 구현해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">PositivePoint</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">TryFrom</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">PositivePoint</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Error</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">try_from</span><span class=\"token punctuation\">(</span>coords<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Error</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> coords<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Negative coordinate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n                x<span class=\"token punctuation\">:</span> x <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n                y<span class=\"token punctuation\">:</span> y <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마찬가지로 <code>try_from()</code> 메서드와 <code>try_into()</code> 메서드, 모두 사용해서 데이터 변환을 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> ok <span class=\"token operator\">=</span> <span class=\"token class-name\">PositivePoint</span><span class=\"token punctuation\">::</span><span class=\"token function\">try_from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> err<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">PositivePoint</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">try_into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Ok<span class=\"token punctuation\">(</span>PositivePoint <span class=\"token punctuation\">{</span> x: <span class=\"token number\">10</span>, y: <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nErr<span class=\"token punctuation\">(</span><span class=\"token string\">\"Negative coordinate\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"fromstr\" style=\"position:relative;\"><a href=\"#fromstr\" aria-label=\"fromstr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FromStr</h2>\n<p>데이터 변환 중에서 특히 문자열로부터 어떤 자료형으로 변화하는 작업은 매우 빈번하죠?\n그래서 Rust의 표준 라이브러리에서는 <code>From</code> 트레이트의 특별한 형태인 <code>FromStr</code>도 제공합니다.</p>\n<p><code>FromStr</code> 트레이트은 다음과 같이 정의되어 있습니다.\n<code>TryFrom</code>과 마찬가지로 <code>Result</code>를 반환하여 발생할 가능성이 있는 오류를 표시해주도록 되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">trait</span> <span class=\"token type-definition class-name\">FromStr</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Sized</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Err</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">from_str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Err</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>FromStr</code> 트레이트의 <code>from_str()</code> 메서드를 구현하면 컴파일러가 자동으로 그 반대 작업을 해주는 <code>parse()</code> 메서드도 구현을 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">str</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">FromStr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">FromStr</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Err</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">from_str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Err</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> parts<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token char\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> parts<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid format\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map_err</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>e<span class=\"token closure-punctuation punctuation\">|</span></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map_err</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>e<span class=\"token closure-punctuation punctuation\">|</span></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>FromStr</code> 트레이트은 Rust의 많은 내장 자료형에 대해서 이미 구현이 되어 있습니다.\n위 코드에서 <code>i32</code> 타입인 <code>parts[0]</code>과 <code>parts[1]</code> 상대로 <code>parse()</code> 메서드를 호출할 수 있는 이유입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> good <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10,20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> bad1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abc,xyz\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> bad2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> good<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> bad1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> bad2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Ok<span class=\"token punctuation\">(</span>Point <span class=\"token punctuation\">{</span> x: <span class=\"token number\">10</span>, y: <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nErr<span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid digit found in string\"</span><span class=\"token punctuation\">)</span>\nErr<span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid format\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 Rust에서 데이터 변환의 핵심 매커니즘인 <code>From</code>과 <code>Into</code> 트레이트에 대해서 알아보았습니다.\n또한 같이 알아두면 좋은 <code>TryFrom</code>, <code>TryInto</code>, <code>FromStr</code> 트레이트에 대해서도 살펴보았습니다.\n데이터 변환을 하실 때 본 포스팅에서 다룬 트레이트을 적지적소에 잘 활용하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/rust-from-into/","tags":["Rust","trait"]},"frontmatter":{"title":"Rust 기초: From과 Into 트레이트","date":"Jul 4, 2025"}},"next":{"fields":{"slug":"/rust-match/"},"frontmatter":{"title":"Rust 기초: match로 시작하는 패턴 매칭"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}