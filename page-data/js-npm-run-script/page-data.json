{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-npm-run-script/","result":{"pageContext":{"previous":{"fields":{"slug":"/css-position/"},"frontmatter":{"title":"CSS의 position 속성으로 요소 배치하기"}},"node":{"html":"<p>자바스크립트 프로젝트에서 개발을 하다보면 터미널을 열고 명령어를 실행해야하는 경우가 빈번하게 생기는데요.\n대표적인 예로 로컬 환경에서 애플리케이션을 빌드하고 구동하거나 테스트를 실행하는 것을 들 수 있습니다.</p>\n<p>이번 포스팅에서는 자바스크립트 프로젝트에서 자주 사용되는 명령어를 스크립트로 등록하고 실행하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"반복-명령은-스크립트로\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5-%EB%AA%85%EB%A0%B9%EC%9D%80-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C\" aria-label=\"반복 명령은 스크립트로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복 명령은 스크립트로</h2>\n<p>자바스크립트 프로젝트에서 개발을 진행하다보면 테스트나 빌드(build), 린트(lint), 포멧(format)처럼 반복적으로 수행해야하는 작업들이 생기기 마련입니다.\n각 작업은 일반적으로 특정한 개발 도구의 명령어를 실행하게되는데요.\n예를 들어, 테스트를 수행할 때는 Jest나 Mocha와 같은 테스트 러너(runner)를 실행하고, 빌드를 수행할 때는 Webpack이나 Parcel과 같은 번들러(bundler)를 실행하고, 린트를 수행할 때는 ESLint와 같은 린터(linter)를 실행하게 됩니다.</p>\n<p>이러한 상황은 프로젝트에 참여하고 있는 개발자들에게 (특히 경험이 많치 않은 개발자들에게) 상당히 골치아픈 문제가 될 수 있습니다.\n왜냐하면 프로젝트의 모든 개발자들이 이러한 개발 도구들이 제공하는 CLI(Command Line Interface, 커맨드 라인 인터페이스)에 대해서 숙지하고 있어야 하기 때문입니다.\n게다가 각 CLI가 제공하는 커맨드와 옵션이 다 달라서 모든 개발자가 매번 정확한 명령어를 터미널에 타이핑하는 것은 쉽지 않은 일입니다. 그 개발자가 여러 프로젝트에 참여하고 있다면 더욱 괴로워지겠지요…</p>\n<p>이 문제를 해결하는 좋은 방법은 각 반복 작업을 수행할 때 실행해야하는 명령어를 미리 스크립트로 만들어 놓는 것입니다.\n그러면 프로젝트의 개발자는 반복 명령을 수행할 때 어떤 스크립트를 실행해야하는지만 기억하면 되기 때문입니다.</p>\n<p>프로젝트에서 필요한 스크립트를 준비하는 방법은 여러가지가 있으며 각 방법마다 장단점이 있습니다.\n전통적인 방법으로 쉘(shell) 스크립트를 작성할 수도 있고, <code>Make</code>와 같은 빌드 자동화 도구를 도입할 수도 있습니다.</p>\n<p>해당 프로젝트가 Node.js를 기반으로 되어있는 자바스크립트 프로젝트라면 <code>package.json</code> 파일과 <code>npm run</code> 명령어를 사용하여 이 보다 훨씬 간편하게 스크립트를 등록하고 실행할 수 있습니다.</p>\n<h2 id=\"스크립트-등록\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%93%B1%EB%A1%9D\" aria-label=\"스크립트 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크립트 등록</h2>\n<p>Node.js 기반 프로젝트에서는 프로젝트의 메타 데이터를 관리하기 위해서 <code>package.json</code> 파일을 사용합니다.\n이 <code>package.json</code> 파일의 <code>scripts</code> 부분에 반복적으로 수행해야하는 스크립트를 등록해놓을 수 있습니다.</p>\n<p>스크립트를 등록할 때는 <code>package.json</code>을 열고 직접 편집할 수도 있으나 그러면 오타의 위험이 있어서 가급적 <code>npm set-script {스크립트 이름} {명령어}</code> 명령어를 사용하시는 것을 추천드립니다.</p>\n<p>예를 들어, 콘솔에 <code>Hi!</code>를 출력해주는 명령어를 실행해주는 <code>hi</code>라는 스크립트를 추가해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> set-script hi <span class=\"token string\">\"echo 'Hi!'\"</span></code></pre></div>\n<p>이제 <code>package.json</code> 파일을 열어보시면 다음과 같이 <code>hi</code> 스크립트가 추가되어 있는 것을 확인하실 수 있을거에요.</p>\n<div class=\"gatsby-code-title\">package.json</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 생략</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"hi\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo 'Hi!'\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"스크립트-실행\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-label=\"스크립트 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크립트 실행</h2>\n<p>이렇게 등록한 스크립트는 <code>npm run &#x3C;스크립트 이름></code> 명령어를 통해 실행할 수 있습니다.</p>\n<p>터미널을 열고 <code>npm run hi</code>라고 입력하고 엔터키를 눌러봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run hi\n\n<span class=\"token operator\">></span> our-project@1.0.0 hi\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hi!'</span>\n\nHi<span class=\"token operator\">!</span></code></pre></div>\n<p><code>package.json</code> 파일에 명시해놨던 <code>echo 'Hi!'</code>가 실행되어 콘솔에 <code>Hi!</code>가 출력되는 것을 볼 수 있습니다.</p>\n<p>어떤가요? 정말 쉽지 않나요? 😙</p>\n<h2 id=\"테스트-스크립트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\" aria-label=\"테스트 스크립트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 스크립트</h2>\n<p>실제 자바스크립트에서 프로젝트에서 자주 쓸법한 명령어를 스크립트로 등록하고 실행하보겠습니다.</p>\n<p>개발자들이 가장 많이 수행하는 작업 중에서 테스트 실행을 빼놓을 수 없을 것입니다.\n특히 TDD(Test Driven Development, 테스트 주도 개발)를 하는 분들에게는 필수 스크립트일텐데요.</p>\n<p>간단한 실습을 위해 많이 사용되는 테스트 실행 도구인 Jest를 먼저 프로젝트에 설치하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D jest</code></pre></div>\n<p>그 다음 샘플 테스트 파일을 하나 작성해보겟습니다.</p>\n<div class=\"gatsby-code-title\">test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 is 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>프로젝트 상의 모든 테스트를 실행하려면 <code>node_modules/.bin</code> 디렉토리 안에 있는 <code>jest</code> 커맨드를 실행해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node_modules/.bin/jest\n PASS  ./test.js\n  ✓ <span class=\"token number\">1</span> is <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">0.1</span> s, estimated <span class=\"token number\">1</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p>테스트를 실행할 때 마다 매번 이 긴 경로를 타이핑하려면 힘들겠죠?\n다행히도 스크립트에 커맨드를 등록할 때는 <code>node_modules/.bin</code>를 생략할 수 있습니다. 😌</p>\n<p>그럼 <code>npm set-script</code> 명령어를 이용해서 <code>test</code>라는 스크립트를 추가해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> set-script <span class=\"token builtin class-name\">test</span> <span class=\"token string\">\"jest\"</span></code></pre></div>\n<div class=\"gatsby-code-title\">package.json</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 생략</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"hi\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo 'Hi!'\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 터미널에서 <code>npm run test</code>를 실행하면 위와 동일하게 테스트가 실행됩니다. 🎉</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ our-project <span class=\"token function\">npm</span> run <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token operator\">></span> our-project@1.0.0 <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">></span> jest\n\n PASS  ./test.js\n  ✓ <span class=\"token number\">1</span> is <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">0.12</span> s, estimated <span class=\"token number\">1</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<h2 id=\"복잡한-명령어\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"복잡한 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복잡한 명령어</h2>\n<p>테스트를 실행할 때 <code>--watch</code> 옵션을 사용하여 관찰모드로 실행할 때가 많은데요.\n<code>npm run</code> 명령어로 추가적인 옵션을 넘길 때는 옵션 바로 앞에 <code>--</code>를 붙야줘야 합니다.</p>\n<p>예를 들어, <code>npm run test</code> 스크립트를 실행 할 때 <code>--watch</code> 옵션을 사용하고 싶다면 터미널에 <code>npm run test -- --watch</code>이라고 타이핑해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ our-project <span class=\"token function\">npm</span> run <span class=\"token builtin class-name\">test</span> -- --watch\n\n<span class=\"token operator\">></span> our-project@1.0.0 <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">></span> jest --watch\n\n PASS  ./test.js\n  ✓ <span class=\"token number\">1</span> is <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">0.114</span> s, estimated <span class=\"token number\">1</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites related to changed files.\n\nWatch Usage\n › Press a to run all tests.\n › Press f to run only failed tests.\n › Press p to filter by a filename regex pattern.\n › Press t to filter by a <span class=\"token builtin class-name\">test</span> name regex pattern.\n › Press q to quit <span class=\"token function\">watch</span> mode.\n › Press Enter to trigger a <span class=\"token builtin class-name\">test</span> run.</code></pre></div>\n<p>만약 프로젝트의 많은 개발자들이 관찰모드로 테스트를 한다면 어떨까요?\n그럴 때는 <code>jest</code> 명령어에 <code>--watch</code> 옵션을 붙여서 별도의 스크립트로 등록해주면 됩니다.</p>\n<p>예를 들어, 다음과 같이 <code>test:watch</code> 스크립트를 추가해서 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> set-script test:watch <span class=\"token string\">\"jest --watch\"</span></code></pre></div>\n<div class=\"gatsby-code-title\">package.json</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 생략</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"hi\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo 'Hi!'\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"test:watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest --watch\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"모든-스크립트-확인\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%A0-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%99%95%EC%9D%B8\" aria-label=\"모든 스크립트 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모든 스크립트 확인</h2>\n<p>실제 프로젝트에서 위와 같은 방식으로 스크립트를 계속 추가하다보면 <code>package.json</code> 파일의 <code>scripts</code> 영역이 아래와 같이 점점 늘어나게 됩니다.</p>\n<div class=\"gatsby-code-title\">package.json</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 생략</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve --open\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"test:watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest --watch\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --cache --ext .js,.jsx .\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"lint:fix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --fix --cache --ext .js,.jsx .\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"cy:open\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress open\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"cy:run\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress run\"</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>터미널에서 <code>npm run</code> 커맨드를 스크립트 이름 없이 실행하면 굳이 <code>package.json</code> 파일을 뒤지지 않더라도 프로젝트에서 사용이 가능한 모든 스크립트를 나열해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run\nLifecycle scripts included <span class=\"token keyword\">in</span> our-project@1.0.0:\n  start\n    webpack serve --open\n  <span class=\"token builtin class-name\">test</span>\n    jest\n\navailable via <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> run-script<span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">:</span>\n  build\n    webpack\n  test:watch\n    jest --watch\n  lint\n    eslint --cache --ext .js,.jsx <span class=\"token builtin class-name\">.</span>\n  lint:fix\n    eslint --fix --cache --ext .js,.jsx <span class=\"token builtin class-name\">.</span>\n  cy:open\n    cypress <span class=\"token function\">open</span>\n  cy:run\n    cypress run</code></pre></div>\n<p>예외적으로 <code>start</code>와 <code>test</code> 스크립트의 경우, 워낙 자주 사용되는 스크립트이기 때문에 <code>npm run</code>에서 <code>run</code>을 생략해도 무방합니다.</p>\n<p>즉, 아래 두 커맨드는 동일한 효력을 내며,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run start</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> start</code></pre></div>\n<p>아래 두 커맨드도 마찬가지 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run <span class=\"token builtin class-name\">test</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span></code></pre></div>\n<p>개발자들은 대부분 짧은 명령어를 선호하기 때문에 <code>run</code>을 생략하고 많이 사용하는 것 같습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 자바스크립트 프로젝트에서 빈번하게 사용되는 명령어를 어떻게 스크립트로 등록하고 실행할 수 있는지에 대해서 알아보았습니다.\n사실 협업 프로젝트에서 이러한 스크립트의 적절한 활용은 개발자 개개인의 편의 뿐만 아니라 프로젝트의 전체 생산성에도 영향을 줄 수 있습니다.\n시간을 잠깐 투자하셔서 이 부분에 대해 잘 정리를 해놓으시면 도움이 될 것 같아서 한 번 다루어 보았습니다.</p>\n<p>참고로 <code>npm run</code> 명령어는 엄밀히 얘기하면 <code>npm run-script</code> 명령어의 별칭(alias), 즉 단축 명령어입니다.\n<code>npm run-script</code> 명령어에 대한 좀 더 자세한 내용은 <a href=\"https://docs.npmjs.com/cli/v7/commands/npm-run-script\">공식 npm 문서</a>를 참고 바랍니다.</p>","timeToRead":6,"fields":{"slug":"/js-npm-run-script/","tags":["JavaScript","Node.js","npm","CLI","ESLint","Jest"]},"frontmatter":{"title":"자바스크립트 프로젝트에서 스크립트 활용하기 (npm run)","date":"Oct 9, 2021"}},"next":{"fields":{"slug":"/css-background/"},"frontmatter":{"title":"CSS 배경(background) 관련 속성"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}