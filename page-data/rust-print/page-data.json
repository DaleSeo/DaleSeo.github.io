{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/rust-print/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>Rust를 배우다 보면 화면에 무언가를 출력하기 위해 <code>println!</code> 같은 매크로를 많이 사용하게 됩니다.\n그런데 이 매크로들 뒤에는 <code>Display</code>와 <code>Debug</code>라는 트레잇이 숨어 있고, 이 둘의 차이를 이해하면 Rust의 출력 메커니즘을 더 깊이 있게 다룰 수 있습니다.</p>\n<h2 id=\"출력-매크로\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EB%A0%A5-%EB%A7%A4%ED%81%AC%EB%A1%9C\" aria-label=\"출력 매크로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력 매크로</h2>\n<p>Rust에는 표준 출력 및 에러 출력을 위한 다양한 매크로(macro)가 있습니다.\n아래는 가장 많이 사용하는 출력 관련 매크로들입니다.</p>\n<ul>\n<li><code>println!</code>: 표준 출력(stdout)에 줄바꿈과 함께 문자열을 출력합니다</li>\n<li><code>print!</code>: 줄바꿈 없이 출력합니다</li>\n<li><code>eprintln!</code>: 표준 에러(stderr)에 줄바꿈과 함께 출력합니다</li>\n<li><code>eprint!</code>: 줄바꿈 없이 stderr에 출력합니다</li>\n<li><code>format!</code>: 문자열을 반환만 하고, 실제 출력하지 않습니다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Rust\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, {}!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// stdout에 출력</span>\n    <span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops, something broke\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stderr에 출력</span>\n    <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, {}!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문자열 생성만</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"출력-포멧\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EB%A0%A5-%ED%8F%AC%EB%A9%A7\" aria-label=\"출력 포멧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력 포멧</h2>\n<p>Rust 출력 포멧은 매우 강력합니다.\n<code>{}</code> 안에 다양한 포맷 옵션을 줄 수 있어 정렬, 숫자 진수 출력, 부동소수점 자릿수 지정 등 다양한 출력 포맷을 조절할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">main.rs</div>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"기본 출력: {}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"너비 지정: {:5}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"   42\"</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0으로 채우기: {:05}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"00042\"</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"진수 출력: {:x}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"2a\"</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"정렬: {:>6}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 오른쪽 정렬</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"정렬: {:&lt;6}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 왼쪽 정렬</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"정렬: {:^6}\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 가운데 정렬</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"컴파일-오류\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%98%A4%EB%A5%98\" aria-label=\"컴파일 오류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일 오류</h2>\n<p>기본 자료형이 아닌 <code>struct</code>이나 <code>enum</code>을 출력하려고 하면 다음과 같은 컴파일 오류가 발생하는데요.</p>\n<div class=\"gatsby-code-title\">main.rs</div>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">User</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// ^^^^ `User` cannot be formatted with the default formatter</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이러한 문제가 발생하는 이유는 사용자가 정의한 자료형을 어떻게 출력해야 할지 모르기 때문입니다.</p>\n<h2 id=\"display-트레잇\" style=\"position:relative;\"><a href=\"#display-%ED%8A%B8%EB%A0%88%EC%9E%87\" aria-label=\"display 트레잇 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Display 트레잇</h2>\n<p>Display 트레잇(trait)의 <code>fmt()</code> 함수를 구현하면 자료형을 어떻게 출력할지 알려줄 수 있습니다.</p>\n<div class=\"gatsby-code-title\">main.rs</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fmt<span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">User</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">impl</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Display</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fmt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token macro property\">write!</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ID: {}, 이름: {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ID: <span class=\"token number\">1</span>, 이름: Dale</code></pre></div>\n<p>참고로 <code>Display</code> 트레잇을 구현하면 Rust는 자동으로 <code>ToString</code> 트레잇도 구현해주기 때문에, <code>.to_string()</code> 메서드도 사용할 수 있습니다.</p>\n<h2 id=\"debug-트레잇\" style=\"position:relative;\"><a href=\"#debug-%ED%8A%B8%EB%A0%88%EC%9E%87\" aria-label=\"debug 트레잇 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debug 트레잇</h2>\n<p>매번 <code>Display</code> 트레잇(trait)을 구현하는 것이 번거로울 수도 있습니다.\n만약에 단순히 디버깅 용도로 출력이 필요하다면 대신 <code>Debug</code> 트레잇을 활용할 수 있습니다.</p>\n<p><code>struct</code>이나 <code>enum</code> 위에 <code>#[derive(Debug)]</code>를 붙여주면 자동으로 파생(derive)가 되서 매우 편리합니다.\n그리고 출력 포멧은 <code>{}</code> 대신에 <code>{:?}</code> 또는 <code>{:#?}</code>를 사용해야 합니다.</p>\n<div class=\"gatsby-code-title\">main.rs</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"gatsby-highlight-code-line\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span></span><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">User</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 한 줄 출력</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:#?}\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 예쁘게 출력</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>{}</code> 안에 다양한 포맷 옵션을 줄 수 있어 정렬, 숫자 진수 출력, 부동소수점 자릿수 지정 등 다양한 출력 포맷을 조절할 수 있습니다.</p>\n<h2 id=\"display-vs-debug\" style=\"position:relative;\"><a href=\"#display-vs-debug\" aria-label=\"display vs debug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Display vs. Debug</h2>\n<p>언제 <code>Display</code> 트레잇을 구현하고, 언제 <code>Debug</code> 트레잇을 파생하면 좋을까요?</p>\n<p>사람이 읽기 좋은 형식으로 데이터를 출력하고 싶다면 <code>Display</code> 트레잇을 직접 구현하는 것이 좋습니다.\n반면에 개발자가 디버깅 용도로 데이터를 자세히 들여다보기 위한 출력할 때는 <code>Debug</code> 트레잇을 자동 파생시키는 편이 유리합니다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>목적</th>\n<th>사용 방식</th>\n<th>자동 구현 가능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Display</code></td>\n<td>사용자 친화적 출력</td>\n<td><code>{}</code></td>\n<td>❌ (직접 구현 필요)</td>\n</tr>\n<tr>\n<td><code>Debug</code></td>\n<td>디버깅 용도 출력</td>\n<td><code>{:?}</code>, <code>{:#?}</code></td>\n<td>✅ (<code>#[derive(Debug)]</code>)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>Rust의 출력 관련 매크로와 Display, Debug 트레잇은 단순한 텍스트 출력 그 이상입니다.\n로깅, 에러 핸들링, CLI 유틸리티 등 다양한 곳에서 활용되며, 특히 Rust의 엄격한 타입 시스템과 잘 어우러져 실수 없는 출력을 가능하게 해줍니다.</p>\n<p>앞으로 <code>println!</code>을 사용할 때마다 이 매크로 뒤에 숨어 있는 트레잇과 포맷팅 시스템을 떠올려 보세요.\nRust의 출력을 마스터하면, 여러분의 코드도 더 깔끔하고 명확해질 것입니다.</p>","timeToRead":3,"fields":{"slug":"/rust-print/","tags":["Rust"]},"frontmatter":{"title":"Rust 기초: 출력 매크로와 Display, Debug 트레잇","date":"Jun 15, 2025"}},"next":{"fields":{"slug":"/freezing-overseas-job-market/"},"frontmatter":{"title":"🧊 급격하게 얼어붙고 있는 해외 취업 시장 🥶"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}