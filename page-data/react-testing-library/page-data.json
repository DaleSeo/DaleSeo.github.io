{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/react-testing-library/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-apollo-server-testing/"},"frontmatter":{"title":"GraphQL 서버 테스트 방법 (Apollo Server Testing)"}},"node":{"html":"<p>React Testing Library(RTL)라는 테스팅 라이브러리가 React 개발자들의 입소문을 타고 점점 인기가 올라가고 있습니다.<br>\n이번 포스트에서는 최근 React에서 테스팅 트랜드와 패러다임을 바꾸고 있는 React Testing Library에서 다뤄보도록 하겠습니다.</p>\n<h2 id=\"react-testing-library-소개\" style=\"position:relative;\"><a href=\"#react-testing-library-%EC%86%8C%EA%B0%9C\" aria-label=\"react testing library 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Testing Library 소개</h2>\n<p>React Testing Library는 Behavior Driven Test(행위 주도 테스트) 방법론이 대두 되면서 함께 주목 받기 시작한 테스팅 라이브러리 입니다.<br>\n행위 주도 테스트는 기존에 관행이던 Implementation Driven Test(구현 주도 테스트)의 단점을 보완하기 위한 방법론인데요.</p>\n<p>Implementation Driven Test에서는 주로 애플리케이션이 어떻게 작동하는지에 대해서 초점을 두어 테스트를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>제목<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>예를 들어, 위와 같은 UI를 테스트한다고 했을 때, <code>&#x3C;h2></code>라는 태그가 쓰였고, <code>title</code> 이라는 클래스가 사용되었는지 여부를 테스트합니다.</p>\n<p>반면에, Behavior Driven Test에서는 사용자가 애플리케이션을 이용하는 관점에서 사용자의 실제 경험 위주로 테스트를 작성합니다.<br>\n사용자가 위 UI를 사용하면서 과연 <code>&#x3C;h2></code> 태그를 사용하고, <code>title</code> 이라는 클래스가 사용되었는지 관심이나 있을까요?<br>\n사용자 입장에서는 단지 브라우저 화면에 <code>제목</code> 이라는 텍스트가 보일 뿐입니다.<br>\n따라서, 사용자에게 어떤 컨텐츠가 현재 보이고, 사용자가 어떤 이벤트를 발생시켰을 때, 그에 따라 화면에 변화가 일어나는지를 테스트합니다.</p>\n<p>자 여기서, 만약에 추후 어떤 이유로 인해서 <code>&#x3C;h2></code> 태그가 <code>&#x3C;h3></code> 태그로 바뀌었을 때는 어떤 일이 날까요?<br>\nImplementation Driven Test 방법론으로 작성된 테스트는 깨지지만, Behavior Driven Test 방밥론으로 작성된 테스트는 깨지지 않을 것입니다.<br>\n애플리케이션 입장에서 봤을 때는 구현의 디테일이 바뀐 것이지만, 사용자 입장에서는 <code>제목</code> 이라는 텍스트가 화면있다는 사살은 변함이 없기 때문입니다.</p>\n<h2 id=\"enzyme-vs-react-testing-library\" style=\"position:relative;\"><a href=\"#enzyme-vs-react-testing-library\" aria-label=\"enzyme vs react testing library permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enzyme vs React Testing Library</h2>\n<p>RTL이 등장하기 전에는 Airbnb에서 만든 Enzyme이라는 테스팅 라이브러리가 많이 사용되고 있어서, 두 라이브러리를 잠깐 비교해보도록 하겠습니다.<br>\nEnzyme은 위에서 설명드린 Implementation Driven Test 방법론을 따르는 테스트를 작성하기에 적합합니다.<br>\n왜냐하면 Enzyme은 실제 브라우저 DOM이 아닌, React가 만들어내는 가상 DOM을 기준으로 테스트를 작성해야 합니다.<br>\n따라서 테스트 대상 React 컴포넌트에 어떤 prop이 넘어가고, 현재 state이 어떻게 되는지에 대해서 검증하기 용이합니다.</p>\n<p>반면에, React Testing Library는 Behavior Driven Test 방밥론을 따르는 테스트를 작성하는데 적합합니다.<br>\n왜냐하면 React Testing Library는 <code>jsdom</code>이라는 라이브러를 통해 실제 브라우저 DOM을 기준으로 테스트를 작성하게 됩니다.<br>\n따라서 어떤 React 컴포넌트를 사용하는지는 의미가 없으며, 결국 사용자 브라우저에서 랜더링하는 실제 HTML 마크업의 모습이 어떤지에 대해서 테스트하기 용이합니다.</p>\n<p>개인적으로 두 가지 테스팅 라이브러리 다 써보았는데, 둘 다 잘하는 영역이 있기 때문에 하나가 다른 것보다 항상 났다라고는 말하기 어려운 것 같습니다.<br>\n단지, 위에서 설명드린 것 처럼 테스트 패러다임 자체가 Behavior Driven Test 쪽으로 흘러가는 추세이기 때문에,<br>\n앞으로 점점 신규 프로젝트에서는 Enzyme이라는 보다는 React Testing Library가 많이 선택될 확률이 높을 것입니다.</p>\n<h2 id=\"react-testing-library-설치\" style=\"position:relative;\"><a href=\"#react-testing-library-%EC%84%A4%EC%B9%98\" aria-label=\"react testing library 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Testing Library 설치</h2>\n<p>React에서 가장 많이 쓰이는 테스팅 프레임워크인 Jest를 기반으로 React Testing Library 설치하도록 하겠습니다.</p>\n<p>먼저, 자신의 React 프로젝트에 아직 Jest가 설치하지 않았다면 먼저 <code>jest</code> 설치합니다.<br>\n테스팅 라이브러리이기 때문에 개발 의존성(<code>-D</code> 옵션)으로 설치합니다.<br>\n(<code>create-react-app</code>으로 생성된 프로젝트는 기본적으로 <code>jest</code>가 내장되어 있으니 스킵바랍니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm i <span class=\"token operator\">-</span><span class=\"token constant\">D</span> jest</code></pre></div>\n<blockquote>\n<p>Jest에 대한 자세한 사용법에 대해서는 별도로 <a href=\"/jest-basic/\">포스트</a>를 올려놓았니 참고 바랍니다.</p>\n</blockquote>\n<p>다음, React Testing Library를 설치합니다. 패키지 이름은 <code>@testing-library/react</code> 입니다.<br>\n간혹 아직 업데이트가 안 된 튜토리얼의 경우, 패키지 이름이 <code>react-testing-library</code> 안내되고 있지만, 반드시 <code>@testing-library/react</code>를 설치해야합니다.<br>\n(패키지 이름이 바꿘 사연은 React Testing Library의 저자인 <a href=\"https://twitter.com/kentcdodds/status/1134164755910778880\">Kent C. Dodds의 트위트</a>를 참고바랍니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm i <span class=\"token operator\">-</span><span class=\"token constant\">D</span> @testing<span class=\"token operator\">-</span>library<span class=\"token operator\">/</span>react</code></pre></div>\n<p>마지막으로 Jest의 DOM에 특화된 matcher 애드온인 <code>jest-dom</code>을 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm i <span class=\"token operator\">-</span><span class=\"token constant\">D</span> @testing<span class=\"token operator\">-</span>library<span class=\"token operator\">/</span>jest<span class=\"token operator\">-</span>dom</code></pre></div>\n<p><code>@testing-library/jest-dom</code>에서 제공하는 custom matcher 목록은 아래 링크를 참조바랍니다.</p>\n<ul>\n<li><a href=\"https://github.com/testing-library/jest-dom#table-of-contents\">https://github.com/testing-library/jest-dom#table-of-contents</a></li>\n</ul>\n<h2 id=\"react-testing-library-설정\" style=\"position:relative;\"><a href=\"#react-testing-library-%EC%84%A4%EC%A0%95\" aria-label=\"react testing library 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Testing Library 설정</h2>\n<p>React Testing Library를 사용하려면 두 가지 설정이 필요합니다.<br>\n첫 째는 각 테스트가 DOM에 렌더링해놓은 내용들을 테스트가 끝날 때 다음 테스트를 위해서 지워주는 것이고, 두 번째는 <code>jest-dom</code>가 제공하는 matcher를 Jest 테스트 러너에게 인식시키는 것입니다.</p>\n<p>아래 두 줄의 코드를 자신의 React 프로젝트의 테스팅 설정 파일에 추가해주면 됩니다.<br>\n예를 들어 <code>create-react-app</code>으로 생성된 프로젝트라면 <code>src/setupTests.js</code> 파일에 추가해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"@testing-library/react/cleanup-after-each\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"@testing-library/jest-dom/extend-expect\"</span></code></pre></div>\n<h2 id=\"react-testing-library-주요-api\" style=\"position:relative;\"><a href=\"#react-testing-library-%EC%A3%BC%EC%9A%94-api\" aria-label=\"react testing library 주요 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Testing Library 주요 API</h2>\n<p>React Testing Library는 매우 심플하지만 강력한 API를 가지고 있습니다.<br>\n크게 DOM에 컴포넌트를 랜더링 해주는 <code>render()</code> 함수와, 특정 이벤트를 발생시켜주는 <code>fireEvent</code> 객체, 그리고 DOM에서 특정 영역을 선택하기 위한 다양한 쿼리 함수들이 존재합니다.</p>\n<p><code>render()</code> 함수는 <code>@testing-library/react</code> 모듈로 부터 바로 임포트가 가능하며, 인자로 랜더링할 React 컴포넌트를 넘김니다.<br>\n그리고 <code>render()</code> 함수는 React Testing Library 제공하는 모든 쿼리 함수와 기타 유틸리티 함수 담고 있는 객체를 리턴합니다.<br>\n따라서 다음과 같이 자바스크립트의 객체 Destructuring 문법으로 <code>render()</code> 함수가 리턴한 객체로 부터 원하는 쿼리 함수만 얻어올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> fireEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText<span class=\"token punctuation\">,</span> getByLabelText<span class=\"token punctuation\">,</span> getByPlaceholderText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>YourComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>쿼리 함수는 <code>getByXxx()</code> 외에도 <code>queryByXxx()</code>와 <code>findByXxx()</code> 등 다양하게 존재하는데 자세한 내용은 아래 문서를 참고바랍니다.</p>\n<ul>\n<li><a href=\"https://testing-library.com/docs/dom-testing-library/cheatsheet\">https://testing-library.com/docs/dom-testing-library/cheatsheet</a></li>\n</ul>\n<p><code>fireEvent</code> 객체는 쿼리 함수로 선택된 영역을 대상으로 특정 이벤트를 발생시키기 위한 이벤트 함수들을 담고 있는데, 아래 나오는 예제를 통해 어떻게 사용하는지 좀 더 구체적으로 살펴보겠습니다.</p>\n<h2 id=\"정적-컴포넌트-테스팅\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8C%85\" aria-label=\"정적 컴포넌트 테스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 컴포넌트 테스팅</h2>\n<p>자, 이제 본격적으로 React Testing Library를 사용해서 테스트를 작성해보도록 하겠습니다.<br>\n아래 코드는 매우 심플한 페이지를 찾을 수 없음 페이지입니다. 내부 상태가 없고 단순히 고정된 텍스트와 이미지로만 구성되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> path <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Page Not Found<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>해당 <span class=\"token function\">페이지</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>를 찾을 수 없습니다<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>img\n        alt<span class=\"token operator\">=</span><span class=\"token string\">\"404\"</span>\n        src<span class=\"token operator\">=</span><span class=\"token string\">\"https://media.giphy.com/media/14uQ3cOFteDaU/giphy.gif\"</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 헤더가 랜더링되고 있는지를 검증하는 테스트를 작성해보겠습니다.</p>\n<p>일단 테스트 파일에 React를 임포트 후에, <code>@testing-library/react</code> 모듈로 부터 <code>render</code> 함수를 임포트합니다.<br>\n그리고 테스트 대상인 <code>&#x3C;NotFound /></code> 컴포넌트도 임포트합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span>\n<span class=\"token keyword\">import</span> NotFound <span class=\"token keyword\">from</span> <span class=\"token string\">\"./NotFound\"</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;NotFound />\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders header\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>NotFound path<span class=\"token operator\">=</span><span class=\"token string\">\"/abc\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Page Not Found\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음, <code>&#x3C;NotFound /></code> 컴포넌트를 <code>render</code> 함수의 인자로 넘긴 후에, 리턴 객체로 부터 <code>getByText()</code>라는 함수를 얻습니다.<br>\n그리고, <code>getByText()</code>에 화면에서 검색할 텍스트인 <code>\"Page Not Found\"</code>를 인자로 넘긴 후에, 해당 텍스트를 담고 있는 <code>&#x3C;h2/></code> 엘리먼트를 얻습니다.<br>\n마지막으로 <code>jest-dom</code>의 <code>toBeInTheDocument()</code> matcher 함수를 이용해서 해당 <code>&#x3C;h2/></code> 엘리먼트가 화면에 존재하는 검증합니다.</p>\n<p>동일한 방식으로 본문이 제대로 랜더링되고 있는지 검증해볼 수 있습니다.<br>\n<code>getByText()</code> 쿼리 함수는 문자열 뿐만 아니라 정규식도 인자로 받을 수 있습니다.<br>\n<code>jest-dom</code>의 <code>toHaveTextContent()</code> matcher 함수를 이용해서 <code>&#x3C;p/></code> 엘리먼트 속의 텍스트가 예상과 일치하는지 검증합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders paragraph\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>NotFound path<span class=\"token operator\">=</span><span class=\"token string\">\"/abc\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> paragraph <span class=\"token operator\">=</span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^해당 페이지/</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveTextContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"해당 페이지(/abc)를 찾을 수 없습니다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이미지 같은 경우, <code>&#x3C;img/></code> 태그는 내부에 텍스트가 없기 때문에, 대신 <code>alt</code> 속성값을 이용하는 <code>getAltText()</code> 쿼리 함수를 사용합니다.<br>\n<code>jest-dom</code>의 <code>toHaveAttribute()</code> matcher 함수를 이용해서 <code>&#x3C;img/></code> 엘리먼트의 <code>src</code> 속성값이 정확한지 검증합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renders image\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByAltText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>NotFound path<span class=\"token operator\">=</span><span class=\"token string\">\"/abc\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token function\">getByAltText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"404\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveAttribute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"https://media.giphy.com/media/14uQ3cOFteDaU/giphy.gif\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"동적-컴포넌트-테스팅\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8C%85\" aria-label=\"동적 컴포넌트 테스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 컴포넌트 테스팅</h2>\n<p>이번에는 내부 상태에 따라 UI에 변화가 생길 수 있는 좀 더 복잡한 컴포넌트에 대한 테스트를 작성해보겠습니다.<br>\n아래 코드는 이메일과 비밀번호 입력란과 버튼으로 구성된 간단한 로그인 폼입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">LoginForm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSubmit <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>email<span class=\"token punctuation\">,</span> setEmail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n          이메일\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n            placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"user@test.com\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>email<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n          비밀번호\n          <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>email <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>password<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>로그인<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 비활성 되어 있던 로그인 버튼이 이메일과 비밀번호가 입력된 후에 활성화되는지에 대한 테스트를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> fireEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span>\n<span class=\"token keyword\">import</span> LoginForm <span class=\"token keyword\">from</span> <span class=\"token string\">\"./LoginForm\"</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;LoginForm />\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enables button when both email and password are entered\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText<span class=\"token punctuation\">,</span> getByLabelText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>LoginForm onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로그인\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> email <span class=\"token operator\">=</span> <span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이메일\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> <span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"비밀번호\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeDisabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test.com\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"Test1234\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>로그인 버튼의 경우에는 <code>getByText()</code> 쿼리 함수를 통해 선택하고, 이메일과 비밀번호 입력칸은 <code>getByLabelText()</code> 쿼리 함수로 선택하였습니다.<br>\n그리고 <code>jest-dom</code>의 <code>toBeDisabled()</code>와 <code>toBeEnabled()</code> matcher 함수를 통해서 로그인 버튼의 활성화 여부를 이벤트 발생 전후로 검증합니다.<br>\n두 개의 입력칸에 <code>change</code> 이벤트를 발생시키기 위해서 <code>fireEvent.change()</code> 함수를 사용하였습니다.</p>\n<p>마지막으로 로그인 버튼을 클릭하였을 때, prop으로 넘긴 <code>onSubmit</code>라는 함수가 호출되는지 여부를 검증합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"submits form when buttion is clicked\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> obSubmit <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText<span class=\"token punctuation\">,</span> getByLabelText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>LoginForm onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>obSubmit<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"로그인\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> email <span class=\"token operator\">=</span> <span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이메일\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> <span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"비밀번호\"</span><span class=\"token punctuation\">)</span>\n\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test.com\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"Test1234\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>obSubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이번에는 로그인 버튼에 <code>click</code> 이벤트를 발생시키기 위해서 <code>fireEvent.click()</code> 함수를 사용하였습니다.</p>\n<blockquote>\n<p><code>jest.fn()</code>이 생소한 분들은 <a href=\"http://localhost:4000/jest-fn-spy-on/\">Jest Mock에 대한 포스트</a>를 참고바랍니다.</p>\n</blockquote>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 React Testing Library를 이용해서 React 컴포넌트에 대한 테스트 코드를 작성하는 방법에 대해서 알아보았습니다.<br>\nJest 테스팅 프레임워크에 대한 선수 지식이 없으시거나, React 코드에 대한 테스팅 경험이 없으신 분들을 따라오시기 어려우셨을 수도 있을 것 같습니다.<br>\n전체 코드는 아래 올려두었으니 코드를 처음부터 끝까지 한번 훑어보시는 것도 도움이 되실 것 같습니다.</p>\n<iframe src=\"https://codesandbox.io/embed/react-testing-library-k9vjf?fontsize=14\" title=\"react-testing-library\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>","timeToRead":8,"fields":{"slug":"/react-testing-library/","tags":["JavaScript","자바스크립트","React","리액트","ReactTestingLibrary","RTL"]},"frontmatter":{"title":"React Testing Library 사용법","date":"Jun 29, 2019"}},"next":{"fields":{"slug":"/react-router-basic/"},"frontmatter":{"title":"React Router로 라우팅 하기"}}}}}