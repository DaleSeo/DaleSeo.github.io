{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/python-property/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/python-decorators/"},"frontmatter":{"title":"[파이썬] 데코레이터 기본 사용법"}},"node":{"html":"<p>파이썬에 내장되어 있는 <code>property()</code> 함수와 <code>@property</code> 데코레이터에 대해서 알아보겠습니다.</p>\n<h2 id=\"필드명\" style=\"position:relative;\"><a href=\"#%ED%95%84%EB%93%9C%EB%AA%85\" aria-label=\"필드명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필드명</h2>\n<p>사람의 이름, 성, 나이 데이터를 담기 위한 간단한 클래스를 하나 작성해보겠습니다.\n아래 <code>Person</code> 클래스는 이름 <code>first_name</code>, <code>last_name</code>, <code>age</code> 이렇게 3개의 필드로 이루어져 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> first_name\n        self<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> last_name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</code></pre></div>\n<p><code>Person</code> 클래스의 인스턴스를 생성 후에, 현재 필드 값을 읽거나 새로운 필드 값 쓰는 것은 매우 자유롭습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">20</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">21</span></code></pre></div>\n<p>이렇게 필드명을 사용해서 객체의 내부 데이터에 접근하는 것은 편리하지만, 해당 데이터는 외부로 부터 무방비 상태에 놓이게 됩니다.</p>\n<h2 id=\"gettersetter\" style=\"position:relative;\"><a href=\"#gettersetter\" aria-label=\"gettersetter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getter/Setter</h2>\n<p>클래스 인스턴스의 내부 데이터를 보호하기 위해서 데이터의 접근용 메서드를 작성하는 것은 객체 지향 프로그래밍에서 흔히 볼 수 있는 패턴입니다.\n일반적으로 데이터를 읽어주는 메서드를 getter(게터), 데이터를 변경해주는 메서드를 setter(세터)라고 합니다.</p>\n<p><code>Person</code> 클래스에 <code>age</code> 필드에 대한 <code>get_age()</code>와 <code>set_age()</code> 메서드를 추가해보겠습니다.\n나이는 음수가 될 수 없으므로 <code>set_age()</code> 메서드에 음수가 인자로 넘어오면 예외가 발생하도록 하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> first_name\n        self<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> last_name\n        self<span class=\"token punctuation\">.</span>set_age<span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> age <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid age\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_age <span class=\"token operator\">=</span> age</code></pre></div>\n<p>여기서 놓치기 쉬운 부분은 <code>_</code>로 시작하는 이름을 가진 변수는 외부에서 직접 접근하지 않는 파이썬의 관행에 따라, 인스턴스 변수명을 <code>age</code> 대신에 <code>_age</code>로 변경하였다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>get_age<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">20</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>set_age<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nValueError<span class=\"token punctuation\">:</span> Invalid age\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>set_age<span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>get_age<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>get_age<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">21</span></code></pre></div>\n<p>이제 <code>Person</code> 클래스의 인스턴스에 저장되어 있는 나이 데이터에 접근하거나 변경하려면 메서드를 이용해야 합니다.</p>\n<p>getter/setter 메서드를 통해서 객체의 내부 데이터에 대한 접근을 좀 더 통제할 수 있게되었지만 기존에 필드명을 바로 사용할 때 보다는 코드가 조금 지저분해졌습니다.\n뿐만 아니라, <code>Person</code> 클래스의 프로그래밍 인터페이스가 변경됨에 따라 하위 호환성도 깨지게 된다는 큰 단점이 있습니다.</p>\n<h2 id=\"property-함수\" style=\"position:relative;\"><a href=\"#property-%ED%95%A8%EC%88%98\" aria-label=\"property 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>property() 함수</h2>\n<p>파이썬의 내장 함수인 <code>property()</code>를 사용하면 마치 필드명을 사용하는 것처럼 깔끔하게 getter/setter 메서드가 호출되게 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> first_name\n        self<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> last_name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> age <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid age\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_age <span class=\"token operator\">=</span> age\n\n    age <span class=\"token operator\">=</span> <span class=\"token builtin\">property</span><span class=\"token punctuation\">(</span>get_age<span class=\"token punctuation\">,</span> set_age<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>property()</code> 함수의 첫 번째 인자로 getter 메서드를 두 번째 인자로 setter 메서드를 넘겨주면 <code>age</code>라는 필드명을 이용해서 다시 나이 데이터에 접근할 수 있게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">20</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\nValueError<span class=\"token punctuation\">:</span> Invalid age\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">21</span></code></pre></div>\n<p>클래스를 사용하는 측면에서는 일반 필드에 접근하는 것처럼 보이지만 내부적으로 getter와 setter 메서드가 호출이 됩니다.\n따라서 나이를 음수로 변경하려고 하면 <code>set_age()</code> 메서드를 직접 호출하는 것과 동일하게 예외가 발생하는 것입니다.</p>\n<h2 id=\"property-데코레이터\" style=\"position:relative;\"><a href=\"#property-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"property 데코레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@property 데코레이터</h2>\n<p>파이썬의 내장 데코레이터인 <code>@property</code>를 사용하면 위와 동일하게 작동하는 코드를 좀 더 간결하고 읽기 편하게 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> first_name\n        self<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> last_name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_age\n\n    <span class=\"token decorator annotation punctuation\">@age<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> age <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid age\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>_age <span class=\"token operator\">=</span> age</code></pre></div>\n<p>기존의 getter 메서드 위에 <code>@property</code> 데코레이터를 선언하고, 메서드 이름으로부터 <code>get_</code>을 삭제합니다.\nsetter 메서드의 경우에는 <code>@&#x3C;필드명>.setter</code> 데코레이터를 선언하고, 메서드 이름으로부터 <code>set_</code>을 삭제합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">20</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\nValueError<span class=\"token punctuation\">:</span> Invalid age\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">21</span></code></pre></div>\n<p><code>property</code> 함수나 <code>@property</code> 데코레이터를 사용했을 때 가장 큰 이점은 <em>외부에 티 내지 않고</em> 내부적으로 클래스의 필드 접근 방법을 바꿀 수 있다는 것입니다.\n<code>Person</code> 클래스를 사용하는 관점에서 봤을 때 나이 데이터는 항상 <code>age</code>라는 필드명으로 접근하고 변경할 수 있다는 사실은 변하지 않기 때문입니다.</p>\n<h2 id=\"property-데코레이터-활용\" style=\"position:relative;\"><a href=\"#property-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%99%9C%EC%9A%A9\" aria-label=\"property 데코레이터 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@property 데코레이터 활용</h2>\n<p>클래스를 작성하다보면 다른 필드로 부터 값이 유추되는 읽기 전용 필드가 필요할 때가 있습니다.\n예를 들어, <code>Person</code> 클래스에서 전체 이름을 얻고 싶다면 다음과 같이 <code>@property</code> 데코레이터를 이용해서 <code>full_name</code> 필드를 추가해줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> first_name\n        self<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> last_name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">full_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>last_name</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span>full_name\n<span class=\"token string\">'John Doe'</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬에 내장되어 있는 <code>property()</code> 함수와 <code>@property</code> 데코레이터에 대해서 살펴보았습니다.\n본 포스팅에서는 다루지는 않았지만 이 방법을 통해 setter와 getter 메서드 뿐만 아니라 deleter 메서드도 함께 선언할 수 있습니다.\n<code>property()</code> 함수와 <code>@property</code> 데코레이터에 대한 좀 더 자세한 내용은 <a href=\"https://docs.python.org/3/library/functions.html#property\">파이썬 공식 문서</a>를 참고 바랍니다.</p>","timeToRead":4,"fields":{"slug":"/python-property/","tags":["Python","파이썬","property"]},"frontmatter":{"title":"[파이썬] property 사용법 (함수/데코레이터)","date":"May 17, 2020"}},"next":{"fields":{"slug":"/material-ui-papers-cards/"},"frontmatter":{"title":"Material UI의 Paper, Card 컴포넌트"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}