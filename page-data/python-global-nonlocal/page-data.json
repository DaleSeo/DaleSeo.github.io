{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-global-nonlocal/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-all/"},"frontmatter":{"title":"파이썬의 내장 함수: all()"}},"node":{"html":"<p>파이썬에는 <code>global</code>과 <code>nonlocal</code>이라는 아주 많이 쓰이지는 않지만 종종 만나게 되는 재미있는 키워드가 있습니다.\n이 두 키워드를 한글로 해석하면 각각 ‘전역’, ‘비지역’으로 비슷한 의미인 것 같아서 많은 분들이 햇갈려하시는데요.</p>\n<p>이번 포스팅에서는 이 두 개의 키워드가 왜 필요하고 어떤 경우에 사용해야되는지에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"변수의-범위scope\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EB%B2%94%EC%9C%84scope\" aria-label=\"변수의 범위scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수의 범위(scope)</h2>\n<p><code>global</code>과 <code>nonlocal</code> 키워드에 대해서 이해하려면 먼저 변수의 범위(scope)에 대한 개념을 간단히 짚고 넘어가야할 것 같습니다.</p>\n<p>비단 파이썬 뿐만 아니라 대부분의 프로그래밍 언어에서 변수의 범위라는 것은 해당 변수를 어디에서 선언하느냐에 따라서 결정이 됩니다.\n아주 단순하게 두 구역으로 나누면 함수 외부를 전역(global/module) 범위라고 하고, 함수 내부를 지역(local/function) 범위라고 합니다.\n또한 함수를 중첩했을 때 외부 함수와 내부 함수의 사이에서 생겨나는 비지역(nonlocal/enclosing) 범위라는 것도 있습니다.</p>\n<p>이 세 구역의 범위를 각 함수의 입장에서 간단하게 주석으로 나타내보면 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># outer(), inner() 함수 입장에서 전역(global) 범위</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># outer() 함수 입장에서 지역(local) 범위</span>\n    <span class=\"token comment\"># inner() 함수 입장에서 비지역(nonlocal) 범위</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># inner 함수 입장에서 지역(local) 범위</span></code></pre></div>\n<p>(파이썬에서는 추가적으로 내장(built-in) 범위라는 것도 있지만 <code>global</code>과 <code>nonlocal</code> 키워드를 이해햐는데 크게 도움이 되지 않으므로 다루지 않겠습니다.)</p>\n<p>같은 범위 내에서는 자유롭게 변수에 접근이 가능하지만 다른 범위에서 선언된 변수에 접근할 때는 정해진 제약을 따르게 됩니다.\n기본적으로 바깥 쪽 범위 내에서 선언된 변수를 안 쪽 범위에서는 접근할 수 있지만, 반대로 안 쪽 범위 내에서 선언된 변수를 바깥 쪽 범위에서 접근하는 것은 불가능합니다.\n예를 들어, <code>outer()</code> 함수 밖에서 선언한 전역 변수는 <code>outer()</code> 함수 내부와 <code>inner()</code> 함수 내부에서 접근이 가능합니다.\n하지만 <code>outer()</code> 함수 안에서 안에서는 선언한 <code>outer()</code> 함수 외부에서는 접근할 수 없으며, <code>outer()</code> 함수와 <code>inner()</code> 함수 안에서는 접근 가능이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">global_var <span class=\"token operator\">=</span> <span class=\"token string\">\"전역 변수\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    nonlocal_var <span class=\"token operator\">=</span> <span class=\"token string\">\"비전역 변수\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>global_var<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 가능</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nonlocal_var<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 가능</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        local_var <span class=\"token operator\">=</span> <span class=\"token string\">\"지역 변수\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>global_var<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 가능</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nonlocal_var<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 가능</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>local_var<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 가능</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>local_var<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 불가능 (NameError: name 'local_var' is not defined)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nonlocal_var<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 불가능 (NameError: name 'nonlocal_var' is not defined)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>local_var<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 불가능 (NameError: name 'local_var' is not defined)</span></code></pre></div>\n<p>변수의 범위의 다른 중요한 특성은 서로 다른 범위에서는 변수 이름 충돌이 발생하지 않으며 안 쪽 범위에서 바깥 쪽 범위에서 선언된 변수와 똑같은 이름의 변수를 생성할 수 있다는 것입니다.\n예를 들어, 아래에 선언된 3개의 <code>var</code> 변수는 이름만 같을 뿐 서로 다른 값을 저장할 수 있는 엄연히 다른 변수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">var <span class=\"token operator\">=</span> <span class=\"token string\">\"지역 변수\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    var <span class=\"token operator\">=</span> <span class=\"token string\">\"비지역 변수\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        var <span class=\"token operator\">=</span> <span class=\"token string\">\"지역 변수\"</span></code></pre></div>\n<p>이러한 현상을 소위 variable shadowing이라고 부르기도 하는데요.\n코드 가독성을 해치기 때문에 일반적으로 피해야하는 코딩 관행으로 여겨지고 있지만 지금부터 설명드릴 <code>global</code>과 <code>nonlocal</code> 키워드가 왜 필요한지 이해하는데 중요한 개념입니다.</p>\n<h2 id=\"global-키워드\" style=\"position:relative;\"><a href=\"#global-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"global 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>global 키워드</h2>\n<p>아래 코드를 실행하면 무엇이 출력이 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">num <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 전역 변수</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">change_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></span>\nchange_num<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>0</code>이 두 번 연속으로 출력이 될 것입니다.\n<code>num</code>는 전역 변수이기 함수 안에서 접근하든 밖에서 접근하든 동일한 값을 담고 있습니다.</p>\n<p>그러면 아래와 같이 <code>num</code>를 함수 안에서 갱신하면 무엇이 출력이 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">change_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">    num <span class=\"token operator\">=</span> <span class=\"token number\">100</span></span>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\nchange_num<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<p>많은 분들이 <code>100</code>이 두 번 연속으로 출력될 것이라고 생각하시지만, 실제로 실행을 해보면 <code>100</code>과 <code>0</code>이 출력이 됩니다.\n위에서 설명드린 소위 variable shadowing 현상 때문에 함수 내부에 있는 <code>num</code>이라는 지역 변수는 함수 외부에 있는 <code>num</code>이라는 전역 변수와 엄연히 다른 변수입니다.</p>\n<p>그러면 이와 같이 동일한 이름의 지역 변수를 생성하지 않고, 전역 변수의 값을 함수 내부에서 변경하고 싶다면 어떻게 해야할까요❓\n네, 이럴 때 사용하는 것이 <code>global</code> 키워드입니다❗</p>\n<p>함수 안에서 변수 앞에 <code>global</code> 키워드를 붙여주면 해당 변수는 새로운 지역 변수가 되지 않고 함수 밖에서 이미 선언된 전역 변수를 가리키게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">chnage_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">global</span> num</span>    num <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\nchnage_num<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드를 실행하면 처음에 예상했던 데로 <code>100</code>이 두 번 연속으로 출력되는 것을 불 수 있습니다.</p>\n<h2 id=\"nonlocal-키워드\" style=\"position:relative;\"><a href=\"#nonlocal-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"nonlocal 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nonlocal 키워드</h2>\n<p><code>nonlocal</code> 키워드도 <code>global</code> 키워드와 같이 동일한 이름의 새로운 변수가 생성되는 것을 방지하기 위해서 사용됩니다.\n이 두 키워드의 차이점은 <code>global</code> 키워드는 <strong>일반 함수</strong> 내에서 <strong>전역(global/module) 변수</strong>를 대상으로 사용하는 반면에 <code>nonlocal</code> 키워드는 <strong>중첩 함수</strong> 내에서 <strong>비지역(nonlocal/closing) 변수</strong>를 대상으로 사용한다는 것입니다.</p>\n<p>글로만 설명하면 이해가 어려울 수 있으니 예제 코드를 한번 같이 볼까요?</p>\n<p>아래 두 개의 함수는 중첩이 되어 있습니다.\n여기서 <code>num</code> 변수는 <code>print_nums()</code> 함수의 안 쪽, <code>change_num()</code> 함수의 바깥 쪽에서 선언이 되어 있는데요.\n따라서 이 변수는 <code>print_nums()</code> 함수 입장에서 보면 지역 변수이고, <code>change_num()</code> 함수 입장에서 보면 비지역 변수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_nums</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 비지역 변수</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">change_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></span>\n    change_num<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\nprint_nums<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 코드를 실행해보면 <code>0</code>이 연속으로 두 번 출력되는데요.\n위에서 설명드린 변수 범위의 특징에 따라서 <code>print_nums()</code> 함수에서 선언된 <code>num</code> 변수를 <code>change_num()</code> 함수 안에서 그대로 접근하기 때문입니다.</p>\n<p>이 번에는 <code>change_num()</code> 함수 내에서 <code>num</code> 변수의 값을 변경해보았는데요.\n무엇이 출력될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_nums</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">change_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">        num <span class=\"token operator\">=</span> <span class=\"token number\">100</span></span>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n    change_num<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\nprint_nums<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 번에는 <code>100</code>과 <code>0</code>이 출력이 됩니다.\n이는 variable shadowing 현상으로 인해서 <code>change_num()</code> 함수 안에서 <code>num</code>이라는 새로운 지역 변수가 생성되었기 때문입니다.</p>\n<p>만약에 <code>change_num()</code> 함수 바깥에서 선언된 <code>num</code>이라는 비지역 변수의 값을 <code>change_num()</code> 함수 안에서 갱신하고 싶은 경우에는 어떻게 해야할까요❓\n<code>num</code> 변수 앞에 <code>nonlocal</code> 키워드만 붙여주면 됩니다❗</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_nums</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">change_num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">nonlocal</span> num</span>        num <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n    change_num<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\nprint_nums<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>변수 앞에 <code>nonlocal</code> 키워드를 붙여주면 해당 변수는 새로운 지역 변수가 되지 않고 함수 밖에서 이미 선언된 비전역 변수를 가리키게 됩니다.</p>\n<p>위 코드를 실행하면 처음에 의도했던 데로 <code>100</code>이 두 번 연속으로 출력되는 것을 불 수 있습니다.</p>\n<h2 id=\"실전-예제\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%84-%EC%98%88%EC%A0%9C\" aria-label=\"실전 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실전 예제</h2>\n<p><code>global</code> 키워드나 <code>nonlocal</code> 키워드를 사용하지 않아서 실제로 파이썬으로 코딩할 때 겪을 수 있는 대표적인 문제에 대해서 다루면 좋을 것 같습니다.</p>\n<p>아래 <code>counter()</code> 함수는 <code>cnt</code> 변수 값을 변경하기 위해서 내부에 선언된 <code>_increment()</code> 함수를 반환하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_increment</span><span class=\"token punctuation\">(</span>step <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cnt <span class=\"token operator\">+=</span> step <span class=\"token comment\"># 오류 발생</span>\n        <span class=\"token keyword\">return</span> cnt\n\n    <span class=\"token keyword\">return</span> _increment\n\ncount_up <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count_up<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count_up<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count_up<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>얼핏보면 이 코드는 정상적으로 동작할 것 같지만 실행을 해보면 다음과 같은 오류가 발생을 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">UnboundLocalError                         Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>ipython-input-14-ee29d3b8aa1<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n      <span class=\"token number\">9</span>\n     <span class=\"token number\">10</span> count_up <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n---<span class=\"token operator\">></span> <span class=\"token number\">11</span> print<span class=\"token punctuation\">(</span>count_up<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n     <span class=\"token number\">12</span> print<span class=\"token punctuation\">(</span>count_up<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">))</span>\n     <span class=\"token number\">13</span> print<span class=\"token punctuation\">(</span>count_up<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">))</span>\n\n<span class=\"token operator\">&lt;</span>ipython-input-14-ee29d3b8aa1<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span> <span class=\"token keyword\">in</span> _increment<span class=\"token punctuation\">(</span>inc<span class=\"token punctuation\">)</span>\n      <span class=\"token number\">3</span>\n      <span class=\"token number\">4</span>     def _increment<span class=\"token punctuation\">(</span>inc <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>:\n----<span class=\"token operator\">></span> <span class=\"token number\">5</span>         cnt <span class=\"token operator\">+=</span> inc\n      <span class=\"token number\">6</span>         <span class=\"token builtin class-name\">return</span> cnt\n      <span class=\"token number\">7</span>\n\nUnboundLocalError: <span class=\"token builtin class-name\">local</span> variable <span class=\"token string\">'cnt'</span> referenced before assignment</code></pre></div>\n<p>왜 그럴까요? <code>cnt</code> 변수는 <code>_increment()</code> 함수 입장에서 봤을 때 바깥에서 선언된 비지역(nonlocal) 변수입니다.\n하지만 <code>cnt</code> 변수의 값을 변경하려는 순간 함수 내부에서는 같은 <code>cnt</code> 이름을 가진 지역(local) 변수가 새롭게 생성이 되려고 할 것입니다.</p>\n<p><code>cnt += step</code>는 <code>cnt = cnt + step</code>와 동일하기 때문에 <code>cnt</code>라는 지역 변수에 미처 초기값도 할당하지도 않은 체로 접근하려고 해서 문제가 발생하는 것입니다.</p>\n<p>이 문제를 해결하기 위해서는 <code>_increment()</code> 함수 안에서 <code>cnt</code> 변수 앞에 <code>nonlocal</code> 키워드를 붙여주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_increment</span><span class=\"token punctuation\">(</span>step <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">nonlocal</span> cnt</span>        cnt <span class=\"token operator\">+=</span> step\n        <span class=\"token keyword\">return</span> cnt\n\n    <span class=\"token keyword\">return</span> _increment\n\ncount_up <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count_up<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count_up<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count_up<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>cnt</code> 변수 앞에 <code>nonlocal</code> 키워드를 붙여주면 같은 이름의 새로운 지역 변수가 생성되는 대신에 함수 외부에 선언된 비지역 변수인 <code>cnt</code>의 값을 변경되기 때문입니다.</p>\n<p>코드를 수정 후에 실행해보면 다음과 같이 <code>cnt</code> 변수의 값이 변경되어 출력되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">6</span></code></pre></div>\n<h2 id=\"전체코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4%EC%BD%94%EB%93%9C\" aria-label=\"전체코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체코드</h2>\n<p>본 포스팅에서 제가 작성한 전체 코드는 아래에서 직접 확인하고 실행해보실 수 있습니다.</p>\n<p><a href=\"https://deepnote.com/project/Blog-Yd3-DsV_QeGqo4AUZ7FyHg/%2Fpython-global-nonlocal.ipynb\">https://deepnote.com/project/Blog-Yd3-DsV_QeGqo4AUZ7FyHg/%2Fpython-global-nonlocal.ipynb</a></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>외부 범위에서 선언된 변수를 내부 범위에서 변경할 수 있다는 것은 프로그래밍을 할 때 양날의 검으로 작용할 수 있습니다.\n예를 들어, 전역 변수의 값이 여러 함수에 의해서 변경될 수 있다면 해당 전역 변수의 값이 어떻게 변해갈지 예측하기가 쉽지 않을 것입니다.\n그러므로 예상치 못한 버그가 발생할 확률이 높아지고 코드의 복잡도는 올라가며 유지보수는 힘들어 질 것 입니다.</p>\n<p>이 것이 아마도 파이썬에서 <code>global</code>과 <code>nonlocal</code> 키워드를 아주 자주는 볼 수 없는 이유일 것입니다.\n<code>global</code>과 <code>nonlocal</code> 키워드를 사용하기 전에 반드시 필요한 상황인지 재고해보시면 납용과 오용을 줄이는데 도움이 될 것입니다.</p>","timeToRead":7,"fields":{"slug":"/python-global-nonlocal/","tags":["Python","global","nonlocal","scope"]},"frontmatter":{"title":"파이썬의 global과 nonlocal 키워드 사용법","date":"Feb 19, 2022"}},"next":{"fields":{"slug":"/psql/"},"frontmatter":{"title":"터미널에서 psql로 PostgreSQL 간편 사용"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}