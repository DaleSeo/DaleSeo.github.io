{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-substr-substring/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-url-api/"},"frontmatter":{"title":"자바스크립트의 URL API로 웹 주소 다루기"}},"node":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/Zedv7kXYBJg?si=qqY0_a4rc4qZFrgn\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>자바스크립트에서 부분 문자열이 필요하실 때 <code>substr()</code>을 쓰시나요 아니면 <code>substring()</code>을 쓰시나요?\n혹시 이 두 함수가 동일하다고 생각하시고 계셨나요? 🤪</p>\n<p>이름이 비슷한 이 두 함수는 둘 다 문자열의 일부를 잘라내는 기능을 수행하지만 사용 방법과 동작 방식에서 미묘한 차이가 있는데요.\n의외로 많은 개발자들이 이 두 함수를 무분별하게 혼용해서 사용하다가 당혹스러운 상황을 겪기도 합니다.</p>\n<p>이번 글에서는 <code>substr()</code>와 <code>substring()</code> 함수에 대해 자세히 알아보고 각각의 특징과 어떤 점이 같고 어떤 점이 다른지에 대해서 살펴보겠습니다.</p>\n<h2 id=\"substr-함수\" style=\"position:relative;\"><a href=\"#substr-%ED%95%A8%EC%88%98\" aria-label=\"substr 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>substr() 함수</h2>\n<p>먼저 살펴볼 <code>substr()</code> 함수는 문자열의 일부를 일정 길이만큼 추출하고 싶을 때 사용합니다.</p>\n<p>다음과 같은 형태로 첫 번째 인자로 시작 인덱스를 두 번째 인자로 잘라낼 길이를 넘기면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"문자열\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예를 들어, 문자열 <code>\"ABCDEFG\"</code>를 상대로 <code>2</code>와 <code>3</code>을 인수로 호출하면 <code>\"CDE\"</code>가 반환되는데요.\n자바스크립트에서 인덱스는 0부터 시작하니까 3번째 문자인 <code>C</code>부터 시작해서 총 3글자가 추출되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"CDE\"</span></code></pre></div>\n<p><code>substr()</code> 함수를 호출할 때 두 번째 인자를 생략하면 첫 번째 인자로 넘긴 시작 인덱스부터 문자열의 끝까지 추출이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"CDEFG\"</span></code></pre></div>\n<p>아무 인자도 넘기지 않으면 문자열이 그대로 얻어지는데 굳이 이렇게 쓰실 일은 없을 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"ABCDEFG\"</span></code></pre></div>\n<p>참고로 첫 번째 인자로 음수 인덱스를 넘길 수도 있는데요.\n<code>-1</code>이 끝에서 첫 번째 문자이고, <code>-2</code>가 끝에서 두 번째 문자가, <code>-n</code>이 끝에서 n 번째 문자가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  \"CDE\"</span></code></pre></div>\n<p>사실 <code>substr()</code> 함수가 음수 인덱스를 지원하는 부분은 개발자 사이에서도 호불호가 갈리곤 하는데요.\n이 기능이 편리하다고 느끼시는 분들도 있고 버그의 원인이 된다고 생각하시는 분들도 있는 것 같습니다.</p>\n<h2 id=\"substring-함수\" style=\"position:relative;\"><a href=\"#substring-%ED%95%A8%EC%88%98\" aria-label=\"substring 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>substring() 함수</h2>\n<p>다음으로 살펴볼 <code>substring()</code> 함수는 문자열을 시작과 종료 인덱스를 기준으로 자르고 싶을 때 사용하는데요.\n두 번째 인자로 문자열 길이 대신에 종료 인덱스를 받는다는 점에서 위에서 살펴본 <code>substr()</code>와 큰 차이가 있습니다.</p>\n<p>다음과 같은 형태로 <code>substring()</code> 함수는 첫 번째 인자로 시작 인덱스를 두 번째 인자로 종료 인덱스를 받는데요.\n여기서 시작 인덱스만 결과 부분 문자열에 포함되고 종료 인덱스는 부분 문자열에서 제외됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"문자열\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예를 들어, 문자열 <code>\"ABCDEFG\"</code>를 상대로 <code>2</code>와 <code>5</code>을 인수로 호출하면 <code>\"CDE\"</code>가 반환되는데요.\n자바스크립트에서 인덱스는 0부터 시작하니까 3번째 문자인 <code>C</code>부터 시작해서 6번째 문자인 <code>F</code> 바로 전까지 부분 문자열이 얻어 집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"CDE\"</span></code></pre></div>\n<p><code>substring()</code> 함수를 호출할 때 두 번째 인자를 생략하면 첫 번째 인자로 넘긴 시작 인덱스부터 문자열의 끝까지 추출이 되는데요.\n이렇게 첫 번째 인자만 넘기면 <code>substr()</code>와 동일하게 작동하기 때문에 햇갈리게 하는데 주요 원인이 되기도 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"CDEFG\"</span></code></pre></div>\n<p><code>substr()</code>과 마찬가지로 아무 인자도 넘기지 않으면 문자열이 그대로 얻어집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"ABCDEFG\"</span></code></pre></div>\n<p><code>substr()</code>과 달리 첫 번째 인자로 음수 인덱스를 넘기면 <code>0</code>을 넘긴 것처럼 작동하는데요.\n조심하시지 않으면 버그의 원인이 될 수도 있으므로 주의가 필요하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  \"ABC\"</span></code></pre></div>\n<h2 id=\"substr-vs-substring\" style=\"position:relative;\"><a href=\"#substr-vs-substring\" aria-label=\"substr vs substring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>substr() vs. substring()</h2>\n<p>시작 인덱스와 길이를 기준으로 자르는 <code>substr()</code>와 시작과 종료 인덱스를 기준으로 자르는 <code>substring()</code>는 비슷한 목적을 가지고 있지만 지금까지 살펴본 것처럼 사용 방법과 동작 방식에서 차이가 있어서 주의가 필요합니다.</p>\n<p>그런데 여기서 중요한 사실이 하나 있는데요.\n바로 <code>substr()</code> 함수는 자바스크립트에서 deprecated, 즉 폐기된 함수입니다.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\">MDN 관련 레퍼런스</a>를 보시면 이제 쓰지 말라고 빨간색 글씨로 경고하고 있습니다.</p>\n<p>하지만 아직 많은 개발자 분들이 모르고 사용하고 계시며 과거에 <code>substr()</code>을 사용하여 작성된 레거시 코드가 많기 때문에 <code>substring()</code>과의 차이점에 대해서 인지하고 계시면 도움이 될 것입니다.</p>\n<p>다행히도 대부분의 경우, <code>substr()</code>를 써서 작성된 코드는 다음과 같은 간단한 규칙을 통해 <code>substring()</code>을 쓰도록 변환할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"문자열\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"문자열\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> startIndex <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예를 들어서 다음 두 줄의 코드는 동일한 부분 문자열을 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"CDE\"</span>\n<span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"CDE\"</span></code></pre></div>\n<p>그래서 첫 번째 인자가 0인 경우에는, 두 번째 인자로 무엇을 넘기든 <code>substr()</code>과 <code>substring()</code>은 항상 동일한 문자열을 반환하게 되죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"ABCDE\"</span>\n<span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"ABCDE\"</span></code></pre></div>\n<p>이러한 요령을 사용하셔서 가급적 <code>substr()</code>를 사용한 코드를 <code>substring()</code>을 쓰도록 리펙토링(refactoring)하시기를 추천드립니다.\nDeprecated된 함수를 사용해서 좋을 일은 없으니까요.</p>\n<h2 id=\"보너스-slice-함수\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EB%84%88%EC%8A%A4-slice-%ED%95%A8%EC%88%98\" aria-label=\"보너스 slice 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보너스: slice() 함수</h2>\n<p><code>substr()</code>와 <code>substring()</code> 만큼 햇갈리는 것은 아니지만 유사한 목적으로 사용되는 함수가 하나 더 있어서 짚고 넘어가려고 합니다.\n바로 배열 뿐만 아니라 문자열을 상대로도 사용할 수 있는 <code>slice()</code> 함수인데요.</p>\n<blockquote>\n<p>자바스크립트 배열을 상대로 slice() 함수를 어떻게 사용하는지에 대해서는 <a href=\"/js-array-slice-splice/\">관련 포스팅</a>를 참고바랍니다.</p>\n</blockquote>\n<p>이 함수는 첫 번째 인자로 음수 인덱스를 지원한다는 점에서는 <code>substr()</code>과 유사하지만, 두 번째 인자로 종료 인덱스를 받는다는 점에서는 <code>substring()</code>과 유사합니다.</p>\n<p>따라서 다음과 같이 지금까지 다룬 모든 함수에 첫 번째 인자를 음수 인덱스를 넘겼을 때 참으로 다채로운 결과를 얻을 수가 있는데요.\n이쯤 되면 정말 욕이 나오시죠? 🤬 ㅋㅋㅋ</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  \"CDE\"</span>\n<span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  \"ABC\"</span>\n<span class=\"token string\">\"ABCDEFG\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"C\"</span></code></pre></div>\n<p>자, 정신을 차리시고 곰곰이 생각해보면 첫 번째 인수인 <code>-5</code>는 <code>substring()</code> 함수에서는 <code>0</code>으로 취급되어 <code>\"A\"</code>가 되지만 <code>slice()</code> 함수에서는 끝에서 5번째 문자인 <code>\"C\"</code>가 됩니다.\n그리고 두 번째 인수인 <code>3</code>은 종료 인덱스이므로 <code>\"D\"</code>가 되고 그 바로 앞에 있는 문자인 <code>\"C\"</code>까지만 포함되겠죠?\n따라서 우리는 결과로 딱 <code>\"C\"</code>만 얻게 되는 것입니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 미묘하게 비슷하면서도 다른 <code>substr()</code> 함수와 <code>substring()</code> 함수, 그리고 추가로 <code>slice()</code> 함수에 대해서도 살펴보았습니다.\n본 포스팅이 이 세 함수를 햇갈려하시는 분들께 도움이 되었으면 좋겠고요.\n팀 프로젝트에서 이러한 미묘한 차이에 대해서 걱정하지 않고 코딩할 수 있도록, 가급적 Deprecated된 <code>substr()</code> 함수를 사용을 피하시면 다른 개발자들에게 도움이 될 것입니다.</p>","timeToRead":4,"fields":{"slug":"/js-substr-substring/","tags":["JavaScript","string"]},"frontmatter":{"title":"자바스크립트 문자열 자르기: substr()과 substring() 함수","date":"Aug 2, 2023"}},"next":{"fields":{"slug":"/css-screen-height/"},"frontmatter":{"title":"CSS로 화면 높이의 HTML 요소 만들기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}