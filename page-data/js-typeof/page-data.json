{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-typeof/","result":{"pageContext":{"previous":{"fields":{"slug":"/react-checkboxes/"},"frontmatter":{"title":"React에서 체크박스 사용하기"}},"node":{"html":"<p>타입스크립트(Typescript)가 대중화되면서 나타나는 흥미로운 현상이 있는데요.\n바로 기존에 자바스크립트(JavaScript)에서 비교적 등한시되던 자료형(data type)에 많은 개발자들이 다시 관심을 갖게 되었다는 점입니다.</p>\n<p>이번 포스팅에서는 자바스크립트의 9가지 자료형과 <code>typeof</code> 연산자를 통해서 자료형을 파악하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"typeof-연산자\" style=\"position:relative;\"><a href=\"#typeof-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"typeof 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof 연산자</h2>\n<p>우선 본 포스팅에서 전체에 걸쳐 빈번하게 사용하게 될 자바스크립트의 <code>typeof</code> 연산자에 대해서 짚고 넘어갈까요?</p>\n<p>기본적으로 <code>typeof</code> 연산자는 바로 뒤에 표현식(expression)을 넘기면 자료형을 돌려주는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'string'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'boolean'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span></code></pre></div>\n<p>변수나 함수를 상대로도 <code>typeof</code> 연산자를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">typeof</span> add<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'function'</span></code></pre></div>\n<p><code>typeof</code> 연산자를 사용할 때 흔히 저지르는 실수가 <code>typeof</code> 연산자로 부터 얻은 결과를 그 자료형의 클래스와 비교하는 것인데요.\n<code>typeof</code> 연산자는 자료형을 클래스가 아닌 <strong>문자열</strong>로 돌려주기 때문에 이러한 버그가 발생하지 않도록 각별히 조심하셔야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>🍯 꿀팁: 다음과 같이 <code>typeof</code> 연산자를 두 번 연속으로 사용해보시면 <code>typeof</code> 연산자의 결과가 항상 문자열이라는 것을 까먹지 않으실 거에요. 😉</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'string'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">typeof</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'string'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'string'</span></code></pre></div>\n<h2 id=\"undefined-자료형\" style=\"position:relative;\"><a href=\"#undefined-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"undefined 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undefined 자료형</h2>\n<p>첫 번째로 살펴볼 자료형은 자바스크립트에서 참 독특한 역할을 하고 있는 <code>Undefined</code> 인데요.\n특이하게도 <code>Undefined</code> 자료형에 속하는 값은 딱 하나 <code>undefined</code> 밖에 없기 때문에 이 값 자체에 대해서 이해하는 것이 중요합니다.</p>\n<p>자바스크립트에서 <code>undefined</code>는 <strong>의도치 않게</strong> 누락된 값을 나타내기 위해서 주로 사용되는데요.\n보통 개발자가 값을 누락하였을 때 프로그래밍 언어 차원에서 자연스럽게 알아서 설정되는 경우가 많습니다.</p>\n<p>대표적인 예로, 변수를 선언할 때 초기화를 하지 않으면 <code>undefined</code>가 할당이 되고요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'undefined'</span></code></pre></div>\n<p>함수를 호출할 때도 매개 변수를 넘기지 않으면 <code>undefined</code>가 할당되지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { x: 1, y: undefined }</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span> undefined</code></pre></div>\n<h2 id=\"null-자료형\" style=\"position:relative;\"><a href=\"#null-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"null 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null 자료형</h2>\n<p><code>Null</code> 자료형은 많은 분들이 <code>Undefined</code> 자료형과 헛갈려하시는 자료형인데요.\n<code>Undefined</code> 자료형과 공톰점은 <code>Null</code> 자료형에 속한 값 역시 <code>null</code>로 하나 밖에 없다는 것입니다.</p>\n<p>자바스크립트에서 <code>null</code>은 <strong>의도적으로</strong> 누락한 값을 나타내기 위해서 주로 사용되는데요.\n그래서 개발자가 명시적으로 변수에 <code>null</code>로 할당하는 경우를 자주 볼 수 있죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span></code></pre></div>\n<p>그런데 <code>null</code>이 진짜 골 때리는 부분은 <code>typeof</code> 연산자의 결과가 <code>null</code>이 아니라 <code>object</code>가 나온다는 것입니다. 🤯</p>\n<p>이것은 사실 굉장히 오래된 자바스크립트의 버그인데요.\n명백한 버그 임에도 불구하고 이것에 의존하고 있는 레거시(legacy) 코드가 워낙 많아서 알고도 고칠 수 없다고 합니다. 😂</p>\n<p><code>null</code>과 관련된 이 웃픈 역사에 대해서는 <a href=\"https://2ality.com/2013/10/typeof-null.html\">여기</a>에서 자세히 다루고 있으니 궁금하신 분들은 참고바랍니다.</p>\n<h2 id=\"boolean-자료형\" style=\"position:relative;\"><a href=\"#boolean-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"boolean 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean 자료형</h2>\n<p>자바스크립트에서 논리 자료형인 <code>Boolean</code>은 <code>true</code>와 <code>false</code> 이렇게 두 개의 값으로 이루어진 자료형인데요.\n보통 <code>if</code> 분기문이나 <code>while</code> 반복문에서 중요한 역할을 하는 자료형이지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'boolean'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'boolean'</span></code></pre></div>\n<h2 id=\"number-자료형\" style=\"position:relative;\"><a href=\"#number-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"number 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number 자료형</h2>\n<p><code>Number</code> 자료형은 숫자를 나타내는데요.\n특이하게도 자바스크립트에서는 다른 여타의 프로그래밍 언어와 달리 숫자형을 정수형과 실수형처럼 좀 더 세부적으로 구분하지 않고 그냥 <code>Number</code> 자료형으로 퉁칩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span></code></pre></div>\n<p><code>Number</code> 자료형에는 다음과 같이 몇 가지 특수한 숫자도 있는데요.\n보통 어떤 계산을 할 때 결과를 숫자로 표현할 수 없는 예외적인 경우에 주로 접하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\n<span class=\"token keyword\">typeof</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span></code></pre></div>\n<p>참고로 <code>Number</code> 자료형은 부동소수점(floating-point) 연산을 하기 때문에 다음과 같이 어처구니 없는 실수 계산 결과가 나올 수 있어요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">1.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.3000000000000003</span></code></pre></div>\n<p>이러한 미세한 연산의 오류는 계산에 있어서 한치의 오차도 용납되지 않는 금융권 시스템이나 재무/회계 관련 소프트웨어에서는 치명적인 버그로 이어질 수 있어서 주의가 필요하겠습니다.</p>\n<h2 id=\"bigint-자료형\" style=\"position:relative;\"><a href=\"#bigint-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"bigint 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BigInt 자료형</h2>\n<p>자바스크립트에 비교적 최근에 추가된 자료형인 <code>BigInt</code>는 <code>number</code> 자료형으로 정밀하게 표현하기에는 너무 큰 숫자를 다룰 때 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bigint'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bigint'</span></code></pre></div>\n<p>개인적으로 <code>BigInt</code> 자료형이 실제로 사용되는 프로젝트는 아직 못 접해본 것 같은데요.\n본 포스팅에서는 그냥 이런 자료형도 있다라는 것만 기억하시고 나중에 실제로 쓰셔야할 때 추가로 학습하시면 좋을 것 같습니다.</p>\n<h2 id=\"string-자료형\" style=\"position:relative;\"><a href=\"#string-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"string 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String 자료형</h2>\n<p><code>String</code> 자료형은 문자열을 나타내는데요.\n특이하게도 자바스크립트에서는 다른 여타의 프로그래밍 언어와 달리 문자(character)와 문자열(string)을 구분하지 않고 그냥 <code>String</code> 자료형으로 퉁칩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'string'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'string'</span></code></pre></div>\n<h2 id=\"symbol-자료형\" style=\"position:relative;\"><a href=\"#symbol-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"symbol 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol 자료형</h2>\n<p><code>Symbol</code> 자료형 역시 비교적 최근에 자바스크립트에 추가된 자료형인데요.\n보통 어떤 객체의 특정 속성에 대한 접근을 통제하기 위해서 많이 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'symbol'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'symbol'</span></code></pre></div>\n<p><code>Symbol</code> 자료형 자체에 대해서는 다뤄야 할 부분도 많고 본 포스팅의 범위에 벗어나므로 추후 기회가 되면 별도의 포스팅에서 다루도록 하겠습니다.</p>\n<h2 id=\"object-자료형\" style=\"position:relative;\"><a href=\"#object-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"object 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object 자료형</h2>\n<p>과장을 좀 보태서 자바스크립트에서 모든 것은 객체라고 해도 될 정도로 <code>Object</code> 자료형은 자바스크립트에서 매우 넓은 영역을 아우르고 있는데요.</p>\n<p>비단 이렇게 우리가 쉽게 생각할 수 있는 객체 뿐만 아니라,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span></code></pre></div>\n<p>정규식, 날짜와 같은 자바스크립트에 내장된 클래스의 인스턴스도 <code>Object</code> 자료형에 속합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token operator\">-</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\\w<span class=\"token operator\">+</span><span class=\"token operator\">/</span>g<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span></code></pre></div>\n<p>마찬가지 이치로 우리가 직접 작성한 클래스의 인스턴스도 <code>Object</code> 자료형이겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span></code></pre></div>\n<p>가장 간과하기 쉬운 부분은 심지어 배열도 <code>Object</code> 자료형으로 취급된다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span></code></pre></div>\n<p>자바스크립트에는 별도로 배열을 나태내기 위한 원시 자료형이 없기 때문에 주의가 필요한 부분입니다.</p>\n<h2 id=\"function-자료형\" style=\"position:relative;\"><a href=\"#function-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"function 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function 자료형</h2>\n<p>함수형 프로그래밍의 패러다임을 제공하는 자바스크립트에서는 함수도 마치 값처럼 다룰 수 있는데요.\n<code>Function</code> 자료형은 자바스크립트에서 이러한 함수를 나타냅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">typeof</span> add<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'function'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'function'</span></code></pre></div>\n<p>참고로 화살표(arrow) 함수를 상대로 <code>typeof</code> 연산자를 사용할 때는 괄호로 한 번 감싸주지 않으면 오류가 발생하므로 주의가 필요합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Uncaught SyntaxError: Malformed arrow function parameter list</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'function'</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 <code>typeof</code> 연산자를 어떻게 사용하는지 살펴보고 자바스크립트의 9가지 자료형을 정리해보았습니다.\n지금까지 다룬 9가지 자료형 중에서 <code>Undefined</code>, <code>Null</code>, <code>Boolean</code>, <code>Number</code>, <code>String</code>, <code>Symbol</code>은 값을 바꿀 수 없는 원시(primary) 자료형이라는 점도 함께 기억해두시면 좋을 것 같습니다.</p>\n<p>자바스크립트 개발 경력이 꽤 기신 분들도 막상 기본 자료형에 대해서 질문을 받으면 제대로 답변을 하지 못하는 경우를 의외로 보게 됩니다.\n아마도 자바스크립트가 동적 타이핑(dynamic typing) 언어인데다가 다른 언어 대비 타이핑 정도가 느슨하기 때문이 아닐까 싶은데요.\n하지만 최근에는 자료형에 대한 이해가 중요한 타입스크립트로 진행되는 프로젝트가 많은 만큼 이제 이것은 점점 핑계로 들리지 않을까요?</p>","timeToRead":5,"fields":{"slug":"/js-typeof/","tags":["JavaScript","TypeScript","typeof"]},"frontmatter":{"title":"자바스크립트의 자료형과 typeof 연산자","date":"Feb 1, 2023"}},"next":{"fields":{"slug":"/react-children/"},"frontmatter":{"title":"React의 Children API 사용법"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}