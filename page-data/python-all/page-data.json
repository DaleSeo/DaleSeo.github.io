{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/python-all/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-intl-api/"},"frontmatter":{"title":"자바스크립트의 Intl API로 국제화하기"}},"node":{"html":"<p>이번 포스팅에서는 파이썬에서 모든 것이 참인지 확인할 때 사용하는 <code>all()</code> 내장 함수에 대해서 알아보겠습니다.</p>\n<h2 id=\"반복문으로-모두-참인지-확인하기\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EB%AA%A8%EB%91%90-%EC%B0%B8%EC%9D%B8%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"반복문으로 모두 참인지 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복문으로 모두 참인지 확인하기</h2>\n<p>여러 개의 데이터가 모두 어떤 조건을 만족하는지 확인을 해야할 때 보통 어떻게 접근을 하시나요?\n많은 분들이 자연스럽게 반복문을 떠올릴 것 같은데요.</p>\n<p>예를 들어, 여러 숫자가 모두 양의 짝수인지 확인하는 함수를 다음과 같이 구현할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">all_positive_even</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 음수 확인</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token comment\"># 짝수 확인</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>이 함수에 양의 짝수로만 이루어진 리스트를 넘겨서 호출하면 <code>True</code>를 반환하겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">all_positive_even<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<p>반면에 인자로 넘긴 리스트에 음수가 하나라도 있다면 <code>False</code>가 반환될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">all_positive_even<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<p>인자로 넘긴 리스트에 홀수가 하나라도 있어도 <code>False</code>가 반환될 테지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">all_positive_even<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<p>사실 별 거 아닌 로직인데 이처럼 반복문을 사용해서 구현하니 코드가 괜히 길어지는 것 같지 않나요?\n과연 좀 더 소위 Pythonic, 즉 파이썬🐍스럽게 모두 참인지 확인하는 방법은 없을까요? 🧐</p>\n<h2 id=\"all-내장-함수-사용해보기\" style=\"position:relative;\"><a href=\"#all-%EB%82%B4%EC%9E%A5-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"all 내장 함수 사용해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>all() 내장 함수 사용해보기</h2>\n<p>파이썬에서는 굳이 반복문이 없이도 모든 것이 참인지를 확인할 수 있도록 <code>all()</code>이라는 내장 함수를 제공하고 있습니다.</p>\n<p><code>all()</code> 함수는 반복문으로 순회할 수 있는(iterable) 모든 객체를 인자로 받을 수 있는데요.\n쉽게 말해 여러 데이터를 담을 수 있는 리스트(list), 튜플(tuple)과 같은 파이썬에서 흔히 볼 수 있는 자료구조를 생각하시면 됩니다.</p>\n<p>엄밀히 얘기하면 여러 데이터를 제공할 수 있는 이터레이터(iterator)나 제너레이터(generator)도 인자로 넘길 수 있지만, 이 부분은 본 포스팅에서 다루고자하는 범위에서 벗어나는 고급 주제이므로 별도의 포스팅에서 다루겠습니다.</p>\n<blockquote>\n<p>파이썬의 제너레이터에 대한 자세한 설명은 <a href=\"/python-yield/\">관련 포스팅</a>를 참고바랍니다.</p>\n</blockquote>\n<p>기본적으로 <code>all()</code> 함수는 인자로 넘어온 자료구조 내의 모든 요소가 참일 때만 <code>True</code>를 반환합니다.\n이 말은 인자로 넘어온 자료구조 내에 거짓인 요소가 하나라도 있으면 <code>False</code>를 반환한다는 뜻이기도 하지요.</p>\n<p>그럼, 가장 단순한 예제로 설명을 해보겠습니다.</p>\n<p>아래와 깉이 <code>True</code>만을 담고있는 리스트를 <code>all()</code> 함수에 인자로 넘기면 <code>True</code>를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<p>아래 리스트는 두 번째 요소로 <code>False</code>를 포함하고 있기 때문에 <code>all()</code> 함수에 인자로 넘기면 <code>False</code>를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<p>여기서 인자로 넘기는 자료구조가 담고 있는 모든 요소가 굳이 불리언 자료형(boolean type)일 필요는 없습니다.\n불리언 자료형이 아닌 값(value)이나 식(expression)으로 되어 있는 요소는 <code>all()</code> 함수가 내부적으로 불리언으로 형변환을 해서 참/거짓 여부를 판단하기 때문입니다.</p>\n<p>예를 들어, 다음 리스트에 담겨 있는 요소들은 모두 불리언으로 형변환을 하면 <code>True</code>가 되기 때문에 <code>all()</code> 함수는 <code>True</code>를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TEST\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<p>반면에 인자로 넘어온 리스트나 튜플이 불리언으로 형변환을 했을 때 <code>False</code>가 될 수 있는 값이나 식을 하나라도 포함하고 있다면 <code>all()</code> 함수는 <code>False</code>를 반환하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<h2 id=\"표현식과-함께-활용하기\" style=\"position:relative;\"><a href=\"#%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC-%ED%95%A8%EA%BB%98-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"표현식과 함께 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현식과 함께 활용하기</h2>\n<p>지금까지 <code>all()</code> 함수를 사용하는 기본적인 방법에 대해서 살펴보았는데요.\n사실 이렇게 단순한 리스트나 튜플을 인자로 넘겨서는 <code>all()</code> 진가를 느끼기가 어려울 수도 있어요.</p>\n<p>왜냐하면 파이썬에서는 모든 것이 결국 객체이고 대부분의 객체는 불리언으로 형변환을 하면 참으로 판단되기 때문입니다.</p>\n<p>하지만 <code>all()</code> 함수의 인자로 리스트 표현식(list comprehension)이나 제너레이터 표현식(generator comprehension)을 넘기면 어떨까요?</p>\n<p>예를 들어, 리스트 안에 숫자가 모두 양수인지 확인하는 코드를 <code>all()</code> 함수와 제너레이터 표현식을 이용해서 작성해볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<p>마찬가지는 방법으로 이번에는 리스트 안에 숫자가 모두 짝수인지를 확인하는 코드를 작성해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False (1은 홀수)</span></code></pre></div>\n<p>그러면 우리가 맨 처음에 반복문으로 작성했던 모든 숫자가 양의 짝수인지를 확인하는 코드는 어떻게 짤 수 잇을까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<p>캬~ 어떤가요? 코드가 훨씬 간결하고 알아보기 쉬워지지 않았나요?</p>\n<p>이렇게 파이썬의 🌸이라 불리는 리스트 표현식이나 제너레이터 표현식과 함께 <code>all()</code> 함수를 사용하면 무궁무진한 활용 가능성이 열리게 됩니다!</p>\n<h2 id=\"all-함수-들여다보기\" style=\"position:relative;\"><a href=\"#all-%ED%95%A8%EC%88%98-%EB%93%A4%EC%97%AC%EB%8B%A4%EB%B3%B4%EA%B8%B0\" aria-label=\"all 함수 들여다보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>all() 함수 들여다보기</h2>\n<p>혹시 <code>all()</code> 함수에 빈 리스트나 빈 튜플을 넘기면 무엇이 반환될 지 생각해보셨나요?\n뭐, 직접 호출을 해볼까요? <code>True</code>가 반환이 되네요!</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<p><code>all()</code> 함수를 처음 사용하실 때 이 부분이 상당히 햇갈릴 수가 있는데요.\n사실 이러한 현상은 <code>all()</code> 내장 함수가 내부적으로 어떻게 구현되었는지를 알면 충분히 예상할 수가 있답니다.</p>\n<p><a href=\"https://docs.python.org/3/library/functions.html#all\">파이썬 공식 문서</a>를 확인해보면 <code>all()</code> 함수는 다음과 같은 방식으로 구현이 되어있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> iterable<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> element<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>위 구현에 따르면 비어있는 리스트나 튜플이 인자로 넘어오면 <code>for</code> 문이 자체가 실행될 일이 없으므로 당연히 <code>True</code>가 반환되겠죠?\n따라서 <code>all()</code> 함수에 대해 생각하실 때, 모든 것이 참일 때 <code>True</code>를 반환한다고 사고하시는 것보다는, <strong>하나라도 거짓이면 <code>False</code>를 반환한다</strong>라고 사고하시는 것이 혼선을 줄이는데 도움이 될 거에요.</p>\n<p>파이썬의 <code>all()</code> 함수가 내부적으로 어떤 식으로 구현되었는지 깨닫고 나면 또 다른 중요한 특징도 알아챌 수가 있는데요.\n바로 루프를 돌다가 거짓으로 판별되는 요소가 있다면 나머지 요소에 대한 체크를 생략하고 즉시 <code>False</code>를 반환할 거라는 것입니다.</p>\n<p>프로그래밍 언어론에서는 이러한 성능 최적화 기법을 소위 단락 평가(short-circuit evaluation)라고도 하죠?\n주어진 데이터 중에서 하나라도 거짓이라면 나머지 데이터를 굳이 확인해보지 않더라도, 어차피 최종 결과는 <code>False</code>가 되기 때문에 상당히 합리적인 구현이라고 볼 수 있겠네요.</p>\n<p>이 현상을 관찰해보기 위해서 주어진 숫자가 양의 짝수인지를 판별하는 함수를 하나 작성하고 해당 함수가 어떤 인자와 함께 호출되었는지 출력하도록 해볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">positive_even</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"positive_even(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></code></pre></div>\n<p>그리고 제네레이터 표현식을 사용하여 3번째 요소가 홀수인 리스트를 대상으로 이 함수를 호출한 결과를 가지고 <code>all()</code> 함수를 호출해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>positive_even<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<p>자, 그럼 <code>positive_even()</code> 함수가 총 3번만 호출되는 것을 볼 수가 있죠? 이를 통해 <code>all()</code> 함수는 양의 짝수가 아닌 <code>7</code>을 만나자 마자 바로 <code>False</code>를 반환했다는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">positive_even<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\npositive_even<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\npositive_even<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이번에는 동일한 방법으로 2번째 요소가 음수인 리스트를 가지고 같은 실험을 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>positive_even<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># False</span></code></pre></div>\n<p>마찬가지로 <code>all()</code> 함수는 양의 짝수가 아닌 <code>-4</code>를 만나자 마자 바로 <code>False</code>를 반환하므로 이번에는 <code>positive_even()</code> 함수가 총 2번만 호출이 되었다는 것을 확인할 수 있네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">positive_even<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\npositive_even<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"and-연산자와-비교\" style=\"position:relative;\"><a href=\"#and-%EC%97%B0%EC%82%B0%EC%9E%90%EC%99%80-%EB%B9%84%EA%B5%90\" aria-label=\"and 연산자와 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>and 연산자와 비교</h2>\n<p>파이썬의 <code>all()</code> 함수는 <code>and</code> 연산자와 동작 방식이 유사하기 때문에 서로 대체적으로 사용 가능한 경우가 많은데요.</p>\n<p>예를 들어, 아래 <code>all()</code> 함수로 작성된 코드는</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<p>다음과 같이 <code>and</code> 연산자를 사용해서 작성할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token boolean\">True</span> <span class=\"token keyword\">and</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">and</span> <span class=\"token boolean\">True</span> <span class=\"token comment\"># True</span></code></pre></div>\n<p>하지만 <code>and</code> 연산자는 <code>all()</code> 함수처럼 항상 불리언(boolean) 타입의 결과를 반환하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TEST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">and</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token keyword\">and</span> <span class=\"token string\">\"TEST\"</span>  <span class=\"token comment\"># \"TEST\"</span></code></pre></div>\n<p>그래서 반드시 <code>True</code> 또는 <code>False</code>를 반환해야한다면 <code>all()</code> 함수를 사용하거나, <code>and</code> 연산자의 결과를 불리언으로 형변환을 해줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">and</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token keyword\">and</span> <span class=\"token string\">\"TEST\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># True</span></code></pre></div>\n<h2 id=\"전체코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4%EC%BD%94%EB%93%9C\" aria-label=\"전체코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체코드</h2>\n<p>본 포스팅에서 제가 작성한 전체 코드는 아래에서 직접 확인하고 실행해보실 수 있습니다.</p>\n<p><a href=\"https://dales.link/5y5\">https://dales.link/5y5</a></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 파이썬에서 모든 것이 참인지를 알아내기 위해서 사용하는 <code>all()</code> 함수에 대해서 살펴보았습니다.\n참고로 파이썬에서는 <code>all()</code> 함수와 짝꿍인 <code>any()</code> 함수도 내장하고 있는데요.\n이 녀석에 대해서는 <a href=\"/python-any/\">관련 포스팅</a>을 참고 바라겠습니다.</p>","timeToRead":7,"fields":{"slug":"/python-all/","tags":["Python","BIF","all","comprehensions"]},"frontmatter":{"title":"파이썬의 내장 함수 all() 사용법","date":"Mar 2, 2022"}},"next":{"fields":{"slug":"/python-global-nonlocal/"},"frontmatter":{"title":"파이썬의 global과 nonlocal 키워드 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}