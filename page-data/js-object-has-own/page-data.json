{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-object-has-own/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-object-prototype-of/"},"frontmatter":{"title":"자바스크립트 객체의 프로토타입을 다루는 방법"}},"node":{"html":"<p>객체 지향 프로그래밍 언어인 자바스크립트에서는 객체에 어떤 속성이 들어 있는지 알아내야 할 때가 많은데요.\n이번 포스팅에서는 자바스크립트 객체에 특정 속성을 있는지 확인하는 다양한 방법에 대해서 실습을 통해 정리해보겠습니다.</p>\n<h2 id=\"in-연산자\" style=\"position:relative;\"><a href=\"#in-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"in 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in 연산자</h2>\n<p>자바스크립트에서 객체에 어떤 속성이 있는지 확인하는 가장 널리 알려진 방법은 <code>in</code> 연산자를 사용하는 것입니다.\n<code>속성명 in 객체</code>의 형태로 사용하며, 해당 속성이 객체 안에 있으면 결과가 참(true)이고 없으면 결과가 거짓(false)입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"b\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>객체를 생성한 후에도 얼마든지 속성을 추가할 수 있기 때문에 <code>in</code> 연산자의 결과는 객체의 현재 상태에 따라 얼마든지 달라질 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"b\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>한 가지 주의할 부분은 <code>in</code> 연산자는 속성의 존재 여부만 따지지 속성에 할당된 값이 무엇인지는 중요하지 않다는 것입니다.\n그러므로 <code>null</code>이나 <code>undefined</code>가 할당된 속성을 상대로도 속성 자체가 존재한다면 결과는 참이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nobj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>하지만 <code>delete</code> 연산자를 이용하여 객체로 부터 속성 자체를 제거해주면 <code>in</code> 연산자의 결과로 거짓을 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h2 id=\"자신의-속성과-상속된-속성\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%8B%A0%EC%9D%98-%EC%86%8D%EC%84%B1%EA%B3%BC-%EC%83%81%EC%86%8D%EB%90%9C-%EC%86%8D%EC%84%B1\" aria-label=\"자신의 속성과 상속된 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자신의 속성과 상속된 속성</h2>\n<p>자바스크립트에서 대부분의 객체는 <code>Object</code> 클래스를 상속하고 있는데요.\n그럼 <code>in</code> 연산자는 <code>Object</code> 클래스로 부터 상속받은 속성들을 상대로는 어떤 결과를 낼까요?</p>\n<p>예를 들어, 객체 리터럴(literal), 즉 중괄호(<code>{}</code>) 기호를 통해 만든 모든 자바스크립트 객체는 <code>Object</code> 클래스로 부터 <code>toString()</code> 함수와 <code>valueOf()</code> 함수를 상속받습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '[object Object]'</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a: 1}</span></code></pre></div>\n<p>이 두 개의 속성을 상대로 <code>in</code> 연산자를 사용해보면 참이 결과로 나오는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"valueOf\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"toString\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>이러한 현상은 우리가 정의한 클래스로 만든 인스턴스에서도 확인할 수 있는데요.</p>\n<p>예를 들어, <code>Person</code> 클래스를 정의하고, <code>Student</code> 클래스가 상속받게 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> grade</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, Grade: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code>Student</code> 클래스로 생성한 인스턴스를 상대로 <code>in</code> 연산자를 테스트해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"getGrade\"</span> <span class=\"token keyword\">in</span> student<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true (Student의 속성)</span>\n<span class=\"token string\">\"getInfo\"</span> <span class=\"token keyword\">in</span> student<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true (Person의 속성)</span>\n<span class=\"token string\">\"valueOf\"</span> <span class=\"token keyword\">in</span> student<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true (Object의 속성)</span></code></pre></div>\n<p><code>Student</code> 클래스에서 정의한 <code>getGrade</code> 속성 뿐만 아니라 <code>Student</code> 클래스의 부모인 <code>Person</code> 클래스의 <code>getInfo</code> 속성이 있다고 나옵니다.\n마찬가지로 <code>Person</code> 클래스의 부모인 <code>Object</code> 클래스의 <code>valueOf</code> 속성도 있다고 나오죠.\n클래스를 정의할 때 <code>extends</code> 뒤에 부모 클래스를 명시하지 않으면 기본적으로 <code>Object</code> 클래스가 부모가 되기 때문입니다.</p>\n<h2 id=\"objecthasown\" style=\"position:relative;\"><a href=\"#objecthasown\" aria-label=\"objecthasown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.hasOwn()</h2>\n<p>객체 자신의(direct) 속성 뿐만 아니라 상위 클래스로부터 상속된(inherited) 속성까지 참으로 판단하는 <code>in</code> 연산자의 특징이 자바스크립트로 프로그래밍을 할 때 예상치 못한 문제로 이어질 수 있는데요.\n<code>in</code> 연산자를 사용하면 속성이 객체 자신에 속해있는지, 부모 클래스에 정의되어 있는지 알 수 없기 때문에 혼란을 일으킬 수 있습니다.</p>\n<p>예를 들어서, <code>toString</code> 속성은 <code>Object</code> 클래스로 부터 상속받기 때문에 <code>in</code> 연산자의 결과로 참이 나오는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '[object Object]'</span>\n<span class=\"token string\">\"toString\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>일반 객체에 <code>toString</code> 속성을 추가해도 <code>in</code> 연산자의 결과는 참이 나오고,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token string\">\"toString\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code>toString</code> 속성을 제거해도 <code>in</code> 연산자의 결과는 참이 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '[object Object]'</span>\n<span class=\"token string\">\"toString\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>만약에 상속받은 속성은 제외하고, 객체 자신에 어떤 속성이 존재하는 알고 싶다면 <code>Object.hasOwn()</code> 메서드를 사용하면 되는데요.\n<code>Object.hasOwn(객체, 속성명)</code>의 형태로 이 메서드를 호출하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '[object Object]'</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '[object Object]'</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>이제 우리는 <code>toString</code> 속성이 객체 자신에 들어 있는지, 상위 클래스로부터 왔는지 명확하게 구분할 수 있게 됩니다.</p>\n<h2 id=\"objectprototypehasownproperty\" style=\"position:relative;\"><a href=\"#objectprototypehasownproperty\" aria-label=\"objectprototypehasownproperty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.prototype.hasOwnProperty()</h2>\n<p><code>Object.prototype.hasOwnProperty()</code> 메서드는 <code>Object.hasOwn()</code> 메서드가 등장하기 전에 <code>Object.hasOwn()</code> 메서드와 동일한 목적으로 많이 사용되었습니다.\n<code>Object</code> 클래스의 정적(static) 메서드인 <code>hasOwn()</code>과 달리 <code>Object</code> 클래스로 생성한 <em>인스턴스</em>의 메서드이기 때문에 <code>객체.hasOwnProperty(속성명)</code> 형태로 호출합니다.</p>\n<p>그런데 <code>Object</code> 객체의 <code>hasOwnProperty()</code> 메서드를 사용할 때는 몇 가지 조심해야 할 부분이 있습니다.</p>\n<p>우선 프로토타입(prototype)이 없는 객체는 애초에 <code>hasOwnProperty</code> 속성이 존재하지 않아서 <code>hasOwnProperty()</code> 메서드를 호출하는 것이 불가능합니다.</p>\n<p>예를 들어서, 다음과 같이 <code>Object.setPrototypeOf()</code> 메서드를 사용하여 객체의 프로토타입을 <code>null</code>로 설정해주면 <code>hasOwnProperty()</code> 메서드를 호출할 수 없게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: obj.hasOwnProperty is not a function</span></code></pre></div>\n<p>다음과 같이 프로토타입이 없는 객체, null-prototype 객체는 생성할 수도 있는데요.\n역시 어떤 방식을 사용하든 <code>hasOwnProperty()</code> 속성이 없어서 타입 오류가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: obj.hasOwnProperty is not a function</span>\nobj<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: obj.hasOwnProperty is not a function</span>\nobj<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p><code>null</code>을 상속하는 클래스를 정의해도 동일한 현상을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NullClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">NullClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p><code>hasOwnProperty()</code> 인스턴스 메서드를 사용할 때 또 다른 문제는 <code>Object</code> 클래스로 부터 상속받은 <code>hasOwnProperty</code> 속성을 얼마든지 객체에서 덮어쓸 수 있으며, 이 것을 방지할 마땅한 방법이 없다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hasOwnProperty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>물론 궁여지책으로 함수 객체의 <code>call()</code> 함수를 사용하여, 강제로 <code>Object</code> 클래스의 <code>hasOwnProperty()</code> 메서드가 호출되도록 해줄 수도 있지만 보시다시피 코드를 이해하기가 어려워집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>바로 이와 같은 <code>Object.prototype.hasOwnProperty()</code> 메서드의 문제를 근본적으로 해결하기 위해서 등장한 것이 <code>Object.hasOwn()</code> 메서드입니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>따라서 구형 브라우저를 지원해야하는 웹 애플리케이션이나 Node.js 버전 16.9 미만을 사용하는 서버 애플리케이션에 아니라면 가급적 <code>Object.hasOwn()</code> 메서드를 쓰는 것이 권장됩니다.</p>\n<h2 id=\"실전-예제\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%84-%EC%98%88%EC%A0%9C\" aria-label=\"실전 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실전 예제</h2>\n<p>마지막으로 자바스크립트 객체에 특정 속성을 있는지 확인는 코드를 짜다가 실전에서 겪을 법한 실수를 보여드릴까요?</p>\n<p>간단한 실습 코드를 작성해보겠습니다.\n<code>abbreviations</code> 객체에는 줄임말에 대한 본래 긴 말이 저장되어 있습니다.\n<code>standFor()</code> 함수는 줄임말이 인자로 주어졌을 때 본래 긴 말을 반환합니다.\n만약에 줄임말이 <code>abbreviations</code> 객체에 저장되어 있지 않다면 오류를 던집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> abbreviations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">HTML</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HyperText Markup Language\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">CSS</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Cascading Style Sheets\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">JS</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">standFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">abbr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>abbr <span class=\"token keyword\">in</span> abbreviations<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> abbreviations<span class=\"token punctuation\">[</span>abbr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>작성한 <code>standFor()</code> 함수는 다음과 같이 예상한대로 작동합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">standFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTML\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'HyperText Markup Language'</span>\n<span class=\"token function\">standFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Cascading Style Sheets'</span>\n<span class=\"token function\">standFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TypeScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: Not found</span></code></pre></div>\n<p>하지만 인자로 <code>toString</code>을 넘겨보면 예상치 않게 오류가 발생하지 않고 함수가 반환이 되는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">standFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ƒ toString() { [native code] } 😵</span></code></pre></div>\n<p>이 것은 <code>if</code> 조건문 안에서 <code>in</code> 연산자를 사용하여 약자가 <code>abbreviations</code> 객체에 존재하는지 확인하기 때문입니다.</p>\n<p>이 문제를 해결하기 위해서 <code>if</code> 조건문 안에서 <code>in</code> 연산자 대신에 <code>Object.hasOwn()</code> 메서드를 사용해보겠습니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">standFor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">abbr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>abbreviations<span class=\"token punctuation\">,</span> abbr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">return</span> abbreviations<span class=\"token punctuation\">[</span>abbr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 인자로 <code>toString</code>을 넘겨보면 이번에는 예상대로 오류가 발생하는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">standFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: Not found</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 자바스크립트에서 어떻게 객체에 특정 속성이 존재하는지 확인할 수 있는지 살펴보았습니다.\n간단히 정리를 해보면, 객체 자신의 속성 뿐만 아니라 상위 클래스로 부터 상속받은 속성까지 고려하고 싶다면 <code>in</code> 연산자를 사용해야합니다.\n상위 클래스로 부터 상속받은 속성을 제외하고 객체 자신이 특정 속성을 가지고 있는지 알고 싶다면 <code>Object.hasOwn()</code> 메서드를 사용하면 됩니다.\n<code>Object.prototype.hasOwnProperty()</code> 메서드는 몇 가지 문제점이 있어서 사용하는 것을 피해야합니다.</p>","timeToRead":7,"fields":{"slug":"/js-object-has-own/","tags":["JavaScript","object","prototype","in","hasOwnProperty","hasOwn","ES6"]},"frontmatter":{"title":"자바스크립트 객체에 특정 속성이 있는지 확인하는 방법","date":"Jan 8, 2024"}},"next":{"fields":{"slug":"/swc/"},"frontmatter":{"title":"SWC(Speedy Web Compiler) 기본 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}