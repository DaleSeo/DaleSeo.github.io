{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-class-methods-vs-static-methods/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-key-events/"},"frontmatter":{"title":"[자바스크립트] 키보드 이벤트 (keydown/keyup)"}},"node":{"html":"<p>이번 포스트에서는 파이썬의 정적(static) 메서드와 클래스(class) 메서드에 대해서 알아보겠습니다.</p>\n<h2 id=\"인스턴스instance-메서드\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4instance-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"인스턴스instance 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스(instance) 메서드</h2>\n<p>정적(static) 메서드와 클래스(class) 메서드에 대해서 살펴보기 전에 가장 기본이 되는 인스턴스(instance) 메서드에 대해서 먼저 짚고 넘어가는 게 좋을 것 같습니다.</p>\n<p>클래스에 아무 데코레이터(decorator) 없이 메서드를 선언하면 해당 메서드는 인스턴스 메서드로 취급이 되며, 첫번째 매개 변수로 클래스의 인스턴스가 넘어오게 됩니다.\n이 첫번째 매개 변수의 이름은 보통 관행적으로 <code>self</code>라고 하며, 인스턴수 메서드는 이 <code>self</code>를 통해 인스턴스 속성(attribute)에 접근하거나 다른 인스턴스 메서드를 호출할 수 있습니다.\n뿐만 아니라 <code>self</code>를 통해, 클래스 속성에 접근하거나 클래스 메서드를 호출할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> delta <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> delta\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> delta <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> delta</code></pre></div>\n<p>예를 들어, 위의 <code>Counter</code> 클래스는 3개의 인스턴스 메서드로 이루어져 있으며, 각 인스턴스 메서드는 <code>self</code>라는 첫번째 매개 변수를 가지고 있습니다.\n생성자인 <code>__init__</code> 매서드는, 인자로 넘어온 <code>value</code> 값을 객체의 <code>value</code> 속성에 할당해주며, <code>increment</code>와 <code>decrement</code> 메서드는 객체의 <code>value</code> 속성값을 변경해줍니다.</p>\n<p>인스턴스 메서드는 앞으로 소개해드릴 클래스 메서드나 정적 메서드와 달리 반드시 먼저 인스턴스를 생성 한 후에 해당 인스턴스를 대상으로 호출해야 합니다.\n인스턴스 메서드의 첫번째 매개 변수는 자동으로 할당되기 때문에, 호출할 때 넘기는 첫번째 인자는 실제 인스턴스 메서드에서는 두번째 매개 변수에 할당되는 효과가 나타납니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> counter <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> counter<span class=\"token punctuation\">.</span>value\n<span class=\"token number\">0</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> counter<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> counter<span class=\"token punctuation\">.</span>value\n<span class=\"token number\">3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> counter<span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> counter<span class=\"token punctuation\">.</span>value\n<span class=\"token number\">1</span></code></pre></div>\n<h2 id=\"클래스class-메서드\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4class-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"클래스class 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스(class) 메서드</h2>\n<p><code>@classmethod</code> 데코레이터를 사용해서 클래스에 메서드를 선언하면 해당 메서드는 클래스(class) 메서드가 되며, 첫번째 매개 변수로 클래스 인스턴스가 아닌 클래스 자체가 넘어오게 됩니다.\n이 첫번째 매개 변수의 이름은 보통 관행적으로 <code>cls</code>라고 하며, 클래스 메서드는 이 <code>cls</code>를 통해 클래스 속성(attribute)에 접근하거나, 클래스 메서드를 호출할 수 있습니다.\n하지만, 인스턴스 메서드와 달리 인스턴스 속성에 접근하거나 다른 인스턴스 메서드를 호출하는 것은 불가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email\n        self<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fromTuple</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> tup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">(</span>tup<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tup<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fromDictionary</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> dic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">[</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dic<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>파이썬에서는 생성자 오버로딩(overloading)을 지원하기 때문에, 클래스 메서드는 특히 팩토리 메서드를 작성할 때 유용하게 사용됩니다.</p>\n<p>예를 들어, 위의 <code>User</code> 클래스는 생성자인 1개의 인스턴스 메서드와 <code>@classmethod</code> 어노테이션이 달린 2개의 클래스 메서드로 이루어져 있습니다.\n<code>fromTuple</code>와 <code>fromDictionary</code> 메서드의 첫번째 매개 변수인 <code>cls</code>에는 클래스가 할당되어 있으며, 이 클래스를 호출하면 생성자가 호출되고 인스턴스가 생성되게 됩니다.\n<code>fromTuple</code> 메서드는 터플(tuple) 타입의 인자를 받고, <code>fromDictionary</code> 메서드는 사전(dictionary) 타입의 인자를 받아서 <code>User</code> 클래스의 객체를 생성해줍니다.</p>\n<p>따라서 다음과 같이 팩토리 메서드를 이용해서 다양한 포멧의 데이터로 부터 <code>User</code> 객체를 생성할 수 있습니다.</p>\n<ul>\n<li>기본 생성자로 객체 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span><span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>password\n<span class=\"token punctuation\">(</span><span class=\"token string\">'user@test.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>클래스 메서드로 터플로 부터 객체 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>fromTuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>password\n<span class=\"token punctuation\">(</span><span class=\"token string\">'user@test.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>클래스 메서드로 사전으로 부터 객체 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>fromDictionary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>password\n<span class=\"token punctuation\">(</span><span class=\"token string\">'user@test.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"정적static-메서드\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81static-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"정적static 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적(static) 메서드</h2>\n<p><code>@staticmethod</code> 데코레이터를 사용해서 클래스에 메서드를 선언하면 해당 메서드는 정적(static) 메서드가 되며, 정적 메서드는 인스턴스 메서드나 클래스 메서드와 달리 첫번째 매개 변수가 할당되지 않습니다.\n따라서 정적 메서드 내에서는 인스턴스/클래스 속성에 접근하거나, 인스턴스/클래스 메서드를 호출하는 것이 불가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">toCamelcase</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        words <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">toSnakecase</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        letters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i<span class=\"token punctuation\">.</span>isupper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> text<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>정적 메서드는 유틸리티 메서드를 구현할 때 많이 사용됩니다.</p>\n<p>예를 들어, 위의 <code>StringUtils</code> 클래스는 2개의 정적 메서드로 이루어져 있습니다. <code>toCamelcase</code> 메서드는 뱀 스타일(snake_case)의 문자열을 낙타 스타일로(CamelCase)로 변환해주며, <code>toSnakecase</code>는 그 역방향의 변환을 해줍니다.\n이 두 개의 메서드는 매개 변수로 넘어온 문자열에만 의존하는 순수한(pure) 함수이기 때문에 굳이 클래스의 일부로 선언할 필요는 없지만, 이렇게 비슷한 류의 여러 유틸리티 메서드를 하나의 클래스의 묶어두고 싶을 때 정적 메서드로 선언할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> StringUtils<span class=\"token punctuation\">.</span>toCamelcase<span class=\"token punctuation\">(</span><span class=\"token string\">\"last_modified_date\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'lastModifiedDate'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> StringUtils<span class=\"token punctuation\">.</span>toSnakecase<span class=\"token punctuation\">(</span><span class=\"token string\">\"lastModifiedDate\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'last_modified_date'</span></code></pre></div>\n<h2 id=\"클래스class-메서드-vs-정적static-메서드\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4class-%EB%A9%94%EC%84%9C%EB%93%9C-vs-%EC%A0%95%EC%A0%81static-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"클래스class 메서드 vs 정적static 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스(class) 메서드 vs. 정적(static) 메서드</h2>\n<p>클래스 메서드와 정적 메서드는 별도 인스턴스 생성없이 클래스를 대상으로 클래스 이름 뒤에 바로 <code>.</code> 오퍼레이터를 붙여서 호출할 수 있다는 점에서 동일합니다.</p>\n<p>차이점은 클래스 메서드를 호출할 때, 첫번째 인자로 클래스 자체가 넘어오기 때문에, 클래스 속성에 접근하거나 다른 클래스 함수를 호출할 수 있습니다.\n반면에 정적 메서드를 호출할 때는, 첫번째 인자로 아무것도 넘어오지 않기 때문에, 명시적으로 넘긴 다른 인자만 접근할 수 있습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬에서 <code>@classmethod</code> 데코레이터와 <code>@staticmethod</code> 데코레이터로 선언이 가능한 클래스 메서드와 정적 메서드에 대해서 알아보았습니다.\n자바에서는 이 두 가지 개념이 동일하게 사용하기 때문에 자바에서 건너온 분들이 많이 햇갈려하는 부분이기도 한데요.\n자바에서는 이 두 가지 개념을 굳이 구분할 이유가 없습니다. 왜냐하면 정적 메서드에서도 클래스 이름을 통해 자유롭게 클래스에 접근할 수 있기 때문입니다.\n하지만 파이썬에서는 클래스에 접근이 필요할 때는 클래스 메서드, 접근이 필요없을 때는 정적 메서드를 사용하도록 되어 있습니다.</p>","timeToRead":4,"fields":{"slug":"/python-class-methods-vs-static-methods/","tags":["Python"]},"frontmatter":{"title":"[파이썬] 정적(static) 메서드와 클래스(class) 메서드","date":"Sep 6, 2020"}},"next":{"fields":{"slug":"/css-centering/"},"frontmatter":{"title":"[CSS] 화면 중앙 배치 (Flexbox/Grid)"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}