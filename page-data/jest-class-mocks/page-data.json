{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/jest-class-mocks/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/swc/"},"frontmatter":{"title":"SWC(Speedy Web Compiler) 기본 사용법"}},"node":{"html":"<p>ES6에서 클래스(class)가 도입되고 타입스크립트가 대중화되면서 이제 클래스를 사용하는 자바스크립트 코드를 흔하게 볼 수 있게 되었습니다.\n뿐만 아니라 Angular나 NestJS처럼 클래스를 기반으로 동작하는 라이브러리나 프레임워크도 점점 늘어나고 있지요.\n하지만 아직 클래스를 모킹하거나 테스팅하시는데 어려움을 겪는 개발자 분들이 많은 것 같습니다.</p>\n<p>이번 포스팅에서는 자바스크립트의 대표적인 테스팅 프레임워크인 Jest를 사용하여 클래스를 모킹(mocking)하고 테스트 코드를 작성해보겠습니다.</p>\n<blockquote>\n<p>본 포스팅을 이해하시려면 jest.fn(), jest.spyOn(), jest.mock()과 같은 모킹과 관련된 Jest의 기본 지식이 필요합니다. 이 부분에 대해서 선수 학습이 필요하신 분들께는 아래 포스팅을 추천드리겠습니다.</p>\n<ul>\n<li><a href=\"/jest-fn-spy-on/\">Jest의 jest.fn(), jest.spyOn()를 이용한 함수 모킹</a></li>\n<li><a href=\"/jest-mock/\">Jest의 jest.mock()을 이용한 모듈 모킹</a></li>\n</ul>\n</blockquote>\n<h2 id=\"테스트-대상-클래스-작성\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9E%91%EC%84%B1\" aria-label=\"테스트 대상 클래스 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 대상 클래스 작성</h2>\n<p>간단한 실습을 위해서 <code>UsersService</code> 클래스와 <code>AuthService</code> 클래스, 이렇게 두 개의 자바스크립트 클래스를 작성하겠습니다.</p>\n<p>먼저 사용자 관리를 담당하는 <code>UsersService</code> 클래스에는 <code>findByEmail()</code> 메서드가 있습니다.\n실제 애플리케이션에서는 데이터베이스를 사용하거나 API 호출을 해야겠지만, 실습 프로젝트에서는 임의로 무작위 데이터를 반환하도록 구현하였습니다.\n뒤에서 테스트를 작성할 때 이 클래스는 어차피 가짜 구현으로 모킹(mocking)할 것이 때문에 실제 구현은 그닥 중요하지 않기 때문입니다.</p>\n<div class=\"gatsby-code-title\">class-mock/users.service.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findByEmail</span><span class=\"token punctuation\">(</span>email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 임의로 가짜 데이터가 조회되도록 구현 */</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1_000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그 다음, 인증을 담당하는 <code>AuthService</code> 클래스에는 <code>logIn()</code> 메서드가 있습니다.\n로그인 처리를 하려면 이메일과 비밀번호를 입력받아서 사용자를 조회해야하 때문에, <code>AuthService</code> 클래스는 <code>UserService</code> 클래스를 사용하고 있습니다.\n<code>AuthService</code> 클래스의 <code>logIn()</code> 메서드는 <code>UserService</code> 클래스의 <code>findByEmail()</code> 메서드가 사용자를 찾지 못하거나, 인자로 넘어온 비밀번호가 맞지 않으면 예외를 발생시킵니다.\n사용자가 문제없이 조회된 경우에는 찾은 사용자를 그대로 반환합니다.</p>\n<div class=\"gatsby-code-title\">class-mock/auth.service.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UsersService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthService</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> usersService<span class=\"token operator\">:</span> UsersService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span>email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usersService<span class=\"token punctuation\">.</span><span class=\"token function\">findByEmail</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">!==</span> password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong Password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 테스팅 측면에서 한 가지 주의깊게 볼 부분은 <code>AuthService</code> 클래스는 생성자를 통해서 <code>UsersService</code> 클래스의 인스턴스를 받을 수 있다는 것입니다.\n<a href=\"/?tag=NestJS\">NestJS</a>와 같은 DI(Dependency Injection, 의존성 주입) 프레임워크에서 많이 볼 수 있는 설계 패턴입니다.</p>\n<p>이런 방식으로 애플리케이션 코드를 작성하면 테스트 코드를 작성할 때 모킹한 클래스의 가짜 인스턴스를 매우 유연하게 주입할 수 있는 이점이 있습니다.</p>\n<h2 id=\"클래스의-인스턴스-모킹\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%AA%A8%ED%82%B9\" aria-label=\"클래스의 인스턴스 모킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스의 인스턴스 모킹</h2>\n<p>클래스를 모킹하는 가장 간단한 방법은 클래스의 인스턴스를 모킹하는 것입니다.\n위와 같이 의존성을 주입할 수 있도록 애플리케이션 코드가 설계되어 있다면 테스트 코드에서 손쉽게 가짜 인스턴스를 만들어서 쓸 수 있습니다.</p>\n<p>예를 들어, <code>AuthService</code> 클래스에 대한 테스트를 작성하기 위해서 <code>UsersService</code> 클래스의 인스턴스를 모킹해볼까요?\n<code>UsersService</code> 클래스의 인스턴스는 결국에는 <code>findByEmail()</code> 메서드를 속성으로 갖는 객체이기 때문에, 자바스크립트 객체를 하나 만들고 <code>findByEmail</code> 속성에 <code>jest.fn()</code> 함수를 할당해주기만 하면 됩니다.</p>\n<div class=\"gatsby-code-title\">class-mock/auth.service1.test.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AuthService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth.service\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UsersService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthService\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> usersService<span class=\"token operator\">:</span> UsersService<span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">let</span> authService<span class=\"token operator\">:</span> AuthService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    usersService <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> findByEmail<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>    authService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthService</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if user is not found\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT_FOUND\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Not Found\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if password does not match\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      password<span class=\"token operator\">:</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WRONG_PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Wrong Password\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns a user if password matches\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      password<span class=\"token operator\">:</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProperty</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">200</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 보시면 모킹된 <code>findByEmail()</code> 함수가 특정 사용자 객체를 반환하도록 설정할 때마다 <code>as</code> 키워드를 사용하여 <code>jest.Mock</code> 타입으로 타입을 강제해주는 것을 볼 수 있습니다.\n따라서 이 방법은 타입 안전(type-safe)하지 않으며 타입스크립트로 테스트를 작성할 때는 권장되지 않는 방법입니다.</p>\n<p>뿐만 아니라, 만약게 <code>UsersService</code> 클래스가 여러 개의 메서드로 이루어져 있다면, 일일이 인스턴스의 모든 메서드를 <code>jest.fn()</code>으로 할당해주는 것이 상당히 번거로웠을 것입니다.</p>\n<p>더 나은 방법은 없을까요?</p>\n<h2 id=\"jest-mock-extended-패키지\" style=\"position:relative;\"><a href=\"#jest-mock-extended-%ED%8C%A8%ED%82%A4%EC%A7%80\" aria-label=\"jest mock extended 패키지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest-mock-extended 패키지</h2>\n<p>위에서 설명드린 문제는 <code>jest-mock-extended</code> 패키지를 사용하여 해결할 수 있습니다.\n우선 npm 저장소로 부터 <code>jest-mock-extended</code> 패키지를 내려 받아서 실습 프로젝트에 설치해야 합니다.</p>\n<p>Node.js 프로젝트에서는 터미널에서 <code>npm add</code> 명령어로 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> jest-mock-extended</code></pre></div>\n<p><a href=\"/?tag=Bun\">Bun</a>을 사용하는 프로젝트에서는 <code>bun add</code> 명령어로 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> jest-mock-extended</code></pre></div>\n<p><code>jest-mock-extended</code> 패키지에서 제공하는 <code>mock()</code> 함수를 사용하면 간편하게 가짜 인스턴스를 생성할 수 있습니다.\n그리고 <code>jest-mock-extended</code> 패키지에서 제공하는 <code>MockProxy</code>로 <code>mock()</code> 함수가 반환하는 가짜 인스턴스를 타입을 지정해줍니다.</p>\n<div class=\"gatsby-code-title\">class-mock/auth.service2.test.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">MockProxy</span><span class=\"token punctuation\">,</span> mock <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"jest-mock-extended\"</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AuthService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth.service\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UsersService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthService\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> usersService<span class=\"token operator\">:</span> MockProxy<span class=\"token operator\">&lt;</span>UsersService<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">let</span> authService<span class=\"token operator\">:</span> AuthService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    usersService <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">mock</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>UsersService<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    authService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthService</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if user is not found\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT_FOUND\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Not Found\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if password does not match\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      password<span class=\"token operator\">:</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WRONG_PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Wrong Password\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns a user if password matches\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      password<span class=\"token operator\">:</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProperty</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">200</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 테스트 코드로 부터 <code>as jest.Mock</code>이 모두 사라져 타입 안전해진 것을 볼 수 있습니다. 🎉</p>\n<h2 id=\"의존성-주입이-불가능-하다면\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%B4-%EB%B6%88%EA%B0%80%EB%8A%A5-%ED%95%98%EB%8B%A4%EB%A9%B4\" aria-label=\"의존성 주입이 불가능 하다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 주입이 불가능 하다면?</h2>\n<p>만약에 애플리케이션 코드가 의존성을 주입할 수 없는 구조로 설계되어 있다면 어떻게 할까요?</p>\n<p>예를 들어서, <code>AuthService</code> 클래스의 생성자를 아래와 같이 변경해보겠습니다.\n이 전에는 클래스의 생성자를 통해서 <code>UsersService</code> 클래스의 인스턴스가 넘길 수 있었는데, 이 번에는 생성자 안에서 <code>UsersService</code> 클래스의 인스턴스를 직접 생성하고 있습니다.</p>\n<div class=\"gatsby-code-title\">module-mock/auth.service.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UsersService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthService</span> <span class=\"token punctuation\">{</span>\n  usersService<span class=\"token operator\">:</span> UsersService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usersService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsersService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span>email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usersService<span class=\"token punctuation\">.</span><span class=\"token function\">findByEmail</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not Found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">!==</span> password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong Password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아직 자바스크립트 생태계에서 의존성 주입이 대세가 된지가 오래되지 않았기 때문에 이런 방식으로 작성된 레거시 코드가 많을 거에요.\n이런 경우에는 어쩔 수 없이 <code>UsersService</code> 클래스를 담고 있는 <code>./users.service</code> 모듈을 모킹해야 되서 테스트 코드를 작성하기 좀 더 까다로워집니다.</p>\n<h2 id=\"클래스의-가짜-인스턴스-접근\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EA%B0%80%EC%A7%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%A0%91%EA%B7%BC\" aria-label=\"클래스의 가짜 인스턴스 접근 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스의 가짜 인스턴스 접근</h2>\n<p>Jest에서 모듈을 모킹할 때는 <code>jest.mock()</code> 함수를 사용하며, 해당 모듈이 내보내는 모든 클래스의 생성자는 가짜 함수로 대체됩니다.</p>\n<p>테스트가 실행되는 동안 이 가짜 생성자로 생성된 인스턴스는 해당 클래스의 <code>mock.instances</code> 배열에 저장이 됩니다.\n따라서 우리는 이 배열을 통해서 원하는 인스턴스에 접근 후에 특정 메서드가 원하는 방식으로 동작하도록 설정해줄 수 있습니다.</p>\n<p>예를 들어, 실습 프로젝트에서 <code>AuthService</code> 클래스는 생성자 내에서 <code>UsersService</code> 클래스의 인스턴스가 딱 한 번 생성되므로, <code>UsersService.mock.instances[0]</code>을 통해서 해당 인스턴스에 접근할 수 있을 것입니다.</p>\n<p>여기서 <code>UsersService.mock.instances</code> 배열에 <code>UsersService</code> 클래스의 인스턴스가 누적되지 않도록 주의해야합니다.\n이를 위해서 <code>beforeEach()</code> 함수 내에서 <code>UsersService</code> 클래스를 상대로 <code>mockClear()</code> 함수를 호출해줍니다.</p>\n<div class=\"gatsby-code-title\">module-mock/auth.service1.test.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AuthService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth.service\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UsersService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthService\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> usersService<span class=\"token operator\">:</span> UsersService<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> authService<span class=\"token operator\">:</span> AuthService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">(</span>UsersService <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    authService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    usersService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UsersService <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>instances<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if user is not found\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT_FOUND\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Not Found\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if password does not match\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      password<span class=\"token operator\">:</span> <span class=\"token string\">\"RIGHT\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WRONG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Wrong Password\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns a user if password matches\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      password<span class=\"token operator\">:</span> <span class=\"token string\">\"RIGHT\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RIGHT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProperty</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">200</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersService<span class=\"token punctuation\">.</span>findByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 보시면 모킹된 <code>findByEmail()</code> 함수를 설정하거나 정리(clear)할 때 마다 <code>as</code> 키워드로 타입을 <code>jest.Mock</code>으로 강제해주고 있습니다.\n<code>jest.mock()</code> 함수로 모듈 모킹을 해주었지만 여전히 타입스크립트 컴파일러는 <code>usersService</code> 변수의 타입이 <code>UsersService</code>라고 생각하기 때문입니다.</p>\n<h2 id=\"클래스의-프로토타입-스파이\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%8A%A4%ED%8C%8C%EC%9D%B4\" aria-label=\"클래스의 프로토타입 스파이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스의 프로토타입 스파이</h2>\n<p>클래스를 위한 테스트 코드를 작성할 때 의존성 주입이 불가능한 상황에서 클래스를 모킹할 수 있는 두 번째 방법은 클래스의 프로토타입을 <code>jest.spyOn()</code> 함수를 사용하여 스파이(spy)하는 것입니다.</p>\n<p>예를 들어, <code>UsersService</code> 클래스의 프로토타입의 <code>findByEmail()</code> 함수를 스파이하여 테스트 용 사용자 객체를 반환하도록 만들어주겠습니다.</p>\n<div class=\"gatsby-code-title\">module-mock/auth.service2.test.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AuthService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth.service\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UsersService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthService\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> authService<span class=\"token operator\">:</span> AuthService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">(</span>UsersService<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>findByEmail <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    authService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if user is not found\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> mockFindByEmail <span class=\"token operator\">=</span> jest</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>UsersService<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"findByEmail\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT_FOUND\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Not Found\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if password does not match\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> mockFindByEmail <span class=\"token operator\">=</span> jest</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>UsersService<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"findByEmail\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        password<span class=\"token operator\">:</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WRONG_PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Wrong Password\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns a user if password matches\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> mockFindByEmail <span class=\"token operator\">=</span> jest</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>UsersService<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"findByEmail\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        password<span class=\"token operator\">:</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProperty</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">200</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 테스트 코드에서는 각 테스트에서 모킹된 <code>UsersService</code> 클래스의 프로토타입의 <code>findByEmail()</code> 함수를 초기화(reset)하여 테스트 간에 서로 간섭이 일어나지 않도록 해주고 있습니다.</p>\n<h2 id=\"클래스의-생성자-모킹\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1%EC%9E%90-%EB%AA%A8%ED%82%B9\" aria-label=\"클래스의 생성자 모킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스의 생성자 모킹</h2>\n<p>또 다른 접근 방법으로 <code>jest.mock()</code> 함수로 모듈을 모킹할 때 클래스의 생성자를 모킹하는 것도 고려해볼 수 있습니다.\n<code>jest.mock()</code> 함수의 두 번째 인자로 가짜 구현을 반환하는 팩토리 함수를 넘기면, 해당 모듈이 가짜 구현으로 완전히 대체됩니다.</p>\n<p>클래스의 생성자도 결국에는 정해진 메서드를 속성으로 갖는 객체를 반환하는 자바스크립트의 함수일 뿐입니다.\n이 것을 착안하면 클래스를 내보내는 모듈을 가짜 구현으로 대체하는 테스트 코드를 작성할 수 있습니다.</p>\n<p>예를 들어, <code>UsersService</code> 클래스를 내보내는 <code>./auth.service</code> 모듈을 대체 구현해보겠습니다.\n<code>findByEmail</code> 속성의 값으로 <code>jest.fn()</code>이 반환하는 가짜 함수를 할당해줍니다.\n그리고 각 테스트에서 모킹된 <code>findByEmail()</code> 함수가 테스트 용 사용자 객체를 반환하도록 설정합니다.</p>\n<div class=\"gatsby-code-title\">module-mock/auth.service3.test.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AuthService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> mockFindByEmail <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./users.service\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    UsersService<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> findByEmail<span class=\"token operator\">:</span> mockFindByEmail <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AuthService\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> authService<span class=\"token operator\">:</span> AuthService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    mockFindByEmail<span class=\"token punctuation\">.</span><span class=\"token function\">mockReset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    authService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if user is not found\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    mockFindByEmail<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT_FOUND\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Not Found\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throws an error if password does not match\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    mockFindByEmail<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      password<span class=\"token operator\">:</span> <span class=\"token string\">\"RIGHT\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WRONG_PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Wrong Password\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns a user if password matches\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    mockFindByEmail<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      id<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      password<span class=\"token operator\">:</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>authService<span class=\"token punctuation\">.</span><span class=\"token function\">logIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProperty</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">200</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockFindByEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 한 가지 주의할 점이 있는데 가짜 함수의 이름은 실습 코드의 <code>mockFindByEmail</code>처럼 반드시 <code>mock</code>으로 시작해야합니다.\nJest가 <code>jest.mock()</code> 함수의 호출을 맨 위로 올릴(hoist) 때, <code>mock</code>으로 시작하는 함수만 같이 올려주기 때문입니다.</p>\n<h2 id=\"실습-코드\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%EC%BD%94%EB%93%9C\" aria-label=\"실습 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 코드</h2>\n<p>실습 프로젝트의 코드는 아래에서 직접 확인하고 실행해볼 수 있습니다.</p>\n<iframe src=\"https://stackblitz.com/edit/jest-class-mocks?embed=1&file=src%2Fclass-mock%2Fauth.service2.test.ts&view=editor\"\nstyle=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Jest를 이용하여 자바스크립트/타입스크립트의 클래스를 모킹하고 테스트하는 여러가지 접근 방법에 대해서 알아보았습니다.</p>\n<p>클래스에 대한 테스트를 작성하실 때는 가급적 <code>jest.mock()</code>을 사용하여 모듈을 모킹하기 보다는 의존성 주입이 가능하도록 애플리케이션 코드를 리팩토링(refactoring)해보시라고 추천드리고 싶습니다.\n애초에 클래스 간에 느슨하게 결합되도록 애플리케이션 코드의 구조가 잡혀 있으면 테스트 코드를 작성하고 수월해지고 테스트 코드를 유지보수하기도 좋을 것입니다.</p>\n<blockquote>\n<p>Jest에 연관된 포스팅은 <a href=\"/?tag=Jest\">Jest 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":12,"fields":{"slug":"/jest-class-mocks/","tags":["JavaScript","library","Jest","testing","Mock","mocking"]},"frontmatter":{"title":"Jest를 이용한 클래스 모킹과 테스팅","date":"Dec 27, 2023"}},"next":{"fields":{"slug":"/vitest/"},"frontmatter":{"title":"Vitest 처음 시작하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}