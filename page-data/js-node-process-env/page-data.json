{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-node-process-env/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-dotenv/"},"frontmatter":{"title":"dotenv로 환경 변수를 .env 파일로 관리하기"}},"node":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/NirAT90liWc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>여러 환경에 Node.js 애플리케이션을 배포하려면 환경 변수라는 것을 이용해야하는데요.\n이번 포스팅에서는 Node.js에서 환경 변수에 어떻게 접근하고 설정할 수 있는지에 대해서 알아보겠습니다.</p>\n<h2 id=\"환경-변수란\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98%EB%9E%80\" aria-label=\"환경 변수란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 변수란?</h2>\n<p>먼저 환경 변수(environment variable)가 무엇인지 간단하게 개념부터 짚고 넘어가면 좋을 것 같아요.</p>\n<p>일반적으로 우리는 코드 베이스는 하나만 관리하고, 개발, 테스트, 운영 등 여러 환경에 애플리케이션을 배포하는데요.\n어느 환경에 배포하느냐에 따라서 다르게 설정되야하는 값들은 보통 운영 체제 수준에서 환경 변수를 통해 관리하게 됩니다.</p>\n<p>대표적인 예로, 데이터베이스(DB) 설정을 들 수 있는데요.\n운영 환경에서는 데이터 센터나 클라우드 인프라 상의 상용 DB를 사용하고, 개발 환경에서는 개발자의 PC 상에서 돌고 있는 로컬 DB를 사용하는 경우가 많죠?</p>\n<p>뿐만 아니라, 데이터베이스의 비밀번호나 서드파티(3rd-party) 서비스의 API 키와 같이 민감한 인증 정보는 GitHub와 같은 코드 저장소(repository)에 올리면 상당히 위험할 수 있기 때문에 환경 변수로 저장해놓고 사용하는 것이 권장됩니다.</p>\n<h2 id=\"환경-변수-접근\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EC%A0%91%EA%B7%BC\" aria-label=\"환경 변수 접근 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 변수 접근</h2>\n<p>Node.js에서는 보통 <code>process.env</code>를 통해서 환경 변수에 접근하게 되는데요.\n<code>process</code>는 Node.js에 기본적으로 내장된 전역 객체여서 별도로 불러올(import) 필요없이 프로그램의 어디에서든지 사용할 수 있습니다.</p>\n<p>일부 환경 변수들은 우리가 직접 설정해주지 않더라도 운영 체제 수준에서 이미 설정이 되어 있는데요.\n예를 들어, 터미널(terminal)을 열고 Node.js 인터프리터를 실행하시면 어떤 환경 변수들이 이미 설정되어 있는지 간단하게 확인해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node\nWelcome to Node.js v16.14.2.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.<span class=\"token environment constant\">USER</span>\n<span class=\"token string\">'dale'</span>\n<span class=\"token operator\">></span> process.env.<span class=\"token environment constant\">HOME</span>\n<span class=\"token string\">'/Users/dale'</span>\n<span class=\"token operator\">></span> process.env.<span class=\"token environment constant\">LANG</span>\n<span class=\"token string\">'en_US.UTF-8'</span>\n<span class=\"token operator\">></span> process.env.API_KEY\nundefined</code></pre></div>\n<p>참고로 이 <code>process</code> 객체는 Node.js에서만 사용이 가능하며, 브라우저와 같은 다른 자바스크립트 실행 환경에서는 존재하지 않는 전역 객체이오니 주의바라겠습니다.\n(마치 <code>window</code> 객체가 브라우저 실행 환경에만 사용할 수 있고, Node.js에서는 존재하지 않는 것과 비슷한 경우라고 보시면 될 것 같아요.)</p>\n<h2 id=\"환경-변수-설정\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95\" aria-label=\"환경 변수 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 변수 설정</h2>\n<p>환경 변수는 운영 체제에 따라서 약간씩 상이한 방법으로 설정할 수 있는데요.</p>\n<p>가장 간단한 방법은 프로그램을 실행할 때 <code>node</code> 명령어 앞에 환경 변수를 <code>키=값</code> 형태로 붙여주면 됩니다.\n예를 들어, <code>API_KEY</code>라는 환경 변수를 <code>abc</code>로, <code>DB_PASSWORD</code>라는 환경 변수를 <code>1234</code>로 설정해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">API_KEY</span><span class=\"token operator\">=</span>abc <span class=\"token assign-left variable\">DB_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span> node\nWelcome to Node.js v16.14.2.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.DB_PASSWORD\n<span class=\"token string\">'1234'</span></code></pre></div>\n<p>이렇게 프로그램 실행 시 설정해준 환경 변수는 해당 프로그램이 실행되는 동안에만 유효하며 프로그램이 종료하면 사라집니다.\n그래서 다음과 같이 다시 Node.js 인터프리터를 실행하면 이 전에 실행할 때 명시했던 환경 변수를 얻을 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node\nWelcome to Node.js v16.14.2.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY\nundefined</code></pre></div>\n<p>운영 체제에서 제공하는 명령어를 이용해서도 환경 변수를 설정해줄 수 있는데요.\n예를 들어, Unix 계열에서는 <code>export</code> 명령어, Windows 계열에서는 <code>SET</code> 명령어가 사용됩니다.</p>\n<p>이러한 운영 체제의 명령어를 이용하여 환경 변수를 설정하면 터미널 창을 닫을 때까지 유지되는데요.\n예를 들어, 저는 Unix 계열인 MacOS를 사용하기 때문에 다음과 같이 환경 변수를 설정해줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">API_KEY</span><span class=\"token operator\">=</span>abc\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DB_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>\n$ node\nWelcome to Node.js v16.14.2.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.DB_PASSWORD\n<span class=\"token string\">'1234'</span></code></pre></div>\n<p>이렇게 프로그램이 실행하기 전에 터미널에서 설정한 환경 변수는 해당 프로그램을 종료하고 다시 실행하더라도 동일한 환경 변수 값을 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node\nWelcome to Node.js v16.14.2.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.DB_PASSWORD\n<span class=\"token string\">'1234'</span></code></pre></div>\n<p>사실 <code>process.env</code>는 가변 객체이기 때문에 받드시 이렇게 프로그램 실행 시점이나 실행 이전에 설정해줘야 하는 것은 아닙니다.\n프로그램 내에서 얼마든지 새로운 환경 변수를 설정하거나 기존에 설정된 환경 변수의 값을 자유롭게 갱신 또는 제거할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node\nWelcome to Node.js v16.14.2.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span>\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.API_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"def\"</span>\n<span class=\"token string\">'def'</span>\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'def'</span>\n<span class=\"token operator\">></span> delete process.env.API_KEY\n<span class=\"token boolean\">true</span>\n<span class=\"token operator\">></span> process.env.API_KEY\nundefined</code></pre></div>\n<h2 id=\"프로그램에서-활용\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%97%90%EC%84%9C-%ED%99%9C%EC%9A%A9\" aria-label=\"프로그램에서 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그램에서 활용</h2>\n<p>어떤 방법으로 환경 변수를 설정하든 이러한 환경 변수들은 결국 프로그램에서 활용이 될 때 의미가 있겠죠?</p>\n<p>간단한 실습을 위해서 자바스크립트 파일을 하나 생성하고, 그 안에 다음과 같이 환경 변수를 읽어서 콘솔에 출력하는 코드를 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">API_KEY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DB_PASSWORD</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'API_KEY:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">API_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_PASSWORD:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DB_PASSWORD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 새로운 터미널을 열고 이 자바스크립트 파일을 실행하면 아직까지 아무 환경 변수를 설정해주지 않았기 때문에 <code>undefined</code>가 출력될텐데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js\nAPI_KEY: undefined\nDB_PASSWORD: undefined</code></pre></div>\n<p>위에서 배운 방법으로 운영체제의 명령어를 이용하여 환경 변수를 설정해준 다시 실행해보면 설정한 환경 변수가 출력이 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">API_KEY</span><span class=\"token operator\">=</span>abc\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DB_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>\n$ node index.ts\nAPI_KEY: abc\nDB_PASSWORD: <span class=\"token number\">1234</span></code></pre></div>\n<p>물론 프로그램 실행할 때 <code>node</code> 명령어 앞에 환경 변수를 바로 명시해줘도 되겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">API_KEY</span><span class=\"token operator\">=</span>def node index.js\nAPI_KEY: def\nDB_PASSWORD: <span class=\"token number\">1234</span></code></pre></div>\n<p>이렇게 두 가지 방법을 동시에 사용할 경우, 프로그램 실행 시점에 설정된 환경 변수의 값이 운영 체제의 명령어로 설정된 환경 변수의 값보다 우선 시 되는 것을 볼 수 있습니다.\n이렇게 환경 변수가 덮어써지는(overwrite) 특징은 특정 환경 변수를 일회성으로 설정하고자 할 때 매우 유용하게 활용될 수 있습니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 코드는 아래에서 직접 수정하거나 브라우저 상의 가상 터미널에서 실행해볼 수 있습니다.</p>\n<iframe src=\"https://stackblitz.com/edit/js-node-process-env?ctl=1&embed=1&file=index.js\" \nstyle=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Node.js에서 <code>process.env</code>를 통해 환경 변수를 어떻게 읽고 쓰는지에 대해서 살펴보았습니다.</p>\n<p>사실 이렇게 일일이 모든 환경 변수를 설정하는 것은 오타의 위험도 크고 지루한 작업이 될 수 있는데요.\n관리해야할 환경 변수의 수가 많아지거나 애플리케이션을 배포해야할 환경이 늘어나면 유지 보수가 매우 괴로워지는 상황이 펼쳐지겠죠?</p>\n<p>그래서 많은 Node.js 프로젝트에서 환경 변수를 좀 더 효과적으로 관리하기 위해서 <code>dotenv</code>라는 라이브러리를 많이 사용하고 있습니다.\n이에 대해서는 <a href=\"/js-dotenv/\">별도의 포스팅</a>에서 자세히 다루도록 하겠습니다.</p>","timeToRead":5,"fields":{"slug":"/js-node-process-env/","tags":["JavaScript","Node.js","env"]},"frontmatter":{"title":"Node.js에서 환경 변수 다루기 (process.env)","date":"Jan 10, 2021"}},"next":{"fields":{"slug":"/react-hooks-use-fetch/"},"frontmatter":{"title":"React에서 원격 API 호출하기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}