{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-node-process-env/","result":{"pageContext":{"previous":null,"node":{"html":"<p>이번 포스트에서는 Node.js에서 환경 변수에 어떻게 접근하고 설정할 수 있는지 알아보겠습니다.</p>\n<h2 id=\"환경-변수란\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98%EB%9E%80\" aria-label=\"환경 변수란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 변수란?</h2>\n<p>먼저 환경 변수(environment Variables)가 무엇인지 간단하게 개념부터 짚고 넘어가겠습니다.</p>\n<p>일반적으로 우리는 코드 베이스는 하나만 관리하고, 개발, 테스트, 운영 등 여러 환경에 애플리케이션을 배포하는데요.\n어느 환경에 배포하느냐에 따라서 다르게 설정해야하는 항목은 보통 운영 체제 레벨에서 환경 변수를 통해 관리하게 됩니다.</p>\n<p>대표적인 예로, 개발 환경에서는 로컬 DB를 사용해야하는데, 운영 환경에서는 원격 DB를 사용해야하는 경우를 들 수 있습니다.\n뿐만 아니라 DB password나 API key와 같은 인증 정보는 공개된 코드 저장소에 올리면 안 되기 때문에 환경 변수로 저장해놓고 사용하는 것이 일반적입니다.</p>\n<h2 id=\"환경-변수-접근\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EC%A0%91%EA%B7%BC\" aria-label=\"환경 변수 접근 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 변수 접근</h2>\n<p>Node.js에서 환경 변수에 접근할 때는 <code>process.env</code>라는 내장 자바스크립트 객체를 사용합니다.\n<code>process</code>는 전역 객체여서 별도로 임포트해야하는 모듈이 없으며 애플리케이션 어디에서든지 접근이 가능합니다.</p>\n<p>따라서, Node.js 인터프리터를 실행하셔서 사용하시는 운영 체제의 어떤 환경 변수들이 설정되어 있는지 바로 확인해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node\nWelcome to Node.js v14.15.0.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.<span class=\"token environment constant\">USER</span>\n<span class=\"token string\">'dale'</span>\n<span class=\"token operator\">></span> process.env.<span class=\"token environment constant\">HOME</span>\n<span class=\"token string\">'/Users/dale'</span>\n<span class=\"token operator\">></span> process.env.<span class=\"token environment constant\">LANG</span>\n<span class=\"token string\">'en_US.UTF-8'</span>\n<span class=\"token operator\">></span> process.env.API_KEY\nundefined</code></pre></div>\n<h2 id=\"환경-변수-설정\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95\" aria-label=\"환경 변수 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 변수 설정</h2>\n<p>환경 변수는 운영 체제에 따라서 다양한 방법으로 설정할 수 있는데요.</p>\n<p>애플리케이션을 실행할 때 1회성으로 환경 변수를 설정하고 싶다면 <code>node</code> 명령어 앞에 환경 변수를 <code>키=값</code> 형태로 명시를 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">API_KEY</span><span class=\"token operator\">=</span>abc <span class=\"token assign-left variable\">DB_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span> node\nWelcome to Node.js v14.15.0.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.DB_PASSWORD\n<span class=\"token string\">'1234'</span></code></pre></div>\n<p>이렇게 Node.js 프로세스 레벨에서 설정해준 환경 변수는 해당 프로세스가 살아있는 동안에만 유효하며 프로세스를 종료하면 사라집니다.\n따라서 다음과 같이 다시 Node.js 인터프리터를 실행하면 이 전에 실행할 때 명시했던 환경 변수를 얻을 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node\nWelcome to Node.js v14.15.0.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY\nundefined</code></pre></div>\n<p>운영 체제에서 지원하는 커맨드를 이용하면 설정한 환경 변수를 터미널 창을 닫을 때까지 유지할 수 있습니다.\nNode.js로 애플리케이션을 실행하기 전에 리눅스나 Mac OS에서는 <code>export 키=깂</code>, Windows에서는 <code>SET 키=값</code>를 이용해서 환경 변수를 설정해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">API_KEY</span><span class=\"token operator\">=</span>abc\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DB_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>\n$ node\nWelcome to Node.js v14.15.0.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.DB_PASSWORD\n<span class=\"token string\">'1234'</span></code></pre></div>\n<p>이렇게 터미널 세션 레벨에서 설정한 환경 변수는 Node.js 프로세스를 종료하고 새로운 프로세스를 실행하더라도 동일한 환경 변수 값을 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node\nWelcome to Node.js v14.15.0.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.DB_PASSWORD\n<span class=\"token string\">'1234'</span></code></pre></div>\n<p><code>process.env</code>는 가변 객체이기 때문에 프로그램 내에서 얼마든지 새로운 항목을 설정하거나 기존에 설정된 값을 자유롭게 갱신 또는 제거할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node\nWelcome to Node.js v14.15.0.\nType <span class=\"token string\">\".help\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">></span> process.env.API_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span>\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'abc'</span>\n<span class=\"token operator\">></span> process.env.API_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"def\"</span>\n<span class=\"token string\">'def'</span>\n<span class=\"token operator\">></span> process.env.API_KEY\n<span class=\"token string\">'def'</span>\n<span class=\"token string\">'1234'</span>\n<span class=\"token operator\">></span> delete process.env.API_KEY\n<span class=\"token boolean\">true</span>\n<span class=\"token operator\">></span> process.env.API_KEY\nundefined</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Node.js에서 <code>process.env</code>를 통해 환경 변수를 읽거나 쓰는 매우 기본적인 방법에 대해서 알아보았습니다.\n사실 이렇게 매뉴얼한 방법으로 환경 변수를 설정하는 것은 배포해야할 서버나 환경의 개수가 늘어나면 관리가 상당히 어려워집니다.\n그래서 실제 Node.js 프로젝트에서는 환경 변수를 좀 더 효과적으로 관리하기 위해서 <code>dotenv</code>라는 라이브러리가 많이 사용되는데요.\n이 부분에 대해서는 추후 기회가 되면 다뤄보도록 하겠습니다.</p>","timeToRead":3,"fields":{"slug":"/js-node-process-env/","tags":["JavaScript","env"]},"frontmatter":{"title":"Node.js에서 환경 변수 다루기 (process.env)","date":"Jan 10, 2021"}},"next":{"fields":{"slug":"/react-hooks-use-fetch/"},"frontmatter":{"title":"React에서 원격 API 호출하기"}}}}}