{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/shell-redirection/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/vite/"},"frontmatter":{"title":"Vite 처음 시작하기"}},"node":{"html":"<p>쉘 프로그래밍을 처음 하시는 분들이 스크립트를 읽으시다가 <code>2>&#x26;1</code>와 같은 알 수 없는 문법을 보고 당황하시는 경우가 있습니다.\n이 것을 보통 리다이렉션(Redirection)이라고 하는데요.\n어떤 명령의 입력이나 출력을 다른 곳으로 변경하기 위해서 사용됩니다.</p>\n<p>이번 포스팅에서는 쉘 리다이렉션의 기본 사용법을 알아보고 다양한 예제를 통해 어떻게 실제 쉘 프로그래밍에 활용할 수 있는지 배워보겠습니다.</p>\n<h2 id=\"표준-스트림\" style=\"position:relative;\"><a href=\"#%ED%91%9C%EC%A4%80-%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-label=\"표준 스트림 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표준 스트림</h2>\n<p>쉘의 리다이렉션을 이해하려면 우선 MacOS와 같은 리눅스/유닉스 운영체제의 세 가지 표준 스트림(Standard Stream)을 알고 있어야 합니다</p>\n<ul>\n<li>표준 입력(Standard Input, <code>stdin</code>): 키보드로 입력을 받는 스트림입니다.</li>\n<li>표준 출력(Standard Output, <code>stdout</code>): 터미널에 정상 출력을 보내는 스트림입니다.</li>\n<li>표준 오류(Standard Error, <code>stderr</code>): 터미널에 오류 출력을 보내는 스트림입니다.</li>\n</ul>\n<p>리다이렉션에서 표준 출력은 번호 <code>1</code>로 나타내고, 오류 출력은 번호 <code>2</code>로 나타내는데,\n이 부분은 밑에서 더 설명을 드리겠습니다.</p>\n<p>우리가 쉘에서 어떤 명령어를 실행하거나, 여러 명령어로 이루어진 쉡 스크립트를 실행하면, 각 명령이 정상적으로 처리되었든 오류가 발생하였든 터미널에 결과가 출력이 됩니다.</p>\n<p>예를 들어, <code>cat</code> 명령어를 존재하는 파일을 상대로 실행하면 정상적으로 파일 내용이 터미널에 출력이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> .gitignore\n.idea\n.DS_Store</code></pre></div>\n<p>그리고 존재하는 파일을 상대로 실행해도 오류 메시지가 터미널에 출력이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> gitignore\ncat: gitignore: No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<p>이렇게 터미널에서 일회성으로 명령어를 실행할 때는 이렇게 정상 출력과 오류 출력을 구분없이 터미널에 출력해도 크게 문제되지 않습니다.\n하지만 쉘의 이러한 기본 처리 방식은 스크립트를 실행하거나 오랫동안 떠 있는 프로그램을 실행할 때는 적합하지 않죠.</p>\n<p>일반적으로는 정상 출력과 오류 출력을 각각 별도의 파일에 저장해야 로그가 유실된 위험이 적고 디버깅이 용이할 것입니다.</p>\n<h2 id=\"출력-리다이렉션\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EB%A0%A5-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98\" aria-label=\"출력 리다이렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력 리다이렉션</h2>\n<p><code>></code> 연산자는 명령어의 출력 내용을 터미널에 보내지 않고 다른 곳으로 보낼 수 있도록 해줍니다.\n가장 흔하게 볼 수 있는 사용 사례로 출력 내용을 로그 파일에 저장하는 것을 들 수 있습니다.</p>\n<p>예를 들어, <code>cat .gitignore</code> 명령어의 실행 결과를 <code>test.log</code> 파일로 보내보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> .gitignore <span class=\"token operator\">></span> test.log</code></pre></div>\n<p><code>test.log</code>의 내용을 터미널에 찍어보면 <code>.gitignore</code> 파일과 동일한 내용이 확인될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.log\n.idea\n.DS_Store</code></pre></div>\n<p><code>></code> 연산자는 파일이 이미 존재하면 해당 파일을 덮어쓰기 때문에 주의가 필요합니다.</p>\n<p>예를 들어, 제가 이번에는 <code>cat README.md</code> 실행 결과를 <code>test.log</code> 파일로 보내보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> README.md <span class=\"token operator\">></span> test.log</code></pre></div>\n<p><code>test.log</code> 파일에 기존에 있던 <code>.gitignore</code>의 내용이 모두 사라지고, <code>README.md</code> 파일의 내용으로 완전히 대체가 된 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.log\n<span class=\"token comment\"># README</span>\nPlease <span class=\"token builtin class-name\">read</span> me<span class=\"token operator\">!</span></code></pre></div>\n<p>대신에 <code>>></code> 연산자를 사용하면 기존 내용을 건들이지 않고 명령어 실행 결과를 파일 끝에 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> .gitignore <span class=\"token operator\">>></span> test.log</code></pre></div>\n<p><code>test.log</code> 파일의 내용을 다시 확인해보면 <code>README.md</code> 파일의 내용이 <code>.gitignore</code> 파일에 덧붙여진 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.log\n<span class=\"token comment\"># README</span>\nPlease <span class=\"token builtin class-name\">read</span> me<span class=\"token operator\">!</span>\n.idea\n.DS_Store</code></pre></div>\n<h2 id=\"오류-리다이렉션\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98\" aria-label=\"오류 리다이렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 리다이렉션</h2>\n<p>이번에는 존재하지 않는 파일을 대상으로 <code>cat</code> 명령어를 실행 후에 출력 결과를 <code>test.log</code> 파일로 보내보겠습니다.</p>\n<p>😮 옷! 예상과 달리 오류 메시지가 그대로 터미널에 출력이 되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> gitignore <span class=\"token operator\">></span> test.log\ncat: gitignore: No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<p><code>test.log</code> 파일은 내용이 비어 있네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.log</code></pre></div>\n<p>왜 이런 일이 발생하는 걸까요? 🤔</p>\n<p>비밀은 바로 맨 처음에 알려드린 표준 스트림을 나타내는 번호에 있습니다.\n<code>></code>는 사실 <code>1></code>의 축약된 형태이기 때문에, 정상 출력만 리다이렉션해줍니다.\n그런데 우리는 오류 출력을 리다이렉션 하고 싶으므로 <code>2></code>를 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> gitignore <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> test.log</code></pre></div>\n<p>이제 원했던 바와 같이 <code>test.log</code> 파일에 오류 내용이 저장되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.log\ncat: gitignore: No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<p>어떤 사유로든 오류 출력을 아예 무시하고 싶다면 <code>/dev/null</code> 파일로 보내면 됩니다.\n<code>/dev/null</code> 파일은 어떤 출력을 보내도 그냥 무시해버리는 특수한 파일로 생각하시면 이해가 쉬우실 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> gitignore <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null</code></pre></div>\n<p><code>2</code>를 빼면 성공 출력까지 무시할 수 있겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> gitignore <span class=\"token operator\">></span>/dev/null</code></pre></div>\n<h2 id=\"통합-리다이렉션\" style=\"position:relative;\"><a href=\"#%ED%86%B5%ED%95%A9-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98\" aria-label=\"통합 리다이렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>통합 리다이렉션</h2>\n<p>만약에 표준 출력과 오류 출력 모두를 리다이렉션 하고 싶다면 어떻게 해야할까요?\n이럴 때는 숫자 <code>1</code>이나 <code>2</code> 대신에 <code>&#x26;</code> 기호를 사용하면 됩니다.</p>\n<p>예를 들어, 존재하지 않는 파일을 상대로 <code>cat</code> 명령어를 실행하여 오류 내용을 다시 한 번 <code>test.log</code> 파일에 사용하여 <strong>덧붙여</strong> 보겠습니다. (<code>>></code> 연산자 사용)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> gitignore <span class=\"token operator\">&amp;>></span> test.log</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.log\ncat: gitignore: No such <span class=\"token function\">file</span> or directory\ncat: gitignore: No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<p>이번에는 존재하는 파일 상대로 <code>cat</code> 명령어를 실행하여 파일 내용을 <code>test.log</code> 파일에 덧붙여 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> .gitignore <span class=\"token operator\">&amp;>></span> test.log</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.log\ncat: gitignore: No such <span class=\"token function\">file</span> or directory\ncat: gitignore: No such <span class=\"token function\">file</span> or directory\n.idea\n.DS_Store</code></pre></div>\n<p>정상 출력이든 오류 출력이든 가리지 않고 <code>test.log</code> 파일에 잘 추가되는 것을 볼 수 있습니다.</p>\n<p>만약에 정상 출력은 <code>success.log</code> 파일로, 오류 출력은 <code>error.log</code> 파일로 보내고 싶다면 다음과 같은 형태로 명령어를 실행하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ 명령어 <span class=\"token operator\">></span> success.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> error.log</code></pre></div>\n<p>쉘 프로그래밍을 하다보면 오류 출력을 표준 출력으로 결합해야할 때가 있습니다.\n보통 중요하지 않은 오류 때문에 프로그램의 실행이 멈추는 것을 방지할 수 있죠.</p>\n<p>이럴 때는 다음과 같은 형태로 <code>2>&#x26;1</code>를 사용하여 오류 출력을 표준 출력으로 결합한 후에 파일로 리다이렉션하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ 명령어 <span class=\"token operator\">></span> any.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span></code></pre></div>\n<h2 id=\"입력-리다이렉션\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EB%A0%A5-%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98\" aria-label=\"입력 리다이렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력 리다이렉션</h2>\n<p><code>&#x3C;</code> 연산자는 명령어의 입력 내용을 다른 곳으로 부터 가져올 수 있도록 해줍니다.</p>\n<p>예를 들어, <code>test.log</code> 파일의 내용을 입력으로 <code>cat</code> 명령어를 실행해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> <span class=\"token operator\">&lt;</span> test.log\ncat: gitignore: No such <span class=\"token function\">file</span> or directory\ncat: gitignore: No such <span class=\"token function\">file</span> or directory\n.idea\n.DS_Store</code></pre></div>\n<p>다른 예로, <code>grep</code> 명령여의 입력으로 <code>test.log</code> 파일의 내용을 보내보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">grep</span> <span class=\"token string\">\"gitignore\"</span> <span class=\"token operator\">&lt;</span> test.log\ncat: gitignore: No such <span class=\"token function\">file</span> or directory\ncat: gitignore: No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<p>좀 응용을 해보자면… <code>grep</code> 명령어의 실행 결과를 터미널에 출력하는 대신에 파일에 저장할 수도 있겠죠? 😉</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">grep</span> <span class=\"token string\">\"gitignore\"</span> <span class=\"token operator\">&lt;</span> test.log <span class=\"token operator\">></span> grep.txt</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> grep.txt\ncat: gitignore: No such <span class=\"token function\">file</span> or directory\ncat: gitignore: No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 쉘의 리다이렉션을 어떻게 사용하는지 다양한 예제를 통해서 살펴보았습니다.\n리다이렉션이 얼마나 강력한지 느끼실 수 있는 기회가 되기를 바라며 본 포스팅이 여러분의 쉘 능력을 업그레이드하는데 도움이 되었으면 좋겠습니다1</p>","timeToRead":5,"fields":{"slug":"/shell-redirection/","tags":["Mac","Linux","terminal","Shell","CLI","redirection"]},"frontmatter":{"title":"쉘 리다이렉션(Redirection) 사용법","date":"Jul 10, 2024"}},"next":{"fields":{"slug":"/js-alert-confirm-prompt/"},"frontmatter":{"title":"브라우저의 고전 팝업 삼총사: alert(), confirm(), prompt()"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}