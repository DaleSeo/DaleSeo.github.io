{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/tsconfig-path-mapping/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>자바스크립트 프로젝트에서 아래와 같은 형태로 모듈을 불러오는 코드를 마주친 적이 있으신가요?\n머리 속에서 상위 디렉토리를 하나씩 차례대로 올라갔다가 다시 내려오다보면 혈압이 오르는 경험할 수 있는데요. 🤬</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> whereAmI <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../../../../where/the/hell/are/you\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번 포스팅에서는 상대 경로나 절대 경로를 통해서 내부 모듈을 불러올 때 겪을 수 있는 문제점에 대해서 알아보겠습니다.\n그리고 경로 별칭을 통해서 좀 더 깔끔하게 내부 모듈을 불러올 수 있도록 타입스크립트를 설정하는 방법에 대해서 배우겠습니다.</p>\n<h2 id=\"상대-경로\" style=\"position:relative;\"><a href=\"#%EC%83%81%EB%8C%80-%EA%B2%BD%EB%A1%9C\" aria-label=\"상대 경로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상대 경로</h2>\n<p>타입스크립트 프로젝트에서 내부 모듈을 불러올 때 가장 쉽게 볼 수 있는 방식은 <code>import</code> 문에서 <code>from</code> 키워드 다음에 상대 경로를 적는 것입니다.</p>\n<div class=\"gatsby-code-title\">test/common/utilities/math/add.test.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../../src/common/utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>보시다시피 상대 경로를 사용하면 해당 파일이 프로젝트 내에서 정확히 어디에 있는지 파악한는 게 상당히 고통스러울 수 있습니다.\n뿐만 아니라 코드 작성자 입장에서도 내부 모듈의 파일 위치를 상대 경로로 적는 것이 코드 편집기의 도움이 없으면 쉽지 않죠.</p>\n<p>더 큰 문제는 내부 모듈을 불러오는 파일을 다른 디렉토리로 옮길 때 모든 <code>import</code> 문을 새로운 파일 위치에 맞게 수정해줘야 한다는 것입니다.</p>\n<p>예를 들어, 파일을 부모 디렉토리로 옮긴다면 다음과 같이 수정을 해줘야하고,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../src/common/utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>파일을 자식 디렉토리로 옮긴다면 다음과 같이 수정을 해줘야할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../../../src/common/utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 마저도 코드 편집기의 도움을 받을 수 있지만 분명히 코드 리팩토링(refactoring)이 까다로워지는 요인이 됩니다.\n이 때문에 개발자들이 파일을 적절한 위치로 옮기는 것을 기피하게 되는 부작용이 생길 수도 있습니다.</p>\n<h2 id=\"절대-경로\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EB%8C%80-%EA%B2%BD%EB%A1%9C\" aria-label=\"절대 경로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절대 경로</h2>\n<p>그렇다면 개발자의 경험을 해칠 수 있는 상대 경로 대신에 절대 경로를 통해서 내부 모듈을 불러오면 어떨까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"/Users/John/Projects/src/common/utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 것이 이론적으로 불가능한 것은 아니지만, 혼자 개발하는 프로젝트가 아닌 이상 현실적으로 적용하기 어려운 전략입니다.\n왜냐하면 개발자들은 본인의 컴퓨터에 해당 프로젝트를 재각기 다른 경로에 위치시킬 것이기 때문입니다.</p>\n<p>예를 들어, macOS을 사용하는 개발자 John는 <code>/Users/John/Projects/our-project</code>에 프로젝트를 두고, Windows을 사용하는 개발자 Jane은 <code>C:\\Users\\Jane\\Documents\\our-project</code>에 프로젝트를 두었다면, 두 개발자는 동일한 파일을 불러오기 위해서 서로 다른 절대 경로를 사용하게 될 것입니다.</p>\n<h2 id=\"경로-별칭\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EB%B3%84%EC%B9%AD\" aria-label=\"경로 별칭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로 별칭</h2>\n<p>경로 별칭(path alias)은 상대 또는 절대 경로를 대체할 수 있는 단축된 경로를 의미하는데요.\n경로 별칭을 활용하면 마치 npm 내려받은 외부 모듈을 불러오듯이 기억하기 쉬운 이름을 통해 내부 모듈을 불러올 수 있습니다.</p>\n<p>예를 들어, Zod라는 외부 모듈을 불러올 때, 아래와 같이 절대 경로나 상대 경로를 사용하시는 분은 없죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"/Users/John/Projects/our-project/node_modules/zod\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../node_modules/zod\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>외부 모듈을 불러올 때는 패키지 이름만을 사용하는 것이 일반적입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>node_modules</code> 폴더 아래의 패키지의 실제 경로 대신에 패키지 이름으로 외부 모듈을 불러올 수 있는 것처럼, 경로 별칭을 사용하면 내부 모듈에 미리 부여해 놓은 간결한 이름으로 불러올 수 있습니다.</p>\n<p>즉, 아래와 같이 실제 파일의 절대 경로나 상대 경로로 내부 모듈을 불러오는 대신에,</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"/Users/John/Projects/src/common/utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../../common/utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같이 간단한 문자열을 통해서 내부 모듈을 불러올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"utils/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"math-utils\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>심지어 이모지(emoji)를 통해서도 내부 모듈을 불러올 수 있게되죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"🤓\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>현업 프로젝트에서는 별칭 경로를 한 눈에 알아볼 수 있도록 <code>~</code>, <code>@</code>, <code>#</code>, <code>$</code>와 같은 특수 기호를 앞에 붙이는 경우가 많습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"~utils/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@utils/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"#utils/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"$utils/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"paths-옵션\" style=\"position:relative;\"><a href=\"#paths-%EC%98%B5%EC%85%98\" aria-label=\"paths 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>paths 옵션</h2>\n<p>타입스크립트 프로젝트에서 경로 별칭은 <code>tsconfig.json</code> 파일의 <code>paths</code> 옵션을 통해서 등록할 수 있습니다.\n경로 별칭은 키(key)로 모듈 경로를 값(value)으로 하는 객체를 <code>paths</code> 옵션에 설정해주면 되는데요.</p>\n<p>예를 들어, 아래와 같이 두 개의 경로 별칭을 등록해두면,</p>\n<div class=\"gatsby-code-title\">tsconfig.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"#utils/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/common/utilities/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"#math-utils/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/common/utilities/math/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>경로 별칭을 통해서 내부 모듈을 불러올 수 있게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shuffle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"#utils/random\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// import { shuffle } from \"&lt;프로젝트 최상위 경로>/src/common/utilities/random\";</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"#math-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// import { add } from \"&lt;프로젝트 최상위 경로>/src/common/utilities/math\";</span></code></pre></div>\n<h2 id=\"baseurl-옵션\" style=\"position:relative;\"><a href=\"#baseurl-%EC%98%B5%EC%85%98\" aria-label=\"baseurl 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>baseUrl 옵션</h2>\n<p>규모가 그리 크지 않은 프로젝트에서는 경로 별칭까지는 필요 없을 수 있습니다.\n단지 내부 모듈을 불러올 때 상대 경로나 절대 경로만을 피하고 싶다면 <code>tsconfig.json</code> 파일의 <code>baseUrl</code> 옵션을 사용할 수 있습니다.</p>\n<p>예를 들어서, 소스 코드를 모두 <code>src</code> 폴더 아래에 두는 프로젝트에서는 <code>baseUrl</code> 옵션을 <code>./src</code>로 지정해줄 수 있습니다.</p>\n<div class=\"gatsby-code-title\">tsconfig.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러면 맨 앞에 있는 <code>./src</code>를 생략한 체로 내부 모듈의 파일 위치를 적어줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shuffle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"common/utilities/random\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// import { shuffle } from \"&lt;프로젝트 최상위 경로>/src/common/utilities/random\";</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"common/utilities/math-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// import { add } from \"&lt;프로젝트 최상위 경로>/src/common/utilities/math\";</span></code></pre></div>\n<h2 id=\"baseurl-옵션--paths-옵션\" style=\"position:relative;\"><a href=\"#baseurl-%EC%98%B5%EC%85%98--paths-%EC%98%B5%EC%85%98\" aria-label=\"baseurl 옵션  paths 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>baseUrl 옵션 + paths 옵션</h2>\n<p><code>baseUrl</code> 옵션에 <code>paths</code> 옵션을 함께 설정해주면 좀 더 유연하고 복잡한 경로 맵핑이 가능해집니다.</p>\n<p>예를 들어, <code>baseUrl</code> 옵션으로 이미 <code>./src</code>을 지정해준 경우, <code>paths</code> 옵션에서 <code>./src</code>를 생략할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">tsconfig.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"#utils/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"common/utilities/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"#math-utils/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"common/utilities/math/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러면 경로 별칭을 사용할 때 내부적으로 두 단계로 경로 맵핑이 일어납니다.\n첫 번째는 <code>paths</code>에 따라 맵핑이 일어나고, 두 번째는 <code>baseUrl</code>에 따라 맵핑이 일어나죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> shuffle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"#utils/random\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// import { shuffle } from \"common/utilities/random\";</span>\n<span class=\"token comment\">// import { shuffle } from \"&lt;프로젝트 최상위 경로>/src/common/utilities/random\";</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"#math-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// import { add } from \"common/utilities/math/*\";</span>\n<span class=\"token comment\">// import { add } from \"&lt;프로젝트 최상위 경로>/src/common/utilities/math\";</span></code></pre></div>\n<h2 id=\"경로-별칭-설정-팁\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EB%B3%84%EC%B9%AD-%EC%84%A4%EC%A0%95-%ED%8C%81\" aria-label=\"경로 별칭 설정 팁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로 별칭 설정 팁</h2>\n<p>새로운 디렉토리가 생길 때 마다 경로 별칭을 등록해주는 것이 번거롭거나 까먹기 쉬운 작업이 될 수 있는데요.\n이럴 때는 다음과 같이 내부 모듈을 대표할 수 있는 특수 기호를 딱 하나만 등록해놓는 방법도 있습니다.</p>\n<div class=\"gatsby-code-title\">tsconfig.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"#/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 설정을 해주면 <code>#/</code>로 시작하는 문자열을 통해서 프로젝트 내의 모든 내부 모듈을 불러올 수 있게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"#/common/utilities/math\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// import { add } from \"common/utilities/math/*\";</span>\n<span class=\"token comment\">// import { add } from \"&lt;프로젝트 최상위 경로>/src/common/utilities/math\";</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 내부 모듈을 불러올 때 상대 경로나 절대 경로 대신에 경로 별칭을 사용할 수 있도록 타입스크립트를 설정하는 방법에 대해서 알아보았습니다.\n리팩토링이 용이하고 이해하기 쉬운 코드를 짜는데 본 포스팅에서 다룬 요령들이 도움이 되었으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/tsconfig-path-mapping/","tags":["JavaScript","TypeScript","config"]},"frontmatter":{"title":"타입스크립트 경로 맵핑 설정 (baseUrl, paths)","date":"Nov 15, 2023"}},"next":{"fields":{"slug":"/chatgpt-bigocalc/"},"frontmatter":{"title":"OpenAI 무료 크레딧으로 만든 웹사이트의 방문자가 폭증한다면? (Big O Calc)"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}