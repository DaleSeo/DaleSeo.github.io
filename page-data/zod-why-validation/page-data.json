{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/zod-why-validation/","result":{"pageContext":{"previous":{"fields":{"slug":"/zod/"},"frontmatter":{"title":"Zod로 유효성 검증과 타입 선언의 두 마리 토끼 잡기"}},"node":{"html":"<p>“타입스크립트로 코드를 짜니까 별도로 유효성 검증은 필요없는 거 아니에요?”</p>\n<p>타입스크립트를 공부하고 계시거나 자바스크립트 경험이 많지 않은 개발자들로 부터 종종 받는 질문인데요.\n정말 타입스크립트의 타입 검사가 자바스크립트의 유효성 검증을 대신할 수 있을까요?</p>\n<p>이번 포스팅에서는 이러한 타입스크립트에 대한 오해를 풀어보는 시간을 갖도록 하겠습니다.</p>\n<h2 id=\"타입스크립트의-역할\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%97%AD%ED%95%A0\" aria-label=\"타입스크립트의 역할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 역할</h2>\n<p>이해를 돕기 위해서 타입스크립트로 간단한 코드를 함께 짜볼까요?\n사용자 계정을 나타내는 <code>Account</code> 인터페이스를 선언하고 이것을 입력으로 받는 <code>processAccount()</code> 함수를 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">account.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">\"GOLD\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"SILVER\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"BRONZE\"</span><span class=\"token punctuation\">;</span>\n  active<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  createdAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n  image<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  ips<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">processAccount</span><span class=\"token punctuation\">(</span>account<span class=\"token operator\">:</span> Account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 어떤 로직</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그 다음 <code>Account</code> 인터페이스와 일치하지 않는 인수로 <code>processAccount()</code> 함수를 호출하려고 하면 아래와 같이 타입 에러가 발생하는데요.</p>\n<div class=\"gatsby-code-title\">account.test.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">processAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Argument of type '{}' is not assignable to parameter of type 'Account'.</span>\n\n<span class=\"token function\">processAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//  ❌ Type 'number' is not assignable to type 'string'.ts(2322)</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token string\">\"35\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//  ❌ Type 'string' is not assignable to type 'number'.ts(2322)</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">\"PLATINUM\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//  ❌ Type '\"PLATINUM\"' is not assignable to type '\"GOLD\" | \"SILVER\" | \"BRONZE\"'.ts(2322)</span>\n  active<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  createdAt<span class=\"token operator\">:</span> <span class=\"token string\">\"2020-01-17T16:45:30\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//  ❌ Type 'string' is not assignable to type 'Date'.ts(2322)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그런데 위에서 작성한 타입스크립트 코드를 타입스크립트 컴파일러(compiler)인 <code>tsc</code>를 통해서 자바스크립트로 변환하면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx tsc account.ts</code></pre></div>\n<p>그러면 다음과 같이 <code>Account</code> 인터페이스가 없어지고, <code>processAccount()</code> 함수에 붙어있던 타입 정보도 모두 사라지게 되는데요.</p>\n<div class=\"gatsby-code-title\">account.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">processAccount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">account</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 어떤 로직</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러므로 이 함수를 실제로 호출할 때는 어떤 형태의 인수를 넘기더라도 아무런 문제가 발생하지 않습니다.</p>\n<div class=\"gatsby-code-title\">account.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">updateAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 문제없이 실행 됨</span>\n\n<span class=\"token function\">updateAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token string\">\"35\"</span><span class=\"token punctuation\">,</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">\"PLATINUM\"</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  createdAt<span class=\"token operator\">:</span> <span class=\"token string\">\"2020-01-17T16:45:30\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 문제없이 실행 됨</span></code></pre></div>\n<p>이 간단한 예제를 통해서 우리는 무엇을 배울 수 있을까요?</p>\n<ol>\n<li>타입스크립트 코드에서 타입 에러는 컴파일 과정에서만 발생할 수 있습니다.</li>\n<li>실제로 자바스크립트 프로그램이 실행될 때는 타입스크립트는 아무런 역할을 못합니다.</li>\n</ol>\n<p>여기서 “컴파일”은 항상 빌드나 배포 과정에서만 일어나는 과정은 아니라는 것에 주의하셔야 하는데요.\nVSCode와 같은 코드 편집기에서도 흔하게 타입 에러를 확인할 수 있죠?\n이것은 우리가 코드를 편집할 때 실시간으로 코드 편집기가 알아서 컴파일을 해주기 때문입니다.</p>\n<p>타입스크립트는 코드에 명시되어 있는 타입 구조를 정적으로 분석하여 <strong>프로그램을 실행하지 않고도</strong> 발생할 가능성이 있는 문제를 예측할 수 있는데요.\n결국 타입스크립트는 이렇게 예측 가능한 문제를 개발자에게 알려줌으로써 좀 더 견고한 코드를 짤 수 있도록 도와주는 도구일 뿐입니다.</p>\n<p>다시 한 번 정리해보면 타입 검사란 타입스크립트로 작성된 코드의 컴파일 시점에서 일어나며 오직 개발자를 위한 것입니다.\n유효성 검증은 컴파일이 끝난 자바스립트 프로그램의 실행 시점에서 일어나며 최종 사용자를 위한 것입니다.\n즉, 이 둘은 엄연히 다른 것이며 타입 검사가 유효성 검증을 대신할 수 없습니다.</p>\n<h2 id=\"타입-시스템의-한계\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"타입 시스템의 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 시스템의 한계</h2>\n<p>아무리 우리가 타입스크립트를 사용하여 예측할 수 있는 문제를 모두 해결하더라도 프로그램이 실행될 때는 예측할 수 없는 문제들이 너무나도 많습니다.\n왜냐하면 프로그램이 실행되는 환경에는 우리가 통제할 수 없는 너무나도 많은 변수가 존재하기 때문인데요.</p>\n<p>특히 웹 애플리케이션이나 CLI(커맨드 라인 인터페이스) 도구처럼 사용자로부터 입력을 받는 일이 빈번하거나 외부 API에 크게 의존하는 프로그램의 경우,\n원치 않거나 예상치 못한 형태로 해당 애플리케이션에 데이터가 유입될 가능성이 상당히 높습니다.</p>\n<p>이렇게 외부에서 들어오는 데이터를 효과적으로 검증하려면 단순히 자료형을 제한하는 것만으로는 부족할 때가 많은데요.\n예를 들어, 자바스크립트에서는 숫자형과 문자형을 구분지을 수는 있지만 숫자형 내에서 정수와 실수를 구분할 수는 없고 숫자의 범위를 제한할 수도 없죠.\n문자형을 데이터를 입력받을 때도 정해진 선택지 내에서 입력을 받고 싶거나 이메일, URL, IP 등 특정 문자열 형식으로 입력을 받아야 할 수도 있습니다.</p>\n<div class=\"gatsby-code-title\">account.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">\"GOLD\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"SILVER\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"BRONZE\"</span><span class=\"token punctuation\">;</span>\n  active<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  createdAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n  image<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  ips<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">processAccount</span><span class=\"token punctuation\">(</span>account<span class=\"token operator\">:</span> Account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 어떤 로직</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 자료형이 모두 맞기 때문에 타입 에러가 발생하지 않음... 😞</span>\n<span class=\"token function\">processAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ⚠️ 빈문자열</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ⚠️ 이메일 형식에 맞지 않음</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">9999.123</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ⚠️ 9999살? 나이가 소수?</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">\"GOLD\"</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-01-17T16:45:30\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 실제로 애플리케이션에 요구하는 유효성 검증은 자바스크립트의 느슨한 타입 시스템으로 충족하기에는 한계가 있죠.\n이러한 현실적인 이유로 대부분의 애플리케이션에서는 타입스크립트 사용과 별개로 유효성 검증을 구현하게 됩니다.</p>\n<h2 id=\"유효성-검증-구현의-고통\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%A6%9D-%EA%B5%AC%ED%98%84%EC%9D%98-%EA%B3%A0%ED%86%B5\" aria-label=\"유효성 검증 구현의 고통 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유효성 검증 구현의 고통</h2>\n<p>그럼 우리가 직접 유효성 검증을 구현해보면 어떨까요?</p>\n<p><code>Account</code> 인터페이스로 선언한 8개의 속성 중 4개의 속성에 대해서만 유효성 검증을 구현해보겠습니다.</p>\n<div class=\"gatsby-code-title\">account.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  level<span class=\"token operator\">:</span> <span class=\"token string\">\"GOLD\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"SILVER\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"BRONZE\"</span><span class=\"token punctuation\">;</span>\n  active<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  createdAt<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n  image<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  ips<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateAccount</span><span class=\"token punctuation\">(</span>account<span class=\"token operator\">:</span> Account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> account<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">||</span> account<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> account<span class=\"token punctuation\">.</span>age <span class=\"token operator\">!==</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">||</span> account<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GOLD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SILVER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BRONZE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid level\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span>createdAt <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid createdAt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 어떤 로직</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>어떤가요? 생각보다 작성해야 할 코드가 많고 함수 내부가 상당히 지저분해지죠?\n여기에다가 정규식을 이용해서 이메일, URL, IP 검증까지 한다면 코드가 이것보다 훨씬 더 복잡해질 것입니다.\n오히려 함수 내에서 비지니스 로직보다 유효성 검증 로직이 차지하는 공간이 더 커질 수도 있고요.\n소위 배보다 배꼽이 더 커질 수 있는 상황이 올 수 있거죠.</p>\n<p>그런데 이보다 더 큰 문제는 이 손수 작성한 유효성 검증 로직을 <code>Account</code> 인터페이스로 선언한 타입과 항상 일치하도록 관리해줘야 한다는 건데요.\n타입 바뀔 때마다 유효성 검증 로직을 수정해준다는게 여간 번거로운 일이 아니며 게다가 까먹기도 참 쉽습니다.\n어느 정도 규모가 있는 애플리케이션을 유지보수 해보셨다면 공감하실 거에요.</p>\n<p>따라서 개발 생산성이나 유지 보수 측면에서 위와 같은 방식으로 직접 유효성 검증을 구현하는 것은 효과적인 접근 방법이 아닐 것입니다.</p>\n<h2 id=\"유효성-검증-라이브러리\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%A6%9D-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"유효성 검증 라이브러리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유효성 검증 라이브러리</h2>\n<p>다행히도 자바스크립트 커뮤니티에는 유효성 검증을 도와주는 여러가지 라이브러리가 있는데요.</p>\n<p>대표적으로 <a href=\"https://www.npmjs.com/package/joi\">Joi</a>와 <a href=\"https://www.npmjs.com/package/yup\">Yup</a> 그리고 <a href=\"https://www.npmjs.com/package/zod\">Zod</a>를 들 수 있습니다.\n(공교롭게도 모두 이름이 3글자이네요 😆)\n이 유효성 검증 라이브러리들은 각각 특장점이 있지만 공통적으로 타입스크립트가 아닌 자바스크립트로 스키마(schema)를 정의하고 이것을 이용하여 유효성 검증을 가능하게 해줍니다.</p>\n<p>예를 들어서, Zod를 통해서 위해서 작성한 <code>Account</code> 인터페이스와 <code>processAccount()</code> 함수를 재작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">account.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ✅ 스키마 정의</span>\n<span class=\"token keyword\">const</span> Account <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  level<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">enum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GOLD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SILVER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BRONZE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  image<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ips<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  createdAt<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ✅ 스키마로 부터 타입 추론</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Account</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Account<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateAccount</span><span class=\"token punctuation\">(</span>account<span class=\"token operator\">:</span> Account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ✅ 스키마로 유효성 검증</span>\n  Account<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 어떤 로직</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>어떤가요? 코드가 정말 깔끔해졌죠! 🎉</p>\n<p>더군다나 우리는 더 이상 타입 선언과 유효성 검증을 일치시키야 한다는 걱정할 필요가 없습니다.\n동일한 스키마를 통해서 두 가지 부분 모두 해결되고 있으니까요. 😎</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 우리가 타입스크립트로 코드를 작성함에도 불구하고 왜 별도의 유효성 검증이 필요한지에 대해서 알아보았습니다.\n그리고 직접 유효성 검증을 구현하는 것이 얼마나 비효율적이고 항상 타입과 일치하도록 관리하는 것이 얼마나 힘든지도 살펴보았습니다.</p>\n<p>타입스크립트로 컴파일 때 수행되는 타입 검사와 자바스크립트로 프로그램 실행 때 해줘야하는 유효성 검증은 엄연히 다르다는 것을 이해하시는데 도움이 되었으면 좋겠습니다.</p>\n<p>다음 포스팅에서는 타입스크립트 친화적인 유효성 검증 라이브러리로 개발자들로부터 최근 많은 인기를 끌고 있는 Zod에 대해서 알아보도록 하겠습니다.</p>\n<blockquote>\n<p>Zod 관련 포스팅은 <a href=\"/?tag=Zod\">Zod 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":6,"fields":{"slug":"/zod-why-validation/","tags":["JavaScript","TypeScript","validation","library","Zod"]},"frontmatter":{"title":"타입스크립트를 쓰는데도 유효성 검증이 필요할까?","date":"Jun 6, 2023"}},"next":{"fields":{"slug":"/js-set/"},"frontmatter":{"title":"자바스크립트 세트(Set) 완벽 가이드"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}