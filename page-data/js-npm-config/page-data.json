{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-npm-config/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/github-actions-cache/"},"frontmatter":{"title":"GitHub Actions의 캐시(Cache) 액션으로 패키지 설치 최적화하기"}},"node":{"html":"<p>이번 포스팅에서는 npm 설정을 할 때 필요한 npmrc 파일과 <code>npm config</code> 커맨드에서 대해서 알아보겠습니다.</p>\n<h2 id=\"npmrc-파일\" style=\"position:relative;\"><a href=\"#npmrc-%ED%8C%8C%EC%9D%BC\" aria-label=\"npmrc 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npmrc 파일</h2>\n<p>npmrc 파일은 npm에서 설정을 저장해두는 파일로서 내장(builtin), 전역(global), 사용자(user), 프로젝트(project) 이렇게 4가지 범위의 <code>npmrc</code> 파일이 존재하는데요.</p>\n<p>먼저 내장 설정은 npm이 설치된 경로에 있는 <code>npmrc</code> 파일에 명시되어 있으며 모든 기본 설정을 담고 있습니다.\n전역 설정은 같은 컴퓨터를 사용하는 다른 사용자와 모든 프로젝트에 광범위하게 적용되기 때문에 일반적으로 잘 건드리지 않습니다.</p>\n<p>따라서 실제로 우리는 주로 사용자 범위와 프로젝트라 범위에서 npmrc 파일을 다룬다고 보면 되고요.\n보통 파일명 앞에 <code>.</code>을 붙여 기본적으로 숨긴 파일이 됩니다.\n사용자 범위의 <code>.npmrc</code> 파일은 운영체제의 사용자 홈(home) 디렉토리에 위치하고, 프로젝트 범위의 <code>.npmrc</code> 파일은 프로젝트 최상위(root) 디렉토리에 위치합니다.</p>\n<p>기본적으로 프로젝트 범위가 사용자 범위보다 좁으며 따라서 프로젝트 설정이 사용자 설정보다 우선시됩니다.\n여러 프로젝트에 적용되야 하는 설정은 사용자 범위에 명시하고 특정 프로젝트에 적용되야 하는 설정은 프로젝트 범위에서 명시하는 것이 좋습니다.</p>\n<h2 id=\"npm-config-커맨드\" style=\"position:relative;\"><a href=\"#npm-config-%EC%BB%A4%EB%A7%A8%EB%93%9C\" aria-label=\"npm config 커맨드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm config 커맨드</h2>\n<p>npmrc 파일을 열어서 직접 편집하려면 오타의 위험도 있고 npmrc 파일이 여러군데 있으니 관리도 쉽지 않을 것입니다.\n따라서 <code>npm</code>은 여러 npmrc 파일을 손쉽게 관리할 수 있도록 <code>npm config</code> 커맨드를 제공해주고 있습니다.</p>\n<p><code>npm config</code> 커맨드를 사용할 때는 <code>--locaiton</code> 또는 <code>-L</code> 옵션을 통해서 범위를 지정해줄 수 있는데요.\n이 옵션을 <code>global</code>로 설정하면 전역, <code>user</code>로 설정하면 사용자, <code>project</code>로 설정하면 프로젝트 범위가 적용됩니다.\n기본값은 <code>user</code>이기 때문에 사용자 홈 디렉토리에 있는 <code>.npmrc</code> 파일을 상대로 커맨드가 실행된다고 보시면 됩니다.</p>\n<h2 id=\"설정-읽기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%EC%9D%BD%EA%B8%B0\" aria-label=\"설정 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 읽기</h2>\n<p>먼저 npmrc 파일로 부터 특징 옵션에 대한 설정 값을 읽어오는 방법부터 알아보겠습니다.</p>\n<p><code>npm config get {키}</code> 커맨드를 사용하면 어떤 옵션 키에 대한 설정 값을 읽어올 수 있습니다.</p>\n<p>예를 들어, 패키지를 설치할 때 <code>package-lock.json</code> 파일을 고려하는지 여부를 확인해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config get package-lock\n<span class=\"token boolean\">true</span></code></pre></div>\n<p>고려하네요.</p>\n<p>현재 어떤 npm 저장소를 사용하고 있는지 확인해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config get registry\nhttps://registry.npmjs.org/</code></pre></div>\n<p>npm 공개(public) 저장소를 사용하네요.</p>\n<p>이번에는 npm 캐시를 저장하는 경로가 어디인지 확인해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config get cache\n/Users/daleseo/.npm</code></pre></div>\n<p>이 값은 운영체제에 따라 다르겠죠?</p>\n<p>사용자 범위의 설정을 저장하는 npmrc 파일 위치도 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config get userconfig\n/Users/daleseo/.npmrc</code></pre></div>\n<p>마찬가지로 여러분이 사용하시는 운영체제에 따라 다를 것입니다.\n참고로 저는 macOS를 사용하기 때문에 사용자 홈 디렉토리가 <code>/Users/사용자명</code> 입니다.</p>\n<h2 id=\"설정-쓰기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%EC%93%B0%EA%B8%B0\" aria-label=\"설정 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 쓰기</h2>\n<p>어떤 옵션 키에 대한 설정 값을 npmrc 파일에 쓸 때는 <code>npm config set {키}={값}</code>을 사용합니다.</p>\n<p>예를 들어, 패키지를 설치할 때 <code>package-lock.json</code> 파일을 무시하고 싶다면 <code>package-lock</code> 키를 <code>false</code>로 설정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> package-lock <span class=\"token boolean\">false</span></code></pre></div>\n<p>일부 유료 패키지를 npm 공개 저장소가 아닌 사설 저장소에서 내려받아야 하는 경우가 있는데요.\n예를 들어, <code>@fortawesome</code> 패키지를 <code>https://npm.fontawesome.com/</code> 저장소에서 내려받아야 한다면 다음과 같이 저장소 URL과 인증 토큰을 설정해줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> @fortawesome:registry<span class=\"token operator\">=</span>https://npm.fontawesome.com/\n$ <span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> //npm.fontawesome.com/:_authToken<span class=\"token operator\">=</span><span class=\"token variable\">${FONTAWESOME_NPM_AUTH_TOKEN}</span></code></pre></div>\n<p>또 다른 예로, npm 저장소에 접근할 때 프록시 서버를 거쳐야 한다면 다음과 같이 관련 옵션을 설정해줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">proxy</span><span class=\"token operator\">=</span>http://proxy.company.com:8080\n$ <span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> https-proxy<span class=\"token operator\">=</span>http://proxy.company.com:8080\n$ <span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> strict-ssl<span class=\"token operator\">=</span>false</code></pre></div>\n<p>위에서 설명드린 것 처럼 <code>npm config</code> 명령어는 기본적으로 사용자 범위에서 설정을 합니다.\n만약에 프로젝트 최상 디렉토리에 있는 <code>.npmrc</code> 파일에 설정 값을 쓰려면 <code>--location</code> 옵션을 <code>project</code>로 주면 됩니다.</p>\n<p>실습을 위해서 위에서 설정한 <code>package-lock</code> 옵션과 <code> @fortawesome:registry</code> 옵션을 프로젝트 범위에서 한번 재설정해 줘 볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> package-lock <span class=\"token boolean\">false</span> <span class=\"token parameter variable\">--location</span><span class=\"token operator\">=</span>project\n$ <span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> @fortawesome:registry<span class=\"token operator\">=</span>https://npm.fontawesome.com/ <span class=\"token parameter variable\">--location</span><span class=\"token operator\">=</span>project</code></pre></div>\n<h2 id=\"환경-변수로-설정\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98%EB%A1%9C-%EC%84%A4%EC%A0%95\" aria-label=\"환경 변수로 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 변수로 설정</h2>\n<p>npm은 환경 변수를 통해서도 설정이 가능하며 환경 변수를 사용하면 범위에 무관하게 npmrc 파일에 명시된 설정보다 우선합니다.\nnpm 설정을 위한 환경 변수는 <code>npm_config_</code>로 시작해야하며, 키에 사용된 하이픈(<code>-</code>)을 모두 언더바(<code>_</code>)로 바꿔줘야 합니다.</p>\n<p>예를 들어, <code>package-lock</code> 옵션을 환경 변수를 통해서 <code>true</code>로 설정해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">npm_config_package_lock</span><span class=\"token operator\">=</span>true</code></pre></div>\n<p>이렇게 해주면 위에서 <code>npm config set</code> 명령어를 통해서 사용자 범위와 프로젝트 범위에서 <code>false</code>로 설정한 것이 무시가 될 것입니다.</p>\n<p><code>npm config get</code> 명령어로 정말 그런지 확인해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config get package-npm_config_package_lock\n<span class=\"token boolean\">true</span></code></pre></div>\n<p>네 이렇게 예상했던데로 <code>false</code> 대신에 <code>true</code>가 나오네요.</p>\n<h2 id=\"전체-설정-조회\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%84%A4%EC%A0%95-%EC%A1%B0%ED%9A%8C\" aria-label=\"전체 설정 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 설정 조회</h2>\n<p><code>npm config ls</code> 명령어를 사용하면 지금까지 설정한 모든 내역을 범위별로 한 눈에 확인해볼 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config <span class=\"token function\">ls</span>\n<span class=\"token punctuation\">;</span> <span class=\"token string\">\"user\"</span> config from /Users/daleseo/.npmrc\n\n<span class=\"token punctuation\">;</span> @fortawesome:registry <span class=\"token operator\">=</span> <span class=\"token string\">\"https://npm.fontawesome.com/\"</span> <span class=\"token punctuation\">;</span> overridden by project\nhttps-proxy <span class=\"token operator\">=</span> <span class=\"token string\">\"http://proxy.company.com:8080/\"</span>\n<span class=\"token punctuation\">;</span> package-lock <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">;</span> overridden by <span class=\"token function\">env</span>\nproxy <span class=\"token operator\">=</span> <span class=\"token string\">\"http://proxy.company.com:8080/\"</span>\nstrict-ssl <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token punctuation\">;</span> <span class=\"token string\">\"project\"</span> config from /Users/daleseo/work/daleseo/.npmrc\n\n@fortawesome:registry <span class=\"token operator\">=</span> <span class=\"token string\">\"https://npm.fontawesome.com/\"</span>\n<span class=\"token punctuation\">;</span> package-lock <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">;</span> overridden by <span class=\"token function\">env</span>\n\n<span class=\"token punctuation\">;</span> <span class=\"token string\">\"env\"</span> config from environment\n\npackage-lock <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token punctuation\">;</span> <span class=\"token function\">node</span> bin location <span class=\"token operator\">=</span> /Users/daleseo/.nvm/versions/node/v16.13.0/bin/node\n<span class=\"token punctuation\">;</span> cwd <span class=\"token operator\">=</span> /Users/daleseo/work/daleseo\n<span class=\"token punctuation\">;</span> <span class=\"token environment constant\">HOME</span> <span class=\"token operator\">=</span> /Users/daleseo\n<span class=\"token punctuation\">;</span> Run <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> config <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span><span class=\"token variable\">`</span></span> to show all defaults.</code></pre></div>\n<p><code>;</code>는 <code>npm config ls</code> 결과에서 주석 처리를 의미하므로 없는 <code>;</code>로 시작하는 줄은 무시해도 무방합니다.\n일반적으로 낮은 범위에서 설정된 옵션이 높은 범위에서 재설정되면 우선순위에 따라 낮은 범위의 설정 값은 덮어쓰기(overridden)가 됩니다.</p>\n<p>예를 들어, <code>@fortawesome:registry</code> 옵션은 프로젝트 범위에서 재설정되었으므로 사용자 범위에서 주석 처리되었습니다.\n또한, <code>package-lock</code> 옵션은 환경변수로 재설정되었으므로 프로젝트 범위와 사용자 범위에서 주석 처리가 된 것을 볼 수 있습니다.</p>\n<h2 id=\"설정-삭제\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%EC%82%AD%EC%A0%9C\" aria-label=\"설정 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 삭제</h2>\n<p><code>npm config delete {키}</code> 명령어를 사용하면 설정되어 있는 옵션을 삭제할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config delete proxy\n$ <span class=\"token function\">npm</span> config delete https-proxy\n$ <span class=\"token function\">npm</span> config delete strict-ssl</code></pre></div>\n<p>정말 잘 삭제되었는지 <code>npm config get</code> 명령어를 통해서 확인해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> config get proxy https-proxy strict-ssl\n<span class=\"token assign-left variable\">proxy</span><span class=\"token operator\">=</span>null\nhttps-proxy<span class=\"token operator\">=</span>null\nstrict-ssl<span class=\"token operator\">=</span>true</code></pre></div>\n<p>이렇게 <code>npm config get</code> 명령어는 여러 개의 옵션 키를 동시에 넘길 수도 있습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 npm에서 설정을 보관하는 npmrc 파일과 <code>npm config</code> 커맨드를 통해서 npmrc 파일을 관리하는 방법에 대해서 살펴보았습니다.\nnpm에서 설정이 가능한 모든 옵션은 <a href=\"https://docs.npmjs.com/cli/v8/using-npm/config\">공식 레퍼런스</a>를 참고 바라겠습니다.</p>","timeToRead":5,"fields":{"slug":"/js-npm-config/","tags":["JavaScript","Node.js","npm","npmrc"]},"frontmatter":{"title":"npmrc 파일과 npm config 커맨드","date":"Apr 27, 2022"}},"next":{"fields":{"slug":"/python-reversed/"},"frontmatter":{"title":"파이썬의 reversed() 함수로 거꾸로 루프 돌리기 (vs. slicing 연산자 & reverse() 함수)"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}