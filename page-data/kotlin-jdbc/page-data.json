{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/kotlin-jdbc/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/kotlin-scope-functions/"},"frontmatter":{"title":"Kotlin의 Scope 함수 정리"}},"node":{"html":"<p>JDBC(Java Database Connectivity)는 JVM 위에서 돌아가는 애플리케이션이 데이터베이스와 상호작용하는 데 근간이 되는 API입니다.</p>\n<p>이번 포스팅에서는 간단한 예제를 통해서 Kotlin에서 JDBC API를 어떻게 사용하는지에 대해서 살펴보도록 하겠습니다.</p>\n<h2 id=\"jdbc-api-패키지\" style=\"position:relative;\"><a href=\"#jdbc-api-%ED%8C%A8%ED%82%A4%EC%A7%80\" aria-label=\"jdbc api 패키지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JDBC API 패키지</h2>\n<p>JDBC API는 <code>java.sql</code>과 <code>javax.sql</code>, 이렇게 두 개의 패키지로 구성되어 있는데요.\n<code>java.sql</code> 패키지는 데이터베이스 연결, SQL 쿼리 실행, 결과 집합 처리에 필요한 클래스와 인터페이스를 제공합니다.\n본 포스팅에서 사용할 <code>Connection</code>, <code>Statement</code>, <code>ResultSet</code>과 같은 JDBC API의 기본 구성 요소가 모두 <code>java.sql</code> 패키지에 속합니다.</p>\n<p><code>javax.sql</code> 패키지는 <code>java.sql</code> 패키지가 확장되었다고 보시면 되는데요.\n데이터 소스(data source)와 커넥션 풀(connection pool)을 통해 더 효율적인 데이터베이스 연결 관리 기능을 제공합니다.\n또한 분산 트랜잭션을 지원하여 여러 데이터베이스와 트랜잭션(transaction)을 관리할 수 있습니다.</p>\n<p>이 두 패키지는 모두 Java의 표준 API이기 때문에 Kotlin에서도 별도 설치가 필요없습니다.</p>\n<h2 id=\"데이터에비스-드라이버-설치\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90%EB%B9%84%EC%8A%A4-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84-%EC%84%A4%EC%B9%98\" aria-label=\"데이터에비스 드라이버 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터에비스 드라이버 설치</h2>\n<p>관계형(relational) 데이터베이스 시장에는 Oracle Database나 MS SQL Server와 같은 기업용 제품부터 <a href=\"/?tag=PostgreSQL\">PostgreSQL</a>, MySQL, MariaDB, <a href=\"/?tag=SQLite\">SQLite</a>, H2와 같은 오픈 소스까지 매우 다양한 엔진이 있는데요.</p>\n<p>프로젝트에 사용하는 데이터베이스 엔진에 맞는 드라이버 패키지를 반드시 설치해주셔야 합니다.</p>\n<p>예를 들어, <a href=\"/?tag=PostgreSQL\">PostgreSQL</a>을 사용하신다면 <code>org.postgresql:postgresql</code> 패키지를 설치해야 합니다.</p>\n<div class=\"gatsby-code-title\">build.gradle.kts</div>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\">dependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.postgresql:postgresql:42.7.4\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>본 포스팅을 따라오실 때는 별도의 데이터베이스 구성 작업이 필요없는 H2와 같은 메모리 데이터베이스를 사용하시면 좋을 것 같습니다.</p>\n<div class=\"gatsby-code-title\">build.gradle.kts</div>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\">dependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.h2database:h2:2.3.232\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"데이터베이스-리소스-반납\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EB%B0%98%EB%82%A9\" aria-label=\"데이터베이스 리소스 반납 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스 리소스 반납</h2>\n<p>JDBC API를 통해 획득한 데이터에비스 관련 리소스는 사용 후에는 반드시 풀어줘야 합니다.\n그러지 않으면 메모리 유수(memory leak) 문제로 이어질 수 있거든요.</p>\n<p>Java에서는 이러한 리소스 반납을 보통 <code>try</code> 문을 이용해서 처리하는데 코드가 읽기 어려워진다는 단점이 있습니다.\n하지만 Kotlin에서는 <code>use()</code>라는 매우 유용한 확장 함수가 있어서 깔끔하게 이 부분을 처리할 수 있습니다.</p>\n<h2 id=\"데이터베이스-연결\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%97%B0%EA%B2%B0\" aria-label=\"데이터베이스 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스 연결</h2>\n<p>데이터베이스를 사용하려면 제일 먼저 데이터베이스와 연결을 맺어야겠죠?\nJDBC API는 어떤 데이터베이스 엔진을 사용하든 동일한 방식으로 연결할 수 있도록 도와줍니다.</p>\n<p><code>DriverManager</code> 클래스의 <code>getConnection()</code> 메서드에 인자로 데이터베이스 접속 정보를 넘겨서 호출하면 <code>Connection</code> 타입의 객체를 얻을 수 있습니다.</p>\n<p>예를 들어, <a href=\"/?tag=PostgreSQL\">PostgreSQL</a>을 사용하신다면 데이터페이스 이름이 포함된 URL과 사용자 이름과 암호를 넘기면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"jdbc:postgresql://localhost:5432/&lt;데이터베이스 이름>\"</span></span>\n<span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"&lt;사용자 이름>\"</span></span>\n<span class=\"token keyword\">val</span> password <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"&lt;암호>\"</span></span>\n\nDriverManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> connection <span class=\"token operator\">-></span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"데이터베이스 연결 성공\"</span></span> <span class=\"token keyword\">else</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"데이터베이스 연결 실패\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/?tag=SQLite\">SQLite</a>나 H2와 같은 파일이나 메모리 기반 데이터베이스는 <code>url</code>만 넘겨도 충분합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span>DriverManager\n\n<span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"jdbc:h2:mem:test\"</span></span>\nDriverManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> connection <span class=\"token operator\">-></span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"데이터베이스 연결 성공\"</span></span> <span class=\"token keyword\">else</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"데이터베이스 연결 실패\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">데이터베이스 연결 성공</code></pre></div>\n<h2 id=\"테이블-생성\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1\" aria-label=\"테이블 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테이블 생성</h2>\n<p>데이터베이스와 연결을 맺었으니 지금부터 SQL 쿼리를 실행할 수 있습니다.\nJDBC API는 SQL 쿼리 실행을 위해서 <code>Statement</code>와 <code>PreparedStatement</code> 클래스를 제공합니다.</p>\n<p>우선 <code>Statement</code>를 사용해서 테이블을 하나 생성한 후에 초기 데이터를 적재해보겠습니다.\n<code>Connection</code> 인스턴스의 <code>createStatement()</code> 함수를 호출하면 <code>Statement</code> 인스턴스를 얻을 수 있습니다.\n이 인스턴스를 상대로 <code>execute()</code> 메서드를 호출하면 됩니다.</p>\n<p>테이블 생성을 위해서 <code>CREATE TABLE</code> 문을 사용하고, 데이터 적재를 위해서 <code>INSERT</code> 문을 사용하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\">connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> statement <span class=\"token operator\">-></span>\n    statement<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string-literal multiline\"><span class=\"token string\">\"\"\"CREATE TABLE fruits (\n            id INT AUTO_INCREMENT NOT NULL,\n            name VARCHAR(128) NOT NULL,\n            price INT)\"\"\"</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"테이블 생성 완료\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    statement<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string-literal multiline\"><span class=\"token string\">\"\"\"INSERT INTO fruits (name, price) VALUES\n            ('Apple', 3000),\n            ('Banana', 1000),\n            ('Cherry', 5000),\n            ('Date', 4000),\n            ('Elderberry', 7000)\"\"\"</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"데이터 적재 완료\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">테이블 생성 완료\n데이터 적재 완료</code></pre></div>\n<p>범용적으로 쓰이는 <code>execute()</code> 메서드 데이터 반환 여부에 따라 참 또는 거짓을 반환하기 때문에 반환값이 크게 유용하지 않습니다.\n구체적인 SQL 쿼리 실행 결과가 필요할 때는 앞으로 다룰 <code>executeQuery()</code>나 <code>executeUpdate()</code> 메서드를 사용해야 합니다.</p>\n<h2 id=\"데이터-조회\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C\" aria-label=\"데이터 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 조회</h2>\n<p>데이터를 조회할 때는 <code>Statement</code> 인스턴스의 <code>executeQuery()</code> 메서드를 호출해야합니다.\n쿼리의 실행 결과는 <code>ResultSet</code> 인스턴스에 담겨서 반환됩니다.</p>\n<p>예를 들어, <code>SELECT</code> 문을 사용해서 과일 테이블에서 가격이 5,000원 보다 싼 과일 레코드(record)를 찾아보겠습니다.\n<code>while</code> 문으로 루프를 돌면서 각 레코드를 칼럼(column) 별로 읽어올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> query <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"SELECT * FROM fruits WHERE price &lt; 5000\"</span></span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> statement <span class=\"token operator\">-></span>\n    statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> resultSet <span class=\"token operator\">-></span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> id <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"id\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"name\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> price <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"price\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"ID: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">id</span></span><span class=\"token string\">, Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">, Price: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">price</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ID: <span class=\"token number\">1</span>, Name: Apple, Price: <span class=\"token number\">3000</span>\nID: <span class=\"token number\">2</span>, Name: Banana, Price: <span class=\"token number\">1000</span>\nID: <span class=\"token number\">4</span>, Name: Date, Price: <span class=\"token number\">4000</span></code></pre></div>\n<h2 id=\"데이터-변경\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD\" aria-label=\"데이터 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 변경</h2>\n<p>데이터를 변경할 때는 <code>Statement</code> 인스턴스의 <code>executeUpdate()</code> 메서드를 호출해야합니다.\n쿼리의 실행 결과로 몇 개의 데이터가 변경이 되었는지가 반환됩니다.</p>\n<p>3,000원이 넘는 과일 레코드를 삭제하고, 바나나의 가격으로 10,000원으로 올려보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> deleteQuery <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"DELETE fruits WHERE price > 3000\"</span></span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> statement <span class=\"token operator\">-></span>\n    statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>deleteQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\"> 개의 데이터 삭제\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> updateQuery <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"UPDATE fruits SET price = 10000 WHERE name = 'Banana'\"</span></span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> statement <span class=\"token operator\">-></span>\n    statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>updateQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\"> 개의 데이터 수정\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">3</span> 개의 데이터 삭제\n<span class=\"token number\">1</span> 개의 데이터 수정</code></pre></div>\n<h2 id=\"데이터-추가\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80\" aria-label=\"데이터 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 추가</h2>\n<p><code>Statement</code> 클래스 대신에 <code>PreparedStatement</code> 클래스를 사용하면 좀 더 효과적이고 안전하게 SQL 쿼리를 실행할 수 있습니다.</p>\n<p><code>?</code> 기호로 SQL 쿼리 안에 치환될 수 있는 부분을 표시해놓고, 다른 값을 대입하면서 동일한 SQL 쿼리를 여러 번 실행할 수 있습니다.\nSQL 주입(injection) 공격도 방어해주기 때문에 보안 측면에서도 <code>PreparedStatement</code> 클래스를 쓰는 것이 권장됩니다.</p>\n<p><code>Connection</code> 인스턴스의 <code>prepareStatement()</code> 메서드를 호출하면 <code>PreparedStatement</code> 인스턴스를 얻을 수 있습니다.\n이 때 반드시 <code>prepareStatement()</code> 메서드를 호출하면서 SQL 쿼리를 인자로 넘겨야 합니다.\n그래야지 SQL 쿼리 실행 전에 <code>?</code> 자리를 원하는 데이터로 치환해놓을 수 있기 때문입니다.</p>\n<p><code>PreparedStatement</code> 인스턴스를 사용하여 동일한 쿼리로 2개의 다른 과일 레코드를 등록해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> query <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"INSERT INTO fruits (name, price) VALUES (?, ?)\"</span></span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> preparedStatement <span class=\"token operator\">-></span>\n    preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Fig\"</span></span><span class=\"token punctuation\">)</span>\n    preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n    preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\"> 개의 데이터 삽입\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> preparedStatement <span class=\"token operator\">-></span>\n    preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Grape\"</span></span><span class=\"token punctuation\">)</span>\n    preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6000</span><span class=\"token punctuation\">)</span>\n    preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\"> 개의 데이터 삽입\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span> 개의 데이터 삽입\n<span class=\"token number\">1</span> 개의 데이터 삽입</code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 전체 코드와 실행 결과는 아래를 참고 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span>Connection\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span>DriverManager\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"jdbc:h2:mem:test\"</span></span>\n    DriverManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> connection <span class=\"token operator\">-></span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"데이터베이스 연결 성공\"</span></span> <span class=\"token keyword\">else</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"데이터베이스 연결 실패\"</span></span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">setUpTable</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">updateData</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">createData</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">setUpTable</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> Connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> statement <span class=\"token operator\">-></span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string-literal multiline\"><span class=\"token string\">\"\"\"CREATE TABLE fruits (\n                    id INT AUTO_INCREMENT NOT NULL,\n                    name VARCHAR(128) NOT NULL,\n                    price INT)\"\"\"</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"테이블 생성 완료\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string-literal multiline\"><span class=\"token string\">\"\"\"INSERT INTO fruits (name, price) VALUES\n                ('Apple', 3),\n                ('Banana', 1),\n                ('Cherry', 5),\n                ('Date', 4),\n                ('Elderberry', 7)\"\"\"</span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"데이터 적재 완료\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> Connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> query <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"SELECT * FROM fruits WHERE price &lt; 5\"</span></span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> statement <span class=\"token operator\">-></span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> resultSet <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">val</span> id <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"id\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"name\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> price <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"price\"</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"ID: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">id</span></span><span class=\"token string\">, Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">, Price: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">price</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">updateData</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> Connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> deleteQuery <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"DELETE fruits WHERE price > 3\"</span></span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> statement <span class=\"token operator\">-></span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>deleteQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\"> 개의 데이터 삭제\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">val</span> updateQuery <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"UPDATE fruits SET price = 10 WHERE name = 'Banana'\"</span></span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> statement <span class=\"token operator\">-></span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>updateQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\"> 개의 데이터 수정\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">createData</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> Connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> query <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"INSERT INTO fruits (name, price) VALUES (?, ?)\"</span></span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> preparedStatement <span class=\"token operator\">-></span>\n        preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Fig\"</span></span><span class=\"token punctuation\">)</span>\n        preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\"> 개의 데이터 삽입\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">{</span> preparedStatement <span class=\"token operator\">-></span>\n        preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Grape\"</span></span><span class=\"token punctuation\">)</span>\n        preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n        preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\"> 개의 데이터 삽입\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">데이터베이스 연결 성공\n테이블 생성 완료\n데이터 적재 완료\nID: <span class=\"token number\">1</span>, Name: Apple, Price: <span class=\"token number\">3000</span>\nID: <span class=\"token number\">2</span>, Name: Banana, Price: <span class=\"token number\">1000</span>\nID: <span class=\"token number\">4</span>, Name: Date, Price: <span class=\"token number\">4000</span>\n<span class=\"token number\">3</span> 개의 데이터 삭제\n<span class=\"token number\">1</span> 개의 데이터 수정\n<span class=\"token number\">1</span> 개의 데이터 삽입\n<span class=\"token number\">1</span> 개의 데이터 삽입</code></pre></div>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>이상으로 Kotlin에서 JDBC API를 사용하는 기본적인 방법에 대해서 알아보았습니다.</p>\n<p>실제 Kotlin 백엔드 개발에서는 <a href=\"https://jetbrains.github.io/Exposed/\">Exposed</a>와 같은 ORM 라이브러리를 사용하시겠지만, 이러한 라이브러리도 결국은 내부적으로 JDBC API에 의존하고 있습니다.\n따라서 JDBC API에 대해서 잘 숙지해두시면 디버깅을 하시거나 오류가 발생했을 때 분명히 도움이 되실거라 생각합니다.</p>","timeToRead":7,"fields":{"slug":"/kotlin-jdbc/","tags":["Kotlin","JDBC","DB"]},"frontmatter":{"title":"Kotlin에서 JDBC API 사용하기","date":"Jan 9, 2025"}},"next":{"fields":{"slug":"/css-oklch/"},"frontmatter":{"title":"OKLCH: 인간 친화적인 CSS의 색상 모델"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}