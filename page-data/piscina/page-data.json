{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/piscina/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p><a href=\"/js-node-worker-threads\">지난 포스팅</a>에서 Node.js의 <code>worker_threads</code> 모듈을 통해 이제 자바스크립트에서도 멀티 쓰레딩이 가능하다는 것을 배웠는데요.</p>\n<p>이번 포스팅에서는 워커 쓰레드 풀링(pooling)을 도와주는 라이브러리인 Piscina에 대해서 알아보겠습니다.</p>\n<h2 id=\"piscina란\" style=\"position:relative;\"><a href=\"#piscina%EB%9E%80\" aria-label=\"piscina란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Piscina란?</h2>\n<p>상용 애플리케이션을 개발할 때는 Node.js의 <code>worker_threads</code> 모듈을 그대로 쓰기는 곤란한 경우가 많은데요.\n필요할 때 마다 매번 새로운 워커 쓰레드를 생성하면 서버에 부하를 주어 오히려 성능을 떨어뜨릴 수도 있죠.\n그래서 쓰레드 풀(pool)을 사용하여 미리 다수의 워커 쓰레드를 생성해놓고 재사용하는 것이 권장됩니다.</p>\n<p>Piscina는 효과적인 멀티 쓰레딩을 위해서 쓰레드 풀 관리 기능을 제공하는 라이브러리입니다.\n뿐만 아니라, <a href=\"/js-async-callback/\">콜백(Callback)</a> 기반의 API를 제공하는 <code>worker_threads</code> 모듈과 달리, Piscina의 API는 <a href=\"/js-async-promise/\">프라미스(Promise)</a> 기반으로 되어 있어서 사용하기 쉽다는 장점도 있죠.</p>\n<h2 id=\"piscina-설치\" style=\"position:relative;\"><a href=\"#piscina-%EC%84%A4%EC%B9%98\" aria-label=\"piscina 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Piscina 설치</h2>\n<p>Piscina는 npm 패키지 저장소에 <code>piscina</code>라는 이름으로 올라와 있습니다.</p>\n<p>터미널에서 프로젝트 경로로 진입한 후 <code>npm</code> 명령어를 사용하여 손쉽게 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">add</span> piscina</code></pre></div>\n<h2 id=\"워커-코드-작성\" style=\"position:relative;\"><a href=\"#%EC%9B%8C%EC%BB%A4-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\"워커 코드 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>워커 코드 작성</h2>\n<p>간단한 실습을 위해서 CPU를 많이 사용하는 함수를 하나 작성해보겠습니다.</p>\n<p><code>count()</code> 함수는 인자로 넘어온 시간동안 계속해서 숫자를 센 후 그 숫자를 반환합니다.\nCPU는 주어진 시간동안 <code>cnt</code> 변수를 1씩 증가시키기 위해서 엄청나게 바쁘겠죠?</p>\n<div class=\"gatsby-code-title\">worker.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> second <span class=\"token operator\">*</span> <span class=\"token number\">1_000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>작성한 코드를 <code>worker.js</code> 파일에 저장하고 <code>count()</code> 함수를 다른 모듈에서 불러올 수 있도록 내보내겠습니다.</p>\n<h2 id=\"메인-코드-작성\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%9D%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\"메인 코드 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메인 코드 작성</h2>\n<p>다음으로 <code>index.js</code> 파일에 메인 쓰레드에서 실행할 코드를 작성하겠습니다.</p>\n<p>Node.js의 <code>os</code> 내장 모듈과 <code>piscina</code> 패키지로 부터 <code>Piscina</code> 클래스를 불러옵니다.\n그리고 메인 쓰레드의 시작 시간을 <code>start</code> 변수에 기록하고 시작 로그를 남기겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> os <span class=\"token keyword\">from</span> <span class=\"token string\">\"os\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Piscina <span class=\"token keyword\">from</span> <span class=\"token string\">\"piscina\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🔵 메인 쓰레드 > 시작\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"쓰레드-풀-생성\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C-%ED%92%80-%EC%83%9D%EC%84%B1\" aria-label=\"쓰레드 풀 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드 풀 생성</h2>\n<p>Piscina를 통해서 멀티 쓰레딩을 하려면 우선 쓰레드 풀을 생성해야 합니다.\n<code>Piscina</code> 클래스의 생성자에 워커 쓰레드에서 실행할 함수가 담긴 파일의 위치를 인자로 넘겨서 호출하면 쓰레드 풀 객체가 만들어집니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Piscina</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./worker.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>필수 옵션인 <code>filename</code> 외에도 선택 옵션인 <code>minThreads</code>과 <code>maxThreads</code>을 통해서 각각 최소 쓰레드 개수와 최대 쓰레드 개수를 설정해줄 수 있습니다.\n설정해주지 않으면 CPU 코어 개수에 1.5를 곱한 값이 자동으로 지정됩니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Piscina</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./worker.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">minThreads</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">maxThreads</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 설정을 해주면 Piscina는 최소 2개, 최대 8개 범위 안에서 부하에 따라 쓰레드 풀의 크기를 유기적으로 늘였다 줄였다 해줍니다.</p>\n<h2 id=\"쓰레드-풀-실행\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C-%ED%92%80-%EC%8B%A4%ED%96%89\" aria-label=\"쓰레드 풀 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드 풀 실행</h2>\n<p>쓰레드 풀 객체의 <code>run()</code> 함수를 통해서 워커 쓰레드에서 실행할 함수를 호출할 수 있습니다.\n<code>run()</code> 함수에 넘긴 인자는 그대로 <code>worker.js</code> 파일에 있는 <code>count()</code> 함수에 전달이 됩니다.\n<code>run()</code> 함수는 프라미스 객체를 반환하기 때문에 <code>async</code> 함수 내에서 <code>await</code> 키워드를 앞에 붙여서 호출했습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🟠 워커 쓰레드 > 결과: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 시간: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 초</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code>async/await</code> 키워드에 대한 자세한 설명은 <a href=\"/js-async-async-await/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"병렬-실행\" style=\"position:relative;\"><a href=\"#%EB%B3%91%EB%A0%AC-%EC%8B%A4%ED%96%89\" aria-label=\"병렬 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>병렬 실행</h2>\n<p><code>Promise.all()</code> 함수를 통해서 <code>runOnWorker()</code> 함수를 총 8번 인자를 1초씩 증가시키면서 동시 호출해보겠습니다.\n마지막에는 콘솔에 종료 로그를 남기고, 총 실행 시간도 출력히겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🔵 메인 쓰레드 > 종료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🔵 총 실행 시간 > </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 초</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🔵 CPU 코어: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>os<span class=\"token punctuation\">.</span>availableParallelism<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🔵 최대 쓰레드: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pool<span class=\"token punctuation\">.</span>maxThreads<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>터미널에서 <code>index.js</code> 파일을 실행해보면 8개의 함수를 동시에 호출하는데 10초 정도 걸리는데요.\n순차적으로로 실행됐더라면 총 <code>1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36</code>초가 걸렸을텐데, 쓰레드 풀 덕분에 병렬로 처리되어 시간이 크게 단축된 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">🔵 메인 쓰레드 <span class=\"token operator\">></span> 시작\n🟠 워커 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">15109502</span>, 시간: <span class=\"token number\">1.1204804629999998</span> 초\n🟠 워커 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">20639072</span>, 시간: <span class=\"token number\">2.127793784</span> 초\n🟠 워커 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">35397053</span>, 시간: <span class=\"token number\">3.137355516</span> 초\n🟠 워커 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">51667120</span>, 시간: <span class=\"token number\">4.147871099</span> 초\n🟠 워커 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">63738475</span>, 시간: <span class=\"token number\">5.16961114</span> 초\n🟠 워커 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">86058911</span>, 시간: <span class=\"token number\">6.218629933</span> 초\n🟠 워커 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">107845538</span>, 시간: <span class=\"token number\">8.121711485999999</span> 초\n🟠 워커 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">135158653</span>, 시간: <span class=\"token number\">10.128717848</span> 초\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 종료\n🔵 총 실행 시간 <span class=\"token operator\">></span> <span class=\"token number\">10.129195065000001</span> 초\n🔵 CPU 코어: <span class=\"token number\">4</span>\n🔵 최대 쓰레드: <span class=\"token number\">6</span></code></pre></div>\n<p>참고로 위 코드를 실행한 제 컴퓨터는 현재 4개의 CPU 코어가 있는데요.\n만약 여러분의 컴퓨터에 8개 이상의 CPU 코어가 장착되어 있다면 8초 남짓 걸릴 거에요.\n8개의 함수 호출을 CPU 코어가 하나씩 전담하면 그 중 가장 오래 걸리는 <code>runOnWorker(8)</code>에 총 실행 시간이 좌우될 것이기 때문입니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 실습 코드는 아래에서 직접 확인하고 실행해볼 수 있습니다.\n실행 시간을 비교해보실 수 있도록 <code>single.js</code> 파일에는 멀티 쓰레딩을 하지 않은 코드도 넣어두었습니다.</p>\n<iframe src=\"https://codesandbox.io/p/devbox/piscina-7tk5dx?embed=1&file=%2Findex.js\"\n     style=\"width:100%; height: 500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"piscina\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n     scrolling=\"no\"\n   ></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Piscina에서 제공하는 워커 쓰레드 풀을 활용하여 CPU 집약적인 작업을 메인 쓰레드로 부터 분리하여 실행할 수 있는지 알아보았습니다.\nPiscina를 통해서 <code>worker_threads</code> 모듈을 쓰는 것보다 훨씬 쉽고 간단하게 멀티 쓰레딩 프로그래밍을 하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/piscina/","tags":["JavaScript","Node.js","Thread","library"]},"frontmatter":{"title":"Piscina로 자바스크립트 멀티 쓰레딩 쉽게 하기","date":"Mar 23, 2025"}},"next":{"fields":{"slug":"/js-node-worker-threads/"},"frontmatter":{"title":"워커 쓰레드를 통한 자바스크립트 멀티 쓰레딩"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}