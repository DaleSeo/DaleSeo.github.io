{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-test-object-factory/","result":{"pageContext":{"previous":null,"node":{"html":"<p><a href=\"js-faker\">지난 포스팅</a>에서 가짜 데이터를 만들 때 사용하는 Faker.js에 대해서 간단히 알아보았는데요.\n이번 포스팅에서는 실제로 테스트를 작성할 때 Faker.js를 어떻게 활용할 수 있는지에 대해서 다뤄보려고 합니다.</p>\n<h2 id=\"테스트-대상-코드-작성하기\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"테스트 대상 코드 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 대상 코드 작성하기</h2>\n<p>먼저 테스트 대상이 될 임의의 함수를 하나 필요한데요.\n사용자 객체를 인자로 받아 회원 가입을 처리해주는 함수를 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">auth.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">\"이메일 형식에 맞지 않은 메일 주소입니다.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">\"비밀번호는 8자 이상이어야 합니다.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 데이터베이스에 사용자 데이터를 저장</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>user<span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 함수는 인자로 넘어온 사용자의 이메일과 비밀번호에 대한 입력값 검증이 실패할 경우 <code>error</code> 속성에 오류 메세지를 담아서 반환하며, 회원 가입이 성공한 경우 <code>user</code> 속성에 저장된 사용자 객체를 담아서 반환합니다.\n데이터베이스에 사용자 데이터를 저장하는 코드는 본 포스팅에서 중요하지 않는 부분이므로 생략하고 주석 처리만 하였습니다.</p>\n<h2 id=\"테스트-코드-작성하기\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"테스트 코드 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 코드 작성하기</h2>\n<p>위 회원 가입 함수를 3가지 케이스에서 호출하는 테스트 코드를 작성해보았습니다.\n첫번째 케이스는 회원 가입이 성공한 경우, 두번째 케이스는 이메일 검증이 실패한 경우, 세번째 케이스는 비빌번호 검증이 실패한 경우 입니다.</p>\n<div class=\"gatsby-code-title\">auth1.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signUp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns user with id\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token string\">\"길동\"</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token string\">\"홍\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">\"FgjQkKPy_jeezmQ\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"01-2345-6789\"</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> <span class=\"token string\">\"한누리대로 411\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    expect<span class=\"token punctuation\">.</span><span class=\"token function\">objectContaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> expect<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given invalid email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token string\">\"길동\"</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token string\">\"홍\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid@@email.com\"</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">\"FgjQkKPy_jeezmQ\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"01-2345-6789\"</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> <span class=\"token string\">\"한누리대로 411\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이메일 형식에 맞지 않은 메일 주소입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given too short password\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token string\">\"길동\"</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token string\">\"홍\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token string\">\"01-2345-6789\"</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> <span class=\"token string\">\"한누리대로 411\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"비밀번호는 8자 이상이어야 합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>딱 보았을 때 위 테스트 코드는 상당히 읽기가 어려답다는 것을 알 수 있습니다.\n정확히 사용자 객체의 어느 속성값 때문에 입력값 검증이 실패하는지 주의깊게 보지 않으면 알기가 어렵습니다.</p>\n<h2 id=\"속성값으로-가짜-데이터-사용하기\" style=\"position:relative;\"><a href=\"#%EC%86%8D%EC%84%B1%EA%B0%92%EC%9C%BC%EB%A1%9C-%EA%B0%80%EC%A7%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"속성값으로 가짜 데이터 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>속성값으로 가짜 데이터 사용하기</h2>\n<p><a href=\"js-faker\">지난 포스팅</a>에서 배웠던 Faker.js를 이용해서 테스트 코드의 가독성을 개선시킬 수 있습니다.\n해당 테스트 함수에서 중요한 속성에만 진짜 속성값을 사용하고 나머지 속성에는 가짜 속성값을 사용하는 것 입니다.\n예를 들어, 두 번째 테스트 케이스에서는 <code>email</code> 속성값으로 유효하지 않는 메일 주소를 사용하는 것이 핵심입니다.\n따라서 중요하지 않은 나머지 속성에는 Faker.js에서 랜덤으로 생성해준 가짜 데이터를 사용할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">auth2.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signUp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth\"</span><span class=\"token punctuation\">;</span>\n\nfaker<span class=\"token punctuation\">.</span>locale <span class=\"token operator\">=</span> <span class=\"token string\">\"ko\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns user with id\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">.</span><span class=\"token function\">phoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">streetAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    expect<span class=\"token punctuation\">.</span><span class=\"token function\">objectContaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> expect<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given invalid email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid@@email.com\"</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">.</span><span class=\"token function\">phoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">streetAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이메일 형식에 맞지 않은 메일 주소입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given too short password\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">.</span><span class=\"token function\">phoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">streetAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"비밀번호는 8자 이상이어야 합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 테스트 코드를 수정해주면 진짜 속상값이 두드러져서 각 테스트의 의도가 무엇인지 좀 더 쉽게 파악할 수 있습니다.</p>\n<p>하지만 사용자 객체를 만드는 코드가 3개의 테스트 함수에 중복되는 것을 볼 수 있습니다.\n이러한 중복은 테스트 코드의 유지보수성을 크게 해칠 수 있습니다.\n만약에 사용자 객체에 신규 속성이 추가되거나, 기존 속성이 변경된다면 모든 테스트 함수를 수정해야줘야 할 것이기 때문입니다.</p>\n<h2 id=\"중복-코드를-팩토리-함수로-빼내기\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EB%B3%B5-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%95%A8%EC%88%98%EB%A1%9C-%EB%B9%BC%EB%82%B4%EA%B8%B0\" aria-label=\"중복 코드를 팩토리 함수로 빼내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중복 코드를 팩토리 함수로 빼내기</h2>\n<p>테스트 데이터를 만들면서 발생하는 중복 코드를 제거하는 가장 효과적인 방법은 해당 코드를 별도의 함수로 빼내는 것입니다.\n이렇게 특정 객체를 생성하기 위한 코드를 흔히 객체 팩토리(object factory, object mother)라고 일컽습니다.</p>\n<p>사용자 객체를 생성하는 코드를 <code>buildUser()</code>라는 함수로 빼보았습니다.\n그리고 각 테스트 케이스에 맞게 일부 속성값을 덮어쓸 수 있도록 <code>overrides</code> 인자를 받도록 하였습니다.</p>\n<div class=\"gatsby-code-title\">auth3.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signUp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth\"</span><span class=\"token punctuation\">;</span>\n\nfaker<span class=\"token punctuation\">.</span>locale <span class=\"token operator\">=</span> <span class=\"token string\">\"ko\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> overrides <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">.</span><span class=\"token function\">phoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">streetAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>overrides\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns user with id\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    expect<span class=\"token punctuation\">.</span><span class=\"token function\">objectContaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> expect<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given invalid email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> overrides<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid@@email.com\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이메일 형식에 맞지 않은 메일 주소입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given too short password\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> overrides<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> password<span class=\"token operator\">:</span> <span class=\"token string\">\"12345\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"비밀번호는 8자 이상이어야 합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>어떤가요? 이제 각 테스트의 코드 길이가 확 줄어들면서 코드가 훨씬 읽기 쉬워졌지요?\n추후 사용자 객체의 형태가 변하더라도 <code>buildUser()</code> 함수만 수정하면 될 것이기 때문에 유지보수도 훨씬 수월할 것입니다.</p>\n<h2 id=\"jackfranklintest-data-bot-활용하기\" style=\"position:relative;\"><a href=\"#jackfranklintest-data-bot-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"jackfranklintest data bot 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@jackfranklin/test-data-bot 활용하기</h2>\n<p>실제 자바스크립트 프로젝트에서는 적게는 수십 많게는 수백가지 테스트 객체가 존재하기 마련인데요.\n따라서 위와 같이 직접 모든 객체에 대해 테스트 팩토리를 작성하는데는 상당한 시간과 노력이 필요할 것입니다.</p>\n<p>다행이도 자바스크립트 커뮤니티에는 이러한 문제를 해결할 수 있도록 <code>@jackfranklin/test-data-bot</code>라는 라이브러리가 있습니다.\n이 라이브러리를 개발 의존성으로 설치하면 테스트를 작성할 때 팩토리 함수를 정말 손쉽게 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ npm i <span class=\"token operator\">-</span><span class=\"token constant\">D</span> @jackfranklin<span class=\"token operator\">/</span>test<span class=\"token operator\">-</span>data<span class=\"token operator\">-</span>bot</code></pre></div>\n<div class=\"gatsby-code-title\">auth4.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> build<span class=\"token punctuation\">,</span> fake <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@jackfranklin/test-data-bot\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signUp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth\"</span><span class=\"token punctuation\">;</span>\n\nfaker<span class=\"token punctuation\">.</span>locale <span class=\"token operator\">=</span> <span class=\"token string\">\"ko\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> buildUser <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">.</span><span class=\"token function\">phoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">streetAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns user with id\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    expect<span class=\"token punctuation\">.</span><span class=\"token function\">objectContaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> expect<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given invalid email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> overrides<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid@@email.com\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이메일 형식에 맞지 않은 메일 주소입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given too short password\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> overrides<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> password<span class=\"token operator\">:</span> <span class=\"token string\">\"12345\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"비밀번호는 8자 이상이어야 합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>@jackfranklin/test-data-bot</code> 라이브러리는 내부적으로 Faker.js를 사용하고 있기 때문에 API가 친숙하게 느껴질 것입니다.\n(<code>@jackfranklin/test-data-bot</code> 라이브러리에 대한 좀 더 자세한 내용은 <a href=\"https://github.com/jackfranklin/test-data-bot\">Github 저장소</a>를 참고 바랍니다.)</p>\n<h2 id=\"객체-팩토리-모듈화-하기\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%AA%A8%EB%93%88%ED%99%94-%ED%95%98%EA%B8%B0\" aria-label=\"객체 팩토리 모듈화 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 팩토리 모듈화 하기</h2>\n<p>마지막으로, 생성해야할 테스트 객체가 많은 프로젝트에서는 테스트 코드를 작성할 때 필요한 모든 팩토리 함수를 하나의 모듈에 모아놓고 관리하는 것을 추천드립니다.\n테스트 코드로 부터 객체 팩토리가 분리해놓으면 유지 보수가 더욱 쉬워지고, 팩토리 함수 간에 상호 호출도 용이해지기 때문입니다.</p>\n<div class=\"gatsby-code-title\">builders.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> build<span class=\"token punctuation\">,</span> fake <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@jackfranklin/test-data-bot\"</span><span class=\"token punctuation\">;</span>\n\nfaker<span class=\"token punctuation\">.</span>locale <span class=\"token operator\">=</span> <span class=\"token string\">\"ko\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> buildUser <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">.</span><span class=\"token function\">phoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    address<span class=\"token operator\">:</span> <span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">streetAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-code-title\">auth5.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> buildUser <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./builders\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signUp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./auth\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns user with id\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>\n    expect<span class=\"token punctuation\">.</span><span class=\"token function\">objectContaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> expect<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given invalid email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> overrides<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token string\">\"invalid@@email.com\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이메일 형식에 맞지 않은 메일 주소입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"returns error given too short password\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">buildUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> overrides<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> password<span class=\"token operator\">:</span> <span class=\"token string\">\"12345\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"비밀번호는 8자 이상이어야 합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 테스트 모든 코드는 아래에서 확인하고 직접 실행해보실 수 있습니다.</p>\n<iframe src=\"https://codesandbox.io/embed/js-test-object-factory-28cwh?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fauth5.test.js&previewwindow=tests&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"js-test-object-factory\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 테스트 코드를 리팩토링(refactoring)하면서 어떻게 하면 좀 더 효과적으로 테스트 데이터를 생성할 수 있는지 알아보았습니다.\n본 포스팅에서 다룬 테스팅 기법을 잘 활용하셔서 유지 보수하기 편하고 읽기 쉬운 테스트 코드를 작성하실 수 있으시기를 바래봅니다.</p>","timeToRead":7,"fields":{"slug":"/js-test-object-factory/","tags":["JavaScript","testing","faker"]},"frontmatter":{"title":"[자바스크립트] 테스트 데이터 생성","date":"Sep 6, 2021"}},"next":{"fields":{"slug":"/js-faker/"},"frontmatter":{"title":"자바스크립트로 가짜 데이터 생성하기 - Faker.js"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}