{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/react-styled-components/","result":{"pageContext":{"previous":{"fields":{"slug":"/react-prop-types/"},"frontmatter":{"title":"PropTypes로 React 입력 타입 체크하기"}},"node":{"html":"<p><a href=\"/react-styling\">지난 포스팅</a>에서 외부 라이브러리 없이 CSS 만으로 React 컴포넌트를 스타일링하는 방법을 알아보았습니다.\n이번 포스팅에서는 대표적인 CSS-in-JS 라이브러리인 Styled Components를 사용해서 React 컴포넌트를 스타일링하는 방법을 살펴보겠습니다.</p>\n<h2 id=\"css-in-js\" style=\"position:relative;\"><a href=\"#css-in-js\" aria-label=\"css in js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS in JS?</h2>\n<p>먼저 CSS in JS의 개념을 짚고 넘어가겠습니다.\nCSS in JS는 스타일 정의를 CSS 파일이 아닌 JavaScript로 작성된 컴포넌트에 바로 삽입하는 스타일 기법입니다.</p>\n<p>기존에 웹사이트를 개발할 때는 HTML과 CSS, JavaScript는 각자 별도의 파일에 두는 것이 best practice로 여겨졌었습니다.\n하지만 React나 Vue, Angular와 같은 모던 자바스크립트 라이브러리가 인가를 끌면서 웹개발의 패러다임이 바뀌고 있습니다.\n최근에는 웹 애플리케이션을 여러 개의 재활용이 가능한 빌딩 블록으로 분리하여 개발하는 컴포넌트 기반 개발 방법이 주류가 되고 있습니다.</p>\n<p>따라서, 웹페이지를 HTML, CSS, JavaScript 3개로 분리하는 것이 아니라, 여러 개의 컴포넌트로 분리하고, 각 컴포넌트에 HTML, CSS, JavaScript을 몽땅 때려 박는 패턴이 많이 사용되고 있습니다.\nReact는 JSX를 사용해서 이미 JavaScript가 HTML을 포함하고 있는 형태를 취하고 있는데, 여기에 CSS-in-JS 라이브러리만 사용하면 CSS도 손쉽게 JavaScript에 삽입할 수 있습니다.</p>\n<blockquote>\n<p>유행은 항상 돌고 돌기 때문에, 어떤 방법이 더 좋다라고는 가급적 얘기하지 않으려고 합니다. 저는 개인적으로 두 가지 방법 다 장단점이 있고 프로젝트의 특성을 고려해서 선택해야한다고 생각합니다.</p>\n</blockquote>\n<p>Styled Components는 이렇게 트랜드가 되고 있는 CSS-in-JS 라이브러리 중에서도 단연 가장 널리 사용되고 있는 라이브러리입니다.</p>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<p>Styled Components는 <code>styled-components</code>라는 NPM 패키지명을 가지고 있습니다.\n따라서 React 프로젝트에 다음과 같이 <code>npm</code> 커맨드로 간단히 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i styled-components</code></pre></div>\n<p>설치 후에 <code>package.json</code>에 <code>styled-components</code>가 추가된 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.8.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.8.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"styled-components\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.3.2\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2 id=\"기본-문법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95\" aria-label=\"기본 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 문법</h2>\n<p>먼저 위에서 설치한 <code>styled-components</code> 패키지에서 <code>styled</code> 함수를 임포트합니다.\n<code>styled</code>는 Styled Components의 근간이 되는 가장 중요한 녀석인데요.\nHTML 엘리먼트나 React 컴포넌트에 원하는 스타일을 적용하기 위해서 사용됩니다.</p>\n<p>기본 문법은 HTML 엘리먼트나 React 컴포넌트 중 어떤 것을 스타일링 하느냐에 따라 살짝 다릅니다.</p>\n<ul>\n<li>HTML 엘리먼트를 스타일링 할 때는 모든 알려진 HTML 태그에 대해서 이미 속성이 정의되어 있기 때문에 해당 태그명의 속성에 접근합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\nstyled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  // &lt;button> HTML 엘리먼트에 대한 스타일 정의\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>React 컴포넌트를 스타일링 할 때는 해당 컴포넌트를 임포트 후 인자로 해당 컴포넌트를 넘기면 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Button\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  // &lt;Button> React 컴포넌트에 스타일 정의\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>두가지 문법 모두 ES6의 Tagged Template Literals을 사용해서 스타일을 정의합니다.\n그리고 <code>styled</code> 힘수는 결국 해당 스타일이 적용된 HTML 엘리먼트나 React 컴포넌트를 리턴합니다.</p>\n<p>예를 들어, 다음과 같이 Styled Components로 작성된 JavaScript 코드는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\nstyled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  font-size: 1rem;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아래 CSS 코드가 적용된 <code>&#x3C;button></code> HTML 엘리먼트를 만들어낸다고 생각하면 쉽습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 식으로 Styled Components를 이용해서 JavaScript 코드 안에 삽입된 CSS 코드는 글로벌 네임 스페이스를 사용하지 않습니다.\n다시 말해, 각 JavaScript 파일마다 고유한 CSS 네임 스페이스를 부여해주기 때문에, 각 React 컴포넌트에 완전히 격리된 스타일을 적용할 수 있게 됩니다.</p>\n<p>이 것은 순수하게 CSS만을 사용했을 때는 누리기 어려웠던 대표적인 CSS in JS의 장점 중 하나 입니다.</p>\n<blockquote>\n<p>외부 라이브러리 없이도 각 CSS 파일에 고유의 네임 스페이스를 부여해주는 CSS 모듈이라는 기술을 통해서 위 동작을 흉내낼 수 있습니다. 자세한 방법은 아래 포스팅를 참고 바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/react-styling\">React 컴포넌트 CSS 스타일링 기본</a></li>\n</ul>\n<h2 id=\"고정-스타일링\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%A0%95-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81\" aria-label=\"고정 스타일링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고정 스타일링</h2>\n<p>위에서 배운 Styled Components 문법을 이용해서 간단하게 React로 작성된 버튼 컴포넌트를 스타일링 해보겠습니다.\n우선 <code>&#x3C;button></code> HTML 엘리먼트에 원하는 스타일을 적용한 후 <code>StyledButton</code> 변수에 저장합니다.</p>\n<p>이렇게 <code>styled</code> 함수가 리턴하는 것은 위에서 설명드린 것 처럼 React 컴포넌트이기 때문에 JSX를 통해 자유롭게 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> StyledButton <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  padding: 0.375rem 0.75rem;\n  border-radius: 0.25rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border: 1px solid lightgray;\n  color: gray;\n  backgroud: white;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>StyledButton<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StyledButton<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자, 이제 스타일이 적용된 이 버튼 컴포넌트를 다른 React 컴포넌트에서 다음과 같이 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Button\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>Button<span class=\"token operator\">></span>Default Button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>브라우저에서 소스 보기를 해보면 다음과 같이 <code>&#x3C;button></code> HTML 엘리먼트에 Styled Components가 자동으로 생성해준 클래스 이름이 적용되었음을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sc-kgAjT beQCgz<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Default Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>한편, 내부 스타일시트를 확인해보면 클래스 선택자(class selector)로 적용된 스타일이 위에서 Styled Components로 삽입한 스타일과 동일함을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.beQCgz</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.375rem 0.75rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0.25rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.5<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid lightgray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"가변-스타일링-1\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-1\" aria-label=\"가변 스타일링 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변 스타일링 1</h2>\n<p>Styled Components는 React 컴포넌트에 넘어온 props에 따라 다른 스타일을 적용하는 기능을 제공합니다.\nTagged Template Literals을 사용하기 때문에 함수도 문자열 안에 포함시킬 수 있다는 점을 이용하는데요.</p>\n<p>예를 들어, 버튼의 글자색과 배경색을 props따라 바뀌도록 위에서 작성한 예제 코드를 변경해보겠습니다.\n자바스크립트의 <code>||</code> 연산자를 사용하여 props이 넘어오지 않은 경우, 기존에 정의한 기본 색상이 그대로 유지되도록 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> StyledButton <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  padding: 0.375rem 0.75rem;\n  border-radius: 0.25rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border: 1px solid lightgray;\n\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>color <span class=\"token operator\">||</span> <span class=\"token string\">\"gray\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  background: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>background <span class=\"token operator\">||</span> <span class=\"token string\">\"white\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> background <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>StyledButton color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">}</span> background<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>background<span class=\"token punctuation\">}</span> Î<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StyledButton<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 주의할 점은 <code>&#x3C;Button /></code>에 넘어온, <code>color</code>와 <code>background</code> prop을 <code>&#x3C;StyledButton/></code> 컴포넌트로 넘겨줘야 한다는 것입니다.\n(그러지 않을 경우, <code>&#x3C;StyledButton/></code> 컴포넌트가 해당 prop을 인식할리가 없겠죠?)</p>\n<p>자, 이제 다음과 같이 버튼을 사용하면 핑크 배경에 초록 글자를 갖도록 스타일된 버튼을 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Button\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>Button color<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span> background<span class=\"token operator\">=</span><span class=\"token string\">\"pink\"</span><span class=\"token operator\">></span>\n  Green Button\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"가변-스타일링-2\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-2\" aria-label=\"가변 스타일링 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변 스타일링 2</h2>\n<p>prop에 따라 바꾸고 싶은 CSS 속성이 위와 같이 하나가 아니라 여러 개일 경우가 있습니다.\n이럴 경우, Styled Components에서 제공하는 <code>css</code> 함수를 사용해서 여러 개의 CSS 속성을 묶어서 정의할 수 있습니다.</p>\n<p>예를 들어, <code>primary</code> prop이 넘어온 경우, 글자색을 흰색, 배경색과 경계색은 남색으로 변경하고 싶다면 다음과 같이 예제 코드를 수정할 수 있습니다.\n이번에는 자바스크립트의 <code>&#x26;&#x26;</code> 연산자를 사용해서, <code>primary</code> prop이 존재하는 경우에만 <code>css</code>로 정의된 스타일이 적용되도록 하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> StyledButton <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  padding: 0.375rem 0.75rem;\n  border-radius: 0.25rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border: 1px solid lightgray;\n\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    props<span class=\"token punctuation\">.</span>primary <span class=\"token operator\">&amp;&amp;</span>\n    css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      color: white;\n      background: navy;\n      border-color: navy;\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>StyledButton <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StyledButton<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>참고로 넘겨야할 prop 값이 많아질 경우, 위와 같이 <code>...props</code> 구문을 사용해서 <code>children</code> 외에 모든 prop을 간편하게 전달할 수 있습니다.</p>\n<p>자, 이제 다음과 같이 하나의 prop 만으로 여러가지 CSS 속성이 한 번에 적용된 버튼을 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Button\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>Button primary<span class=\"token operator\">></span>Primary Button<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>포스팅에서 Styled Components로 스타일링한 버튼 컴포넌트에 대한 전체 코드는 아래에 올려두었으니 참고 바라겠습니다.</p>\n<iframe src=\"https://stackblitz.com/edit/daleseo-react-styled-components?embed=1&file=Button.js\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 React 컴포넌트를 Styled Components를 이용해서 스타일하는 기본적인 방법에 대해서 알아보았습니다.\n사실 Styled Components은 응용할 수 있는 방법이 무궁무진한데 이 부분에 대해서는 추후 포스팅해보도록 하겠습니다.</p>\n<p>Styled Components 외에 다른 CSS-in-JS 라이브러리가 궁금하신 분들은 아래 깃허브 리파지토리를 참고 바랍니다.</p>\n<ul>\n<li><a href=\"https://github.com/MicheleBertoli/css-in-js\">Github: CSS in JS</a></li>\n</ul>","timeToRead":6,"fields":{"slug":"/react-styled-components/","tags":["JavaScript","자바스크립트","React","리액트","CSS","style","스타일","CSS in JS","StyledComponents"]},"frontmatter":{"title":"[React] Styled Components 사용법","date":"Jul 14, 2019"}},"next":{"fields":{"slug":"/graphql-react-apollo-client/"},"frontmatter":{"title":"[GraphQL] Apollo Client로 React 앱 개발하기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}