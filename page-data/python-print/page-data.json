{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-print/","result":{"pageContext":{"previous":null,"node":{"html":"<p>아마도 파이썬에서 가장 많이 사용되는 내장 함수는 <code>print()</code>일 것 같은데요.\n특히 아무리 디버거(debugger)가 좋아지더라도 간단한 버그를 찾을 때 <code>print()</code>로 출력해보는 것만큼 빠르고 간단한 방법도 없습니다.</p>\n<p>이렇게 유용하고 많이 사용되는 <code>print()</code> 함수를 어떻게하면 좀 더 잘 활용할 수 있을까요?</p>\n<h2 id=\"기본-출력\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%B6%9C%EB%A0%A5\" aria-label=\"기본 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 출력</h2>\n<p>제일 먼저 주변에서 <code>print()</code> 함수를 사용하는 가장 흔한 방법을 살펴볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"이름\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"관리자\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">안녕\n<span class=\"token number\">123</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'이름'</span><span class=\"token builtin class-name\">:</span> None, <span class=\"token string\">'관리자'</span><span class=\"token builtin class-name\">:</span> True<span class=\"token punctuation\">}</span></code></pre></div>\n<p>매일 쓰다보니 당연히 받아드려지는 부분이지만 <code>print()</code> 함수는 문자열을 출력하지만 입력으로 문자열을 넘기도록 강제하지는 않습니다.\n문자열 타입이 아닌 데이터가 입력으로 들어오면 <code>print()</code> 함수는 내부적으로 넘어온 데이터를 상대로 <code>str()</code> 함수를 호출한 결과를 출력합니다.</p>\n<p>예를 들어, <code>print()</code> 함수에 정수가 인자로 넘어오면,</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>실제로는 <code>print()</code> 함수는 다음과 같이 동작하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다시 말해, 프로그래머가 <code>str()</code> 함수를 사용하여 직접 해당 정수를 문자열로 변환한 후에 출력하는 것처럼 처리가 됩니다.</p>\n<p>사소한 부분으로 느껴질 수도 있지만 이 부분을 간과해서 어려움을 겪는 경우를 자주 보게 됩니다.\n대표적으로 다음 섹션에서 설명드린 객체 출력를 들 수가 있습니다.</p>\n<h2 id=\"객체-출력\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%B6%9C%EB%A0%A5\" aria-label=\"객체 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 출력</h2>\n<p>위와 같이 내장 데이터 타입이 아닌 내가 직접 작성한 클래스로 부터 생성한 객체를 대상으로 <code>print()</code> 함수를 사용하면 어떻게 될까요?</p>\n<p>다음과 같이 숫자를 담기위한 간단한 클래스 하나를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NumberHolder</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number</code></pre></div>\n<p>이 클래스의 인스턴스를 하나 생성하여 <code>print()</code> 함수로 출력을 해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>NumberHolder<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>__main__.NumberHolder object at 0x7f6b9d71e99<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></code></pre></div>\n<p>흠… 🤔 딱히 도움이 되지 않은 이상한 문자열이 출력이 되네요.\n아마도 이 객체를 생성하기 위해 사용된 클래스 이름과 메모리 주소를 나타내는 것 같습니다.\n왜 이런 일이 발생하는 걸까요?</p>\n<p>이유는 이전 섹션에서 설명드렸듯이 <code>print()</code> 함수에 문자열 타입이 아닌 데이터가 인자로 넘어오면 <code>str()</code> 함수를 내부적으로 호출하기 때문입니다.\n<code>str()</code> 함수는 인자로 넘어온 객체의 <code>__str__()</code> 매직 함수를 호출하도록 되어 있습니다.\n하지만 우리가 정의한 클래스에는 <code>__str__()</code> 함수가 구현되어 있지 않습니다.</p>\n<p>그럼 이 객체가 담고 있는 숫자가 출력이 되도록 클래스에 <code>__str__()</code> 함수를 추가해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NumberHolder</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"NumberHolder(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span></span></code></pre></div>\n<p>다시 인스턴스를 생성하여 <code>print()</code> 함수의 인자로 넘겨보면 원하는 모습으로 출력이 되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>NumberHolder<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NumberHolder<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p><code>str()</code> 함수 구현에는 f string이 사용되었습니다. 이 부분에 대한 자세한 내용은 <a href=\"/python-f-strings\">관련 포스트</a>를 참고바랍니다.</p>\n</blockquote>\n<h2 id=\"여러-개-한-번에-출력\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%EA%B0%9C-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%B6%9C%EB%A0%A5\" aria-label=\"여러 개 한 번에 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 개 한 번에 출력</h2>\n<p>여러 개의 데이터를 한 번에 출력하고 싶을 때도 <code>print()</code> 함수를 유용하게 사용할 수 있습니다.\n왜냐하면 <code>print()</code> 함수를 호출 할 때 여러 개의 인자를 한 번에 넘기는 게 가능하기 때문입니다.</p>\n<p>예를 들어, 위에서 각각 출력했던 4개의 데이터를 이번에는 한 번에 출력해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"이름\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"관리자\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">안녕 <span class=\"token number\">123</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'이름'</span><span class=\"token builtin class-name\">:</span> None, <span class=\"token string\">'관리자'</span><span class=\"token builtin class-name\">:</span> True<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기본적으로 <code>print()</code> 함수에 여러 인자를 넘기면 출력할 때 각 데이터 사이에 공백 문자를(<code>\" \"</code>)을 넣어줍니다.\n공백 대신에 다른 문자로 데이터를 구분짖고 싶다면 <code>sep</code> 옵션을 사용하면 됩니다.</p>\n<p>예를 들어 줄바꿈 문자(<code>\"\\n\"</code>)를 사용해서 데이터를 구분지어 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"이름\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"관리자\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">안녕\n<span class=\"token number\">123</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">'이름'</span><span class=\"token builtin class-name\">:</span> None, <span class=\"token string\">'관리자'</span><span class=\"token builtin class-name\">:</span> True<span class=\"token punctuation\">}</span></code></pre></div>\n<p>물론 여러 개의 문자로 이뤄진 문자열을 넘길 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"안녕\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"이름\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"관리자\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\" | \"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">안녕 <span class=\"token operator\">|</span> <span class=\"token number\">123</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2.5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'이름'</span><span class=\"token builtin class-name\">:</span> None, <span class=\"token string\">'관리자'</span><span class=\"token builtin class-name\">:</span> True<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"한-줄에-출력\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A4%84%EC%97%90-%EC%B6%9C%EB%A0%A5\" aria-label=\"한 줄에 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 줄에 출력</h2>\n<p><code>print()</code> 함수는 기본적으로 호출할 때 마다 자동으로 줄바꿈을 해주는데요.\n종종 이 줄바꿈이 필요가 없을 때가 있습니다.</p>\n<p>예를 들어, 다음 4개의 문자열을 <code>print()</code> 함수를 연속해서 호출하면 다음과 같이 4번 줄바꿈이 되지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"어떤 언어를 사용하십니까?\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"파이썬\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"자바스크립트\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"자바\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">어떤 언어를 사용하십니까?\n자바\n파이썬\n자바스크립트</code></pre></div>\n<p>만약에 한 줄에 이 모든 문자열을 출력하고 싶다면 어떻게 해야할까요?\n바로 <code>end</code> 옵션을 활용해서 줄바꿈 문자(<code>\"\\n\"</code>) 대신에 사용할 다른 문자열을 명시해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"어떤 언어를 사용하십니까?\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"파이썬\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"자바스크립트\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"자바\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" 👍\\n\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">어떤 언어를 사용하십니까? 파이썬, 자바스크립트, 자바 👍</code></pre></div>\n<h2 id=\"팁-2차원-배열-출력\" style=\"position:relative;\"><a href=\"#%ED%8C%81-2%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4-%EC%B6%9C%EB%A0%A5\" aria-label=\"팁 2차원 배열 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[팁] 2차원 배열 출력</h2>\n<p>보통 아래와 같이 생긴 2차원 배열을 어떻게 출력하시나요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>단순하게 <code>print()</code> 함수의 인자로 넘기면 다음과 같이 한 줄로 출력되어 배열이 크기가 클 경우 보기가 어려워질 수가 있는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>, <span class=\"token punctuation\">[</span><span class=\"token number\">4</span>, <span class=\"token number\">5</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>, <span class=\"token punctuation\">[</span><span class=\"token number\">7</span>, <span class=\"token number\">8</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>그래서 시각적으로 알아보기 좋도록 출력하려고 <code>for</code> 문을 사용하여 <code>print()</code> 함수를 반복해서 호출하는 경우가 많이 보게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> matrix<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span>, <span class=\"token number\">5</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span>, <span class=\"token number\">8</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>하지만 위에서 배운 <code>sep</code> 옵션을 활용하면 다음과 같이 더 간결하게 <code>print()</code> 함수 한 번 호출로 똑같은 효과를 낼 수가 있습니다. 😮</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>matrix<span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span>, <span class=\"token number\">5</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span>, <span class=\"token number\">8</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"전체코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4%EC%BD%94%EB%93%9C\" aria-label=\"전체코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체코드</h2>\n<p>본 포스팅에서 작성한 코드는 아래에서 직접 확인하고 실행해보실 수 있습니다.</p>\n<p><a href=\"https://deepnote.com/project/Blog-Yd3-DsV_QeGqo4AUZ7FyHg/%2Fpython-print.ipynb\">https://deepnote.com/project/Blog-Yd3-DsV_QeGqo4AUZ7FyHg/%2Fpython-print.ipynb</a></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p><code>print()</code> 함수가 워낙 흔하게 사용되다보니 오히려 제대로 학습해볼 기회는 별로 없는 것 같습니다.\n이번 기회에 활용법을 잘 숙지하셔서 자주 사용하는 만큼 두고두고 요긴하게 활용하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/python-print/","tags":["Python"]},"frontmatter":{"title":"파이썬의 print() 함수 100% 활용법","date":"Jan 29, 2022"}},"next":{"fields":{"slug":"/python-class-type-isinstance/"},"frontmatter":{"title":"파이썬에서 데이터 타입 확인하기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}