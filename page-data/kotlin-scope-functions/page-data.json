{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/kotlin-scope-functions/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/who-would-read-my-blog/"},"frontmatter":{"title":"나 같은 평범한 개발자가 쓴 블로그를 누가 읽어 주겠어?"}},"node":{"html":"<p>Kotlin의 Scope 함수는 객체의 컨텍스트 내에서 코드 블록을 실행할 수 있게 해주는 강력한 기능입니다.</p>\n<p>Scope 함수에는 <code>let()</code>, <code>run()</code>, <code>also()</code>, <code>apply()</code>, <code>with()</code> 이렇게 5개가 있는데요.\n얘네들이 비슷한 것 같으면서도 미묘하게 달려서 잘 정리해두지 않으면 언제 어떤 녀석을 써야 하는지 은근히 헷갈릴 수 있습니다.</p>\n<p>이번 포스팅에서는 Kotlin의 Scope 함수 5종의 사용법을 정리해드리도록 하겠습니다.</p>\n<h2 id=\"예제-클래스\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"예제 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 클래스</h2>\n<p>다음과 같이 간단한 클래스를 가지고 간단한 예제 코드를 작성하면서 각 Scope 함수에 대해서 설명을 드리려고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> price<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"대상-객체를-그대로-반환하는-scope-함수\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%83%81-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B7%B8%EB%8C%80%EB%A1%9C-%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94-scope-%ED%95%A8%EC%88%98\" aria-label=\"대상 객체를 그대로 반환하는 scope 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대상 객체를 그대로 반환하는 Scope 함수</h2>\n<p><code>also()</code> 함수와 <code>apply()</code> 함수는 대상 객체를 그대로 반환하는 Scope 함수입니다.\n하지만 임시 범위 내에서 대상 객체를 어떻게 접근하느냐(<code>it</code> vs. <code>this</code>)에서 차이를 보입니다.</p>\n<h2 id=\"also-함수\" style=\"position:relative;\"><a href=\"#also-%ED%95%A8%EC%88%98\" aria-label=\"also 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>also() 함수</h2>\n<p>어떤 객체를 상대로 <code>also()</code> 함수를 호출하면 해당 객체를 가지고 부수적인 작업을 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"시작\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 시작</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fruit(name=사과, price=100)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"종료\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 종료</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code>also()</code> 함수는 특히 디버깅하면서 콘솔에 어떤 객체를 잠깐 출력해볼 때 유용합니다.</p>\n<p>만약에 <code>also()</code> 함수가 없었다면 과일 객체를 콘솔에 출력하기 위해서 임시 변수에 저장을 해놨어야 했을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"시작\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 시작</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fruit(name=사과, price=100)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"종료\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 종료</span></code></pre></div>\n<p>객체를 출력하는 코드를 삭제하면 이 변수는 더 이상 사용되지 않기 때문에 변수를 귀찮게 정리해 줬어야겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ⚠️ unused variable</span></code></pre></div>\n<p>영단어 <code>also</code>의 뜻처럼 대세에 지장을 주지 않는 선에서 사용하는 것이 좋습니다.</p>\n<h2 id=\"apply-함수\" style=\"position:relative;\"><a href=\"#apply-%ED%95%A8%EC%88%98\" aria-label=\"apply 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>apply() 함수</h2>\n<p>어떤 객체를 상대로 <code>apply()</code> 함수를 호출하면 그 객체의 속성과 함수를 쉽게 호출할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfruit<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span>\n    price <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fruit(name=사과, price=100)</span></code></pre></div>\n<p><code>apply()</code> 함수의 임시 범위에서는 대상 객체가 <code>this</code>에 할당되어 <code>this.</code>를 생략하고 바로 객체의 속성과 함수에 접근이 가능합니다.\n반면에 <code>also()</code> 함수의 임시 범위에는 대상 객체가 람다 함수의 인자로 할당이 되죠.</p>\n<p>그러므로 위 코드를 굳이 <code>also()</code> 함수로 재작성하면 속성과 함수 앞에 <code>it.</code>을 붙여줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfruit<span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n    it<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span>\n    it<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fruit(name=사과, price=100)</span></code></pre></div>\n<p>영단어 <code>apply</code>의 뜻처럼 임시 범위에서 어떤 객체의 속성을 설정해줄 때 빛을 발휘하는 Scope 함수입니다.</p>\n<h2 id=\"람다-함수의-결과를-반환하는-scope-함수\" style=\"position:relative;\"><a href=\"#%EB%9E%8C%EB%8B%A4-%ED%95%A8%EC%88%98%EC%9D%98-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94-scope-%ED%95%A8%EC%88%98\" aria-label=\"람다 함수의 결과를 반환하는 scope 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>람다 함수의 결과를 반환하는 Scope 함수</h2>\n<p><code>let()</code> 함수와 <code>run()</code> 함수, <code>with()</code> 함수 람다 함수의 결과를 반환하는 Scope 함수입니다.\n<code>let()</code> 함수와 <code>run()</code> 함수는 임시 범위 내에서 대상 객체를 어떻게 접근하느냐(<code>it</code> vs. <code>this</code>)에서 차이를 보입니다.\n<code>with()</code> 함수는 <code>run()</code> 함수와 동일하게 임시 범위 내에서 <code>this</code>를 통해 대상 객체에 접근하지만 임시 범위를 생성하는 방식이 다릅니다.</p>\n<h2 id=\"let-함수\" style=\"position:relative;\"><a href=\"#let-%ED%95%A8%EC%88%98\" aria-label=\"let 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let() 함수</h2>\n<p>어떤 객체를 상대로 <code>let()</code> 함수를 호출하면 해당 객체를 가지고 어떤 작업을 한 결과를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> nameList <span class=\"token operator\">=</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameList<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [사과, 사과, 사과]</span></code></pre></div>\n<p><code>let()</code> 함수는 특히 <code>?.</code> 연산자와 함께 깔끔한 널(null) 값 처리를 위해서 쓰는 경우가 많습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> discountedPrice <span class=\"token operator\">=</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>price<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span>\n    it <span class=\"token operator\">*</span> <span class=\"token number\">0.8</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>discountedPrice<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 80.0</span></code></pre></div>\n<p><code>?.let()</code> 조합을 사용하지 않았다면 코드가 좀 지저분했을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> price <span class=\"token operator\">=</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>price\n<span class=\"token keyword\">val</span> discountedPrice <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> price <span class=\"token operator\">*</span> <span class=\"token number\">0.8</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>discountedPrice<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 80.0</span></code></pre></div>\n<h2 id=\"run-함수\" style=\"position:relative;\"><a href=\"#run-%ED%95%A8%EC%88%98\" aria-label=\"run 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>run() 함수</h2>\n<p>어떤 객체를 상대로 <code>run()</code> 함수를 호출하면 그 객체의 속성과 함수를 가지고 어떤 작업을 한 결과를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> message <span class=\"token operator\">=</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> 가격이 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">price</span></span><span class=\"token string\"> 원입니다.\"</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 사과 가격이 100 원입니다.</span></code></pre></div>\n<p>물론 <code>let()</code> 함수를 통해서도 동일한 목적을 달성할 수 있지만, 대상 객체가 람다 함수의 인자로 넘어오기 때문에 앞에 <code>it.</code>을 붙여줘야 합니다.\n위에서 살펴본 <code>apply()</code>와 <code>also()</code> 차이점과 같죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> message <span class=\"token operator\">=</span> <span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">.name 가격이 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">.price 원입니다.\"</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 사과 가격이 100 원입니다.</span></code></pre></div>\n<p>참고로 <code>run()</code> 함수는 대상 객체가 없이 단독으로 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\">run <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fruit(name=사과, price=100)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"with-함수\" style=\"position:relative;\"><a href=\"#with-%ED%95%A8%EC%88%98\" aria-label=\"with 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>with() 함수</h2>\n<p>지금까지 살펴본 Scope 함수와 다르게 <code>with()</code>는 객체를 상대로 호출하지 않습니다.\n대신 객체를 인자로 넘겨서 임시 범위를 만들어 내며 람다 함수의 결과값을 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kt\"><pre class=\"language-kt\"><code class=\"language-kt\"><span class=\"token keyword\">val</span> message <span class=\"token operator\">=</span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token function\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"사과\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> 가격이 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">price</span></span><span class=\"token string\"> 원입니다.\"</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 사과 가격이 100 원입니다.</span></code></pre></div>\n<p>이 점을 제외하고는 <code>run()</code> 함수와 사용법이 동일합니다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>임시 범위 내에서 대상 객체를 접근하고 싶다면 <code>let()</code>이나 <code>also()</code>를 쓰는 편이 유리합니다.\n<code>let()</code>은 람다 함수의 결과값을 반환하는 반면에, <code>also()</code>는 대상 객체를 그대로 반환합니다.</p>\n<p>임시 범위 내에서 대상 객체의 속성이나 함수에 싶다면 <code>run()</code>이나 <code>apply()</code>, <code>with()</code>를 씁니다.\n<code>run()</code>은 람다 함수의 결과값을 반환하는 반면에, <code>apply()</code>는 대상 객체를 그대로 반환합니다.\n<code>with()</code>는 객체를 인자로 넘겨서 임시 범위를 만들어 내며 람다 함수의 결과값을 반환합니다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 객체를 변수에 저장하지 않고 람다 함수를 통해 임시 범위에서 접근하도록 해주는 Kotlin의 Scope 함수에 대해서 알아보았습니다.</p>\n<p>5개의 Scope 함수 중에 뭘 써도 상관이 없는 경우도 있지만, 목적에 맞는 Scope 함수를 골라 써야 빛을 발휘할 때가 많습니다.</p>\n<p>Scope 함수를 적지적소에 잘 활용하면 더욱 간결하고 표현력있게 작성할 수 있지만, 오납용하면 오히려 역효과 날 수도 있어서 주의해야합니다.\n각 Scope 함수의 특성을 잘 이해하고 상황에 맞게 사용하는 것이 무엇보다 중요하겠습니다.</p>","timeToRead":5,"fields":{"slug":"/kotlin-scope-functions/","tags":["Kotlin","FP"]},"frontmatter":{"title":"Kotlin의 Scope 함수 정리","date":"Jan 19, 2025"}},"next":{"fields":{"slug":"/kotlin-jdbc/"},"frontmatter":{"title":"Kotlin에서 JDBC API 사용하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}