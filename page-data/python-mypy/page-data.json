{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-mypy/","result":{"pageContext":{"previous":{"fields":{"slug":"/material-ui-styles/"},"frontmatter":{"title":"Material UI 스타일링"}},"node":{"html":"<p>파이썬 버전 3.5에 추가된 타입 어노테이션(type annotation) 덕분에 파이썬에서도 Mypy와 같은 도구를 통해서 타입 체크가 가능해졌습니다.</p>\n<blockquote>\n<p>파이썬의 타입 어노테이션에 대한 자세한 설명은 <a href=\"/python-type-annotations\">관련 포스트</a>를 참고바라겠습니다.</p>\n</blockquote>\n<h2 id=\"타입-어노테이션--타입-체크\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98--%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC\" aria-label=\"타입 어노테이션  타입 체크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 어노테이션 / 타입 체크</h2>\n<p>파이썬과 같이 동적(dynamic) 프로그래밍 언어에서 정적(static) 타입 체크가 왠 말이냐고 생각하시는 분들이 있으실 것 같습니다.\n파이썬의 동적 타입 처리는 유연함은 일회성 스크립트나 소규모의 애플리케이션을 빠르게 개발할 때는 큰 장점으로 작용합니다.\n하지만 애플리케이션이 규모가 커지게 되면 이러한 파이썬의 다이나믹함이 치명적인 버그로 이어질 확률이 높아지게 되며 애플리케이션 안정성에 위험 요소가 되기도 합니다.</p>\n<p>타입 어노테이션(type annotation)은 파이썬 코드에 타입을 명시하기 위한 표준을 정립하기 위해서 파이썬 3.5에 추가되어 있습니다.\n이 표준에 따라 변수나 함수에 타입이 명시된 파이썬 코드는 정적 타입 검사기(static type checker)를 통해 코드를 실행하지 않고도 타입 에러를 찾아낼 수 있습니다.</p>\n<h2 id=\"mypy-설치-및-실행\" style=\"position:relative;\"><a href=\"#mypy-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%8B%A4%ED%96%89\" aria-label=\"mypy 설치 및 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mypy 설치 및 실행</h2>\n<p>Mypy는 파이썬에서 가장 많이 사용되고 있는 정적 타입 검사 도구입니다.\n타입 어노테이션이 추가된 파이썬 코드를 상대로 Mypy를 돌리면 타입 에러를 찾아내줍니다.</p>\n<p>Mypy는 <code>pip</code>으로 손쉽게 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> mypy</code></pre></div>\n<p>Mypy를 터미널에서 실행할 때는 파일이나 디렉토리명을 인자로 넘기면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mypy our_file.py our_directory</code></pre></div>\n<h2 id=\"타입-검사\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EA%B2%80%EC%82%AC\" aria-label=\"타입 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 검사</h2>\n<p>실습을 위해 <code>test.py</code> 파일을 생성하고 다음과 같이 매우 간단한 파이썬 코드를 작성해보겠습니다.\n<code>no</code> 변수의 타입을 <code>int</code>로 명시하기 위해서 타입 어노테이션을 추가하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">no<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 코드를 파이썬 인터프리터로 실행해보면 다음과 같이 문제없이 잘 돌아갑니다. 😰</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python test.py\n<span class=\"token number\">1</span></code></pre></div>\n<p>왜냐하면 타입 어노테이션은 언어 레벨에서는 코드 실행에 아무 영향이나 제약을 주지않기 때문입니다.\n이렇게 타입 어노테이션을 사용하는 것을 소외 타입 힌팅(type hinting)이라고 하는데 주로 코드를 읽기 쉽게 하거나, 코드 편집기(IDE)나 린터(linter)에서 활용됩니다.</p>\n<p>이 코드를 다시 Mypy로 돌려보면 변수의 타입과 변수에 저장된 값의 타입이 다르다고 타입 에러가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mypy test.py\ntest.py:1: error: Incompatible types <span class=\"token keyword\">in</span> assignment <span class=\"token punctuation\">(</span>expression has <span class=\"token builtin class-name\">type</span> <span class=\"token string\">\"str\"</span>, variable has <span class=\"token builtin class-name\">type</span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">)</span>\nFound <span class=\"token number\">1</span> error <span class=\"token keyword\">in</span> <span class=\"token number\">1</span> <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>checked <span class=\"token number\">1</span> <span class=\"token builtin class-name\">source</span> <span class=\"token function\">file</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 Mypy를 사용하면 파이썬 인터프리터가 잡지 못하는 타입 버그를 쉽게 찾아낼 수 있습니다. 🐛</p>\n<h2 id=\"오류-검사\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EA%B2%80%EC%82%AC\" aria-label=\"오류 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 검사</h2>\n<p>Mypy를 사용하면 위와 같이 타입 자체의 버그분만 아니라 실제로 런타임에 발생할 수 있는 오류를 미리 알아낼 수도 있습니다.</p>\n<p>예를 들어, <code>test.py</code> 파일에 다음과 같이 파이썬 함수를 작성해보겠습니다.\n함수의 인자 타입과 반환 타입을 명시하기 위해서 타입 어노테이션으로 해주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> times\n\n\nrepeat<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 코드를 파이썬 인터프리터로 실행해보면 <code>repeat()</code> 함수의 두 번째 인자로 숫자가 아닌 문자 타입의 인자가 넘어가기 때문에 오류가 발생하게 됩니다. 😞</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python test.py\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"test.py\"</span>, line <span class=\"token number\">5</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    repeat<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi\"</span>, <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"test.py\"</span>, line <span class=\"token number\">2</span>, <span class=\"token keyword\">in</span> repeat\n    <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span> * <span class=\"token builtin class-name\">times</span>\nTypeError: can<span class=\"token string\">'t multiply sequence by non-int of type '</span>str'</code></pre></div>\n<p>이 코드를 Mypy로 돌려보면 이미 이 코드에서 이러한 오류가 발생할 것이라는 것을 알려줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mypy test.py\ntest.py:5: error: Argument <span class=\"token number\">2</span> to <span class=\"token string\">\"repeat\"</span> has incompatible <span class=\"token builtin class-name\">type</span> <span class=\"token string\">\"str\"</span><span class=\"token punctuation\">;</span> expected <span class=\"token string\">\"int\"</span>\nFound <span class=\"token number\">1</span> error <span class=\"token keyword\">in</span> <span class=\"token number\">1</span> <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>checked <span class=\"token number\">1</span> <span class=\"token builtin class-name\">source</span> <span class=\"token function\">file</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 Mypy를 사용하면 많은 오류를 애플리케이션을 실행 전에 찾아내고 예방할 수 있습니다. 👍</p>\n<h2 id=\"mypy-설정\" style=\"position:relative;\"><a href=\"#mypy-%EC%84%A4%EC%A0%95\" aria-label=\"mypy 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mypy 설정</h2>\n<p>Mypy 설정은 실행 시 커맨드에 옵션을 넘길 수도 있고, 설정 파일을 이용할 수도 있습니다.\nMypy를 프로젝트에 통합해서 사용하는 경우, 매번 커맨드에 옵션을 넘기는 것 보다는 설정 파일을 이용하는 편이 편리할 것입니다.</p>\n<p>설정 파일은 프로젝트 최상위 디렉토리의 <code>mypy.ini</code> 또는 <code>.mypy.ini</code>, <code>setup.cfg</code>를 사용하도록 되어 있습니다.\n예를 들어, <code>app</code>과 <code>tests</code> 디렉토리의 모든 파일을 타입 체크하되 일부 디렉토리를 제외하고 싶다면 다음과 같이 설정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[mypy]\nfiles = app,tests\nshow_error_context = True\nshow_column_numbers = True\nshow_error_codes = True\npretty = True\n\n[mypy-app.*.migrations.*]\nignore_errors = True</code></pre></div>\n<p>이와 같이 모듈 레벨에서 상세 설정이 가능하기 때문에 기존에 타입 에러가 있는 프로젝트에서 Mypy를 사용하는데 지장이 없습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬 코드에 대한 정적 타입 체크를 해주고 런타임 오류를 미리 찾아내주는 유용한 도구인 Mypy에 대해서 알아보았습니다.</p>\n<p>Mypy는 타입 어노테이션을 사용하지 않는 프로젝트에서도 점진적으로 사용할 수 있도록 타입 어노테이션이 추가되지 않은 코드는 무시하도록 되어 있습니다.\n따라서 신규 프로젝트 뿐만 아니라 기존 프로젝트에서도 특히 프로젝트 규모가 크다면 코드 품질과 애플리케이션 안정성을 위해서 Mypy 사용을 추천드리고 싶습니다.</p>","timeToRead":3,"fields":{"slug":"/python-mypy/","tags":["Python","파이썬","Mypy","typing","TypeCheck"]},"frontmatter":{"title":"파이썬 타입 체크 - Mypy","date":"Jun 6, 2020"}},"next":{"fields":{"slug":"/docker-compose-networks/"},"frontmatter":{"title":"Docker Compose 네트워크"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}