{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-array-push-unshift/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-array-pop-shift/"},"frontmatter":{"title":"자바스크립트 배열의 원소 제거하기: pop()와 shift() 메서드"}},"node":{"html":"<p>배열에 원소를 추가하는 것은 자바스크립트 코딩할 때 매우 빈번하게 필요한 작업이죠?</p>\n<p>이번 포스팅에서는 자바스크립트 배열에 원소를 추가하는 다양한 방법에 대해서 간단히 정리해보겠습니다.</p>\n<h2 id=\"push-메서드\" style=\"position:relative;\"><a href=\"#push-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"push 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>push() 메서드</h2>\n<p>자바스크립트 배열에 원소를 추가하는 방법 중에서 가장 널리 알려진 방법은 뭐니뭐니 해도 배열의 <code>push()</code> 메서드일 것 같은데요.</p>\n<p>예를 들어, <code>push()</code> 메서드로 과일 이름을 담은 배열에 원소를 추가해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Apple', 'Banana', 'Coconut', 'Orange']</span></code></pre></div>\n<p><code>push()</code> 메서드에 넘어온 인수는 <strong>배열의 끝</strong>, 즉 기존에 마지막 원소 바로 뒤에 추가됩니다.\n그리고 결과로 원소를 추가한 후의 배열에 들어있는 원소의 수, 즉 배열의 길이를 반환합니다.</p>\n<p><code>push()</code> 메서드가 아무 것도 반환하지 않는다고 알고 계신 분들도 있을텐데요.\n아무래도 배열에 원소를 추가한 후에 바로 배열의 길이가 필요한 경우가 많지 않다보니, 실용성이 많이 떨어지는 부분인 것 같습니다.</p>\n<p><code>push()</code> 메서드는 추가할 값을 가변 인자로 받기 때문에, 두 개 이상의 원소를 한 번에 추가할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lemon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Apple', 'Banana', 'Coconut', 'Orange', 'Lemon']</span></code></pre></div>\n<h2 id=\"unshift-메서드\" style=\"position:relative;\"><a href=\"#unshift-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"unshift 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>unshift() 메서드</h2>\n<p>반대로 <strong>배열의 시작</strong>에 원소를 추가하고 싶을 때는 <code>unshift()</code> 메서드를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Orange', 'Apple', 'Banana', 'Coconut']</span></code></pre></div>\n<p><code>push()</code> 메서드와 동일하게 <code>unshift()</code> 메서드도 원본 배열에 원소를 추가한 후, 배열 내의 원소의 개수를 반환합니다.\n뿐만 아니라, 가변 인자를 받는 부분도 동일하기 때문에 여러 개의 원소를 한 번에 추가할 수 있습니다.</p>\n<p>여기에 추가로 꼭 기억해두셔야 할 <code>push()</code>와 <code>unshift()</code> 메서드의 가장 중요한 공통점이 있는데요.\n바로 별도로 사본 배열 생성하여 원소를 추가하는 것이 아니라, 원본 배열에 바로 원소를 추가한다는 것입니다.\n그러므로 원본 배열에 변경을 가해서는 안 되는 경우에는, 메서드를 호출하기 전에 반드시 배열을 복제해놔야 겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> clonedFruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Apple', 'Banana', 'Coconut']</span>\nclonedFruits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\nclonedFruits<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lemon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Apple', 'Banana', 'Coconut']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clonedFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Lemon', 'Apple', 'Banana', 'Coconut', 'Orange']</span></code></pre></div>\n<h2 id=\"splice-메서드\" style=\"position:relative;\"><a href=\"#splice-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"splice 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>splice() 메서드</h2>\n<p>그럼, <strong>배열의 중간</strong>에 원소를 추가하고 싶을 때는 어떻게 해야할까요?\n이 때는 바로 <code>splice()</code>라는 배열의 다목적 메서드를 활용할 수 있습니다.\n(<code>slice()</code>가 아니고 <code>splice()</code>이오니 주의 바랍니다.)</p>\n<p><code>splice()</code> 메서드는 첫 번째 인자로 시작 인덱스(index), 두 번째 인자로 몇개의 값을 삭제할지, 그리고 세번째 인자부터는 추가할 값을 가변 인자로 넘길 수 있으며, 삭제된 값을 담고 있는 배열을 반환하는데요.\n단순히 배열에 원소를 추가할 때는 추가할 위치를 첫 번째 인자로 넘기고, 두 번째 인자로는 <code>0</code>을 넘겨서 아무 것도 삭제하지 않으면 됩니다.</p>\n<p>그럼 배열의 인덱스 <code>1</code>, 즉 두 번째 위치에 원소를 추가해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Apple', 'Orange', 'Banana', 'Coconut']</span></code></pre></div>\n<p>아무 원소도 삭제되지 않았으므로, 빈 배열이 반환되는 것을 볼 수 있습니다.</p>\n<blockquote>\n<p>자바스크립트 배열의 slice()와 splice() 메서드에 대한 좀 더 자세한 설명은 <a href=\"/js-array-slice-splice/\">관련 포스팅</a>를 참고바랍니다.</p>\n</blockquote>\n<h2 id=\"spread-연산자\" style=\"position:relative;\"><a href=\"#spread-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"spread 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>spread 연산자</h2>\n<p>ES6부터는 배열을 다룰 때, spread 또는 전개 연산자로고 불리는 <code>...</code> 기호가 많이 사용되는데요.\n배열을 나타내는 <code>[]</code> 기호 안에서 배열 앞에 <code>...</code> 기호를 붙이면 그 배열 내의 원소가 마치 펼쳐진 것처럼 해당 배열에 추가되기 때문에,\n그 배열의 시작이든 끝이든 유연하게 원하는 개수의 원소를 추가할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> moreFruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Melon\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fruits<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>moreFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Melon', 'Apple', 'Banana', 'Coconut', 'Strawberry', 'Orange']</span></code></pre></div>\n<p>특히, 전개 연산자는 메서드 체이닝(chaining), 같은 배열을 상대로 여러 메서드를 연쇄 호출할 때도 사용하기 적합합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> filteredSortedMoreFruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Melon\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fruits<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> fruit<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> fruit<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> length <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">toSorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n[\n    {\n        \"name\": \"BANANA\",\n        \"length\": 6\n    },\n    {\n        \"name\": \"COCONUT\",\n        \"length\": 7\n    },\n    {\n        \"name\": \"STRAWBERRY\",\n        \"length\": 10\n    },\n    {\n        \"name\": \"ORANGE\",\n        \"length\": 6\n    }\n]\n*/</span></code></pre></div>\n<blockquote>\n<p>자바스크립트 배열을 정렬할 때 사용되는 toSorted() 함수에 대해서는 <a href=\"/js-sort-to-sorted/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 예제를 통해 자바스크립트 배열에 원소를 추가하는 대표적인 3가지 방법에 대해서 살펴보았습니다.\n상황에 맞게 적절한 방법을 선택하셔서 보다 효율적으로 자바스크립트 배열을 다루실 수 있으셨으면 좋겠습니다.\n자바스크립트 배열에 원소 제거하는 방법에 대해서는 <a href=\"/js-array-pop-shift/\">별도 포스팅</a>을 통해 다루겠습니다.</p>","timeToRead":3,"fields":{"slug":"/js-array-push-unshift/","tags":["JavaScript","array","ES6"]},"frontmatter":{"title":"자바스크립트 배열에 원소 추가하기: push()와 unshift() 메서드","date":"Sep 30, 2023"}},"next":{"fields":{"slug":"/python-any/"},"frontmatter":{"title":"파이썬의 내장 함수 any() 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}