{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-react-apollo-hooks/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-react-apollo-hooks-example/"},"frontmatter":{"title":"[GraphQL/React] Apollo Hooks로 React 앱 개발하기"}},"node":{"html":"<p>지난 달, Apollo Client에서 공개되어 현재 뜨거운 반응을 얻고 있는 Apollo Hooks에 대해서 알아보겠습니다.</p>\n<blockquote>\n<p>Apollo Client가 생소하신 분들은 아래 포스트를 먼저 보시고 이 포스트로 돌아오시는 것을 추천드립니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/graphql-apollo-client\">[GraphQL] Apollo Client 사용법</a></li>\n</ul>\n<h2 id=\"apollo-hooks\" style=\"position:relative;\"><a href=\"#apollo-hooks\" aria-label=\"apollo hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apollo Hooks?</h2>\n<p>Apollo Hooks는 Apollo Client로 React 앱을 개발할 때, GraphQL API를 호출할 수 있는 새로운 방법입니다.<br>기존에는 <code>react-apollo</code> 패키지에서 제공하는 <code>&#x3C;Query/></code>나 <code>&#x3C;Mutation/></code>과 같은 HOC(Higher-Order Components)를 사용했었습니다.</p>\n<blockquote>\n<p>기존에 React 앱에서 Apollo Client를 사용하여 GraphQL API를 호출하던 방법은 아래 포스트를 참고 바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/graphql-react-apollo-client\">[GraphQL] Apollo Client로 React 앱 개발하기</a></li>\n</ul>\n<p>하지만 React 개발의 패러다임을 흔든 React Hooks가 등장하면서, Apollo Client에서도 React Hooks를 사용하려는 시도들이 있었습니다.<br>그 중 대표적인 프로젝트가 <a href=\"https://github.com/trojanowski/react-apollo-hooks\"><code>react-apollo-hooks</code></a>이며, 이 프로젝트로 부터 모티브를 얻어 Apollo의 공식 패키지로 Apollo Hooks(<code>@apollo/react-hooks</code>)가 출시되었습니다.<br>(참고로 <code>react-apollo-hooks</code> 패키지는 Apollo Hooks가 출시되면서 deprecated 되었습니다.)</p>\n<blockquote>\n<p>React Hooks에 대한 자세한 설명은 아래 포스트를 참고바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/react-hooks-use-state\">React Hooks: useState 사용법</a></li>\n<li><a href=\"/react-hooks-use-effect\">React Hooks: useEffect 사용법</a></li>\n</ul>\n<p><code>@apollo/react-hooks</code> 패키지는 <code>useQuery</code>, <code>useMutation</code>, <code>useApolloClient</code>와 같은 React Hooks 함수를 제공하며, 이 함수들을 활용하면 React 앱에서 GraphQL API를 훨씬 쉽게 호출할 수 있습니다.<br>또한, 자연스럽게 클래스 대신에 함수 컴포넌트를 사용하게 되면서 코드의 가독성이나 유지보수 측면에서도 이점이 있습니다.</p>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<p>Apollo Hooks를 사용하기 위해서 우선 자신의 리액트 프로젝트에 관련 패키지를 설치해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token function\">install</span> @apollo/react-hooks apollo-cache-inmemory apollo-client apollo-link-http graphql graphql-tag</code></pre></div>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &quot;dependencies&quot;: {\n    &quot;@apollo/react-hooks&quot;: &quot;^3.1.0&quot;,\n    &quot;apollo-cache-inmemory&quot;: &quot;^1.6.3&quot;,\n    &quot;apollo-client&quot;: &quot;^2.6.4&quot;,\n    &quot;apollo-link-http&quot;: &quot;^1.5.16&quot;,\n    &quot;graphql&quot;: &quot;^14.5.4&quot;,\n    &quot;graphql-tag&quot;: &quot;^2.10.1&quot;,\n    &quot;react&quot;: &quot;^16.9.0&quot;,\n    &quot;react-dom&quot;: &quot;^16.9.0&quot;\n  },</code></pre></div>\n<h2 id=\"apollo-client-생성\" style=\"position:relative;\"><a href=\"#apollo-client-%EC%83%9D%EC%84%B1\" aria-label=\"apollo client 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apollo Client 생성</h2>\n<p>먼저, <code>apollo-client</code> 패키지에서 임포트한 <code>ApolloClient</code> 생성자를 이용해서 Apollo Client를 생성하겠습니다.<br><code>ApolloClient</code> 생성자는 두 개의 옵션을 가진 객체를 인자로 받습니다.<br>첫번째, <code>link</code> 옵션으로는 원격으로 GraphQL API를 호출하기 위해서 GraphQL API의 endpoint 정보를 담은 <code>HttpLink</code> 객체를 설정해야 합니다.<br>여기서는 대륙/국가 데이터를 제공하는 공개된 GraphQL API의 endpoint 주소를 사용하였습니다.<br>두번째, <code>cache</code> 옵션으로는 가장 범용적으로 사용되는 <code>InMemoryCache</code> 객체를 설정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ApolloClient <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-client\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InMemoryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-cache-inmemory\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createHttpLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-http\"</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  link<span class=\"token operator\">:</span> <span class=\"token function\">createHttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> <span class=\"token string\">\"https://countries.trevorblades.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"react에-apollo-client-연결\" style=\"position:relative;\"><a href=\"#react%EC%97%90-apollo-client-%EC%97%B0%EA%B2%B0\" aria-label=\"react에 apollo client 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React에 Apollo Client 연결</h2>\n<p>다음으로, 위에서 생성한 <code>ApolloClient</code> 객체를 React에 연결해줘야 합니다.<br>앱 내에서 특정 React 컴포넌트만 GraphQL API 호출이 필요한 경우가 아닌 이상, 모든 React 컴포넌트에서 <code>ApolloClient</code>를 사용하도록 설정하는 것이 일반적입니다.<br>예를 들어, <code>create-react-app</code>으로 생성한 React 앱이라면 <code>App.js</code> 파일에서 이 작업을 해야합니다.</p>\n<p><code>@apollo/react-hooks</code> 패키지에서 임포트한 <code>ApolloProvider</code> 컴포넌트로 앱의 최상위 컴포넌트를 감싸줍니다.<br>이 때, <code>ApolloProvider</code>의 <code>client</code> prop으로 위에서 생성한 <code>ApolloClient</code> 객체를 넘겨줘야 합니다.<br>이렇게 설정을 해주면, 앱 내의 모든 컴포넌트에서 GraphQL API 연동이 가능해집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@apollo/react-hooks\"</span>\n<span class=\"token keyword\">import</span> Continents <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Continents\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ApolloProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>React <span class=\"token operator\">+</span> Apollo Hooks<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Continents <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ApolloProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"graphql-api-호출\" style=\"position:relative;\"><a href=\"#graphql-api-%ED%98%B8%EC%B6%9C\" aria-label=\"graphql api 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL API 호출</h2>\n<p>자, 이제 Apollo Hooks를 이용해서 GraphQL API를 호출할 차례입니다!</p>\n<p>먼저, <code>graphql-tag</code> 패키지에서 제공하는 <code>gql</code>이라는 template literal tag를 사용해서 일반 자바스크립트 문자열을 GraphQL 구문으로 바꿔줍니다.<br>그 다음, <code>@apollo/react-hooks</code> 패키지에서 임포트한 <code>useQuery</code> React Hook 함수에 이 GraphQL 쿼리를 인자로 넘겨서 호출합니다.<br>그러면 <code>useQuery</code> 함수는 응답 데이터(<code>data</code>) 뿐만 아니라, 로딩 여부(<code>loading</code>)와 오류 데이터(<code>error</code>)까지 함께 리턴합니다.</p>\n<p>서버로 부터 응답을 기다리는 동안에는 <code>loading</code> 프로퍼티 <code>true</code>이기 때문에 사용자에게 로딩 중이라는 메세지나 spinner 애니메이션 등을 표시해 줄 수 있습니다.<br>정상적으로 서버로 부터 응답 데이터가 도착하면 <code>data</code> 프로퍼티의 값을 읽어서 대륙 목록을 웹페이지에 출력합니다.<br>반대로 GraphQL API 호출이 실패된 경우에는 <code>error</code> 프로퍼티의 값을 읽어서 예외적인 UI 처리를 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@apollo/react-hooks\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GET_CONTINENTS</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    continents {\n      code\n      name\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Continents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_CONTINENTS</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Error<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>continents<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> code<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>code<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Continents</code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<iframe src=\"https://stackblitz.com/edit/graphql-react-apollo-hooks?embed=1&file=Continents.js\"\nstyle=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Apollo Hooks를 이용해서 React 앱에서 GraphQL API를 호출하는 방법에 대해서 아주 간단히 알아보았습니다.<br>예제에서 사용한 GraphQL API는 mutation은 제공하지 않기 때문에, <code>useQuery</code> 함수를 이용해서 query 호출하는 부분만 다루었습니다.<br>Apollo Hooks에서 제공하는 다른 React Hooks 함수에 대해서는 아래 API reference 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://www.apollographql.com/docs/react/api/react-hooks/\">https://www.apollographql.com/docs/react/api/react-hooks/</a></li>\n</ul>\n<h2 id=\"관련-포스트\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EB%A0%A8-%ED%8F%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"관련 포스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 포스트</h2>\n<ul>\n<li><a href=\"/graphql-react-apollo-hooks-example\">[GraphQL/React] Apollo Hooks로 React 앱 개발하기</a></li>\n</ul>","timeToRead":4,"fields":{"slug":"/graphql-react-apollo-hooks/","tags":["JavaScript","자바스크립트","GraphQL","Apollo","ApolloClient","ApolloHooks","React","리액트","useQuery"]},"frontmatter":{"title":"[GraphQL/React] Apollo Hooks 소개/사용법","date":"Sep 7, 2019"}},"next":{"fields":{"slug":"/graphql-apollo-remote-schemas/"},"frontmatter":{"title":"[GraphQL] 원격 서버로 부터 스키마 가져오기"}}}}}