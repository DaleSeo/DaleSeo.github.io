{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-open/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-json/"},"frontmatter":{"title":"[파이썬] json 모듈로 JSON 데이터 다루기"}},"node":{"html":"<p>파이썬에서는 내장 함수인 <code>open()</code>을 이용해서 다른 언어에 비해서 매우 간단하게 파일 입출력 처리를 할 수 있습니다.</p>\n<h2 id=\"파일에-데이터-쓰기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%93%B0%EA%B8%B0\" aria-label=\"파일에 데이터 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일에 데이터 쓰기</h2>\n<p>먼저 파일에 데이터를 쓰는 방법에 대해서 알아보겠습니다.\n아래 <code>colors</code> 배열에 들어있는 문자열 3개를 <code>colors.dat</code> 파일에 쓰려고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>파일을 열 때는 기본적으로 <code>with</code> 문을 통해 <code>open()</code> 내장 함수를 호출하는 것이 권장됩니다.\n<code>with</code> 문을 사용하지 않을 경우, 파일 닫기를 스스로 해줘야 해서 불필요하게 코드가 지저분해지기 때문입니다.</p>\n<p><code>open()</code> 내장 함수는 첫번째 인자로는 파일명, 두번째 인자로는 모드를 받습니다.\n파일에 데이터를 쓸 때는 <code>w</code> 모드를 사용하고 파일을 열고, 파일 핸들러의 <code>write()</code> 메서드를 사용해서 쓸 데이터를 넘기면 됩니다.\n또 다른 방법으로 <code>print()</code> 내장 함수를 사용하되 두번째 인자로 파일 핸들러 넘길 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'colors.dat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> color <span class=\"token keyword\">in</span> colors<span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>color <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># print(color, file=file)</span></code></pre></div>\n<p>위 코드를 실행하면 <code>colors.dat</code> 파일이 생성되고, 그 파일 안에 다음과 같이 데이터가 쓰여져있음을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">red\nyellow\nblue\n</code></pre></div>\n<p>여기서 주의할 점은 <code>w</code> 모드를 사용해서 파일에 쓰기를 할 때는 기존에 파일에 있던 데이터는 모두 사라진다는 것입니다.\n기존에 데이터를 유지한 체로 데이터를 추가해서 쓰고 싶은 경우에는 <code>a</code> 모드를 사용하면 됩니다.</p>\n<h2 id=\"파일로-부터-데이터-읽기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%B6%80%ED%84%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%BD%EA%B8%B0\" aria-label=\"파일로 부터 데이터 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일로 부터 데이터 읽기</h2>\n<p>파일로 부터 데이터를 읽을 때는 <code>r</code> 모드를 사용해서 파일을 열어야 합니다.\n파일 핸들러의 <code>read()</code> 함수는 파일의 전체 데이터를 문자열로 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'colors.dat'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드를 실행하면 다음과 같이 콘솔에 파일의 전체 데이터가 출력될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">red\nyellow\nblue\n</code></pre></div>\n<p>파일을 줄 단위로 읽어야 할 때는 <code>for</code> 문을 사용해서 파일 핸들러를 루프 돌 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'colors.dat'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> color <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>파일을 줄 단위로 읽은 결과를 바로 배열에 저장하고 싶다면 다음과 같이 <code>splitlines()</code> 메서드를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'colors.dat'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    colors <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[&#39;red&#39;, &#39;yellow&#39;, &#39;blue&#39;]</code></pre></div>\n<p>이상으로 파이썬의 <code>open()</code> 내장 함수를 이용해서 파일에 데이터를 쓰거나 읽는 방법에 대해서 간단히 살펴보았습니다.</p>","timeToRead":2,"fields":{"slug":"/python-open/","tags":["Python","파이썬","파일","입출력","open","read","right"]},"frontmatter":{"title":"[파이썬] open() 함수를 이용한 파일 입출력","date":"Nov 16, 2019"}},"next":{"fields":{"slug":"/js-package-locks/"},"frontmatter":{"title":"패키지 잠금 파일 (package-lock.json, yarn.lock)"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}