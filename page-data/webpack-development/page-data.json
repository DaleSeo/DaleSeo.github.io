{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/webpack-development/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-quick-call/"},"frontmatter":{"title":"GraphQL API 간단하게 호출하기"}},"node":{"html":"<p>웹팩은 자바스크립트 개발자들이 좀 더 쾌적한 개발 경험을 할 수 있도록 여러가지 개발 편의 기능을 제공합니다. 이번 포스트에서는 웹팩을 사용하면서 개발 편의성을 개선시킬 수 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"관련-포스트\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EB%A0%A8-%ED%8F%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"관련 포스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 포스트</h2>\n<p>웹팩에 대한 지식이나 경험이 전혀 없으신 분들을 아래 포스트를 먼저 읽어보시면 따라오시기가 좀 더 수월하실 겁니다.</p>\n<ul>\n<li><a href=\"/webpack-basics\">웹팩(Webpack) 기본 사용법 (CLI)</a></li>\n<li><a href=\"/webpack-config\">웹팩(Webpack) 기본 설정법 (Entry/Output/Loader/Plugins)</a></li>\n</ul>\n<h2 id=\"실습-프로젝트\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"실습 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 프로젝트</h2>\n<p>먼저 실습 프로젝트를 만들겠습니다. 새로운 디렉터리를 만들고 NPN 프로젝트를 초기화 후, 웹팩과 웹팩 CLI 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> webpack-devlopment\n$ <span class=\"token builtin class-name\">cd</span> webpack-devlopment\n$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i -D webpack webpack-cli</code></pre></div>\n<p>그 다음, 다음과 같이 <code>src/index.js</code>와 <code>dist/index.html</code> 파일을 작성합니다.</p>\n<ul>\n<li>src/index.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Webpack!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>dist/index.html</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Webpack Development<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>자 이제, 터미널에서 웹팩을 커맨드를 실행시켜 번들을 합니다. 웹팩의 디폴트 설정에 따라 <code>src/index.js</code>를 읽어들여 <code>dist/main.js</code>을 만들어냅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx webpack\nHash: b1885542f2ac20f161f3\nVersion: webpack <span class=\"token number\">4.16</span>.5\nTime: 80ms\nBuilt at: <span class=\"token number\">2018</span>-07-20 <span class=\"token number\">12</span>:58:38\n  Asset        Size  Chunks             Chunk Names\nmain.js  <span class=\"token number\">1010</span> bytes       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> main.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> ./src/index.js <span class=\"token number\">93</span> bytes <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span></code></pre></div>\n<p>그리고 나서 브라우저에서 <code>dist/index.html</code> 파일을 열어보면 화면에 <code>Hello, Webpack!</code>이라고 표시가 될 것입니다.</p>\n<p>참고로 실습 프로젝트가 제대로 만들어졌다면 다음과 같은 디렉터리 구조를 가지게 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── dist\n│   ├── index.html\n│   └── main.js\n├── node_modules\n├── package.json\n├── src\n│   └── index.js\n└── webpack.config.js</code></pre></div>\n<h2 id=\"코드-수정의-번거로움\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%88%98%EC%A0%95%EC%9D%98-%EB%B2%88%EA%B1%B0%EB%A1%9C%EC%9B%80\" aria-label=\"코드 수정의 번거로움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 수정의 번거로움</h2>\n<p><code>Hello, Webpack!</code> 대신에 <code>Bye, Webpack!</code>을 화면에 출력하려고 하고 싶다고 가정해봅시다.</p>\n<p>먼저 <code>src/index.js</code> 파일을 열어서 소스 코드를 수정해야겠죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye, Webpack!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 다시 브라우저를 새로고침해보면 여전히 기존 메세지가 화면에 표시됨을 알 수 있습니다. 왜냐하면, <code>dist/index.html</code> 파일은 <code>src/index.js</code>(웹팩 입력)가 아닌 <code>dist/main.js</code>(웹팩 출력) 파일을 참조하고 있기 때문입니다. 따라서 다음과 같이 추가로 터미널에서 웹팩을 실행시켜 번들 파일인 <code>dist/main.js</code>까지 업데이트 해줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx webpack</code></pre></div>\n<p>다시 브라우저를 새로고침해보면 의도했던바와 같이 <code>Bye, Webpack!</code>이 화면에 표시될 것입니다. 이처럼 웹팩을 사용하지 않을 때는 그냥 코드를 변경 후 파일을 저장만 하면 되었는데, 웹팩을 사용할 때는 매번 번들 파일까지 만들어줘야 하기 때문에 개발이 상당히 번거로워집니다.</p>\n<h2 id=\"웹팩-감시-옵션\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%ED%8C%A9-%EA%B0%90%EC%8B%9C-%EC%98%B5%EC%85%98\" aria-label=\"웹팩 감시 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹팩 감시 옵션</h2>\n<p>다행히도 이렇게 매번 터미널에서 <code>npx webpack</code>이나 <code>npm run build</code>(NPM 스크립트로 등록해놓은 경우) 커맨드를 실행시키지 않고도 프로젝트의 변경 내용을 감시해서 적용해주는 기능이 있습니다. 바로 웹팩 커맨드를 실행할 때 <code>--watch</code> 옵션을 주는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx webpack --watch\n\nwebpack is watching the files…\n\nHash: b421c06707b12960c650\nVersion: webpack <span class=\"token number\">4.16</span>.5\nTime: 63ms\nBuilt at: <span class=\"token number\">2018</span>-07-20 <span class=\"token number\">13</span>:09:37\n  Asset        Size  Chunks             Chunk Names\nmain.js  <span class=\"token number\">1010</span> bytes       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> main.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> ./src/index.js <span class=\"token number\">96</span> bytes <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span></code></pre></div>\n<p>웹팩을 감시 옵션을 줘서 실행시키면 한 번 번들을 하고 마는 것이 아니라 소스 파일을 감시하는 프로세스가 계속 떠있게 됩니다. 그리고 이 프로세스가 변경 사항을 캐치해서 바로 바로 반영을 해줍니다.</p>\n<p>다음과 같이 <code>src/index.js</code> 파일을 수정해보면 즉시 웹팩이 다시 번들을 수행하는 것을 터미널에서 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, Webpack!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Hash: 0e7ac934d3aa452e4967\nVersion: webpack <span class=\"token number\">4.16</span>.5\nTime: 173ms\nBuilt at: <span class=\"token number\">2018</span>-07-20 <span class=\"token number\">13</span>:10:49\n  Asset        Size  Chunks             Chunk Names\nmain.js  <span class=\"token number\">1010</span> bytes       <span class=\"token number\">0</span>  <span class=\"token punctuation\">[</span>emitted<span class=\"token punctuation\">]</span>  main\nEntrypoint main <span class=\"token operator\">=</span> main.js\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> ./src/index.js <span class=\"token number\">90</span> bytes <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">[</span>built<span class=\"token punctuation\">]</span></code></pre></div>\n<p>마지막으로 브라우저에서 새로고침을 해보면 <code>Hi, Webpack!</code>이 화면에 표시될 겁니다. 개인적으로는 이 방법으로도 충분하다고 생각하지만 아직까지도 매번 브라우저에서 새로고침을 해줘야 한다는 점이 귀찮게 느껴지실 수도 있습니다.</p>\n<h2 id=\"웹팩-개발-서버\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%ED%8C%A9-%EA%B0%9C%EB%B0%9C-%EC%84%9C%EB%B2%84\" aria-label=\"웹팩 개발 서버 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹팩 개발 서버</h2>\n<p>웹팩에서 제공하는 개발 서버를 사용하면 <code>live reloading</code>통해, 코드 변경 분이 심지어 브라우저에서 새로고침 조차 할 필요가 없이 반영할 수 있습니다.</p>\n<p>먼저 터미널에서 <code>webpack-dev-server</code> NPM 패키지를 개발 의존성으로 설치 후 웹팩 개발 서버를 구동합니다. <code>index.html</code> 파일이 <code>dist</code> 디렉터리 안에 위치하기 때문에 웹팩 개발 서버 구동 시 <code>--content-base</code> 옵션으로 <code>./dist</code>를 넘겨주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D webpack-dev-server\n$ npx webpack-dev-server --content-base ./dist\nℹ ｢wds｣: Project is running at http://localhost:8080/\nℹ ｢wds｣: webpack output is served from /\nℹ ｢wds｣: Content not from webpack is served from /work/temp/webpack-devlopment/dist\nℹ ｢wdm｣: <span class=\"token function\">wait</span> <span class=\"token keyword\">until</span> bundle finished: /\n⚠ ｢wdm｣: Hash: ed36e6f00d721fd46354\nVersion: webpack <span class=\"token number\">4.16</span>.5\nTime: 409ms\nBuilt at: <span class=\"token number\">2018</span>-07-20 <span class=\"token number\">14</span>:32:49</code></pre></div>\n<p>그리고 나서 브라우저에서 <code>dist/index.html</code> 파일을 직접 여는 대신에 브라우저 주소창에 <code>http://localhost:8080</code>을 입력하면 <code>Bye, Webpack!</code>이 화면에 표시될 것 입니다.</p>\n<p><code>src/index.js</code> 파일을 다음과 같이 다시 수정해보면 새로고침을 하지 않아도 변경 사항이 즉시 브라우저 화면에 반영되는 것을 확인할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye~ Bye, Webpack!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"주의-사항\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\" aria-label=\"주의 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의 사항</h3>\n<p>웹팩 개발 서버는 순수 개발용으로 디자인된 서버이기 때문에 따라서 상용 환경에서는 사용을 권장하지 않습니다. 또한 웹팩 개발 서버를 구동한 상태에서 소스 파일인 <code>src/index.js</code> 수정 후 번들 파일인 <code>dist/main.js</code>을 열어보면 변경 사항이 반영되지 않았다는 것을 알 수 있습니다. 실제 최종적으로 <code>npx webpack</code> 커맨드를 실행시키기 전까지는 이 번들 파일은 변경되지 않습니다. 따라서 상용 환경에 배포할 때는 반드시 실제로 웹팩을 실행시켜 번들 파일을 업데이트 해줘야 합니다.</p>\n<h2 id=\"디버깅의-어려움\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%B2%84%EA%B9%85%EC%9D%98-%EC%96%B4%EB%A0%A4%EC%9B%80\" aria-label=\"디버깅의 어려움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디버깅의 어려움</h2>\n<p>웹팩을 사용할 때 애로사항이 한가지 더 생깁니다. 바로 디버깅인데요.</p>\n<p><code>src/index.js</code> 파일을 열어서 의도적으로 코드에 버그를 넣어보겠습니다. 다음과 같이 <code>appendChild()</code>를 <code>addChild()</code>로 바꿔줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bye~ Bye, Webpack!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>브라우저 화면에서는 메세지가 사라질 것이고, 다음과 같이 번들 파일인 <code>main.js</code> 기준으로 에러 정보를 표시합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">main.js:1 Uncaught TypeError: document.body.addChild is not a <span class=\"token keyword\">function</span></code></pre></div>\n<p>웹팩은 기본적으로 여러 자바스크립트 파일들을 하나로 묶어서 번들 파일을 만들어내고, HTML 파일은 웹팩이 만들어낸 번들 파일을 참조합니다. 따라서 브라우저에서 코드 에러가 발생하면 번들 파일 기준으로 에러 정보가 표시됩니다. 게다가 웹팩이 만들어낸 번들 파일은 기본적으로 Uglify/Minify 처리가 되어 있기 때문에 본래 소스 코드으 어느 부분에서 에러가 발생한 건지 찾아내기가 난감해집니다.</p>\n<h2 id=\"소스-맵\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%8A%A4-%EB%A7%B5\" aria-label=\"소스 맵 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소스 맵</h2>\n<p>웹팩의 소스 맵 기능을 이용하면 위와 같은 디버깅 문제를 해결할 수 있습니다.</p>\n<p>먼저 다음과 같이 프로젝트 최상위 디렉터리에 <code>webpack.config.js</code>라는 웹팩 설정 파일을 생성하고 소스 맵 설정을 추가해줍니다.</p>\n<ul>\n<li>webpack.config.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devtool<span class=\"token operator\">:</span> <span class=\"token string\">\"inline-source-map\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 다시 웹팩을 실행하거나 웹팩 개발 서버를 구동해보면 다음과 같이 본래 소스 파일인 <code>index.js</code> 기준으로 에러 정보가 표시될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">index.js:2 Uncaught TypeError: document.body.addChild is not a <span class=\"token keyword\">function</span></code></pre></div>\n<p>실제로 <code>dist/main.js</code> 파일을 한 번 열어보면 다음과 같이 번들된 코드 아래에 소스 맵 정보가 추가되어 있는 것을 확인할 수 있습니다.</p>\n<ul>\n<li>dist/main.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">!</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span> t<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">function</span> <span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> t<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//# sourceMappingURL=data:application/json;charset=utf-8;base64,(...생략...)</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 좀 더 편하게 자바스크립트 웹 개발을 할 수 있도록 도와주는 웹팩의 기능들에 대해서 살펴보았습니다.</p>\n<p>추가 팁으로 덧붙이면, <code>webpack.config.js</code>에 모든 웹팩 설정을 해두고 <code>package.json</code>에 웹팩 커맨드를 스크립트로 등록해놓고 사용하시면 좀 더 편리합니다.</p>\n<ul>\n<li>webpack.config.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  devtool<span class=\"token operator\">:</span> <span class=\"token string\">\"inline-source-map\"</span><span class=\"token punctuation\">,</span>\n  devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    contentBase<span class=\"token operator\">:</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>생략<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --watch\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --open\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>생략<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>웹팩 단순 1회 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run build</code></pre></div>\n<ul>\n<li>웹팩 감시 모드 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run <span class=\"token function\">watch</span></code></pre></div>\n<ul>\n<li>웹팩 개발 서버 구동 (<code>--open</code> 옵션 덕분에 브라우저도 자동으로 실행됨)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run server</code></pre></div>","timeToRead":7,"fields":{"slug":"/webpack-development/","tags":["JavaScript","자바스크립트","Webpack","웹팩","webpack-dev-server"]},"frontmatter":{"title":"웹팩(Webpack) 개발 편의 기능","date":"Jul 21, 2018"}},"next":{"fields":{"slug":"/webpack-config/"},"frontmatter":{"title":"웹팩(Webpack) 기본 설정법 (Entry/Output/Loader/Plugins)"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}