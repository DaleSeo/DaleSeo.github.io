{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-node-worker_threads/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p><code>worker_threads</code>는 싱글 쓰레드 언어로 알려진 자바스크립트로도 멀티 쓰레드 프로그래밍을 가능하게 해주는 Node.js의 내장 모듈입니다.</p>\n<p>이번 포스팅에서는 <code>worker_threads</code> 모듈을 사용하여 어떻게 멀티 쓰레드 프로그래밍을 할 수 있는지 예제를 통해서 설명드리겠습니다.</p>\n<h2 id=\"싱글-쓰레드의-한계\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80-%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"싱글 쓰레드의 한계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글 쓰레드의 한계</h2>\n<p>자바스크립트는 태성적으로 하나의 쓰레드로 동작하는 여러 작업을 처리할 수 있는 비동기 프로그래밍 언어였는데요.\n이러한 특징은 작은 하드웨어 리소스로 여러 개의 IO 작업을 동시에 처리하는데 유리했으며 특히 브라우저 환경에서 빛을 발휘했죠.</p>\n<p>하지만 <a href=\"/?tag=Node.js\">Node.js</a>나 <a href=\"/?tag=Bun\">Bun</a>과 같은 서버 런타임을 통해서 자바스크립트가 백엔드에서도 사용되면서 멀티 쓰레드를 지원하지 않는 부분은 항상 약점으로 지적되어 왔습니다.\n쓰레드가 하나라는 것은 해당 쓰레드에 문제가 생기면 전체 애플리케이션이 먹통이 될 수 있다는 뜻이라서 성능과 안정성이 떨어지죠.\n뿐만 아니라, 요즘에는 CPU가 대부분 멀티 코어인데 코어를 하나 밖에 쓰지 않는 부분도 리소스 활용 측면에서 불리하게 작용합니다.</p>\n<h2 id=\"worker_threads-모듈\" style=\"position:relative;\"><a href=\"#worker_threads-%EB%AA%A8%EB%93%88\" aria-label=\"worker_threads 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>worker_threads 모듈</h2>\n<p>Node.js는 <code>worker_threads</code> 모듈을 사용하면 자바스크립트에서도 다른 언어처럼 멀티 쓰레드를 사용할 수 있습니다.\n메인 쓰레드에서 워커 쓰레드를 만들어서 특정 작업을 처리하도록 위임하면 메인 쓰레드의 부담을 덜어줄 수 있습니다.\n특히 암복호화나 이미지 처리 등 CPU가 많이 소모되는 작업을 처리할 때 워커 쓰레드를 많이 사용합니다.</p>\n<p>자바스크립트로 서버 애플리케이션을 작성하면 메인 쓰레드가 돌아가는 CPU가 너무 바빠서 소위 블라킹(Blocking) 상태에 빠지는데요.\n그러면 다른 요청을 받을 수가 없기 때문에 트래픽이 많은 서비스의 경우 치명적인 문제로 이어지죠.\n이럴 때, CPU 집약적인 작업을 워크 쓰레드를 통해서 메인 쓰레드로 부터 분리해주면, 메인 쓰레드가 돌아가는 CPU를 언제나 다른 작업을 처리할 수 있는 상태로 유지할 수 있습니다.</p>\n<p>하지만 데이터베이스 연동이나 원격 API 호출처럼 입출력(I/O)이나 네트워크 작업의 경우에는 워커 쓰레드를 쓰는 것이 오히려 독이 될 수도 있습니다.\n이렇게 CPU를 별로 쓰지 않는 작업은 기존의 이벤트 루프를 통해서 비동기로 처리하는 방식이 더 효율적이고 적합한 경우가 많거든요.</p>\n<h2 id=\"워커-쓰레드-생성\" style=\"position:relative;\"><a href=\"#%EC%9B%8C%EC%BB%A4-%EC%93%B0%EB%A0%88%EB%93%9C-%EC%83%9D%EC%84%B1\" aria-label=\"워커 쓰레드 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>워커 쓰레드 생성</h2>\n<p>워커 쓰레드는 <code>worker_threads</code> 모듈에서 제공하는 <code>Worker</code> 클래스를 통해서 생성할 수 있는데요.</p>\n<p>생성자를 호출할 때 필수적으로 워커 쓰레드에서 실행할 코드를 담은 파일의 경로를 첫 번째로 인자로 넘겨야합니다.\n선태적으로 워커 쓰레드에서 사용할 초기 데이터를 두 번째 인자로 넘길 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Worker <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:worker_threads\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./worker.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">workerData</span><span class=\"token operator\">:</span> <span class=\"token string\">\"워커 쓰레드의 초기 데이터\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"메인-쓰레드와-워커-쓰레드-간-통신\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%9D%B8-%EC%93%B0%EB%A0%88%EB%93%9C%EC%99%80-%EC%9B%8C%EC%BB%A4-%EC%93%B0%EB%A0%88%EB%93%9C-%EA%B0%84-%ED%86%B5%EC%8B%A0\" aria-label=\"메인 쓰레드와 워커 쓰레드 간 통신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메인 쓰레드와 워커 쓰레드 간 통신</h2>\n<p>다른 자바스크립트의 표준 API처럼 메인 쓰레드와 워커 쓰레드 간에는 이벤트를 기반으로 통신을 합니다.</p>\n<p>메인 쓰레드에서는 생성한 워커 인스터스를 상대로 <code>postMessage()</code> 함수를 호출하여 워커 쓰레드에 메시지를 전달할 수 있습니다.\n그리고 워커 인스턴스를 상대로 <code>on()</code> 함수를 통해서 워커 쓰레드에서 발생한 <code>message</code>, <code>error</code>, <code>exit</code>과 같은 이벤트를 처리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Worker <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:worker_threads\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"나는 메인 쓰레드야!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">워커 쓰레드가 보낸 메시지: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>워커 쓰레드 측에서는 <code>worker_threads</code> 모듈에서 불러온 <code>parentPort</code>를 통해서 메인 쓰레드와 메시지를 주고 받을 수 있습니다.\n비슷한 방식으로 <code>parentPort</code>를 상대로 <code>on()</code> 함수를 통해서 메인 쓰레드에서 발생한 이벤트를 처리할 수 있습니다.\n<code>parentPort</code>를 상대로 <code>postMessage()</code> 함수를 호출하여 메인 쓰레드에 메시지를 전달할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parentPort <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:worker_threads\"</span><span class=\"token punctuation\">;</span>\n\nparentPort<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">메인 스레드가 보낸 메시지: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  parentPort<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">나는 워커 쓰레드야!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"예제-1-싱글-쓰레드\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-1-%EC%8B%B1%EA%B8%80-%EC%93%B0%EB%A0%88%EB%93%9C\" aria-label=\"예제 1 싱글 쓰레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 1. 싱글 쓰레드</h2>\n<p>간단한 실습을 위해서 CPU를 많이 사용하는 함수를 하나 작성해보겠습니다.</p>\n<p>아래 <code>count()</code> 함수는 인자로 넘어온 시간동안 계속해서 숫자를 센 후 그 숫자를 반환합니다.\nCPU는 주어진 시간동안 <code>cnt</code> 변수를 1씩 증가시키기 위해서 엄청나게 바쁘겠죠?</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> second <span class=\"token operator\">*</span> <span class=\"token number\">1_000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메인 쓰레드의 시작 시간을 <code>start</code> 변수에 기록하고 시작 로그를 남기겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🔵 메인 쓰레드 > 시작\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아래 <code>runOnMain()</code> 함수는 인자로 넘어온 시간을 그대로 <code>count()</code> 함수에 넘겨서 호출해줍니다.\n그리고 <code>count()</code> 함수의 반환 결과를 비동기로 처리할 수 있도록 Promise 객체로 반환합니다.\n그 때까지 걸린 시간에 대한 로그도 남기겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runOnMain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🔵 메인 쓰레드 > 결과: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 시간: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그 다음, <code>Promise.all()</code> 함수를 통해서 <code>runOnMain()</code> 함수를 총 8번 인자를 1초씩 증가시키면서 동시 호출합니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막에는 콘솔에 종료 로그를 남기고, 총 실행 시간도 출력히겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🔵 메인 쓰레드 > 종료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🔵 총 실행 시간 > </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 초</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>터미널에서 Node.js로 <code>index.js</code>를 실행하면 8개의 함수를 동시에 호출하는데 36초 이상이 걸리는 것을 볼 수 있습니다.\n첫 번째 호출이 1초가 걸리고, 두 번째 호출이 2초가 걸리고, 세 번째 호출이 3초가 걸리고…\n이런 식으로 실행 시간이 누적되어 결국 <code>1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36</code>초가 된 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> ./index.js\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 시작\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">35181927</span>, 시간: <span class=\"token number\">1.000034334</span>\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">71285977</span>, 시간: <span class=\"token number\">3.000168334</span>\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">107400761</span>, 시간: <span class=\"token number\">6.000266834</span>\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">141959176</span>, 시간: <span class=\"token number\">10.000415792</span>\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">173833071</span>, 시간: <span class=\"token number\">15.000617792000002</span>\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">209222026</span>, 시간: <span class=\"token number\">21.000717709</span>\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">239103189</span>, 시간: <span class=\"token number\">28.000917167</span>\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 결과: <span class=\"token number\">271104978</span>, 시간: <span class=\"token number\">36.001187249999994</span>\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 종료\n🔵 총 실행 시간 <span class=\"token operator\">></span> <span class=\"token number\">36.001723709</span> 초</code></pre></div>\n<p>이 실습을 통해서 우리는 여러 작업은 비동기로 처리하더라도 CPU를 많이 쓰는 경우, 거의 연달에 호출한 것처럼 실행 시간이 많이 소모된다는 것을 알 수 있습니다.</p>\n<h2 id=\"예제-2-멀티-쓰레드\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-2-%EB%A9%80%ED%8B%B0-%EC%93%B0%EB%A0%88%EB%93%9C\" aria-label=\"예제 2 멀티 쓰레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 2. 멀티 쓰레드</h2>\n<p>이제 CPU 소모가 큰 숫자를 세는 작업을 워커 쓰레드에서 처리할 수 있도록 프로그램을 수정해볼까요?</p>\n<p>먼저 <code>index.js</code> 파일에 있는 <code>runOnMain()</code> 함수를 <code>runOnWorker()</code> 함수로 변경하겠습니다.\n직접 <code>count()</code> 함수를 호출하는 대신에 인자로 넘어온 시간을 그대로 초기 데이터로 넘겨서 워커 쓰레드를 생성합니다.</p>\n<p>그 다음, 생성된 워커 쓰레드의 <code>on()</code> 함수를 통해서 워커 쓰레드에서 보낸 메시지를 메인 쓰레드에서 받아서 처리합니다.\n워커 쓰레드에서 보내준 처리 결과와 그 때까지 걸린 시간에 대한 로그도 남기겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Worker <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:worker_threads\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./worker.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">workerData</span><span class=\"token operator\">:</span> second <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🟠 워커 쓰레드 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>worker<span class=\"token punctuation\">.</span>threadId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> > 결과: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 시간: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 초</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마찬가지로 <code>Promise.all()</code> 함수를 통해서 <code>runOnWorker()</code> 함수를 8회 동시에 호출합니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">runOnWorker</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>워커 쓰레드에서 실행 할 코드는 메인 쓰레드에서 실행한 코드와 분리하여 별도의 파일에 두는 경우가 많습니다.\n그러면 하나의 파일 내에서 어느 부분이 메인 쓰레드에서 실행되고 어느 부분이 워커 쓰레드에서 실행되는지 분기를 나눌 필요가 없어서 구현도 용이하고 유지 보수도 쉽워지기 때문이죠.</p>\n<p>그럼 <code>worker.js</code> 파일을 생성하고 워커 쓰레드에서 실행 할 코드를 작성해보겠습니다.</p>\n<p><code>worker_threads</code> 모듈에서 <code>parentPort</code>와 <code>workerData</code>를 불러 옵니다.\n<code>parentPort</code>를 통해서 워커 쓰레드에서 메인 쓰레드로 메시지를 보낼 수 있습니다.\n<code>workerData</code>는 메인 쓰레드에서 워커 쓰레드를 만들 때 생성자에 넘겨줬던 데이터가 들어있습니다.</p>\n<p>그 다음 <code>count()</code> 함수를 <code>index.js</code> 파일로 부터 그대로 복사해서 붙여넣기 한 후, <code>workerData</code>를 인자로 넘겨서 <code>count()</code> 함수를 호출합니다.</p>\n<div class=\"gatsby-code-title\">worker.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parentPort<span class=\"token punctuation\">,</span> workerData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:worker_threads\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> second <span class=\"token operator\">*</span> <span class=\"token number\">1_000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>workerData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nparentPort<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다시 터미널에서 <code>index.js</code> 파일을 실행해보면 실행 시간이 36초에서 8초로 눈에 띄게 단축된 것을 볼 수 있습니다.\n총 실행 시간이 8초 동안 숫자를 센 <code>runOnWorker(8)</code>의 결과와 거의 비슷합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> ./index.js\n🔵 메인 쓰레드 <span class=\"token operator\">></span> 시작\n🟠 워커 쓰레드 <span class=\"token number\">1</span> <span class=\"token operator\">></span> 결과: <span class=\"token number\">21711063</span>, 시간: <span class=\"token number\">1.043009708</span> 초\n🟠 워커 쓰레드 <span class=\"token number\">2</span> <span class=\"token operator\">></span> 결과: <span class=\"token number\">37556482</span>, 시간: <span class=\"token number\">2.0420582080000003</span> 초\n🟠 워커 쓰레드 <span class=\"token number\">3</span> <span class=\"token operator\">></span> 결과: <span class=\"token number\">58854738</span>, 시간: <span class=\"token number\">3.044510833</span> 초\n🟠 워커 쓰레드 <span class=\"token number\">4</span> <span class=\"token operator\">></span> 결과: <span class=\"token number\">83713769</span>, 시간: <span class=\"token number\">4.043756958</span> 초\n🟠 워커 쓰레드 <span class=\"token number\">5</span> <span class=\"token operator\">></span> 결과: <span class=\"token number\">110986970</span>, 시간: <span class=\"token number\">5.042783375</span> 초\n🟠 워커 쓰레드 <span class=\"token number\">6</span> <span class=\"token operator\">></span> 결과: <span class=\"token number\">146983406</span>, 시간: <span class=\"token number\">6.041664</span> 초\n🟠 워커 쓰레드 <span class=\"token number\">7</span> <span class=\"token operator\">></span> 결과: <span class=\"token number\">171129999</span>, 시간: <span class=\"token number\">7.043559166</span> 초\n🟠 워커 쓰레드 <span class=\"token number\">8</span> <span class=\"token operator\">></span> 결과: <span class=\"token number\">218331517</span>, 시간: <span class=\"token number\">8.043146666</span> 초\n🔵 메인 쓰레드 종료\n🔵 총 실행 시간 <span class=\"token operator\">></span> <span class=\"token number\">8.043622458</span> 초</code></pre></div>\n<p>이 실습을 통해서 우리는 함수 호출이 병렬로 처리되었고, 총 실행 시간은 가장 오래 걸린 호출에 좌우되었다는 것을 알 수 있습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Node.js에서 워커 쓰레드를 활용하여 어떻게 CPU 집약적인 작업을 메인 쓰레드로 부터 분리하여 실행할 수 있는지 알아보았습니다.\n브라우저에서는 서비스 워커가 도입되고, 서버에서는 워커 쓰레드가 도입되면서 자바스립트에서도 풀스택으로 멀티 쓰레드 프로그래밍의 길이 마침내 열렸습니다. 🥳🎊</p>\n<blockquote>\n<p>브라우저로에서 지원하는 서비스 워커(Service Worker)에 대해서는 <a href=\"/mock-service-worker\">별도 포스팅</a>에서 다루고 있으니 참고하세요.</p>\n</blockquote>","timeToRead":7,"fields":{"slug":"/js-node-worker_threads/","tags":["JavaScript","Node.js","Thread"]},"frontmatter":{"title":"Node.js의 Worker Threads를 통한 멀티 쓰레드 프로그래밍","date":"Mar 13, 2025"}},"next":{"fields":{"slug":"/js-innerhtml-innertext-textcontent/"},"frontmatter":{"title":"innerHTML, innerText, textContent"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}