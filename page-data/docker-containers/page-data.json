{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/docker-containers/","result":{"pageContext":{"previous":{"fields":{"slug":"/material-ui-text-fields/"},"frontmatter":{"title":"Material UI의 TextField 컴포넌트"}},"node":{"html":"<p>Docker CLI 도구는 Docker 컨테이너(container)의 효과적인 관리를 위해서 다양한 커맨드(command)를 제공합니다.\n이번 포스트에서는 자주 쓰이는 커맨드 위주로 어떻게 Docker 컨테이너를 효과적으로 제어할 수 있는지 알아보도록 하겠습니다.</p>\n<h2 id=\"컨테이너-조회\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%A1%B0%ED%9A%8C\" aria-label=\"컨테이너 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 조회</h2>\n<p>가장 먼저 살펴볼 <code>docker ps</code> 커맨드는 Docker 컨테이너를 조회를 위해 사용되며 기본적으로 실행 중인 컨테이너 목록이 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\nb1bae952f7a6        python:alpine       <span class=\"token string\">\"python -m http.serv…\"</span>   <span class=\"token number\">8</span> seconds ago       Up <span class=\"token number\">7</span> seconds                            amazing_chatelet</code></pre></div>\n<p><code>-a</code> 옵션을 사용하면 현재 중지되어 있는 컨테이너까지 함께 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">ps</span> -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES\nb1bae952f7a6        python:alpine       <span class=\"token string\">\"python -m http.serv…\"</span>   <span class=\"token number\">20</span> seconds ago      Up <span class=\"token number\">19</span> seconds                                  amazing_chatelet\n3722f14f4d2a        node:alpine         <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">3</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span> minutes ago                       elated_khorana\n419c12be535d        alpine              <span class=\"token string\">\"/bin/sh\"</span>                <span class=\"token number\">4</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> minutes ago                       laughing_khorana\n518d8bb6afaf        python:alpine       <span class=\"token string\">\"python3\"</span>                <span class=\"token number\">5</span> minutes ago       Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">5</span> minutes ago                       focused_gauss</code></pre></div>\n<p><code>-s</code> 옵션을 사용하면 각 컨테이너의 디스크 사용량까지 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">ps</span> -s\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES               SIZE\nb1bae952f7a6        python:alpine       <span class=\"token string\">\"python -m http.serv…\"</span>   <span class=\"token number\">6</span> minutes ago       Up <span class=\"token number\">6</span> minutes                            amazing_chatelet    <span class=\"token number\">1</span>.3MB <span class=\"token punctuation\">(</span>virtual 109MB<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>-f</code> 옵션을 사용하면 조회 결과를 특정 조건에 따라 필터링해서 볼 수 있습니다.\n예를 들어, 특정 이미지로 부터 만들어진 컨테이어만 보고 싶다면 <code>ancestor</code> 필터를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">ps</span> -af <span class=\"token string\">\"ancestor=python:alpine\"</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                         PORTS               NAMES\nb1bae952f7a6        python:alpine       <span class=\"token string\">\"python -m http.serv…\"</span>   About an hour ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">137</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span> minutes ago                         amazing_chatelet\n518d8bb6afaf        python:alpine       <span class=\"token string\">\"python3\"</span>                About an hour ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> About an hour ago                       focused_gauss</code></pre></div>\n<h2 id=\"컨테이너-실행\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%8B%A4%ED%96%89\" aria-label=\"컨테이너 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 실행</h2>\n<p>Docker 컨테이너 실행은 <code>docker run</code> 커맨드를 사용하는데요.\n이 커맨드는 특히 중요하고 옵션이 많아서 제가 아래 포스트에 별도로 정리하였으니 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"/docker-run\">docker run 커맨드 사용법</a></li>\n</ul>\n<h2 id=\"컨테이너-중지\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%A4%91%EC%A7%80\" aria-label=\"컨테이너 중지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 중지</h2>\n<p>실행 중인 Docker 컨테이너를 중지하려면 <code>docker stop</code> 커맨드를 사용합니다.\n중지하고 싶은 컨테이너의 아이디나 이름을 인자로 넘기면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker stop amazing_chatelet\namazing_chatelet\n$ docker <span class=\"token function\">ps</span> -af <span class=\"token string\">\"name=amazing_chatelet\"</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES\nb1bae952f7a6        python:alpine       <span class=\"token string\">\"python -m http.serv…\"</span>   About an hour ago   Exited <span class=\"token punctuation\">(</span><span class=\"token number\">137</span><span class=\"token punctuation\">)</span> <span class=\"token number\">32</span> seconds ago                       amazing_chatelet</code></pre></div>\n<h2 id=\"컨테이너-시작\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%8B%9C%EC%9E%91\" aria-label=\"컨테이너 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 시작</h2>\n<p>중지된 Docker 컨테이너를 다시 시작하려면 <code>docker start</code> 커맨드를 사용합니다.\n마찬가지로 재시작하고 싶은 컨테이너의 아이디나 이름을 인자로 넘기면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker start b1bae952f7a6\nb1bae952f7a6\n$ docker <span class=\"token function\">ps</span> -af <span class=\"token string\">\"id=b1bae952f7a6\"</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\nb1bae952f7a6        python:alpine       <span class=\"token string\">\"python -m http.serv…\"</span>   About an hour ago   Up About a minute                       amazing_chatelet</code></pre></div>\n<h2 id=\"컨테이너-상대로-명령어-실행\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%81%EB%8C%80%EB%A1%9C-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%8B%A4%ED%96%89\" aria-label=\"컨테이너 상대로 명령어 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 상대로 명령어 실행</h2>\n<p>실행 중인 컨테이너 상대로 명령어를 날리고 싶다면 <code>docker exec</code> 커맨드를 사용합니다.</p>\n<p>예를 들어, 어떤 컨테이너를 상대로 <code>ls</code> 커맨드를 실행하고 싶다면 다음과 같이 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token builtin class-name\">exec</span> b1bae952f7a6 <span class=\"token function\">ls</span>\nbin\ndev\netc\nhome\nlib\nmedia\nmnt\nopt\nproc\nroot\nrun\nsbin\nsrv\nsys\ntmp\nusr\nvar</code></pre></div>\n<p><code>-it</code> 옵션을 사용하면 해당 컨테이너의 쉘(shell)과 작접 상호작용하면서 연속으로 명령어를 실행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token builtin class-name\">exec</span> -it amazing_chatelet /bin/sh\n/ <span class=\"token comment\"># ls</span>\nbin    etc    lib    mnt    proc   run    srv    tmp    var\ndev    home   media  opt    root   sbin   sys    usr\n/ <span class=\"token comment\"># touch test.txt</span>\n/ <span class=\"token comment\"># ls test.txt</span>\ntest.txt\n/ <span class=\"token comment\">#</span></code></pre></div>\n<h2 id=\"컨테이너-로그-확인\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%A1%9C%EA%B7%B8-%ED%99%95%EC%9D%B8\" aria-label=\"컨테이너 로그 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 로그 확인</h2>\n<p>컨테이너의 로그를 확인하려면 <code>docker logs</code> 커맨드를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker logs b1bae952f7a6</code></pre></div>\n<p><code>-f</code> 옵션을 사용하면 실시간 로그를 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker logs -f amazing_chatelet</code></pre></div>\n<h2 id=\"컨테이너에-터미널-붙이기\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90-%ED%84%B0%EB%AF%B8%EB%84%90-%EB%B6%99%EC%9D%B4%EA%B8%B0\" aria-label=\"컨테이너에 터미널 붙이기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너에 터미널 붙이기</h2>\n<p>컨테이너를 <code>-d</code> 옵션으로 백그라운드에서 실행시킨 경우, 터미널을 다시 해당 컨테이너에 붙이고 싶을 때가 있습니다.\n이럴 때는 <code>docker attach</code> 커맨드를 사용하면 해당 컨테이너 상에서 <code>ENTRYPOINT</code> 또는 <code>CMD</code> 명령어로 실행되었던 프로세스에 터미널이 붙습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -d -it alpine\ndaa8f0eee030bb9fcb8b217899563d14d21f452087240a76f3d6910710680127\n$ docker attach daa8f0eee030\n/ <span class=\"token comment\"># ls</span>\nbin    etc    lib    mnt    proc   run    srv    tmp    var\ndev    home   media  opt    root   sbin   sys    usr</code></pre></div>\n<h2 id=\"컨테이너-상세-정보\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%81%EC%84%B8-%EC%A0%95%EB%B3%B4\" aria-label=\"컨테이너 상세 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 상세 정보</h2>\n<p>특정 컨테이너의 상세 정보를 확인하고 싶다면, <code>docker inspect</code> 커맨드를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker inspect 8c27a672e23c\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"8c27a672e23c1c48aaaa0d2e65325aefb36db2934f724634dd4f5684397014ba\"</span>,\n        <span class=\"token string\">\"Created\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2020-04-25T18:23:24.651490253Z\"</span>,\n        <span class=\"token string\">\"Path\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/bin/sh\"</span>,\n        <span class=\"token string\">\"Args\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,\n        <span class=\"token string\">\"State\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"exited\"</span>,\n            <span class=\"token string\">\"Running\"</span><span class=\"token builtin class-name\">:</span> false,\n            <span class=\"token string\">\"Paused\"</span><span class=\"token builtin class-name\">:</span> false,\n            <span class=\"token string\">\"Restarting\"</span><span class=\"token builtin class-name\">:</span> false,\n            <span class=\"token string\">\"OOMKilled\"</span><span class=\"token builtin class-name\">:</span> false,\n            <span class=\"token string\">\"Dead\"</span><span class=\"token builtin class-name\">:</span> false,\n            <span class=\"token string\">\"Pid\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,\n            <span class=\"token string\">\"ExitCode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,\n            <span class=\"token string\">\"Error\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n            <span class=\"token string\">\"StartedAt\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2020-04-25T18:23:25.300618082Z\"</span>,\n            <span class=\"token string\">\"FinishedAt\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2020-04-25T18:23:25.347690066Z\"</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Image\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"sha256:f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a\"</span>,\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"컨테이너-제거\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%A0%9C%EA%B1%B0\" aria-label=\"컨테이너 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 제거</h2>\n<p>마지막으로 컨테이너를 제거하고 싶을 때는 <code>docker rm</code> 커맨드를 사용합니다.</p>\n<p>중지되어 있는 컨테이너는 아무 옵션없이 제거할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">rm</span> 3722f14f4d2a\n3722f14f4d2a</code></pre></div>\n<p>실행 중인 컨테이너는 다음과 같이 바로 제거가 허용되지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">rm</span> d2f83048485e\nError response from daemon: You cannot remove a running container d2f83048485e4fe694dac374be152906e4e20da400305e5095bbb476bcaf718d. Stop the container before attempting removal or force remove</code></pre></div>\n<p>이 때는, <code>-f</code> 옵션을 사용하면 해당 컨테이너를 먼저 정지시킨 다음에 제거해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">rm</span> -f d2f83048485e\nd2f83048485e</code></pre></div>\n<p>실행 중인 컨테이너는 건들지 않고 중지되어 있는 모든 컨테이너를 제거하고 싶다면 다음과 같이 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -a -q<span class=\"token variable\">)</span></span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Docker 컨테이너 제어를 위해서 자주 쓰이는 CLI 커맨드에서 대해서 알아보았습니다.\n각 커맨드에 대한 좀 더 자세한 내용은 아래 Docekr CLI 레퍼런스를 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/ps/\">docker ps</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/stop/\">docker stop</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/start/\">docker start</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/exec/\">docker exec</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/logs/\">docker logs</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/attach/\">docker attach</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/inspect/\">docker inspect</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/rm/\">docker rm</a></li>\n</ul>","timeToRead":6,"fields":{"slug":"/docker-containers/","tags":["Docker","도커","container","컨테이너","Dockerfile","CLI"]},"frontmatter":{"title":"Docker 컨테이너 관련 커맨드 사용법","date":"Apr 24, 2020"}},"next":{"fields":{"slug":"/python-dataclasses/"},"frontmatter":{"title":"[파이썬] 데이터 클래스 사용법 (dataclasses 모듈)"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}