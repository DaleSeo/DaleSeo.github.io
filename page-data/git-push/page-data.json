{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/git-push/","result":{"pageContext":{"previous":{"fields":{"slug":"/google-oauth/"},"frontmatter":{"title":"OAuth 2.0으로 구글 API 호출하기"}},"node":{"html":"<p><code>git push</code>는 원격 저장소(remote repository)에 코드 변경분을 업로드하기 위해서 사용하는 Git 명령어 입니다.</p>\n<h2 id=\"git-commit-vs-git-push\" style=\"position:relative;\"><a href=\"#git-commit-vs-git-push\" aria-label=\"git commit vs git push permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git commit vs. git push</h2>\n<p><code>git commit</code> 명령어는 로컬 저장소(local repository)에 코드 변경 이력을 남기기 위해서 사용됩니다.\n여기서 로컬 저장소란 <code>git clone</code> 명령어를 통해서 내 컴퓨터에 복제해둔 원격 저장소의 복사본을 의마합니다.\n따라서, <code>git commit</code>를 통해 로컬 저장소에 아무리 많은 코드 변경 이력을 남기더라도 원격 저장소에서는 알 길이 없습니다.\n반드시 명시적으로 <code>git push</code>를 날려줘야, 그 동안 로컬 저장소에서 남겨놓은 코드 변경 이력들이 원격 저장소로 전송이 됩니다.</p>\n<h2 id=\"기본-사용법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"기본 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 사용법</h2>\n<p><code>git push</code> 명령어는 기본적으로 원격 저장소명과 브랜치명을 인자로 받습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push <span class=\"token operator\">&lt;</span>저장소명<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>브랜치명<span class=\"token operator\">></span></code></pre></div>\n<p>예를 들어, <code>my-feature</code>라는 브랜치에 남겨놓은 코드 변경 이력을 <code>origin</code>라는 원격 저장소에 올리기 위한 <code>git push</code> 명령어는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push origin my-feature</code></pre></div>\n<p>원격 저장소명은 <code>git clone</code>을 통해 저장소를 복제를 했다면 일반적으로 <code>origin</code>이며 <code>git remote</code> 명령어를 통해서 정확한 저장소명을 알아낼 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> remote\norigin</code></pre></div>\n<h2 id=\"인자-생략-하기-1\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%9E%90-%EC%83%9D%EB%9E%B5-%ED%95%98%EA%B8%B0-1\" aria-label=\"인자 생략 하기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인자 생략 하기 1</h2>\n<p><code>git push</code> 명령어를 날릴 때 마다 매번 저장소명과 브랜치명을 입력하는 게 귀찮게 느껴질 수 있습니다. 😫\n이럴 경우, <code>-u</code> 옵션을 사용하면 최초에 한 번만 저장소명과 브랜치명을 입력하고 그 이후에는 모든 인자를 생략할 수 있습니다.</p>\n<p>예를 들어, 다음과 같이 저장소명과 브랜치명을 넘기면서 <code>-u</code> 옵션과 함께 <code>git push</code> 명령어를 날리면,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push -u origin my-feature</code></pre></div>\n<p>그 이후에 커밋한 코드 변경분을 원격 저장소에 올릴 때는 인자없이 <code>git push</code> 명령어만 날리면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Change 1\"</span>\n$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Change 2\"</span>\n$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Change 3\"</span>\n$ <span class=\"token function\">git</span> push</code></pre></div>\n<h2 id=\"인자-생략-하기-2\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%9E%90-%EC%83%9D%EB%9E%B5-%ED%95%98%EA%B8%B0-2\" aria-label=\"인자 생략 하기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인자 생략 하기 2</h2>\n<p>여러 브랜치를 넘나 들면서 작업을 하는 경우에는 최초에 한 번 인자를 넘기는 것도 귀찮게 느껴질 수 있습니다. 😅\n대부분의 경우에는 로컬 저장소와 원격 저장소에서 동일한 브랜치 이름을 사용하기 때문에 항상 현재 브랜치를 기준으로 <code>git push</code> 명령어가 작동한다면 매우 편리할 것 같습니다.</p>\n<p>이를 위해서는 약간의 설정이 필요한데요. 다음과 같이 <code>push.default</code> 설정을 <code>current</code>로 설정해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global push.default current</code></pre></div>\n<p>자, 이제부터는 어느 브랜치에서 작업을 하든 <code>git push</code>만 날리면 원격 저장소에 동일한 브랜치로 코드 변경분이 업로드됩니다. 🤗</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push</code></pre></div>\n<h2 id=\"코드-변경-이력-덮어쓰기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B3%80%EA%B2%BD-%EC%9D%B4%EB%A0%A5-%EB%8D%AE%EC%96%B4%EC%93%B0%EA%B8%B0\" aria-label=\"코드 변경 이력 덮어쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 변경 이력 덮어쓰기</h2>\n<p>로컬 저장소에서는 자유롭게 코드 변경 이력을 수정해도 내 컴퓨터 밖에 모르는 일이기 때문에 뭐라고 할 동료가 없습니다.\n하지만 일단 원격 저장소에 코드 변경분을 올린 이후에는 더 이상 해당 코드 변경분은 순전히 나의 코드가 아니기 때문에 함부로 변경 이력을 수정하면 안 됩니다.\n왜냐하면 동료가 해당 코드 변경분을 내려 받았는데, 내가 그 코드 변경 이력을 수정해서 다시 올리면, 그 동료에게 코드 충돌이 발생할 것이기 때문입니다. 😱</p>\n<p>그렇기 때문에, <code>git push</code>로 원격 저장소에 올린 코드 변경분은 절대 덮어쓰지 않는 것이 원칙입니다만…\n개인 프로젝트에서는 이러한 원칙이 큰 의미가 없기 때문에, 간혹 코드 변경 이력을 덮어쓰고 싶을 때가 있습니다.</p>\n<p>이럴 때는 다음과 같이 <code>-f</code> 옵션을 사용하면, 원격 저장소 내의 해당 브랜치의 코드 변경 이력을 로컬 저장소의 코드 변경 이력으로 덮어써줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push -f origin my-feature</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 <code>git push</code> 명령어를 사용하는 기본적인 방법과 좀 더 편리하게 사용할 수 있는 간단한 팁을 알아보았습니다.</p>","timeToRead":3,"fields":{"slug":"/git-push/","tags":["Git","CLI"]},"frontmatter":{"title":"git push 사용법/팁","date":"Dec 7, 2019"}},"next":{"fields":{"slug":"/python-time/"},"frontmatter":{"title":"파이썬의 time 모듈로 시간 데이터 다루기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}