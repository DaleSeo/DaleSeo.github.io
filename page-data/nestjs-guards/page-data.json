{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/nestjs-guards/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-sort-to-sorted/"},"frontmatter":{"title":"자바스크립트 배열 정렬: sort()와 toSorted() 함수"}},"node":{"html":"<p>이번 글에서는 가드(Guard)를 활용하여 NestJS 앱을 위험한 요청으로 부터 효과적으로 보호하는 방법에 대해서 배워보도록 하겠습니다.</p>\n<h2 id=\"가드guard란\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%93%9Cguard%EB%9E%80\" aria-label=\"가드guard란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가드(Guard)란?</h2>\n<p>NestJS에서 가드(guard)란 애플리케이션의 최전선에서 말그대로 애플리케이션을 보호하는 역할을 담당하는데요.\nNestJS로 들어오는 요청은 컨트롤러(controller) 단에 도달하기 전에 반드시 가드를 거쳐가도록 되어 있습니다.</p>\n<p>가드를 이용하면 컨트롤러가 요청을 처리하기 전에 안전하지 않은 요청을 효과적으로 차단할 수 있습니다.\n따라서 애플리케이션 보안을 위해서 필수적인 사용자 인증이나 접근 제어를 구현하는데 안성맞춤이지요.</p>\n<p>Express.js를 써보셨다면 미들웨어(middleware)랑 유사한 역할을 수행한다고 보시면 되겠습니다.</p>\n<h2 id=\"실습-프로젝트-구성\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"실습 프로젝트 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 프로젝트 구성</h2>\n<p>먼저 간단한 실습을 위해서 NestJS 프로젝트가 하나 필요할 것 같은데요.\n터미널에서 NestJS CLI 도구의 <code>nest new</code> 명령어를 실행하여 새로운 프로젝트를 구성하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest new our-nestjs\n⚡  We will scaffold your app <span class=\"token keyword\">in</span> a few seconds<span class=\"token punctuation\">..</span>\n\n? Which package manager would you ❤️  to use? <span class=\"token punctuation\">(</span>Use arrow keys<span class=\"token punctuation\">)</span>\n❯ <span class=\"token function\">npm</span>\n  <span class=\"token function\">yarn</span>\n  <span class=\"token function\">pnpm</span></code></pre></div>\n<blockquote>\n<p>NestJS CLI를 설치하고 NestJS 프로젝트를 구성하는 기본적인 방법은 <a href=\"/nestjs/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"가드로-요청-전달\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%93%9C%EB%A1%9C-%EC%9A%94%EC%B2%AD-%EC%A0%84%EB%8B%AC\" aria-label=\"가드로 요청 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가드로 요청 전달</h2>\n<p>NestJS에서는 가드를 만들기 위해서는 <code>@nestjs/common</code> 모듈에서 제공하는 <code>CanActivate</code>라는 인터페이스를 구현하는 클래스를 생성해야합니다.\n그리고 <code>canActivate()</code> 메서드를 안에 가드의 로직을 작성할 수 있는데요.</p>\n<p>아주 간단한 예제로 <code>canActivate()</code> 메서드가 항상 <code>true</code>를 반환하도록 구현해보겠습니다.</p>\n<div class=\"gatsby-code-title\">auth.guard.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> CanActivate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthGuard</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CanActivate</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">canActivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'인증이 성공하였습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>NestJS는 <code>canActivate()</code> 함수가 <code>true</code> 또는 <code>Promise&#x3C;true></code>를 반환했을 때만 해당 요청을 컨트롤러로 전달합니다.\n반대로 <code>canActivate()</code> 함수가 <code>false</code> 또는 <code>Promise&#x3C;false></code>를 반환할 경우에는 해당 요청이 컨트롤러로 넘어가는 것을 차단합니다.</p>\n<p>위 예제에서는 무조건 <code>true</code>를 반환하니 요청이 항상 컨트롤러로 넘어가겠죠?</p>\n<h2 id=\"컨트롤러에-가드-적용\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%97%90-%EA%B0%80%EB%93%9C-%EC%A0%81%EC%9A%A9\" aria-label=\"컨트롤러에 가드 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨트롤러에 가드 적용</h2>\n<p>가드는 <code>@nestjs/common</code> 모듈의 <code>@UseGuards</code>데코레이터를 통해서 컨트롤러에 적용해줄 수 있습니다.\n<code>@UseGuards</code> 데코레이터를 클래스에 붙여주면 해당 컨트롤러 내에 있는 모든 메서드에 적용이 되고, <code>@UseGuards</code> 데코레이터를 특정 메서드를 상대로도 사용할 수도 있습니다.</p>\n<p>그럼 위에서 작성한 가드를 <code>AppController</code>에 적용해볼까요?</p>\n<div class=\"gatsby-code-title\">app.controller.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get<span class=\"token punctuation\">,</span> UseGuards <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.service'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AuthGuard <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./auth.guard'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">UseGuards</span></span><span class=\"token punctuation\">(</span>AuthGuard<span class=\"token punctuation\">)</span></span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> appService<span class=\"token operator\">:</span> AppService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appService<span class=\"token punctuation\">.</span><span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 터미널에서 <code>curl</code> 명령어로 <code>http://localhost:3000</code>을 찔러보면 <code>Hello World!</code>가 응답되는 것을 확인할 수 있으실 겁니다.</p>\n<div class=\"gatsby-code-title\">터미널</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:3000\nHello World<span class=\"token operator\">!</span></code></pre></div>\n<p>가드에서 요청을 차단하지 않았기 때문에 컨트롤러가 요청을 처리해주고 있는 건데요.\n로그를 보시면 가드에서 출력한 <code>인증이 성공하였습니다.</code> 메세지가 확인될 것입니다.</p>\n<div class=\"gatsby-code-title\">로그</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">39209</span>  - 07/12/2023, <span class=\"token number\">9</span>:45:29 p.m.     LOG <span class=\"token punctuation\">[</span>NestApplication<span class=\"token punctuation\">]</span> Nest application successfully started +0ms\n인증이 성공하였습니다.</code></pre></div>\n<blockquote>\n<p>터미널 상에서 간편하게 사용할 수 있는 HTTP 클라이언트인 <code>curl</code> 커맨드에 대해서는 <a href=\"/curl/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"가드로-요청-차단\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%93%9C%EB%A1%9C-%EC%9A%94%EC%B2%AD-%EC%B0%A8%EB%8B%A8\" aria-label=\"가드로 요청 차단 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가드로 요청 차단</h2>\n<p>이번에는 반대로 가드의 <code>canActivate()</code> 메서드가 항상 <code>false</code>를 반환하도록 수정해볼까요?</p>\n<div class=\"gatsby-code-title\">auth.guard.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> CanActivate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthGuard</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CanActivate</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">canActivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'인증이 실패하였습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 NestJS 앱을 재구동 후에 서버에 다시 요청을 보내보면 이번에는 403 Forbidden 오류가 응답될텐데요.</p>\n<div class=\"gatsby-code-title\">터미널</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:3000\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Forbidden resource\"</span>,<span class=\"token string\">\"error\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Forbidden\"</span>,<span class=\"token string\">\"statusCode\"</span>:403<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 것은 가드가 요청을 차단했기 때문에 요청이 컨트롤러에 도달하지 못했다는 뜻입니다.\n로그를 보시면 가드에서 출력한 <code>인증이 실패하였습니다.</code> 메세지가 확인될 것입니다.</p>\n<div class=\"gatsby-code-title\">로그</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">39542</span>  - 07/12/2023, <span class=\"token number\">9</span>:53:38 p.m.     LOG <span class=\"token punctuation\">[</span>NestApplication<span class=\"token punctuation\">]</span> Nest application successfully started +1ms\n인증이 실패하였습니다.</code></pre></div>\n<h2 id=\"가드로-인증-구현\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%93%9C%EB%A1%9C-%EC%9D%B8%EC%A6%9D-%EA%B5%AC%ED%98%84\" aria-label=\"가드로 인증 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가드로 인증 구현</h2>\n<p>가드의 <code>canActivate()</code> 메서드에는 인자로 <code>ExecutionContext</code>가 넘어오는데요.\n이 것을 이용하여 요청 경로, 요청 헤더, 요청 쿼리, 요청 바디 등을 읽을 수 있습니다.\n이를 통해 가드는 요청이 안전한지 검사하여 컨트롤러로 전달할지 차단할지 판단할 수 있습니다.</p>\n<p>그럼 가드를 활용해서 API 서버에서 자주 볼 수 있는 Bearer 토큰 기반 인증을 살짝 흉내내볼까요?</p>\n<div class=\"gatsby-code-title\">auth.guard.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Injectable<span class=\"token punctuation\">,</span>\n  CanActivate<span class=\"token punctuation\">,</span>\n  ExecutionContext<span class=\"token punctuation\">,</span>\n  BadRequestException<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthGuard</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CanActivate</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">canActivate</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> ExecutionContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">switchToHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>scheme<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>scheme<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> scheme<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"bearer\"</span> <span class=\"token operator\">&amp;&amp;</span> token <span class=\"token operator\">===</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadRequestException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>최대한 간단한 예제를 위해서 Bearer 토큰이 1234일 때만 요청이 가드를 통과하도록 구현해보았습니다. (말도 안되죠? 😅)\n그리고 Authorization 헤더로 넘어온 값이 Bearer 토큰의 형식에 맞지 않을 때는 <code>BadRequestException</code> 예외를 던지도록 하였는데요.\n이를 통해 클라이언트는 인증이 실패한 것과 입력값이 틀린 것을 구분할 수 있습니다.</p>\n<p>실제 애플리케이션에션에서는 사용하시는 인증 매커니즘에 따라 다양한 방식으로 구현이 될 것입니다.\n예를 들어, Bearer 토큰으로 DB를 조회할 수도 있고, OAuth를 사용하고 있다면 원격 전송할 수도 있고, JWT 토큰이라면 디코딩한 후 서명을 검증해야할 것입니다.</p>\n<blockquote>\n<p>Bearer 토큰에 대해서 더 궁금하신 분들은 <a href=\"/js-passport-bearer/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"인증-가드-테스트\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EA%B0%80%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"인증 가드 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 가드 테스트</h2>\n<p>이제 터미널에서 실제로 NestJS 앱을 호출하면서 간단한 테스트를 진행해볼까요?</p>\n<p>우선 Authorization 헤더에 <code>Bearer 1111</code> 넘겨서 호출해보니 403 Forbidden이 응답되네요.\n가드의 <code>canActivate()</code> 메서드에서 <code>false</code>를 반환하여 컨트롤러에 요청이 도달하지 못했다는 뜻입니다.</p>\n<div class=\"gatsby-code-title\">터미널</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer 1111\"</span> http://localhost:3000\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Forbidden resource\"</span>,<span class=\"token string\">\"error\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Forbidden\"</span>,<span class=\"token string\">\"statusCode\"</span>:403<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이번에는 Authorization 헤더에 <code>Bearer 1234</code> 넘겨서 호출해보니 정상적으로 응답이 옵니다.\n가드의 <code>canActivate()</code> 메서드에서 <code>true</code>를 반환하여 컨트롤러가 요청을 처리해주었다는 뜻입니다.</p>\n<div class=\"gatsby-code-title\">터미널</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer 1234\"</span> http://localhost:3000\nHello World<span class=\"token operator\">!</span></code></pre></div>\n<p>만약에 아예 Authorization 헤더가 없이 호출하면 어떻게 될까요?\n이 때는 400 Bad Request 응답이 되는데요.\n가드의 <code>canActivate()</code> 메서드에서 <code>BadRequestException</code> 예외가 발생했기 때문입니다.</p>\n<div class=\"gatsby-code-title\">터미널</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:3000\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Bad Request\"</span>,<span class=\"token string\">\"statusCode\"</span>:400<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>실습 프로젝트의 코드는 아래에서 직접 확인하고 실행해볼 수 있습니다.</p>\n<iframe src=\"https://stackblitz.com/edit/nestjs-guards?ctl=1&embed=1&file=src/auth.guard.ts&view=preview\"\nstyle=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 간단한 실습을 통해서 NestJS 앱을 보호하기 위해서 가드를 어떻게 사용하는지 살펴보았습니다.\nNestJS로 개발하고 계신 애플리케이션의 보안을 강화하시는데 본 글이 도움이 되었으면 좋겠습니다.</p>\n<p>NestJS에 관련된 다른 포스팅은 <a href=\"/?tag=NestJS\">관련 태그</a>를 참고 바라겠습니다.</p>","timeToRead":5,"fields":{"slug":"/nestjs-guards/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","authentication","authorization","security"]},"frontmatter":{"title":"가드(Guard)로 NestJS 앱 안전하게 지키기","date":"Jul 12, 2023"}},"next":{"fields":{"slug":"/github-actions-composite/"},"frontmatter":{"title":"GitHub Actions에서 나만의 액션(action) 만들기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}