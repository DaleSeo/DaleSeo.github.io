{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/java-navigable-set/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/how-to-remove-from-list-in-java/"},"frontmatter":{"title":"[자바] 컬렉션에서 원소 삭제하기 (ConcurrentModificationException 피하면서)"}},"node":{"html":"<p>자바6에서 추가된 <code>NavigableSet</code>에 대해서 알아보도록 하겠습니다.</p>\n<p><code>NavigableSet</code>은 <code>SortedSet</code>을 확장한 인터페이스입니다. 따라서 기존 <code>SortedSet</code> 대비 추가된 기능 위주로 살펴보는 게 좋을 것 같습니다.</p>\n<h2 id=\"객체-생성\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"객체 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 생성</h2>\n<p>자바에서 제공하는 <code>NavigableSet</code> 인터페이스의 대표적인 구현 클래스는 <code>TreeSet</code> 입니다. 따라서 <code>TreeSet</code> 객체를 생성 후에, <code>NavigableSet</code> 타입 변수에 할당하기면 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">NavigableSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> animalSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lion\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Elephant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [Cat, Dog, Elephant, Lion, Tiger]</span></code></pre></div>\n<h2 id=\"역순-접근-descendingiterator-descendingset\" style=\"position:relative;\"><a href=\"#%EC%97%AD%EC%88%9C-%EC%A0%91%EA%B7%BC-descendingiterator-descendingset\" aria-label=\"역순 접근 descendingiterator descendingset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>역순 접근: descendingIterator, descendingSet</h2>\n<p><code>SortedSet</code>을 사용할 때 가장 아쉬운 점이 정렬된 원소들을 역방향으로 순회하기가 난해하다는 것입니다. <code>SortedSet</code>은 <code>List</code>의 하위 타입이 아니므로 인덱스를 이용한 접근이 불가능 합니다. 궁여지책으로 역순으로 정렬을 해주는 새로운 <code>SortedSet</code>을 생성하곤 했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> revAnimalSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverseOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrevSet<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>animalSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> animal <span class=\"token operator\">:</span> revAnimalSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>SortedSet</code>의 이러한 단점을 보완하기 위해서, <code>NavigableSet</code>은 역방향 이터레이터를 반환하는 <code>descendingIterator</code> 메소드를 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iter <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">descendingIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 <code>descendingSet</code> 메소를 이용하여, 역순으로 정렬된 새로운 <code>Set</code>을 얻을 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">NavigableSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> revAnimalSet <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">descendingSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>revAnimalSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [Tiger, Lion, Elephant, Dog, Cat]</span></code></pre></div>\n<h2 id=\"처음-또는-마지막-원소-제거-pollfirst-polllast\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EC%9D%8C-%EB%98%90%EB%8A%94-%EB%A7%88%EC%A7%80%EB%A7%89-%EC%9B%90%EC%86%8C-%EC%A0%9C%EA%B1%B0-pollfirst-polllast\" aria-label=\"처음 또는 마지막 원소 제거 pollfirst polllast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처음 또는 마지막 원소 제거: pollFirst, pollLast</h2>\n<p><code>SortedSet</code>에 <code>first</code>와 <code>last</code> 메소드를 이용해서 처음 또는 마지막 원소를 얻을 수 있는데요. <code>NavigableSet</code>은 추가로 해당 원소를 삭제까지 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> first <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#first: \"</span> <span class=\"token operator\">+</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #first: Cat</span>\n\n<span class=\"token class-name\">String</span> last <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">pollLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #last: Tiger</span></code></pre></div>\n<p>즉, 아래 두 개의 코드는 동일한 처리를 한다고 보시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> first <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> first <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nanimalSet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"가장-근접한-원소-탐색-ceiling-floor-higher-lower\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9E%A5-%EA%B7%BC%EC%A0%91%ED%95%9C-%EC%9B%90%EC%86%8C-%ED%83%90%EC%83%89-ceiling-floor-higher-lower\" aria-label=\"가장 근접한 원소 탐색 ceiling floor higher lower permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가장 근접한 원소 탐색: ceiling, floor, higher, lower</h2>\n<p>주어진 값 기준으로 가장 근접하게 큰 원소나 작은 원소를 알아낼 수 있습니다.\n<code>ceiling</code>과 <code>floor</code>는 주어진 값과 동일한 원소가 있을 경우, 해당 원소를 반환하는 반면에(inclusive), <code>higher</code>와 <code>lower</code>는 해당 원소를 제외한 원소 중에서 찾습니다.(exclusive)</p>\n<p>정리하면, 이상(ceiling), 이하(floor), 초과(higher), 미만(lower) 기능이 되겠네요.\n예를 들어, Elephant 기준으로 4 종류의 메소드를 호출하면 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> ceiling <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">ceiling</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elephant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#ceiling: \"</span> <span class=\"token operator\">+</span> ceiling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #ceiling: Elephant</span>\n\n<span class=\"token class-name\">String</span> floor <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elephant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#floor: \"</span> <span class=\"token operator\">+</span> floor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #ceiling: Elephant</span>\n\n<span class=\"token class-name\">String</span> higher <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">higher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elephant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#higher: \"</span> <span class=\"token operator\">+</span> higher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #higher: Lion</span>\n\n<span class=\"token class-name\">String</span> lower <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">lower</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elephant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#lower: \"</span> <span class=\"token operator\">+</span> lower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #lower: Dog</span></code></pre></div>\n<p>유용한 유즈 케이스가 딱 떠오르지는 않는데, 좀 더 고민을 사용을 해봐야 할 것 같습니다.</p>\n<p>이상으로 <code>NavigableSet</code> 사용법에 대해서 알아보았습니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/NavigableSet.html\">https://docs.oracle.com/javase/8/docs/api/java/util/NavigableSet.html</a></li>\n</ul>","timeToRead":3,"fields":{"slug":"/java-navigable-set/","tags":["Java","Java6","Collections"]},"frontmatter":{"title":"[자바] NavigableSet 사용법","date":"May 28, 2017"}},"next":{"fields":{"slug":"/java-sorted-set/"},"frontmatter":{"title":"[자바] SortedSet 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}