{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/eslint-config/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/tsc/"},"frontmatter":{"title":"타입스크립트 컴파일러 사용법 (tsc 커맨드)"}},"node":{"html":"<p>많은 자바스크립트 프로젝트에서 ESLint를 사용하여 코드에 문제가 없는지 검사를 하고 있습니다.\n이번 포스팅에서는 ESLint를 어떻게 설정하는지에 대해서 각 옵션 별로 좀 자세히 알아보겠습니다.</p>\n<blockquote>\n<p>ESLint에 대한 기본적인 사용법은 <a href=\"/js-eslint/\">관련 포스팅</a>를 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"설정-파일-형식\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC-%ED%98%95%EC%8B%9D\" aria-label=\"설정 파일 형식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 파일 형식</h2>\n<p>ESLint는 JSON, YAML, JavaScript와 같이 다양한 형식의 설정 파일을 지원하는데요.\n설정 파일의 이름은 항상 <code>.eslintrc</code>가 되야하며, 원하는 포맷에 따른 파일 확장자를 사용해야 합니다.</p>\n<p>예를 들어, JSON 파일 포맷을 사용하고 싶다면 <code>.eslintrc.json</code>, YAML 파일 포맷을 사용하고 싶다면 <code>.eslintrc.yml</code>이나 <code>.eslintrc.yaml</code>을 사용하면 됩니다.</p>\n<p>뿐만 아니라, 자바스크립트 프로젝트의 메타 정보를 담고 있는 <code>package.json</code> 파일의 <code>eslintConfig</code> 속성을 통해서 ESLint 설정을 하는 것도 가능한데요. <a href=\"https://www.daleseo.com/create-react-app/\">Create React App</a>으로 React 프로젝트를 생성해보면 <code>package.json</code> 파일 내에서 ESLint 설정을 발견하게 됩니다.</p>\n<div class=\"gatsby-code-title\">package.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslintConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"react-app\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"react-app/jest\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>package.json</code> 파일을 통해서 ESLint 설정을 하는 것은 소규모의 개인 프로젝트라면 몰라도 팀 단위의 프로젝트라면 그리 추천드릴 만한 방법인 아닌 것 같지는 않습니다.\n왜냐하면 한 파일에 여러 다른 메타 정보와 섞어놓으면 프로젝트가 커짐에 따라 유지보수가 점점 힘들어지기 때문입니다.\n사용하는지 파악하기가 어렵기 때문입니다.</p>\n<p>그래서 저는 개인적으로 ESLint 설정할 때 처음 프로젝트에 참여하는 분들이 ESLint를 사용하는지 한 번에 딱 파악할 수 있도록 별도의 설정 파일을 사용하는 편인데요.\n인터넷에서 ESLint 설정을 검색해보시면 대부분 JSON 형태로 제공되기 때문에 YAML 포맷보다 JSON 포맷이 확실히 복사해서 붙여넣기가 수월한 것 같습니다.</p>\n<p>자바스크립트 포맷의 경우, ESLint가 아직까지 ES 모듈을 제공하지 않기 때문에 <code>export</code> 키워드를 사용할 수 없기 때문에 아무래도 최근에는 쓰기가 꺼려지더라고요. 그래서 본 포스팅에서는 JSON 포맷을 기준으로 예제 설정을 보여드리도록 하겠습니다.</p>\n<h2 id=\"root-옵션\" style=\"position:relative;\"><a href=\"#root-%EC%98%B5%EC%85%98\" aria-label=\"root 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>root 옵션</h2>\n<p>ESLint를 설정할 때는 여러 개의 설정 파일을 사용할 수 있는데요. 특히 Monorepo와 같이 하나의 코드 저장소(repository)에서 여러 개의 프로젝트가 공존하는 경우 매우 유용합니다.</p>\n<p>ESLint는 현재 린트(lint) 대상의 파일이 위치한 폴더 안에 설정 파일이 있는지 우선적으로 확인해보고 없으면 그 상위 폴더를 한 단계 씩 거슬러 올라가면서 설정 파일을 찾게되는데요.\n<code>root</code> 옵션이 <code>true</code>로 설정되어 있는 설정 파일을 만나면 더 이상 상위 폴더로 올라가지 않습니다.</p>\n<p>예를 들어, 프로젝트의 별 설정 파일에는 <code>root</code> 옵션을 <code>false</code>로 설정하고, 코드 저장소 최상위 경로에는 <code>root</code> 옵션을 <code>true</code>로 설정하면 코드 저장소의 공통 설정과 프로젝트 별 특화 설정을 분리해서 관리할 수 있어서 편리합니다.</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-code-title\">packages/project-a/.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-code-title\">packages/project-b/.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ESLint 설정 파일이 하나만 있는 코드 저장소에서도 혹여나 상위 폴더에 있는 설정 파일에 영향을 받는 일이 없도록 <code>root</code> 옵션을 <code>true</code>로 설정하는 경우가 많습니다.</p>\n<h2 id=\"plugins-옵션\" style=\"position:relative;\"><a href=\"#plugins-%EC%98%B5%EC%85%98\" aria-label=\"plugins 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>plugins 옵션</h2>\n<p>ESLint에는 기본으로 제공되는 규칙(rule) 외에도 추가적인 규칙(rule)을 사용할 수 있도록 만들어주는 다양한 플러그인(plugin)이 있는데요.\n아마도 ESLint가 자바스크립트 커뮤니티에서 가장 많이 사용되는 린터(linter)가 된 이유는 바로 이 강력한 플러그인(plugin) 생태계라고 해도 과언이 아닐 것입니다.</p>\n<p>플러그인은 설정 파일의 <code>plugins</code> 옵션을 통해서 설정하는데요.\n예를 들어, 불러오기(import)와 React와 관련된 규칙은 다음과 같이 추가할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"import\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>당연히 먼저 프로젝트에 해당 플러그인을 개발 의존성으로 설치해놨어야 되겠죠?\n보통 ESLint 플러그인의 npm 패키지 이름은 <code>eslint-plugin-</code>로 시작하오니 참고바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> eslint-plugin-import eslint-plugin-react</code></pre></div>\n<p>플러그인을 설정할 때 흔히 오해하게 되는 부분이 단순히 플러그인만 추가해주면 관련 규칙이 바로 활성화된다고 생각하는 것인데요.\n사실 플러그인은 새로운 규칙을 단순히 설정이 가능한 상태로 만들어주기만 합니다.\n규칙을 위반하면 오류(error)를 낼지 경고(warn)를 낼지 아니면 해당 규칙을 끌지(off)에 대해서는 다음에 설명드릴 <code>extends</code> 옵션이나 <code>rules</code> 옵션을 통해서 추가 설정을 해줘야 합니다.</p>\n<h2 id=\"extends-옵션\" style=\"position:relative;\"><a href=\"#extends-%EC%98%B5%EC%85%98\" aria-label=\"extends 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>extends 옵션</h2>\n<p>Google, Facebook, Airbnb 등 수많은 세계적인 기업들이 ESLint로 자바스크립트 코드를 린트(lint)하는데요.\n설정 파일의 <code>extends</code> 옵션을 통해서 이러한 기업들이 공개해놓은 설정을 그대로 가져와 기반(base) 설정으로 활용할 수 있습니다.</p>\n<p>예를 들어, Airbnb에서 npm 저장소에 공개한 ESLint 설정인 <code>eslint-config-airbnb</code>를 기반 설정으로 사용해볼까요?</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"airbnb\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 확장이 가능한 ESLint 설정은 npm 패키지 이름이 <code>eslint-config-</code>로 시작하며 <code>extends</code> 옵션에 명시할 때는 위와 같이 앞 부분을 생략해도 무방합니다.</p>\n<p>뿐만 아니라 대부분의 ESLint 플러그인은 추천 설정을 제공하는데요.\n<code>extends</code> 옵션은 이러한 추천 설정을 사용할 때도 사용됩니다.</p>\n<p>예를 들어, 위에서 설정한 <code>import</code>와 <code>react</code> 플러그인에서 제공하는 추천 설정을 사용해볼까요?</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"import\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:import/recommended\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"plugin:react/recommended\"</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이러한 ESLint의 확장성 덕분에 매 번 백지 상태에서 설정을 하지 않아도 되니 참 다행입니다. 👍</p>\n<h2 id=\"rules-옵션\" style=\"position:relative;\"><a href=\"#rules-%EC%98%B5%EC%85%98\" aria-label=\"rules 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rules 옵션</h2>\n<p>설정 파일에서 <code>rules</code> 옵션은 규칙 하나 하나를 세세하게 제어하기 위해서 사용되는데요.\n일반적으로는 <code>extends</code> 옵션을 통해서 설정된 규칙을 덮어쓰고 싶을 때 유용하게 쓸 수 있습니다.</p>\n<p>예를 들어, Airbnb 기반 설정에서는 <code>no-console</code> 규칙을 어기면 경고(<code>warn</code>)를 내고, <code>import/prefer-default-export</code> 규칙을 어기면 오류(<code>error</code>)를 내도록 되어 있는데요.\n만약에 <code>no-console</code> 규칙을 어겼을 시, 경고 대신에 오류를 내고, <code>import/prefer-default-export</code> 규칙은 비활성화해 보겠습니다.</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"airbnb\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"import/prefer-default-export\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 ESLint는 <code>rules</code> 옵션으로 명시된 규칙을 <code>extends</code> 옵션을 통해서 가져온 규칙보다 우선 시 해주는데요.\n<code>rules</code> 옵션을 많이 사용하면 사용할 수록 직접 관리해야하는 설정이 늘어나는 부작용이 있으니 주의가 필요합니다.</p>\n<p>아무래도 위에서 배운 <code>extends</code> 옵션을 통해 자바스크립트 커뮤니티에서 유지보수가 잘 되고 있는 공개된 설정을 적극적으로 활용하는 것이 유지보수 측면에서 유리하겠죠?</p>\n<h2 id=\"env-옵션\" style=\"position:relative;\"><a href=\"#env-%EC%98%B5%EC%85%98\" aria-label=\"env 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>env 옵션</h2>\n<p>자바스크립트는 다양한 환경에서 실행될 수 있는데 각 환경마다 전역(global) 변수를 통해 접근이 가능한 고유한 객체들이 있습니다.\n대표적인 예로, 브라우저 환경에서는 전역에서 접근이 가능하지만 NodeJS 환경에서는 불가능한 <code>windows</code> 객체를 들 수가 있겠네요.</p>\n<p>ESLint는 기본적으로 미리 선언하지 않고 접근하는 변수에 대해서는 오류를 내기 때문에 이렇게 각 실행 환경(runtime)에서 기본적으로 제공되는 전역 객체에 대해서 설정을 통해 알려줘야 하는데요.\n이러한 역할을 실행 파일의 <code>env</code> 옵션이 담당합니다.</p>\n<p>예를 들어, ESLint로 린트(lint)를 할 자바스크립트 코드가 브라우저에서 실행될 수도 있고, NodeJS에서도 실행될 수 있다면,\n두 가지 실행 환경에서 접근 가능한 모든 전역 객체를 다음과 같이 등록해줄 수 있습니다.</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"parser와-parseroptions-옵션\" style=\"position:relative;\"><a href=\"#parser%EC%99%80-parseroptions-%EC%98%B5%EC%85%98\" aria-label=\"parser와 parseroptions 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parser와 parserOptions 옵션</h2>\n<p>개발자가 작성하는 자바스크립트 코드는 실제로 브라우저와 같은 실행 환경에서 실제로 돌아가는 코드와 다른 경우가 많은데요.\n대표적인 예로 타입스크립트나 JSX와 같은 자바스크립트의 확장 문법으로 개발하거나 Babel과 같은 트랜스파일러(transpiler)를 통해 최신 문법으로 개발하는 경우를 들 수 있습니다.</p>\n<blockquote>\n<p>개발자들이 항상 최신 문법의 자바스크립트로 코딩할 수 있도록 도와주는 도구인 Babel에 대한 자세한 내용은 <a href=\"/?tag=Babel\">관련 태그</a>를 참고 바랍니다.</p>\n</blockquote>\n<p>ESLint는 기본적으로 순수한 자바스크립트 코드만 이해할 수 있기 때문에 자바스크립트의 확장 문법이나 최신 문법으로 작성한 코드를 린트(lint)하기 위해서는 그에 상응하는 파서(parser)를 사용하도록 설정해줘야 합니다.</p>\n<p>예를 들어, 타입스크립트와 JSX를 사용하여 작성된 코드를 린트(lint)하도록 설정해보겠습니다.</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ecmaFeatures\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이번에는 Babel 파서로 사용하도록 설정해보겠습니다.</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@babel/eslint-parser\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"settings-옵션\" style=\"position:relative;\"><a href=\"#settings-%EC%98%B5%EC%85%98\" aria-label=\"settings 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>settings 옵션</h2>\n<p>일부 ESLint 플러그인은 추가적인 설정이 가능한데요.\n이런 경우에는 설정 파일의 <code>settings</code> 옵션을 사용합니다.</p>\n<p>예를 들어, <code>react</code> 플러그인이 프로젝트에 설치된 리액트의 버전을 자동으로 탐지하도록 설정해보겠습니다.\n(기본 설정은 리액트 최신 버전을 기준으로 린트(lint)를 하게 되었습니다.)</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"detect\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다른 플러그인에 대한 구체적인 설정 방법은 해당 플러그인의 공식 문서를 참고바라겠습니다.</p>\n<h2 id=\"ignorepatterns-옵션과-eslintignore-파일\" style=\"position:relative;\"><a href=\"#ignorepatterns-%EC%98%B5%EC%85%98%EA%B3%BC-eslintignore-%ED%8C%8C%EC%9D%BC\" aria-label=\"ignorepatterns 옵션과 eslintignore 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ignorePatterns 옵션과 .eslintignore 파일</h2>\n<p>ESLint는 린트(lint)를 수행할 때 기본적으로 <code>node_modules</code> 폴더나 <code>.</code>로 시작하는 설정 파일은 무시하는데요.\n그 밖에 다른 파일을 무시하고 싶다면 설정 파일의 <code>ignorePatterns</code> 옵션을 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"ignorePatterns\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"public\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 방법 대신에 <code>.gitignore</code> 파일과 유사한 방식으로 <code>.eslintignore</code> 파일을 생성해도 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">build\ndist\npublic</code></pre></div>\n<p>만약에 ESLint가 <code>.gitignore</code> 파일에 이미 나열해놓은 경로를 무시하도록 설정하고 싶다면 ESLint 커맨드를 실행할 때 <code>--ignore-path</code> 옵션을 붙여주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ eslint --ignore-path .gitignore <span class=\"token builtin class-name\">.</span></code></pre></div>\n<h2 id=\"overrides-옵션\" style=\"position:relative;\"><a href=\"#overrides-%EC%98%B5%EC%85%98\" aria-label=\"overrides 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>overrides 옵션</h2>\n<p>프로젝트 내에서 일부 파일에 대해서만 살짝 다른 설정을 적용해줘야 할 때는 어떻게 해야할까요?\n그럴 때는 설정 파일의 <code>overrides</code> 옵션을 사용하면 됩니다.</p>\n<p>예를 들어, 프로젝트에 자바스크립트 파일과 타입스크립트 파일이 공존한다면 자바스크립트 파일을 기준으로 기본 설정을 하고, 타입스크립트 파일을 위한 설정은 <code>overrides</code> 옵션에 명시할 수 있습니다. 타입스크립트 확장자를 가진 파일에 대해서는 타입스크립트 용 파서와 플러그인과 추천 설정을 사용하도록 세팅해주고 있습니다.</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"overrides\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"**/*.+(ts|tsx)\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약에 프로젝트 내에 테스트 파일에만 추가적으로 Jest 플러그인과 Testing Library 플러그인에서 추천하는 규칙을 활성하고 싶다면 다음과 같이 설정합니다.</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"overrides\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/__tests__/**/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.{spec,test}.*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"jest/globals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"testing-library\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"plugin:jest/recommended\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"plugin:jest-dom/recommended\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"plugin:testing-library/react\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"샘플-설정-파일\" style=\"position:relative;\"><a href=\"#%EC%83%98%ED%94%8C-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC\" aria-label=\"샘플 설정 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>샘플 설정 파일</h2>\n<p>지금까지 배운 내용을 종합하여 간단한 샘플 설정 파일을 작성해보았습니다.\n실제 프로젝트에서 ESLint 설정을 하실 때 템플릿으로 사용하시면 좋을 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"commonjs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:react/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:react-hooks/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:jsx-a11y/strict\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:import/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:import/typescript\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:testing-library/react\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"prettier\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"react-hooks\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"jsx-a11y\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"import\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"@typescript-eslint\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"import/resolver\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"alwaysTryTypes\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"detect\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"import/prefer-default-export\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"overrides\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"**/*.+(ts|tsx)\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/__tests__/**/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.{spec,test}.*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"jest/globals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jest-dom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"testing-library\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"plugin:jest/recommended\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"plugin:jest-dom/recommended\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"plugin:testing-library/react\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>본 가이드에서 다룬 정도의 옵션만 아시면 현업에서 ESLint 설정을 하시는데 큰 불편함은 없을 것 같은데 어떠신가요?\nESLint 설정을 깔끔하게 하시는데 도움이 되었으면 좋겠습니다.</p>","timeToRead":8,"fields":{"slug":"/eslint-config/","tags":["JavaScript","ESLint","Lint","Linter","lint-staged","husky"]},"frontmatter":{"title":"ESLint 상세 설정 가이드","date":"Jun 9, 2022"}},"next":{"fields":{"slug":"/github-actions-steps/"},"frontmatter":{"title":"GitHub Actions 단계(step) 고급 설정"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}