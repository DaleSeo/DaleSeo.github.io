{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-eslint/","result":{"pageContext":{"previous":{"fields":{"slug":"/webpack-plugins-define-environment/"},"frontmatter":{"title":"웹팩(Webpack) DefinePlugin, EnvironmentPlugin 사용법"}},"node":{"html":"<p>최근에 가장 많이 쓰이는 자바스크립트 린터(linter)인 ESLint에서 대해서 알아보겠습니다.</p>\n<h2 id=\"lint-eslint\" style=\"position:relative;\"><a href=\"#lint-eslint\" aria-label=\"lint eslint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lint? ESLint?</h2>\n<p>프로그래밍에서 린트(lint)라는 개념이 생소한 분들을 위해서 lint가 무엇인지에 대해서 먼저 짚고 넘어가겠습니다.\n린트(lint)는 소스 코드에 문제가 있는지 탐색하는 작업을 의미하며, 린터(linter)는 이 작업을 도와주는 소프트웨어 도구를 의미합니다.\n자바스크립트와 같이 컴파일 과정이 없는 인터프리터 언어의 경우, 런타임 에러가 발생할 확률이 높기 때문에, 이 린트 작업을 통해 사전에 에러를 최대한 잡아주는 것이 중요합니다.\n예전에는 JSLint나 JSHint와 같은 린터들이 많이 사용되었으나, 최근에는 ESLint라는 린터가 개발자들 사이에서 많은 인기를 끌고 있습니다.\n현재는 Facebook, Airbnb를 비롯해 Netflix, MongoDB, Paypal, Disqus 등 수많은 기업들이 ESLint를 자바스크립트 린터로 사용하고 있습니다.</p>\n<h2 id=\"eslint-설치-및-기본-설정\" style=\"position:relative;\"><a href=\"#eslint-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\" aria-label=\"eslint 설치 및 기본 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESLint 설치 및 기본 설정</h2>\n<p>먼저 실습을 원하는 경로에서 빈 NPM 프로젝트를 하나 생성하고 <code>eslint</code>라는 패키지를 개발 의존성으로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init -y\n$ <span class=\"token function\">npm</span> i -D eslint</code></pre></div>\n<p>설치가 끝나면 <code>eslint</code> 실행 파일이 <code>node_modules</code> 디렉터리 안에 생성될 것입니다.\nESLint 설정 파일을 자동으로 작성하기 위해서 터미널에서 다음 커맨드를 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node_modules/.bin/eslint --init\n? How would you like to use ESLint? To check syntax and <span class=\"token function\">find</span> problems\n? What <span class=\"token builtin class-name\">type</span> of modules does your project use? JavaScript modules <span class=\"token punctuation\">(</span>import/export<span class=\"token punctuation\">)</span>\n? Which framework does your project use? None of these\n? Does your project use TypeScript? No\n? Where does your code run? Node\n? What <span class=\"token function\">format</span> <span class=\"token keyword\">do</span> you want your config <span class=\"token function\">file</span> to be in? JavaScript\nSuccessfully created .eslintrc.js <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> /temp/learn-eslint</code></pre></div>\n<p>그러면 ESLint 설정 파일을 만들기 위해서 여러 가지 질문들을 나올 것인데요.\n본인의 프로젝트의 상황에 맞게 답변을 하시면 됩니다.\n실습 프로젝트에서는 최대한 간단한 설정을 위해서 위와 같이 선택을 하였습니다.</p>\n<p>그러면 다음과 비슷한 ESLint 설정 파일이 프로젝트 최상위 경로에 생성될 것입니다.</p>\n<ul>\n<li>.eslintrc.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    node<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n  globals<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    Atomics<span class=\"token operator\">:</span> <span class=\"token string\">\"readonly\"</span><span class=\"token punctuation\">,</span>\n    SharedArrayBuffer<span class=\"token operator\">:</span> <span class=\"token string\">\"readonly\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaVersion<span class=\"token operator\">:</span> <span class=\"token number\">2018</span><span class=\"token punctuation\">,</span>\n    sourceType<span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 설정 파일에서 가장 많이 건드리게 될 부분은 <code>extends</code>와 <code>rules</code> 입니다.</p>\n<p><code>extends</code> 옵션은 다른 ESLint 설정을 확장해서 사용할 때 사용합니다.\n여기서는 ESLint에서 추천하는 규칙들이 적용된 <code>eslint:recommended</code>라는 설정이 사용되었습니다.\n참고로, 실제 프로젝트에서는 ESLint 기본 설정보다는 <code>airbnb</code>와 <code>prettier</code>의 설정을 많이 확장해서 사용하는 것 같습니다.</p>\n<p><code>rules</code> 옵션은 본인의 프로젝트에서 자체적으로 덮어쓰고 싶은 규칙들을 정의할 때 사용합니다.\n정의가 가능한 규칙들의 전체 리스트는 너무 방대하므로 <a href=\"https://eslint.org/docs/rules/\">ESLint의 공식 레퍼런스</a> 참조 바랍니다.</p>\n<h2 id=\"eslint-터미널에서-사용\" style=\"position:relative;\"><a href=\"#eslint-%ED%84%B0%EB%AF%B8%EB%84%90%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"eslint 터미널에서 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESLint 터미널에서 사용</h2>\n<p>실습 프로젝트에 자바스크립트 파일을 하나를 생성하고, ESLint로 검사할 코드를 작성합니다.</p>\n<ul>\n<li>index.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span></code></pre></div>\n<p>그 다음, 터미널에서 <code>eslint</code> 커맨드 뒤에 이 파일의 이름을 넘겨서 실행을 합니다.\n그러면 ESLint가 해당 파일을 검사하고 위와 같이 코드의 문제점을 터미널에 출력해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node_modules/.bin/eslint index.js\n\n/temp/learn-eslint/index.js\n  <span class=\"token number\">1</span>:5   error  <span class=\"token string\">'foo'</span> is assigned a value but never used  no-unused-vars\n  <span class=\"token number\">1</span>:11  error  <span class=\"token string\">'bar'</span> is not defined                      no-undef\n  <span class=\"token number\">1</span>:15  error  Unnecessary semicolon                     no-extra-semi\n\n✖ <span class=\"token number\">3</span> problems <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> errors, <span class=\"token number\">0</span> warnings<span class=\"token punctuation\">)</span>\n  <span class=\"token number\">1</span> error and <span class=\"token number\">0</span> warnings potentially fixable with the <span class=\"token variable\"><span class=\"token variable\">`</span>--fix<span class=\"token variable\">`</span></span> option.</code></pre></div>\n<p>ESLint는 소스 코드에 문제가 있는지 검사를 해줄 뿐만 아니라 가능한 경우에는 코드를 교정까지 해줍니다.\n위 커맨드에 <code>--fix</code> 옵션을 붙여서 실행하면 <code>no-extra-semi</code> 항목을 ESLint가 자동으로 고쳐줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node_modules/.bin/eslint index.js --fix\n\n/temp/learn-eslint/index.js\n  <span class=\"token number\">1</span>:5   error  <span class=\"token string\">'foo'</span> is assigned a value but never used  no-unused-vars\n  <span class=\"token number\">1</span>:11  error  <span class=\"token string\">'bar'</span> is not defined                      no-undef\n\n✖ <span class=\"token number\">2</span> problems <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> errors, <span class=\"token number\">0</span> warnings<span class=\"token punctuation\">)</span></code></pre></div>\n<p>다시 소스 파일을 열어보면 원래 제일 뒤에 세미콜론이 두개였었는데 한개로 줄어들었음을 알 수 있습니다.</p>\n<ul>\n<li>index.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"eslint-프로젝트-셋업\" style=\"position:relative;\"><a href=\"#eslint-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%85%8B%EC%97%85\" aria-label=\"eslint 프로젝트 셋업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESLint 프로젝트 셋업</h2>\n<p>실제 프로젝트에서는 파일이 많을 것이므로 위와 같이 매번 터미널에서 ESLint를 실행하는 것은 비현실적일 것입니다.\n그래서 일반적으로 ESLint를 사용할 때는 프로젝트 레벨에서 설정을 해두고 사용하는 경우가 대부분입니다.</p>\n<p>먼저 프로젝트의 전체 파일을 상대로 ESLint를 실행하는 NPM 스크립트를 추가합니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>자 이제 부터 터미널에 <code>npm run lint</code>라고 입력하면 프로젝트의 전체 파일을 상대로 ESLint가 실행될 것입니다.</p>\n<p>다음으로 <code>.eslintignore</code> 파일을 생성하여 ESLint를 실행할 때 예외 시킬 파일이나 디렉터리를 지정해줍니다.\n예를 들어, <code>node_modules</code> 디렉터리의 경우 외부 라이브러리의 소스 코드를 담고 있기 때문에 린트를 해줄 필요가 없습니다.</p>\n<ul>\n<li>.eslintignore</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node_modules</code></pre></div>\n<h2 id=\"eslint-강제-하기\" style=\"position:relative;\"><a href=\"#eslint-%EA%B0%95%EC%A0%9C-%ED%95%98%EA%B8%B0\" aria-label=\"eslint 강제 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ESLint 강제 하기</h2>\n<p>모든 개발자가 본인이 작성한 소스 코드에 대해 린트를 수행하고 발견된 문제를 해결 후에 커밋(commit)을 해주면 참 좋겠지만 현실은 그렇지가 않습니다.\n소스 코드를 커밋할 때 ESLint를 강제로 실행하여 문제가 있다면 코드 저장소(repository)에 유입되는 것을 차단할 수 있는 유용한 방법이 있습니다.</p>\n<p>우선, 실습 프로젝트에 <code>lint-staged</code>와 <code>husky</code>라는 패키지를 개발 의존성으로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D lint-staged husky</code></pre></div>\n<p><code>lint-staged</code>는 스테이징 영역에 있는 파일을 상대로 린트를 해주는 도구이고, <code>husky</code>는 git 커맨드 실행 시에 특정 스크립트를 실행주는 도구입니다.\n패키지 설치가 끝나면, <code>package.json</code> 파일에 다음 설정을 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.js\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"eslint --fix\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"git add\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 설정을 하면 개발자가 <code>git commit</code> 명령어를 날릴 때 마다, 스테이징 영역에 있는 파일을 상대로 린트를 해주고 가능하면 코드 교정까지 해줍니다.</p>\n<p>정말 그러한지 확인을 위해 실습 프로젝트에 자바스크립트 파일을 하나를 생성하고, 린팅 에러가 발생하도록 코드를 작성합니다.</p>\n<ul>\n<li>index2.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 이 파일을 커밋을 하기 위해서 <code>git add .</code>, <code>git st</code>, <code>git commit</code> 커맨드를 차례로 날리면…</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n$ <span class=\"token function\">git</span> st\nOn branch master\nChanges to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git reset HEAD &lt;file>...\"</span> to unstage<span class=\"token punctuation\">)</span>\n\n        new file:   index2.js\n\n$ <span class=\"token function\">git</span> commit\nhusky <span class=\"token operator\">></span> pre-commit <span class=\"token punctuation\">(</span>node v10.15.1<span class=\"token punctuation\">)</span>\n  ↓ Stashing changes<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>skipped<span class=\"token punctuation\">]</span>\n    → No partially staged files found<span class=\"token punctuation\">..</span>.\n  ❯ Running tasks<span class=\"token punctuation\">..</span>.\n    ❯ Running tasks <span class=\"token keyword\">for</span> *.js\n      ✖ eslint --fix\n        <span class=\"token function\">git</span> <span class=\"token function\">add</span>\n\n\n\n✖ eslint --fix found some errors. Please fix them and try committing again.\n\n/temp/learn-eslint/index2.js\n  <span class=\"token number\">1</span>:10  error  <span class=\"token string\">'foo'</span> is defined but never used  no-unused-vars\n  <span class=\"token number\">1</span>:14  error  <span class=\"token string\">'bar'</span> is defined but never used  no-unused-vars\n  <span class=\"token number\">2</span>:15  error  <span class=\"token string\">'baz'</span> is not defined             no-undef\n\n✖ <span class=\"token number\">3</span> problems <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> errors, <span class=\"token number\">0</span> warnings<span class=\"token punctuation\">)</span>\n\nhusky <span class=\"token operator\">></span> pre-commit hook failed <span class=\"token punctuation\">(</span>add --no-verify to bypass<span class=\"token punctuation\">)</span></code></pre></div>\n<p>린트 결과 문제가 3가지가 발생했기 때문에 코드 커밋을 거부 당합니다!</p>\n<p>다음처럼 린팅 에러를 모두 해결 후에 다시 코드를 커밋하면,</p>\n<ul>\n<li>index2.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제서야 정상적으로 코드가 커밋이 가능하다는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n$ <span class=\"token function\">git</span> commit\nhusky <span class=\"token operator\">></span> pre-commit <span class=\"token punctuation\">(</span>node v10.15.1<span class=\"token punctuation\">)</span>\n  ↓ Stashing changes<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">[</span>skipped<span class=\"token punctuation\">]</span>\n    → No partially staged files found<span class=\"token punctuation\">..</span>.\n  ✔ Running tasks<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>master e130e4b<span class=\"token punctuation\">]</span> Add index2\n <span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">3</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span>\n create mode <span class=\"token number\">100644</span> index2.js</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 자바스크립트 린터인 ESLint를 어떻게 사용하고 프로젝트에 설정해야되는지에 대해서 살펴보았습니다.\n고품질의 코드를 작성하기 위해서는 단위 테스트 단계 뿐만 아니라 이 린트 단계도 워크 플로우(Workflow)의 일부로 녹여야 한다고 생각합니다.\n또한 이렇게 린트 단계를 자동화하면 프로젝트의 전반적인 개발 생산성 측면에서 상당한 이점을 기대할 수 있습니다.</p>\n<h2 id=\"관련-포스팅\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EB%A0%A8-%ED%8F%AC%EC%8A%A4%ED%8C%85\" aria-label=\"관련 포스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 포스팅</h2>\n<ul>\n<li><a href=\"/js-prettier/\">그만 싸우시고 코드 포멧팅은 그냥 Prettier가 하게 두세요</a></li>\n</ul>","timeToRead":6,"fields":{"slug":"/js-eslint/","tags":["JavaScript","ESLint","Lint","Linter","lint-staged","husky"]},"frontmatter":{"title":"ESLint로 소스 코드에 숨어있는 문제 찾기","date":"Sep 22, 2019"}},"next":{"fields":{"slug":"/react-router-authentication/"},"frontmatter":{"title":"React Router로 사용자 인증하기 (로그인/로그아웃)"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}