{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/aws-\bmessaging-services/","result":{"pageContext":{"previous":null,"node":{"html":"<p>이번 포스팅에서는 AWS에 어떠한 이벤트(event) 기반 메시징(messaging) 서비스가 있는지 간단하게 살펴보도록 하겠습니다.</p>\n<h2 id=\"sqs\" style=\"position:relative;\"><a href=\"#sqs\" aria-label=\"sqs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQS</h2>\n<p><a href=\"https://aws.amazon.com/sqs/\">Amazon Simple Queue Service</a>, 줄여서 SQS는 메시지 대기열(queue) 서비스인데요.\nEC2, S3와 함께 AWS에서 가장 역사가 깊은 서비스 중에 하나이며 그만큼 Amazon 내부에서도 오래전 부터 사용했었고 여러 해 동안 테스트가 되어서 아주 안정화된 서비스입니다.</p>\n<p>SQS는 일반적으로 두 개의 애플리케이션 사이에서 송수신되고 있는 메시지를 중간에서 담아 놓는 일종의 큐(queue) 역할을 수행하는데요.\n보통 메시지를 SQS로 보내는 서비스를 Producer라고 하고, SQS로 부터 메시지를 받아오는 서비스를 Consumer라고 하지요.\n큐 자료구조처럼 FIFO(First In First Out) 방식으로 메시지 순서를 유지하면서 메시지 유실을 방지해주고 메시지 중복도 제거해주며 대규모로 메시지를 처리할 수 있습니다.</p>\n<p>AWS의 방대한 인프라 위에서 운용되는 완전관리형 서비스인 SQS는 이론상 무한대의 메시지를 보관할 수 있으며,\n기본적으로 4일동안 보관이 되고, 보관 기간을 최대 2주까지 늘릴 수 있습니다.</p>\n<p>특히 SQS는 마이크로서비스(microservices) 아키텍처 상에서 분산 시스템이나 서버리스 애플리케이션을 구축할 때 매우 유용한 서비스인데요.\n애플리케이션 간에 느슨하게 결합을 가능하게 하여 각자 독립적으로 확장할 수 있게 해주기 때문입니다.</p>\n<h2 id=\"sns\" style=\"position:relative;\"><a href=\"#sns\" aria-label=\"sns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SNS</h2>\n<p><a href=\"https://aws.amazon.com/sns/\">Amazon Simple Notification Service</a>, 줄여서 SNS는 게시/구독(pub/sub) 메시징 서비스입니다.</p>\n<p>SNS는 어떤 게시자가 여러 구독자에게 문자, 이메일, 모바일 푸시(push)와 같은 알람을 보내고 싶을 때 많이 사용됩는데요.\n여기서 게시자는 보통 AWS의 리소스나 AWS에서 돌아가는 어떤 애플리케이션이 되며 구독자는 사람뿐만 아니라 다른 애플리케이션일 수도 있습니다.</p>\n<p>SNS에서는 토픽(topic)을 통해서 메시지를 게시하고 구독하게 되는데요.\n게시자가 특정 SNS 토픽(topic)에 메시지를 보내면, 그 SNS 토픽을 구독하고 있는 모든 주체들은 이 메시지를 받게 됩니다.</p>\n<p>SNS는 AWS의 클라우드 인프라에서 돌아가는 완전관리형 서비스이므로 하나의 SNS 토픽에는 거의 무한대에 가까운 구독자를 설정할 수 있습니다.</p>\n<h2 id=\"kinesis\" style=\"position:relative;\"><a href=\"#kinesis\" aria-label=\"kinesis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kinesis</h2>\n<p><a href=\"https://aws.amazon.com/kinesis/\">Amazon Kinesis</a>는 실시간 스트리밍(streaming) 데이터 처리에 최적화된 서비스인데요.\n대규모의 데이터를 매우 짧은 지연시간으로 수집하고, 처리, 분석할 수 있어서 특히 비디오 스트리밍 애플리케이션에서 매우 효과적으로 활용될 수 있습니다.</p>\n<h2 id=\"amazon-mq\" style=\"position:relative;\"><a href=\"#amazon-mq\" aria-label=\"amazon mq permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Amazon MQ</h2>\n<p>기본에 온프레미스(on-premises) 환경에서 Rabbit MQ나 Active MQ와 같은 오픈 소스 메시지 브로커 제품을 사용하고 있다면 위에서 다룬 AWS의 관리형 메시징 서비스를 사용하기 어려울 수도 있는데요.\n이럴 때는 <a href=\"https://aws.amazon.com/amazon-mq/\">Amazon MQ</a>를 사용해서 안전하게 클라우드 환경으로 애플리케이션을 마이그레이션 할 수 있습니다.</p>\n<p>Amazon MQ를 사용하면 간편하게 AWS에서 메시지 브로커를 프로비저닝하고 메시지 브로커에 대한 유지 보수와 보안 관리를 AWS에게 위임할 수 있습니다.\n뿐만 아니라 AWS의 클라우드 인프라에서 돌아가는 완저관리형 서비스이므로 고가용성과 메시지 내구성은 덤이겠죠?</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 AWS에서 제공하고 있는 다양한 메시징 서비스에 대해서 수박 겉핥기 수준으로 살펴보았습니다.</p>\n<p>어느 정도 애플리케이션의 규모가 커지게 되면 자연스럽게 여러 개의 마이크로서비스(microservices) 아키텍처를 고려하고 되죠?\n마이크로서비스 간에 실시간으로 요청(request)과 응답(response)을 주고 받게하면 하나의 마이크로서비스에서 갑자스런 과부하가 발생했을 때 전체 애플리케이션에 장애를 유발할 수 있는데요.</p>\n<p>본 포스팅에서 소개해드린 AWS의 메시징 서비스를 잘 활용하셔서 이러한 위험을 줄이고 좀 더 확장이 용이한 애플리케이션을 만드실 수 있으셨으면 좋겠습니다.</p>","timeToRead":2,"fields":{"slug":"/aws-\bmessaging-services/","tags":["AWS","messaging","queue","SQS","SNS","Kinesis","MQ"]},"frontmatter":{"title":"AWS 메시징 서비스 훑어보기","date":"Dec 26, 2022"}},"next":{"fields":{"slug":"/aws-database-services/"},"frontmatter":{"title":"AWS 데이터베이스 서비스 훑어보기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}