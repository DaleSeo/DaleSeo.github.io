{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/classification-of-programming-languages/","result":{"pageContext":{"previous":{"fields":{"slug":"/react-hooks-use-script/"},"frontmatter":{"title":"React에서 <script> 태그로 자바스크립트 불러오기"}},"node":{"html":"<p>소프트웨어 개발 산업이 계속 번영하면서 정말 다양한 프로그래밍 언어가 존재하며 앞으로 더 많은 프로그래밍 언어가 나올 거라고 생각합니다.</p>\n<h2 id=\"수준에-따른-분류\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A4%80%EC%97%90-%EB%94%B0%EB%A5%B8-%EB%B6%84%EB%A5%98\" aria-label=\"수준에 따른 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수준에 따른 분류</h2>\n<p>프로그래밍 언어를 분류할 때 가장 많이 사용되는 기준은 수준(level)인 것 같습니다.\n즉, 흔히 저수준의 언어가 있고 고준의 언어가 있다고들 많이 얘기하는데요.</p>\n<p>프로그래밍에서 수준이라는 개념은 우리가 평소에 쓰는 “수준”이라는 단어 자체의 어감 때문에 자칫 오해를 하기 쉬운데요.\n여기서 말하는 수준은 절대 언어의 좋고 나쁨을 판단하는 척도가 될 수 없으니 주의바라겠습니다.\n보통 프로그래밍에서 수준이라는 용어는 추상화(abstraction) 정도를 나타내기 위해서 사용됩니다.</p>\n<p>좀 더 쉽게 설명드리면 일반적으로 컴퓨터에 가까운 언어를 저수준(low-level) 언어라고 하고, 인간에 가까운 언어를 고수준(high-level) 언어라고 합니다.\n대표적인 저수준 언어로 기계어(machine language)와 어셈블리어(assembly language)를 들 수 있고요.\n사실 그 외에 대부분의 프로그래밍 언어는 대략적으로 고수준 언어에 속한다고 볼 수 있습니다.\n물론 고수준 언어의 범주 안에서도 수준이 상대적으로 더 낮은 언어가 있고, 수준이 상대적으로 더 높은 언어가 있습니다.</p>\n<p>컴퓨터의 CPU(중앙 처리 장치)는 이진수, 즉 0과 1로 이루어진 바이너리의 형태의 데이터를 엄청난 속도로 처리하는 기계라고 볼 수 있는데요.\n이러한 컴퓨터가 있는 그대로 실행할 수 있는 프로그래밍 언어를 소위 기계어(machine language)라고 하는데요.\n0과 1로만 코딩을 해야한다고 상상을 해보시면 기계어로 코딩하는 것이 얼마나 어려운 일인지는 굳이 길게 말씀 안 드려도 될 것 같습니다.\n게다가 기계어는 보통 CPU의 설계에 따라서 명령 체계가 완전히 다르기 때문에 이식성이 매우 떨어지는 특징을 가지고 있습니다.\n쉽게 말해 Intel 프로세서에서 작동하는 기계어는 ARM 프로세서에서는 작동하지 않으며 반대의 경우도 마찬가지입니다.</p>\n<p>어셈블리어(assembly language)는 기계어를 토대로 0과 1 대신에 <code>mov</code>, <code>add</code>, <code>sub</code>, <code>save</code>와 같은 알파벳 형태의 명령어를 쓸 수 있는 프로그래밍 언어입니다.\n그래서 기계어보다는 그나마 사람이 직접 읽고 쓰는 것이 가능한 프로그래밍 언어입니다.\n대신에 이셈블리어로 작성된 소스 코드는 어셈블러(assembler)라는 도구를 통해 기계어로 반드시 치환을 해줘야 컴퓨터가 실행할 수 있습니다.</p>\n<p>기계어나 어셈블리어와 같은 저수준 언어는 반도체 칩이나 임베디드(embedded), 시스템 해킹 분야와 같이 극히 제한된 분야에서 사용되고 있습니다.\n사실 개발자 중에서도 컴퓨터를 전공하신 분들만 아주 얇게 접해볼 기회가 있으셨을 것 같습니다.</p>\n<p>대부분의 응용 소프트웨어를 개발하기 위해서는 고수준을 언어를 사용하게 되는데요.\nC, C++, C#, Java, Python, JavaScript 등등 많이 사용되는 프로그래밍 언어에 상위에 랭크된 언어들은 고수준 언어라고 보면 됩니다.\n고수준 언어는 인간의 언어(주로 영어)와 유사한 문법을 제공하기 때문에 사용하기 편하다는 장점이 있지만 그만큼 컴퓨터가 실행하기 위해서는 부수적인 과정이 거쳐야 합니다.\n즉 고수준 언어로 작성한 소스 코드를 컴파일러(compiler)나 인터프리터(interpreter)와 같은 도구로 컴퓨터가 실행할 수 있는 형태로 변환을 해줘야 합니다.</p>\n<p>이러한 고수준 언어와 저수준 언어의 차이를 우리가 평소에 말할 때 쓰는 언어에 빗대어 생각해볼까요?</p>\n<p>우리 자신을 영어를 조금 할 줄 아는 한국인라고 가정하고, 컴퓨터를 한국어를 전혀 할 줄 모르는 미국인라고 가정을 해볼께요.\n우리가 이 미국인에게 영어로 얘기를 한다면 어떨까요?\n비록 내 영어가 서툴고 실수도 할 수 있겠지만 이 미국인 무슨 말인지 바로 바로 알아들을 수 있겠죠?\n이 것을 개발자가 저수준의 언어로 컴퓨터와 대화하는 상황에 비유할 수 있는데요.\n저수준의 언어는 개발자가 컴퓨터의 입장에서 프로그래밍을 해야되서 좀 어려운 편이에요.\n하지만 언어의 수준이 낮아질수록 컴퓨터에게 내가 작성한 코드를 이해시키기 위한 비용이 적게 들어가는 이점이 있습니다.</p>\n<p>반대로 내가 이 미국인에게 한국어로 얘기를 하려면 어떻게 해야할까요?\n중간에서 한국어를 영어로 번역해줄 사람이이나 기계가 필요하겠죠?\n말하는 나는 편하겠지만 중간에 한 단계를 거쳐가야하니 당연히 의사소통이 오래 걸리겠죠?\n이 것을 프로그래머가 고수준 언어를 사용하는 상황에 비유할 수 있는데요.\n고수준의 언어는 개발자가 사람의 입장에서 프로그래밍을 할 수 있기 때문에 참 편합니다.\n하지만 언어의 수준이 높아질수록 내가 작성한 코드를 컴퓨터가 이해할 수 있는 형태로 변환하는 비용이 발생하게 됩니다.</p>\n<p>인간의 언어로 비유하자만 미국인과 대화할 때 한국인으로서 내가 영어를 쓰면 비록 내가 좀 힘들고 실수를 하더라도 상대가 바로 이해를 할 수 있을 것입니다.\n하지만 내가 편한 한국어를 쓰면 중간에 통역사나 번역기가 필요할 것입니다.</p>\n<p>이러한 저수준 언어로는 소프트웨어 개발하기가 너무 힘들기 때문에 개발자 중에서도 컴퓨터를 전공하신 분들만 아주 얕게 접할 기회가 있으셨을 것 같습니다.\n따라서 대부분의 소프트웨어 개발은 인간이 읽고 쓰기 용이한 고수준의 언어로 이루어지며 사실 고수준 언어 내에서도 상대적으로 수준이 낮은 언어가 있고 수준이 높은 언어가 있습니다.</p>\n<p>고수준 언어는 인간의 사용하는 언어와 유사한 문법을 제공하며 아무래도 국제적으로 통용되는 영어를 기반으로 한 프로그래밍 언어가 대부분입니다.\n컴퓨터의 입장에서 프로그래밍을 해야하는 저수준 언어와 달리 고수준 언어로 프로그래밍을 할 때는 구현하려는 기능에 초점을 맞춰 생산적으로 소프트웨어 개발하고 안정적으로 유지 보수할 수 있습니다.\n뿐만 아니라 고수준 언어는 저수준 언어를 사용할 때 직접 다 신경써줘야하는 하드웨어 리소스 관리를 알아서 해주는 경우가 많기 때문에 프로그래밍을 하면서 치명적인 버그를 일으킬 확률이 낮은 편입니다.\n반면에 고수준 언어로 작성한 코드는 컴퓨터로 실행하려면 컴파일러(compiler)나 인터프리터(interpreter)와 같은 도구로 저수준 언어로 변환하는 과정이 필요하다는 단점이 있습니다.</p>\n<ul>\n<li>생산성</li>\n<li>화장실 세면대에서 꼭지를 돌리면 고수준 화장실 세면대 밑으로 들어가야 되면 저수준 (방에 조명 스위치)</li>\n<li>현대 언어에서는</li>\n<li>고수준 언어는 계속 새로운 것이 나왔다가 들어가지만 저수준 언어는 몇 십년 전에 만든 것이 계속 쓰임</li>\n<li>몇 가지 고수준 언어를 마스터 하셨다면 C와 같은 수준이 낮은 편의 언어도 학습해보시길 추천</li>\n<li>소프트웨어 산업이 부흥하고 더 많은 개발자들을 유입하기 위해서 언어가 계속 적으로 고수준이 되어 가고 있음</li>\n</ul>\n<h2 id=\"타입에-따른-분류\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%97%90-%EB%94%B0%EB%A5%B8-%EB%B6%84%EB%A5%98\" aria-label=\"타입에 따른 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입에 따른 분류</h2>\n<p>프로그래밍 언어 중에서는 자료형이 컴파일 시점에 결정이 되는 언어가 있고, 실행 시점에 결정이 되는 언어가 있습니다.\n보통 전자를 정적 타이핑(static typing) 언어, 후자를 동적 타이핑(dynamic typing) 언어라고 하는데요.</p>\n<p>C, C#, 자바와 같은 정적 타이핑 언어로 프로그래밍 할 때는 개발자가 모든 변수에 반드시 자료형을 명시해줘야 하기 때문에 코드가 길어지는 특징이 있습니다.</p>\n<p>개발자가 자료형을 스스로 명시해야하는 언어가 있고 언어가 알아서 자료형을 판단하는 언어가 있습니다.</p>\n<p>정적 타이핑 언어를 사용하면 동적 타이핑 언어 대비 좀 더 안정적이고 버그가 적은 소프트웨어를 개발할 수 있는 것으로 알려져있습니다.\n왜냐하면 정적 타이핑 언어는 작성된 코드는 컴파일 과정에서 타입 체크(type check)를 해주는데요.\n변수의 자료형과 실제 저장된 데이터가 부합하는지를 확인해줍니다.</p>\n<p>하지만 동적 타이핑 언어에서는 이러한 별도의 타입 체크 과정이 없어서 프로그램의 버그가 실행 시점에 발생할 확률이 높습니다.\n하지만 동적 타이핑 언어를 사용하면 좀 더 짧은 코드로 더 많은 일을 할 수 있으며 컴파일 과정이 없어서 프로젝트를 좀 더 빨리 빌드하고 배포할 수 있다는 장점이 있습니다.</p>\n<p>컴파일 시점에 타입 체크를 하지 않는 동적 타이핑 언어는 많이 경우 인터프리터를 제공하는데요.\n이 인터프리터가 일종의 동시 통역사 역할을 하기 때문에 실시간으로 코드를 한 줄 씩 실행이 가능해지는데요.\n컴파일러를 일종의 통역사</p>\n<p>타입 체크를 하지 않는 동적 타이핑 언어에서는 컴파일 과정도 필요가 없기 때문에</p>\n<p>항상 그런 것은 아니지만 많은 동적 타이핑 언어들이</p>\n<p>컴파일/인터프린터 (타입)</p>\n<h2 id=\"패러다임에-따른-분류\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84%EC%97%90-%EB%94%B0%EB%A5%B8-%EB%B6%84%EB%A5%98\" aria-label=\"패러다임에 따른 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패러다임에 따른 분류</h2>\n<p>프로그래밍에서는 역사적으로 패러다임이 계속해서 변해왔고 프로그래밍 언어는 이러한 패러다임을 반영해왔습니다.\n초창기에는 단순히 명령어의 목록을 순서대로 실행하는 절차적(procedural) 프로그래밍이 주를 이루었지만,\n소프트웨어 프로젝트의 규모가 거지면서 객체지향(object-oriented) 프로그래밍이 대세인 적도 있었고,</p>\n<p>COBOL이나 BASIC과 같이 비교적 초창기에 등장한 프로그래밍 언어들이 절차적 패러다임을 따르고 있습니다.\n절차적 언어로 프로그래밍할 때는 컴퓨터가 수행할 명령어를 나열하는 수준에서 크게 벗어나지 않기 때문에 간단한 소프트웨어를 개발하는데는 큰 무리가 없습니다.\n하지만 여러 개발자가 협엽하는 대규모 프로젝트에서 소프트웨어를 기능에 따라 모듈(module)로 나누어 개발을 진행하는 것이 유리합니다.\n그리고 실제 세상을 모델링(modeling)하여 소프트웨어 설계에 반영하는 것이 필요하게 되었습니다.</p>\n<p>이러한 시대적 요구에 발맞춰 Java나 C#과 같은 객체지향 언어가 대두하게 되었습니다.</p>\n<p>객체지향 프로그래밍의 단점을 보완하기 위해서 함수형(functional) 프로그래밍이 각광을 받고 있는 것 같습니다.\n한 번 함수형 프로그래밍 언어에 푹 빠지게 되면</p>\n<p>객체지향에서는 항상 상태 관리가 문제가 되었는데요.</p>\n<p>최근에는 함수형(functional) 프로그래밍의</p>\n<h2 id=\"분야용도에-따른-분류\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EC%95%BC%EC%9A%A9%EB%8F%84%EC%97%90-%EB%94%B0%EB%A5%B8-%EB%B6%84%EB%A5%98\" aria-label=\"분야용도에 따른 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분야/용도에 따른 분류</h2>\n<p>지금까지 다른 대부분의 프로그래밍 언어가 여러 분야에서 여러 용도로 사용되고 있는데요.\n사실 프로그래밍 언어 중에는 특정 분야나 용도로만 사용되는 것도 많이 있습니다.</p>\n<p>대표적인 예로 관계형 데이터베이스에서 사용되는 SQL, SAP 생태계에서 사용되는 ABAP, 애플 생태계에서 사용되는 Objective-C나 Swift를 들 수 있는데요.\n이러한 프로그래밍 언어들은 특정 플랫폼에서만 돌아가도록 되어 있기 때문에 활용 범위가 제한적인지만 해당 플랫폼에서 돌아가는 소프트웨어를 개발하려면 다른 대안이 없는 경우가 많습니다.</p>\n<p>HTML과 CSS도 브라우저라는 실행 환경에서만 돌아가는 일종의 프로그래밍 언어라고 볼 수 있는데요.\n반면에 JavaScript의 경우 브라우저에서만 돌아가던 시절도 있었지만 현재는 플래폼을 가리지 않고 굉범위한 분야에서 활약하고 있는 언어가 되었습니다.</p>\n<p>또 다른 재미있는 사례로 데이터 과학 분야에서는 사용되고 있는 Python과 R을 생각해볼 수 있는데요.\nPython은 데이터 과학 분야 뿐만 아니라 다른 분야에서도 널리 사용되고 있는 언어인 반면에, R은 주로 데이터 과학 분야에서만 사용됩니다.\n따라서 타 분야에서 데이터 과학 분야로 넘어오신 분들이 Python을 많이 사용하시며, 반대로 데이터 과학 분야의 개발자들이 타 분야로 진출하는데도 Python이 도움이 되는 걸로 보입니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>원래는 프로그래밍 언어를 분류를 해볼까 했다가 최근에는 프로그래밍 언어들이 서로 경쟁하면서 좋은 점을 서로 받아들여 비슷해져가는 경향이 있어서 분류를 한다는 게 큰 의미가 없을 것 같더라고요. 그래서 제가 보통 어떤 관점으로 프로그래밍 언어를 바라보는지에 대해서 얘기를 해보려고요.</p>","timeToRead":6,"fields":{"slug":"/classification-of-programming-languages/","tags":["programming"]},"frontmatter":{"title":"프로그래밍 언어의 분류","date":"Jul 7, 2022"}},"next":{"fields":{"slug":"/google-maps-api/"},"frontmatter":{"title":"구글 Maps API 사용법"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}