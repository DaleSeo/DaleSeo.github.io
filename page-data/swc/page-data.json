{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/swc/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>최근에 자바스크립트가 아닌 다른 프로그래밍 언어로 작성된 자바스크립트 프로젝트를 위한 빌드 도구들이 많이 등장하고 있습니다.</p>\n<p>이번 포스팅에서 괴물같은 성능을 자랑하며 기존 빌드 도구들의 자리를 위협하고 있는 차세대 트랜스파일러이자 컴파일러인 SWC에 대해서 알아보겠습니다.</p>\n<h2 id=\"swc란\" style=\"position:relative;\"><a href=\"#swc%EB%9E%80\" aria-label=\"swc란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SWC란?</h2>\n<p>SWC(Speedy Web Compiler)는 자바스크립트 코드를 트랜스파일(transpile)하거나 타입스크립트 코드를 컴파일(compile)하기 위해 사용할 수 있는 개발 도구입니다.\n여기서 자바스크립트 코드를 트랜스파일한다는 것은 ES6 이상의 최신 문법으로 작성된 자바스크립트 코드를 ES5 이하의 문법으로 변환하는 과정을 뜻하며,\n타입스크립트 코드를 컴파일한다는 것은 타입스크립트 문법으로 작성된 코드를 일반 자바스크립트 코드로 변환하는 과정을 의미하죠.</p>\n<p>이러한 소위 <strong>빌드(build)</strong> 프로세스를 통해서 생성되는 자바스크립트 코드는 구형 웹 브라우저나 Node.js에서도 잘 돌아가게 됩니다.\n따라서 개발자들은 코드 호환성에 대해서 크게 걱정하지 않고 자바스크립의 최신 문법이나 타입스크립트로 코드를 작성할 수 있습니다.</p>\n<p>SWC가 등장하기 전에는 오랫동안 <a href=\"/?tag=Babel\">Babel</a>이라는 트랜스파일러와 타입스크립트의 내장 컴파일러인 <a href=\"/tsc/\">TSC</a>가 함께 사용되었습니다.\n하지만 Babel과 TSC는 둘 다 타입스크립트로 작성되었고 따라서 싱글 쓰레드로 실행되기 때문에 속도가 느리다는 단점이 있었습니다.\n특히 대규모 프로젝트에서 빌드가 오래 걸려서 개발 생산성 문제를 야기하곤 했습니다.</p>\n<p>Rust라는 저수준 프로그래밍 언어로 작성된 SWC는 Babel과 TSC와 같은 기존 빌드 도구에 비해 작게는 몇 배, 크게는 몇 십 배나 빠른 엄청난 성능을 자랑하는 새로운 빌드 도구입니다.\nSWC 하나로 Babel과 TSC를 모두 대체할 수 있으며 Babel에 비해서 설정이 단순하기 때문에 많은 신규 프로젝트에서 SWC를 채택해서 사용하고 있습니다.\n대표적인 예로, React의 <a href=\"/meta-frameworks/\">메타 프레임워크</a>인 Next.js를 들 수 있겠습니다.</p>\n<p>참고로 한국 개발자이신 <a href=\"https://twitter.com/kdy1dev\">강동윤</a>님께서 SWC를 만드셨다고 하네요.\n정말로 자랑스러운 일이 아닐 수 없습니다. 🇰🇷</p>\n<h2 id=\"swc-설치\" style=\"position:relative;\"><a href=\"#swc-%EC%84%A4%EC%B9%98\" aria-label=\"swc 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SWC 설치</h2>\n<p>SWC는 자바스크립트 프로젝트에서 설치 후에 <code>npx</code> 명령어를 통해서 터미널에서 간단하게 사용해볼 수 있습니다.</p>\n<p>우선 npm 저장소에서 <code>@swc/cli</code>와 <code>@swc/core</code> 패키지를 내려받아 설치해야합니다.\nSWC는 애플리케이션 실행 시에는 필요가 없기 때문에 개발 의존성으로 설치해줍니다.</p>\n<p>Node.js 프로젝트에서는 터미널에서 <code>npm add</code> 명령어로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> @swc/cli @swc/core</code></pre></div>\n<p><a href=\"/?tag=Bun\">Bun</a>을 사용하는 프로젝트에서는 <code>bun add</code> 명령어로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> @swc/cli @swc/core</code></pre></div>\n<p>터미널에서 <code>npx swc --version</code>을 실행했을 때, 다음과 같이 버전이 출력되면 SWC가 잘 설치된 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc <span class=\"token parameter variable\">--version</span>\n\n@swc/cli: <span class=\"token number\">0.1</span>.63\n@swc/core: <span class=\"token number\">1.3</span>.101</code></pre></div>\n<h2 id=\"단일-파일-변환\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%ED%8C%8C%EC%9D%BC-%EB%B3%80%ED%99%98\" aria-label=\"단일 파일 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 파일 변환</h2>\n<p>SWC는 기본적으로 최신 문법으로 작성된 자바스크립트나 타입스크립트로 작성된 코드를 입력받아 트랜스파일 또는 컴파일한 결과 코드를 출력하는 프로그램입니다.</p>\n<p>간단한 실습을 위해서 <code>index.ts</code> 파일에 다음과 같은 타입스크립트 코드를 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplyByTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>터미널에서 <code>index.ts</code> 파일을 상대로 <code>swc</code> 명령어를 실행해보면 ES5 문법 기준으로 변환된 결과 코드가 터미널에 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc index.ts\nSuccessfully compiled <span class=\"token number\">1</span> <span class=\"token function\">file</span> with swc.\n<span class=\"token builtin class-name\">export</span> var multiplyByTwo <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">return</span> arr.map<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> num * <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>결과 코드를 터미널에 쓰지 않고 파일에 쓰고 싶다면 <code>-o</code> 또는 <code>--out-dir</code> 옵션을 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc index.ts <span class=\"token parameter variable\">-o</span> output.js\nSuccessfully compiled <span class=\"token number\">1</span> <span class=\"token function\">file</span> with swc.\n``<span class=\"token variable\"><span class=\"token variable\">`</span>\n\n<span class=\"token variable\">`</span></span>output.js<span class=\"token variable\"><span class=\"token variable\">`</span> 파일을 열어보면 변환된 자바스크립트 코드가 보일 것입니다.\n\n<span class=\"token variable\">`</span></span>``sh\n$ <span class=\"token function\">cat</span> output.js\n<span class=\"token builtin class-name\">export</span> var multiplyByTwo <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">return</span> arr.map<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> num * <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"폴더-전체-변환\" style=\"position:relative;\"><a href=\"#%ED%8F%B4%EB%8D%94-%EC%A0%84%EC%B2%B4-%EB%B3%80%ED%99%98\" aria-label=\"폴더 전체 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>폴더 전체 변환</h2>\n<p>대부분의 프로젝트는 여러 파일로 구성되므로 폴더 안에 있는 모든 파일을 변환할 일이 더 많을 것입니다.</p>\n<p>실습을 위해서 <code>src</code> 폴더를 만들고, <code>index.ts</code> 파일을 그 폴더 안으로 옮겨보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> src\n$ <span class=\"token function\">mv</span> index.ts src/</code></pre></div>\n<p>그 다음 <code>src</code> 폴더를 상대로 <code>swc</code> 명령어를 실행하는데요.\n<code>-d</code> 또는 <code>--out-dir </code> 옵션으로 <code>dist</code> 폴더를 지정해주겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc src <span class=\"token parameter variable\">-d</span> dist\nSuccessfully compiled: <span class=\"token number\">1</span> <span class=\"token function\">file</span> with swc <span class=\"token punctuation\">(</span><span class=\"token number\">4</span>.95ms<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>dist</code> 폴더에는 <code>index.js</code> 파일이 생성되어 있을 것입니다.\n<code>index.js</code> 파일을 열어보면 변환된 코드가 확인됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> dist\nindex.js\n$ <span class=\"token function\">cat</span> dist/index.js\n<span class=\"token builtin class-name\">export</span> var multiplyByTwo <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">return</span> arr.map<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> num * <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"swc-설정-파일\" style=\"position:relative;\"><a href=\"#swc-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC\" aria-label=\"swc 설정 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SWC 설정 파일</h2>\n<p>SWC는 <code>.swcrc</code> 파일을 통해서 어떻게 코드를 변환할지를 상세하게 설정할 수 있습니다.\n<code>.swcrc</code> 파일은 프로젝트의 최상위 경로에 위치하며 아래와 같은 모습을 띕니다.</p>\n<div class=\"gatsby-code-title\">.swcrc</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://json.schemastore.org/swcrc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"jsc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>참고로 <code>$schema</code> 속성은 필수는 아니지만, 있으면 코드 에디터에서 자동 완성이 되기 때문에 편리하고 안전합니다.</p>\n<p>SWC에서 제공하는 수 많은 설정 옵션은 <a href=\"https://swc.rs/docs/configuration/swcrc\">SWC 공식 문서</a>를 참조 바랍니다.\n본 포스팅에서는 자주 사용되는 옵션만 다루겠습니다.</p>\n<h2 id=\"파서parser-설정\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%84%9Cparser-%EC%84%A4%EC%A0%95\" aria-label=\"파서parser 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파서(parser) 설정</h2>\n<p><code>jsc.parser</code> 옵션은 입력 코드가 타입스크립트로 작성되는지 자바스크립트로 작성되는지를 지정하는데 사용합니다.</p>\n<p>타입스크립트를 사용하지 않는 프로젝트에서는 <code>jsc.parser.syntax</code> 옵션을 <code>ecmascript</code>로 설정해주면 됩니다.</p>\n<div class=\"gatsby-code-title\">.swcrc</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://json.schemastore.org/swcrc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"jsc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"syntax\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ecmascript\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 설정을 하고 <code>index.ts</code>를 상대로 SWC를 실행하면 문법 오류가 나는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc src/index.ts\n\n  × Expected <span class=\"token string\">','</span>, got <span class=\"token string\">':'</span>\n   ╭─<span class=\"token punctuation\">[</span>src/index.ts:1:1<span class=\"token punctuation\">]</span>\n <span class=\"token number\">1</span> │ const multiplyByTwo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arr: number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n   ·                           ─\n <span class=\"token number\">2</span> │   <span class=\"token builtin class-name\">return</span> arr.map<span class=\"token punctuation\">((</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> num * <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token number\">3</span> │ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   ╰────\n\n\nCaused by:\n    Syntax Error\nError: Failed to compile <span class=\"token number\">1</span> <span class=\"token function\">file</span> with swc.</code></pre></div>\n<p><code>jsc.parser.syntax</code> 옵션을 <code>typescript</code>로 설정하면 SWC가 타입스크립트 문법을 이해할 수 있게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://json.schemastore.org/swcrc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"jsc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"syntax\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescript\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러므로 이제 <code>index.ts</code>가 아무 문제없이 자바스크립트 코드로 컴파일됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc src/index.ts\nSuccessfully compiled <span class=\"token number\">1</span> <span class=\"token function\">file</span> with swc.\n<span class=\"token builtin class-name\">export</span> var multiplyByTwo <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">return</span> arr.map<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> num * <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"타켓target-설정\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%BC%93target-%EC%84%A4%EC%A0%95\" aria-label=\"타켓target 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타켓(target) 설정</h2>\n<p><code>jsc.target</code> 옵션을 통해서 출력 코드가 얼마나 최신의 자바스크립트 문법을 사용할지를 결정할 수 있는데 기본 값은 <code>es5</code> 입니다.</p>\n<p>예를 들어, <code>jsc.target</code> 옵션을 <code>es2015</code>로 바꿔보겠습니다.</p>\n<div class=\"gatsby-code-title\">.swcrc</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://json.schemastore.org/swcrc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"jsc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"syntax\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescript\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2015\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 <code>index.ts</code>를 대상으로 SWC를 실행해보면 출력 코드에서 타입만 제거되었지 문법은 입력 코드와 동일하다는 것을 볼 수 있습니다.\n(화살표 함수가 그대로 보존되고, <code>const</code>가 <code>var</code>로 바뀌지 않았습니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc src/index.ts\nSuccessfully compiled <span class=\"token number\">1</span> <span class=\"token function\">file</span> with swc.\n<span class=\"token builtin class-name\">export</span> const multiplyByTwo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">return</span> arr.map<span class=\"token punctuation\">((</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>num * <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"모듈-시스템-설정\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EC%A0%95\" aria-label=\"모듈 시스템 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈 시스템 설정</h2>\n<p><code>module.type</code> 옵션은 출력 코드의 모듈 시스템을 설정하는데 쓰입니다.\n기본 값은 <code>es6</code>이며 모듈 시스템으로 ESM(ES Modules)가 사용됩니다.\n모듈 시스템으로 아직 CJS(CommonJS)를 사용하는 프로젝트에서는 <code>module.type</code> 옵션을 <code>commonjs</code>로 설정해줘야 합니다.</p>\n<div class=\"gatsby-code-title\">.swcrc</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://json.schemastore.org/swcrc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"jsc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"syntax\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescript\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>설정을 바꾼 후에 SWC를 실행해보면 모듈 시스템이 CommonJS로 바뀌어 출력 코드가 장황해진 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc src/index.ts\nSuccessfully compiled <span class=\"token number\">1</span> <span class=\"token function\">file</span> with swc.\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\nObject.defineProperty<span class=\"token punctuation\">(</span>exports, <span class=\"token string\">\"__esModule\"</span>, <span class=\"token punctuation\">{</span>\n    value: <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject.defineProperty<span class=\"token punctuation\">(</span>exports, <span class=\"token string\">\"multiplyByTwo\"</span>, <span class=\"token punctuation\">{</span>\n    enumerable: true,\n    get: <span class=\"token function-name function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> multiplyByTwo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvar multiplyByTwo <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">return</span> arr.map<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin class-name\">return</span> num * <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"최소화-난독화-압축\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C%ED%99%94-%EB%82%9C%EB%8F%85%ED%99%94-%EC%95%95%EC%B6%95\" aria-label=\"최소화 난독화 압축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최소화, 난독화, 압축</h2>\n<p><code>minify</code> 옵션과 <code>jsc.minify</code> 옵션을 조합하여 출력 코드의 최소화나 난독화, 압축 여부를 설정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://json.schemastore.org/swcrc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"jsc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"syntax\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescript\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"minify\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"mangle\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"compress\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"minify\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 설정 후 <code>index.ts</code>를 변환해보면 가독이 어려운 코드가 얻어질 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc src/index.ts\nSuccessfully compiled <span class=\"token number\">1</span> <span class=\"token function\">file</span> with swc.\n<span class=\"token builtin class-name\">export</span> var <span class=\"token assign-left variable\">multiplyByTwo</span><span class=\"token operator\">=</span>function<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>return n.map<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>return <span class=\"token number\">2</span>*n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"소스-맵-생성\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%8A%A4-%EB%A7%B5-%EC%83%9D%EC%84%B1\" aria-label=\"소스 맵 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소스 맵 생성</h2>\n<p><code>sourceMaps</code> 옵션을 <code>true</code>로 설정하면 변환된 자바스크립트 코드와 더불어 소스 맵도 만들어낼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://json.schemastore.org/swcrc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"jsc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"syntax\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typescript\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sourceMaps\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>출력 풀더를 <code>dist</code>로 지정하고 SWC를 실행해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx swc src <span class=\"token parameter variable\">-d</span> dist\nSuccessfully compiled: <span class=\"token number\">1</span> <span class=\"token function\">file</span> with swc <span class=\"token punctuation\">(</span><span class=\"token number\">5</span>.99ms<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>dist</code> 디렉토리에 소스 맵을 담고 있는 <code>index.js.map</code> 파일이 생성된 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> dist\nindex.js     index.js.map\n$ <span class=\"token function\">cat</span> dist/index.js.map\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"version\"</span>:3,<span class=\"token string\">\"sources\"</span>:<span class=\"token punctuation\">[</span><span class=\"token string\">\"../src/index.ts\"</span><span class=\"token punctuation\">]</span>,<span class=\"token string\">\"sourcesContent\"</span>:<span class=\"token punctuation\">[</span><span class=\"token string\">\"export const multiplyByTwo = (arr: number[]) => {<span class=\"token entity\" title=\"\\n\">\\n</span>  return arr.map((num) => num * 2);<span class=\"token entity\" title=\"\\n\">\\n</span>};<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">]</span>,<span class=\"token string\">\"names\"</span>:<span class=\"token punctuation\">[</span><span class=\"token string\">\"multiplyByTwo\"</span>,<span class=\"token string\">\"arr\"</span>,<span class=\"token string\">\"map\"</span>,<span class=\"token string\">\"num\"</span><span class=\"token punctuation\">]</span>,<span class=\"token string\">\"mappings\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"AAAA,OAAO,IAAMA,gBAAgB,SAACC;IAC5B,OAAOA,IAAIC,GAAG,CAAC,SAACC;eAAQA,MAAM;;AAChC,EAAE\"</span><span class=\"token punctuation\">}</span>%</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 실습을 통해서 SWC로 타입스크립트/자바스크립트 코드를 변환하는 방법에 대해서 알아보았습니다.\n참고로 <a href=\"https://swc.rs/playground\">SWC Playground</a>를 활용하면 웹 브라우저에서 간편하게 SWC를 체험해볼 수 있습니다.</p>\n<p>실제 프로젝트에서는 SWC를 Webpack, Parcel, Vite와 같은 번들러(bundler)와 함께 쓰는 경우가 많아서 본 포스팅에서 다룬 것처럼 터미널 상에서 SWC만 단독으로 사용할 일을 많지 않을 것 같습니다.\nSWC를 다른 빌드 도구와 통합해서 사용하는 방법에 대해서는 추후 포스팅을 통해서 다뤄보도록 하겠습니다.</p>","timeToRead":7,"fields":{"slug":"/swc/","tags":["JavaScript","TypeScript","ES6","Node.js","Babel"]},"frontmatter":{"title":"SWC(Speedy Web Compiler) 기본 사용법","date":"Jan 2, 2024"}},"next":{"fields":{"slug":"/jest-class-mocks/"},"frontmatter":{"title":"Jest를 이용한 클래스 모킹과 테스팅"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}