{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/threads/","result":{"pageContext":{"previous":{"fields":{"slug":"/sleep-interrupt-join/"},"frontmatter":{"title":"자바 쓰레드 Sleep & Intterupt & Join"}},"node":{"html":"<blockquote>\n<p>본 포스트는 오라클 자바 튜토리얼의 <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/threads.html\">Thread Objects</a>와 <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/runthread.html\">Defining and Starting a Thread</a>를 번역하였습니다.</p>\n</blockquote>\n<h2 id=\"쓰레드-객체\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C-%EA%B0%9D%EC%B2%B4\" aria-label=\"쓰레드 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드 객체</h2>\n<p>모든 쓰레드는 <code>Thread</code> 클래스의 인스턴스와 관계를 갖습니다.\n동시 어플리케이션(concurrent application)을 개발하기 위해서 쓰레드 객체를 사용하는데는 두 가지 기본 전략이 있습니다.</p>\n<ul>\n<li>쓰레드의 생성과 관리를 직접 제어하기 위해서, 어플리케이션이 비동기 작업이 필요할 때 마다 단순히 <code>Thread</code> 클래스의 인스턴스를 만들 수 있습니다.</li>\n<li>응용 프로그램으로 부터 쓰레드 관리를 분리하고 추상화하기 위해서, 비동기 작업들을 <code>executor</code>에게 위임할 수 있습니다.</li>\n</ul>\n<p>본 섹션은 <code>Thread</code> 객체의 사용에 대해서 문서화하겠습니다.\n<code>Executors</code>는 고수준 동시성 객체(high-level concurrency objects) 섹션에서 별도로 다루겠습니다.</p>\n<h2 id=\"쓰레드를-정의하고-시작하기\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EA%B3%A0-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"쓰레드를 정의하고 시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드를 정의하고 시작하기</h2>\n<p><code>Thread</code> 인스턴스를 생성하는 응용 프로그램은 반드시 해당 쓰레드 상에서 수행될 코드를 제공해야 합니다.\n다음과 같이 2가지 방법이 있습니다.</p>\n<h3 id=\"runnable-인터페이스를-구현하기\" style=\"position:relative;\"><a href=\"#runnable-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"runnable 인터페이스를 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Runnable</code> 인터페이스를 구현하기</h3>\n<p><code>Runnable</code> 인터페이스는 쓰레드 상에서 수행될 코드를 담기 위한 <code>run()</code>이라는 하나의 메서드만을 정의하고 있습니다.\n다음 <code>HelloRunnalbe</code> 예제와 같이 <code>Runnalbe</code> 객체는 <code>Thread</code> 클래스의 생성자로 넘어오게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from a thread!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"thread-클래스를-상속하기\" style=\"position:relative;\"><a href=\"#thread-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%83%81%EC%86%8D%ED%95%98%EA%B8%B0\" aria-label=\"thread 클래스를 상속하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Thread</code> 클래스를 상속하기</h3>\n<p><code>Thread</code> 클래스 자체도 <code>Runnable</code> 인터페이스를 구현하고 있으나 <code>run()</code> 메소드는 아무 것도 하지 않도록 되어 있습니다.\n다음 <code>HelloThread</code> 예제와 같이 <code>run()</code> 메소드에 대한 자체 구현을 제공함으로써 <code>Thread</code> 클래스를 상속할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from a thread!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 가지 예제 모두 새로운 쓰레드를 시작하기 위해서 <code>Thread.start()</code> 메소드를 호출하고 있다는 것에 주목하세요.</p>\n<p>그럼 과연 어떤 방식을 사용해야 할까요?\n<code>Runnable</code> 인터페이스를 구현하면 <code>Thread</code> 클래스 외에 다른 클래스도 상속할 수 있기 때문에 <code>Runnable</code> 객체를 사용하는 첫번째 방식이 더 보편적입니다.\n두번째 방식은 간단한 어플리케이션에서 사용하기 더 쉽지만, 해당 작업 클래스가 <code>Thread</code> 클래스의 후손이 되어야 한다는 제한이 있습니다.\n본 수업에서는 <code>Runnable</code> 작업을 그 작업을 실행시켜주는 <code>Thread</code> 객체로부터 분리하여 접근하는 첫번째 방식에 초점을 맞추겠습니다.\n이러한 접근법이 더 유연한 뿐만 아니라, 나중에 다룰 고수준의 쓰레드의 관리 API에서도 더 적용이 용이합니다.</p>\n<p><code>Thread</code> 클래스는 쓰레드 관리를 위한 많은 메소드를 정의하고 있습니다.\n이 메소드들은 해당 메소드를 호출하는 대상 쓰레드와 관련된 정보를 제공거나 대상 쓰레드의 상태에 영향을 주는 정적 메소드를 포함합니다.\n다른 메소드들은 해당 쓰레드와 <code>Thread</code> 객체를 관리하는데 관여하고 있는 다른 쓰레드로 부터 호출되어집니다.\n이어지는 섹션에서 이 메소드들을 살펴보도록 하겠습니다.</p>","timeToRead":2,"fields":{"slug":"/threads/","tags":["Java","Concurrency","Process","Thread"]},"frontmatter":{"title":"자바 쓰레드","date":"Sep 18, 2016"}},"next":{"fields":{"slug":"/procthread/"},"frontmatter":{"title":"프로세스와 쓰레드"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}