{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-pipenv/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-logging/"},"frontmatter":{"title":"파이썬 기본 로깅 - logging 내장 모듈"}},"node":{"html":"<h2 id=\"파이썬의-패키지-매니저\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%98-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80\" aria-label=\"파이썬의 패키지 매니저 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬의 패키지 매니저</h2>\n<p>대부분의 프로그래밍 언어들은 자체적으로 패키지 관리 도구(package manager)를 제공하고 있습니다.\n자바의 Maven, 자바스크립트의 npm처럼 파이썬에서는 pip라는 매우 간단한 패키지 관리 도구가 있는데요.\n다른 언어의 패키지 매니저와 비교했을 때 부족한 부분들이 많다고 느끼실 겁니다.</p>\n<p>일단 기본적으로 패키지 설치가 전역으로(global) 설치되기 때문에 한 컴퓨터 상에서 여러 파이썬 프로젝트에 걸쳐 작업을 하기가 힘들고,\n프로젝트 별로 설치가 필요한 패키지를 정의하는 방식도 어디는 <code>requirements.txt</code>를 사용하고 다른데는 <code>setup.py</code>를 사용하는 등 표준화가 모호한 부분이 있습니다.</p>\n<h2 id=\"pipenv란\" style=\"position:relative;\"><a href=\"#pipenv%EB%9E%80\" aria-label=\"pipenv란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pipenv란?</h2>\n<p><code>pipenv</code>는 파이썬에서도 패키지를 프로젝트 단위로 관리를 할 수 있도록 도와주는 고급 패키지 관리 도구입니다.\n기본적으로 pip를 기반으로 동작하지만, 프로젝트 별로 격리된 가상 환경(virtual environment)과 프로젝트 단위의 패키지 관리 매커니즘을 제공합니다.</p>\n<h2 id=\"pipenv-설치\" style=\"position:relative;\"><a href=\"#pipenv-%EC%84%A4%EC%B9%98\" aria-label=\"pipenv 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pipenv 설치</h2>\n<p>Mac 사용자라면 Homebrew를 통해 간편하게 <code>pipenv</code>를 터미널 상에서 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> pipenv</code></pre></div>\n<p>Mac을 사용하지 않는 분들은, <code>pip</code>을 이용해서 전역으로 설치해서 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> pipenv</code></pre></div>\n<h2 id=\"가상-환경-구성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"가상 환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 환경 구성</h2>\n<p>먼저 <code>pipenv</code>로 패키지 관리를 하고 싶은 프로젝트 폴더로 이동합니다.\n저는 임의로 <code>learn-python</code>이라는 폴더를 생성하고 그 안으로 들어갔습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> learn-python\n$ <span class=\"token builtin class-name\">cd</span> learn-python</code></pre></div>\n<p>가상 환경에서 사용할 파이썬 버전을 <code>--python</code> 옵션에 명시하여 <code>pipenv</code> 커맨드를 실행하면 가상 환경이 만들어집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv --python <span class=\"token number\">3.7</span>\nCreating a virtualenv <span class=\"token keyword\">for</span> this project…\nPipfile: /Users/dale/learn/learn-python/Pipfile\nUsing /Users/dale/.pyenv/versions/3.7.6/bin/python3 <span class=\"token punctuation\">(</span><span class=\"token number\">3.7</span>.6<span class=\"token punctuation\">)</span> to create virtualenv…\n⠋ Creating virtual environment<span class=\"token punctuation\">..</span>.Already using interpreter /Users/dale/.pyenv/versions/3.7.6/bin/python3\nUsing base prefix <span class=\"token string\">'/Users/dale/.pyenv/versions/3.7.6'</span>\nNew python executable <span class=\"token keyword\">in</span> /Users/dale/.local/share/virtualenvs/learn-python-XBV2stdv/bin/python3\nAlso creating executable <span class=\"token keyword\">in</span> /Users/dale/.local/share/virtualenvs/learn-python-XBV2stdv/bin/python\nInstalling setuptools, pip, wheel<span class=\"token punctuation\">..</span>.\ndone.\nRunning virtualenv with interpreter /Users/dale/.pyenv/versions/3.7.6/bin/python3\n\n✔ Successfully created virtual environment<span class=\"token operator\">!</span>\nVirtualenv location: /Users/dale/.local/share/virtualenvs/learn-python-XBV2stdv</code></pre></div>\n<p>뿐만 아니라 프로젝트 디렉토리에 <code>Pipfile</code>이 생성된 것을 보실 수 있으실 겁니다.\n이 <code>Pipfile</code> 파일이 <code>pipenv</code>에서 가장 핵심이 되고 중요한 부분인데요.\n이 파일에는 마치 자바스크립트의 <code>package.json</code>또는 자바의 <code>pom.xml</code>처럼 프로젝트의 메타 정보가 저장됩니다.</p>\n<ul>\n<li>Pipfile</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">source</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"pypi\"</span>\n<span class=\"token key property\">url</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://pypi.org/simple\"</span>\n<span class=\"token key property\">verify_ssl</span> <span class=\"token punctuation\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dev-packages</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">packages</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">requires</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">python_version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"3.7\"</span></code></pre></div>\n<p><code>[requires]</code> 항목에 가상 환경을 생성할 때 지정했던 파이썬 버전이 명시되어 있음을 알 수 있습니다.</p>\n<p>참고로 다음 커맨드를 통해 해당 프로젝트에서 사용하는 가상 환경과 파이썬 인터프리터의 정확한 위치를 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv --venv\n/Users/dale/.local/share/virtualenvs/learn-python-XBV2stdv\n$ pipenv --py\n/Users/dale/.local/share/virtualenvs/learn-python-XBV2stdv/bin/python</code></pre></div>\n<h2 id=\"파이썬-실행\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%8B%A4%ED%96%89\" aria-label=\"파이썬 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬 실행</h2>\n<p>프로젝트의 셋업된 파이썬 인터프리터는 <code>pipenv run</code> 커맨드를 이용해서 간단하게 실행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv run python\nPython <span class=\"token number\">3.7</span>.6 <span class=\"token punctuation\">(</span>default, Jan <span class=\"token number\">11</span> <span class=\"token number\">2020</span>, <span class=\"token number\">16</span>:42:53<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>Clang <span class=\"token number\">11.0</span>.0 <span class=\"token punctuation\">(</span>clang-1100.0.33.16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> on darwin\nType <span class=\"token string\">\"help\"</span>, <span class=\"token string\">\"copyright\"</span>, <span class=\"token string\">\"credits\"</span> or <span class=\"token string\">\"license\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> sys\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sys.executable\n<span class=\"token string\">'/Users/dale/.local/share/virtualenvs/learn-python-XBV2stdv/bin/python'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"가상-환경-사용\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%EC%82%AC%EC%9A%A9\" aria-label=\"가상 환경 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 환경 사용</h2>\n<p><code>venv</code>나 <code>virtualenv</code>을 사용하는 것과 마찬가지 방식으로 터미널에서 가상 환경을 활성화할 수 있습니다.\n<code>pipenv shell</code> 커맨드를 날리면, 쉘 프로프트 앞에 <code>(프로젝트 폴더명)</code>이 붙으면서 가상 환경이 활성화될 것입니다.\nwhich 커맨드를 통해 어떤 파이썬 인터프리터가 사용되는지 확인보면 가상 환경의 파이썬이 사용되고 있음을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv shell\nLaunching subshell <span class=\"token keyword\">in</span> virtual environment…\n <span class=\"token builtin class-name\">.</span> /Users/dale/.local/share/virtualenvs/learn-python-XBV2stdv/bin/activate\n<span class=\"token punctuation\">(</span>learn-python<span class=\"token punctuation\">)</span> $ <span class=\"token function\">which</span> python\n/Users/dale/.local/share/virtualenvs/learn-python-XBV2stdv/bin/python</code></pre></div>\n<p>가상 환경에을 비활성화하려면 <code>exit</code> 명령어만 날려주면 됩니다.\n가상 환경에서 빠져나오면 다시 원래대로 운영체제의 기본 파이썬 인터프리터를 사용하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>learn-python<span class=\"token punctuation\">)</span> $ <span class=\"token builtin class-name\">exit</span>\n$ <span class=\"token function\">which</span> python\n/Users/dale/.pyenv/shims/python</code></pre></div>\n<blockquote>\n<p>파이썬 가상 환경에 대해산 자세한 설명은 <a href=\"/python-venv/\">파이썬에서 venv로 가상 환경 사용하기</a>을 참고 바랍니다.</p>\n</blockquote>\n<p>혹시 어떤 연유로 가상 환경을 아예 제거해버리고 싶다면 <code>--rm</code> 옵션을 붙여서 <code>pipenv</code>를 실행하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv --rm\nRemoving virtualenv <span class=\"token punctuation\">(</span>/Users/dale/.local/share/virtualenvs/learn-python-XBV2stdv<span class=\"token punctuation\">)</span>…</code></pre></div>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<p>이제 아무 패키지나 하나를 설치해보도록 하겠습니다.\n저는 <code>requests</code>라는 매우 유명한 패키지를 설치해보게습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv <span class=\"token function\">install</span> requests\nInstalling requests…\nAdding requests to Pipfile<span class=\"token string\">'s [packages]…\n✔ Installation Succeeded\nPipfile.lock not found, creating…\nLocking [dev-packages] dependencies…\nLocking [packages] dependencies…\n✔ Success!\nUpdated Pipfile.lock (444a6d)!\nInstalling dependencies from Pipfile.lock (444a6d)…\n  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 5/5 — 00:00:00\nTo activate this project'</span>s virtualenv, run pipenv shell.\nAlternatively, run a <span class=\"token builtin class-name\">command</span> inside the virtualenv with pipenv run.</code></pre></div>\n<p>패키지가 설치가 완료되면 <code>Pipfile</code> 파일의 <code>[packages]</code> 항목에 설치된 패키지가 명시됩니다.</p>\n<ul>\n<li>Pipfile</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">packages</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">requests</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"*\"</span></code></pre></div>\n<p>뿐만 아니라 <code>Pipfile.lock</code> 피일도 생성되어 있는 것을 보실 수 있으실텐데요.\n이 파일은 <code>pipenv</code>가 설치된 패키지의 버전과 그 패키지가 의존하는 다른 패키지들의 정확한 버전을 기억하기 위해서 자체적으로 사용한는 파일입니다.\n따라서 우리가 직접 수정할 일은 없으며, 수정해서도 안 됩니다.\n이렇게 <code>pipenv</code>는 <code>Pipfile.lock</code>이라는 패키지 잠금 파일을 사용해서 <code>Pipfile</code> 파일에 정확한 버전이 명시되어 있지않더라도 항상 동일한 버전의 패키지를 설치할 수 있도록 해줍니다.</p>\n<h2 id=\"개발용-패키지-설치\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%EC%9A%A9-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"개발용 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발용 패키지 설치</h2>\n<p><code>pipenv</code>을 사용하면 애플리케이션 실행에 필요한 일단 패키지와 개발에만 필요한 패키지를 명확히 구분해서 설치할 수 있습니다.\n예를 들어, 단위 테스트를 할 때만 사용되는 <code>pytest</code> 패키지의 경우 다음과 같이 <code>--dev</code> 옵션을 줘서 개발 의존성(dev dependency)으로 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv <span class=\"token function\">install</span> pytest --dev\nInstalling pytest…\nAdding pytest to Pipfile's <span class=\"token punctuation\">[</span>dev-packages<span class=\"token punctuation\">]</span>…\n✔ Installation Succeeded\nPipfile.lock <span class=\"token punctuation\">(</span>26cdc5<span class=\"token punctuation\">)</span> out of date, updating to <span class=\"token punctuation\">(</span>444a6d<span class=\"token punctuation\">)</span>…\nLocking <span class=\"token punctuation\">[</span>dev-packages<span class=\"token punctuation\">]</span> dependencies…\n✔ Success<span class=\"token operator\">!</span>\nLocking <span class=\"token punctuation\">[</span>packages<span class=\"token punctuation\">]</span> dependencies…\n✔ Success<span class=\"token operator\">!</span>\nUpdated Pipfile.lock <span class=\"token punctuation\">(</span>26cdc5<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\nInstalling dependencies from Pipfile.lock <span class=\"token punctuation\">(</span>26cdc5<span class=\"token punctuation\">)</span>…\n  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ <span class=\"token number\">16</span>/16 — <span class=\"token number\">0</span></code></pre></div>\n<p>패키지의 설치가 끝나면 <code>Pipfile</code> 파일의 <code>[dev-packages]</code> 항목에 <code>pytest</code>가 추가된 것을 볼 수 있습니다.</p>\n<ul>\n<li>Pipfile</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">dev-packages</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">pytest</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"*\"</span></code></pre></div>\n<h2 id=\"모든-패키지-한-번에-설치\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%A0-%ED%8C%A8%ED%82%A4%EC%A7%80-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%84%A4%EC%B9%98\" aria-label=\"모든 패키지 한 번에 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모든 패키지 한 번에 설치</h2>\n<p><code>pipenv</code>는 협업 프로젝트에서 여러 개발자들이 함께 일할 때 더 빛을 발합니다.\n왜냐하면, <code>Pipfile</code> 파일과 <code>Pipfile.lock</code> 파일만 있으면 누구나 동일한 가상 환경을 구성하고 동일한 버전의 패키지를 설치할 수 있기 때문입니다.\n즉, 프로젝트 내 모든 개발자들은 Git 저장소에 올려둔 <code>Pipfile</code> 파일과 <code>Pipfile.lock</code> 파일은 내려받은 후에 <code>pipenv install</code> 커맨드 하나로 모든 패키지를 한 방에 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv <span class=\"token function\">install</span>\nInstalling dependencies from Pipfile.lock <span class=\"token punctuation\">(</span>26cdc5<span class=\"token punctuation\">)</span>…\n  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ <span class=\"token number\">5</span>/5 — 00:00:00\nTo activate this project's virtualenv, run pipenv shell.\nAlternatively, run a <span class=\"token builtin class-name\">command</span> inside the virtualenv with pipenv run.</code></pre></div>\n<p>추가로 개발 의존성으로 명시된 패키지들은 <code>--dev</code> 옵션을 붙여서 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pipenv <span class=\"token function\">install</span> --dev\nInstalling dependencies from Pipfile.lock <span class=\"token punctuation\">(</span>26cdc5<span class=\"token punctuation\">)</span>…\n  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ <span class=\"token number\">16</span>/16 — 00:00:01\nTo activate this project's virtualenv, run pipenv shell.\nAlternatively, run a <span class=\"token builtin class-name\">command</span> inside the virtualenv with pipenv run.</code></pre></div>\n<h2 id=\"그-밖에-유용한-명령어\" style=\"position:relative;\"><a href=\"#%EA%B7%B8-%EB%B0%96%EC%97%90-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"그 밖에 유용한 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 밖에 유용한 명령어</h2>\n<p>지금까지 소개드린 기본적인 커맨드 외에도 <code>pipenv</code>는 몇가지 유용한 명령어를 제공합니다.\n예를 들어, <code>pipenv graph</code> 커맨드를 날리면 프로젝트에 설치된 패키지들을 트리 구조로 시각화하여 보여줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv graph\n<span class=\"token assign-left variable\">pytest</span><span class=\"token operator\">==</span><span class=\"token number\">5.3</span>.4\n  - attrs <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">17.4</span>.0, installed: <span class=\"token number\">19.3</span>.0<span class=\"token punctuation\">]</span>\n  - importlib-metadata <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0.12</span>, installed: <span class=\"token number\">1.4</span>.0<span class=\"token punctuation\">]</span>\n    - zipp <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0.5</span>, installed: <span class=\"token number\">2.0</span>.0<span class=\"token punctuation\">]</span>\n      - more-itertools <span class=\"token punctuation\">[</span>required: Any, installed: <span class=\"token number\">8.1</span>.0<span class=\"token punctuation\">]</span>\n  - more-itertools <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">4.0</span>.0, installed: <span class=\"token number\">8.1</span>.0<span class=\"token punctuation\">]</span>\n  - packaging <span class=\"token punctuation\">[</span>required: Any, installed: <span class=\"token number\">20.0</span><span class=\"token punctuation\">]</span>\n    - pyparsing <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">2.0</span>.2, installed: <span class=\"token number\">2.4</span>.6<span class=\"token punctuation\">]</span>\n    - six <span class=\"token punctuation\">[</span>required: Any, installed: <span class=\"token number\">1.14</span>.0<span class=\"token punctuation\">]</span>\n  - pluggy <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0.12</span>,<span class=\"token operator\">&lt;</span><span class=\"token number\">1.0</span>, installed: <span class=\"token number\">0.13</span>.1<span class=\"token punctuation\">]</span>\n    - importlib-metadata <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0.12</span>, installed: <span class=\"token number\">1.4</span>.0<span class=\"token punctuation\">]</span>\n      - zipp <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0.5</span>, installed: <span class=\"token number\">2.0</span>.0<span class=\"token punctuation\">]</span>\n        - more-itertools <span class=\"token punctuation\">[</span>required: Any, installed: <span class=\"token number\">8.1</span>.0<span class=\"token punctuation\">]</span>\n  - py <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">1.5</span>.0, installed: <span class=\"token number\">1.8</span>.1<span class=\"token punctuation\">]</span>\n  - wcwidth <span class=\"token punctuation\">[</span>required: Any, installed: <span class=\"token number\">0.1</span>.8<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">requests</span><span class=\"token operator\">==</span><span class=\"token number\">2.22</span>.0\n  - certifi <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">2017.4</span>.17, installed: <span class=\"token number\">2019.11</span>.28<span class=\"token punctuation\">]</span>\n  - chardet <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">3.0</span>.2,<span class=\"token operator\">&lt;</span><span class=\"token number\">3.1</span>.0, installed: <span class=\"token number\">3.0</span>.4<span class=\"token punctuation\">]</span>\n  - idna <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">2.5</span>,<span class=\"token operator\">&lt;</span><span class=\"token number\">2.9</span>, installed: <span class=\"token number\">2.8</span><span class=\"token punctuation\">]</span>\n  - urllib3 <span class=\"token punctuation\">[</span>required: <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">1.21</span>.1,<span class=\"token operator\">&lt;</span><span class=\"token number\">1.26</span>,<span class=\"token operator\">!=</span><span class=\"token number\">1.25</span>.1,<span class=\"token operator\">!=</span><span class=\"token number\">1.25</span>.0, installed: <span class=\"token number\">1.25</span>.8<span class=\"token punctuation\">]</span></code></pre></div>\n<p>또한, <code>pipenv check</code> 커맨드를 통해 보안 취약점이 있는 패키지가 설치되어 있는지도 간단하게 체크가 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pipenv check\nChecking PEP <span class=\"token number\">508</span> requirements…\nPassed<span class=\"token operator\">!</span>\nChecking installed package safety…\nAll good<span class=\"token operator\">!</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>아직 초안 상태인 <a href=\"https://www.python.org/dev/peps/pep-0582/\">PEP 582</a>을 보면 파이썬에서도 다른 언어처럼 로컬 패키지 디렉토리를 지원하는 방안이 검토되고 있습니다.\n파이썬의 기본 패키지 관리 도구인 <code>pip</code>에서 이러한 기능을 지원되면 금상첨화이겠지만, <code>pipenv</code> 패키지 매니저를 사용하면 다른 언어 못지않게 효과적으로 프로젝트를 관리할 수 있으니 잘 활용하셨으면 좋겠습니다.</p>","timeToRead":7,"fields":{"slug":"/python-pipenv/","tags":["Python","파이썬","pipenv","venv"]},"frontmatter":{"title":"pipenv로 패키지 관리하기","date":"Jan 22, 2020"}},"next":{"fields":{"slug":"/python-black/"},"frontmatter":{"title":"Black으로 파이썬 코드 스타일 통일하기"}}}}}