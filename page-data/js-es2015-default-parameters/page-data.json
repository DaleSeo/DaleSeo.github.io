{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-es2015-default-parameters/","result":{"pageContext":{"previous":{"fields":{"slug":"/java-sorted-set/"},"frontmatter":{"title":"[자바] SortedSet 사용법"}},"node":{"html":"<blockquote>\n<p>ES2015는 자바스크립트의 근간이 되는 함수에도 여러가지 변화를 가져왔습니다.\n이번 포스트에서는 그 중 기본 매개변수(Default Parameters)에 대해서 알아보도록 하겠습니다.</p>\n</blockquote>\n<h2 id=\"매개변수를-무시한-함수-호출\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EB%AC%B4%EC%8B%9C%ED%95%9C-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C\" aria-label=\"매개변수를 무시한 함수 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매개변수를 무시한 함수 호출</h2>\n<p>다음과 같이 사용자의 아이디의 배열을 매개변수를 받아서 사용자의 상세 정보를 돌려주는 함수가 있다고 가정해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ids</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finding\"</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 사용자를 DB 또는 API를 통해 찾아옴</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래와 같이 정상적인 배열을 넘기면 함수는 예상하는 것처럼 잘 돌아갑니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">103</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">finding <span class=\"token number\">3</span> <span class=\"token function\">users</span>\nfinding <span class=\"token number\">0</span> <span class=\"token function\">users</span></code></pre></div>\n<p>하지만 다음과 같이 인자 없이도 위 함수를 호출하면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>문법이 엄격한 다른 언어라면 분명히 함수 호출이 불가능했을텐데요.\n자바스크립트에서는 매개변수보다 부족한 인자를 넘겨도 함수 호출이 가능합니다.</p>\n<p>이때 인자가 넘어오지 않은 매개변수는 모두 <code>undefined</code>를 할당받습니다.\n그리고 <code>undefined</code>는 배열이 아니기 때문에 <code>length</code> 속성을 가지고 있지 않고, 그래서 다음과 같은 오류가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">TypeError: Cannot <span class=\"token builtin class-name\">read</span> property <span class=\"token string\">'length'</span> of undefined</code></pre></div>\n<p>이와 같이 너무나도 너그러운 자바스크립트의 함수 호출 때문에…\n우리는 함수가 호출될 때 매개변수가 제대로 들어올거라고 보장할 수가 없습니다.</p>\n<h2 id=\"인자체크-및-방어로직\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%9E%90%EC%B2%B4%ED%81%AC-%EB%B0%8F-%EB%B0%A9%EC%96%B4%EB%A1%9C%EC%A7%81\" aria-label=\"인자체크 및 방어로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인자체크 및 방어로직</h2>\n<p>위 문제를 해결하는 가장 오래된 관행은 함수 내부에서 비즈니스 로직 도달 전에 인자의 존재여부를 체크하는 것이 었습니다.\n인자가 존재할 경우 그 값을 그대로 비즈니스 로직에서 사용하고, 존재하지 않는 경우에는 매개변수에 디폴트값을 할당하는 방어로직을 삽입하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ids</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ids <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finding\"</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 사용자를 DB 또는 API를 통해 찾아옴</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 방법이 나름 먹히긴 했지만 함수의 매개변수가 늘어날 수록 아쉬운 점들이 생겼습니다.\n함수 내부에서 핵심 비즈니스 로직보다 부수적인 인자 검증 로직이 차지하는 공간이 늘어나면서 코드 가독성이 떨어지고 유지보수가 어려워졌습니다.</p>\n<h2 id=\"es2015에서는-기본-매개변수\" style=\"position:relative;\"><a href=\"#es2015%EC%97%90%EC%84%9C%EB%8A%94-%EA%B8%B0%EB%B3%B8-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\" aria-label=\"es2015에서는 기본 매개변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES2015에서는? 기본 매개변수!</h2>\n<p>기본 매개변수(Default Parameters)라고 불리는 ES2015의 새로운 기능을 이용하여 위 코드를 개선해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finding\"</span><span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 사용자를 DB 또는 API를 통해 찾아옴</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>너무 달라진 부분이 미미해서 차이점을 발견하지 못하시는 분들도 있으실 것 같네요. ㅋ\n바로 함수의 매개변수 뒤에 <code>= []</code>이 추가되었는데요.\n<code>ids</code>의 기본값으로 빈 배열을 할당해준 것이라고 보시면 됩니다.</p>\n<p>이렇게 기본 값이 할당되어 있는 함수 매개변수를 기본 매개변수라고 부릅니다.\n이 기본 값은 해당 매개변수의 인자가 없이 호출되었을 시 뿐만 아니라 명시적으로 <code>undefined</code>가 넘어왔을 때도 사용되어 집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">finding <span class=\"token number\">0</span> <span class=\"token function\">users</span>\nfinding <span class=\"token number\">0</span> <span class=\"token function\">users</span></code></pre></div>\n<p><strong>기본 매개변수를 이용하면 기존에 함수 바디의 최상단에 위치하던 인자체크 및 방어로직을 함수 시그니쳐로 가져올 수가 있습니다.</strong></p>\n<p>이를 통해 함수 내부에는 비지니스 로직만 남게 되어 좀 더 깔끔한 함수 구현을 얻을 수 있게 되었습니다. :)</p>\n<p>다음 포스트에서는 명명된 매개변수(Named Parameters)에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Functions/Default_parameters\">https://developer.mozilla.org/docs/Web/JavaScript/Reference/Functions/Default_parameters</a></p>","timeToRead":3,"fields":{"slug":"/js-es2015-default-parameters/","tags":["JavaScript","자바스크립트","ES6"]},"frontmatter":{"title":"[ES2015] 기본 매개변수 (Default Parameters)","date":"Mar 5, 2017"}},"next":{"fields":{"slug":"/js-es2015-const/"},"frontmatter":{"title":"[ES2015] const로 상수 선언하기"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}