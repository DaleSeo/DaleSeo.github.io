{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/docker-nodejs/","result":{"pageContext":{"previous":{"fields":{"slug":"/dockerfile/"},"frontmatter":{"title":"Dockerfile에서 자주 쓰이는 명령어"}},"node":{"html":"<p>최근에 많은 NodeJS 프로젝트들이 Docker를 이용해서 개발되고 있습니다.<br>이번 포스트에서는 NodeJS로 간단한 Express 서버 애플리케이션을 작성해보고, Docker를 이용해서 이 애플리케이션을 어떻게 컨테이너화(containerized) 할 수 있는지에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"실습-프로젝트-환경-구성\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"실습 프로젝트 환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 프로젝트 환경 구성</h2>\n<p>원하는 위치에 디렉토리를 생성하고, 그 안에 <code>package.json</code> 파일을 생성합니다. (컴퓨터에 NodeJS가 설치가 안 되어 있다면 먼저 NodeJS를 <a href=\"https://nodejs.org/ko/download/\">다운로드</a> 받아 설치해야 합니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> app <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> app\n$ <span class=\"token function\">npm</span> i -y\nWrote to /Users/dale/temp/app/package.json:\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"app\"</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0.0\"</span>,\n  <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"main\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"index.js\"</span>,\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"keywords\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,\n  <span class=\"token string\">\"author\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"license\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ISC\"</span>\n<span class=\"token punctuation\">}</span>\n$ <span class=\"token function\">ls</span>\npackage.json</code></pre></div>\n<p>그 다음, npm을 통해 <a href=\"https://expressjs.com\">Express</a> 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i express\n<span class=\"token function\">npm</span> notice created a lockfile as package-lock.json. You should commit this file.\n<span class=\"token function\">npm</span> WARN app@1.0.0 No description\n<span class=\"token function\">npm</span> WARN app@1.0.0 No repository field.\n\n+ express@4.17.1\nadded <span class=\"token number\">50</span> packages from <span class=\"token number\">37</span> contributors and audited <span class=\"token number\">126</span> packages <span class=\"token keyword\">in</span> <span class=\"token number\">1</span>.787s\nfound <span class=\"token number\">0</span> vulnerabilities</code></pre></div>\n<h2 id=\"서버-애플리케이션-작성\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%9E%91%EC%84%B1\" aria-label=\"서버 애플리케이션 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 애플리케이션 작성</h2>\n<p><code>index.js</code> 파일을 생성하고, 그 안에 다음과 같이 어떤 요청이 들어오든 <code>Hello World!</code>를 응답하는 서버 코드를 작성합니다.</p>\n<ul>\n<li>index.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Example app listening at http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 <code>node</code>로 서버를 실행하기 위한 <code>npm start</code> 스크립트를 <code>package.json</code> 파일에 추가합니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// 생략</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node .\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 생략</span></code></pre></div>\n<p>그 다음, <code>index.js</code> 파일을 실행하여, Express 서버 애플리케이션을 실행해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> start\n\n<span class=\"token operator\">></span> app@1.0.0 start /Users/dale/temp/app\n<span class=\"token operator\">></span> node <span class=\"token builtin class-name\">.</span>\n\nExample app listening at http://localhost:3000</code></pre></div>\n<p>브라우저 또는 새 터미널 탭에서 <code>http://localhost:3000</code>에 접속을 하면 다음과 같이 예상했던 응답 결과를 볼 수 있으실 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:3000\nHello World<span class=\"token operator\">!</span></code></pre></div>\n<h2 id=\"dockerfile-작성\" style=\"position:relative;\"><a href=\"#dockerfile-%EC%9E%91%EC%84%B1\" aria-label=\"dockerfile 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile 작성</h2>\n<p>이제부터 Docker를 이용한 개발 환경을 구축해보도록 하겠습니다.<br>가장 먼저 할 일은 지금까지 작성한 서버 애플리케이션에 대한 이미지(image)를 뜨기 위한 <code>Dockerfile</code>을 작성하는 것입니다.</p>\n<p>container image에는 애플리케이션 코드 뿐만 아니라 애플리케이션이 필요한 환경 구성 및 실행에 필요한 작업 내용이 포함되어야 합니다.<br>Docker는 <code>Dockerfile</code>이 담고 있는 명령어를 순차적으로 실행하면서 image를 빌드(build)합니다.</p>\n<p>예를 들어, 지금까지 Docker 없이 어떻게 개발 작업을 진행했는지 돌이켜보겠습니다.</p>\n<ol>\n<li>NodeJS 설치</li>\n<li>디렉토리 생성</li>\n<li><code>package.json</code> 파일 생성</li>\n<li>Express 패키지 설치</li>\n<li>코드 작성</li>\n<li>애플리케이션 구동</li>\n</ol>\n<p>이렇게 우리가 하나씩 직접했던 작업을 <code>Dockefile</code>에 그대로 녹인다고 생각하면서, 필요한 명령어를 나열해보면 다음과 같습니다.</p>\n<ul>\n<li>Dockefile</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>12<span class=\"token punctuation\">-</span>alpine\n<span class=\"token keyword\">WORKDIR</span> /app\n<span class=\"token keyword\">COPY</span> package*.json ./\n<span class=\"token keyword\">RUN</span> npm install <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>silent\n<span class=\"token keyword\">COPY</span> . .\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"npm\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">EXPOSE</span> 3000</code></pre></div>\n<p>Docker image의 파일 시스템의 <code>node_modules</code> 디렉토리가 현재 로컬 작업 디렉토리의 <code>node_modules</code> 디렉토리로 덮어써지지 않도록 <code>.dockerignore</code> 파일도 추가해줍니다.</p>\n<ul>\n<li>.dockerignore</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node_modules\nnpm-debug.log</code></pre></div>\n<h2 id=\"image-build\" style=\"position:relative;\"><a href=\"#image-build\" aria-label=\"image build permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Image Build</h2>\n<p>위에서 작성한 <code>Dockerfile</code>를 토대로, container image를 Docker로 빌드(build)합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build -t app <span class=\"token builtin class-name\">.</span>\nSending build context to Docker daemon  <span class=\"token number\">2</span>.004MB\nStep <span class=\"token number\">1</span>/7 <span class=\"token builtin class-name\">:</span> FROM node:12-alpine\n ---<span class=\"token operator\">></span> f77abbe89ac1\nStep <span class=\"token number\">2</span>/7 <span class=\"token builtin class-name\">:</span> WORKDIR /app\n ---<span class=\"token operator\">></span> d35e95c03571\nStep <span class=\"token number\">3</span>/7 <span class=\"token builtin class-name\">:</span> COPY package*.json ./\n ---<span class=\"token operator\">></span> 7e77d6876704\nStep <span class=\"token number\">4</span>/7 <span class=\"token builtin class-name\">:</span> RUN <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --silent\n ---<span class=\"token operator\">></span> Running <span class=\"token keyword\">in</span> 7453abb5fdc0\nadded <span class=\"token number\">50</span> packages from <span class=\"token number\">37</span> contributors and audited <span class=\"token number\">126</span> packages <span class=\"token keyword\">in</span> <span class=\"token number\">1</span>.206s\nfound <span class=\"token number\">0</span> vulnerabilities\n\nRemoving intermediate container 7453abb5fdc0\n ---<span class=\"token operator\">></span> 454302f786e2\nStep <span class=\"token number\">5</span>/7 <span class=\"token builtin class-name\">:</span> COPY <span class=\"token builtin class-name\">.</span> <span class=\"token builtin class-name\">.</span>\n ---<span class=\"token operator\">></span> 19c3d2fe74fe\nStep <span class=\"token number\">6</span>/7 <span class=\"token builtin class-name\">:</span> CMD <span class=\"token punctuation\">[</span> <span class=\"token string\">\"npm\"</span>, <span class=\"token string\">\"start\"</span> <span class=\"token punctuation\">]</span>\n ---<span class=\"token operator\">></span> Running <span class=\"token keyword\">in</span> e5e9051ceb31\nRemoving intermediate container e5e9051ceb31\n ---<span class=\"token operator\">></span> a00e9754efe5\nStep <span class=\"token number\">7</span>/7 <span class=\"token builtin class-name\">:</span> EXPOSE <span class=\"token number\">3000</span>\n ---<span class=\"token operator\">></span> Running <span class=\"token keyword\">in</span> c6245ff2c051\nRemoving intermediate container c6245ff2c051\n ---<span class=\"token operator\">></span> 72d0694caa8a\nSuccessfully built 72d0694caa8a\nSuccessfully tagged app:latest</code></pre></div>\n<p>방금 빌드한 이미지는 다음과 같이 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker images\nREPOSITORY                TAG                 IMAGE ID            CREATED              SIZE\napp                       latest              72d0694caa8a        About a minute ago   <span class=\"token number\">92</span>.1MB\nnode                      <span class=\"token number\">12</span>-alpine           f77abbe89ac1        <span class=\"token number\">12</span> days ago          <span class=\"token number\">88</span>.1MB</code></pre></div>\n<h2 id=\"container-실행\" style=\"position:relative;\"><a href=\"#container-%EC%8B%A4%ED%96%89\" aria-label=\"container 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Container 실행</h2>\n<p>이제 빌드된 image를 Docker container로 실행해볼 차례입니다.<br>host의 포트 <code>5000</code>로 들어오는 트래픽을 container의 포트 <code>3000</code>으로 포워딩(forwarding)시키겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -p <span class=\"token number\">5000</span>:3000 app\n\n<span class=\"token operator\">></span> app@1.0.0 start /Users/dale/temp/app\n<span class=\"token operator\">></span> node <span class=\"token builtin class-name\">.</span>\n\nExample app listening at http://localhost:3000</code></pre></div>\n<p>위에서 로컬 디렉토리에서 실행했을 때와 동일한 로그가 보일 것입니다.</p>\n<p>마찬가지로 브라우저 또는 새 터미널 탭에서 <code>http://localhost:5000</code>에 접속을 하면 동일한 응답 결과를 볼 수 있으실 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:5000\nHello World<span class=\"token operator\">!</span></code></pre></div>\n<p>여기서 주의할 점은 <code>http://localhost:3000</code>가 아닌 <code>http://localhost:5000</code>에 접속을 해야 한다는 점입니다.<br><code>3000</code>은 container의 내부 네트워크에서 사용되는 포트이고, 지금은 host에서 접속하는 상황이기 때문에 포워딩된 포트 <code>5000</code>으로 접속해야 합니다.</p>\n<h2 id=\"서버-애플리케이션-수정\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%88%98%EC%A0%95\" aria-label=\"서버 애플리케이션 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 애플리케이션 수정</h2>\n<p><code>Hello World!</code> 대신에 <code>Hello NodeJS!</code>를 응답하도록 서버 애플리케이션을 수정해보겠습니다.</p>\n<ul>\n<li>index.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 생략</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello NodeJS!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 생략</span></code></pre></div>\n<p>로컬에서 아직 서버가 떠 있다면 중단시키고 다시 서버를 띄우면 변경된 코드가 동작할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node <span class=\"token builtin class-name\">.</span>\nExample app listening at http://localhost:3000</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:3000\nHello NodeJS<span class=\"token operator\">!</span></code></pre></div>\n<p>이렇게 코드를 변경할 때 마다 서버를 재구동하면 개발이 매우 불편할 것입니다.<br>따라서, <a href=\"https://nodemon.io\">Nodemon</a>을 설치하여 코드 변경을 감지하여 자동으로 서바가 재구동되도록 셋업을 하겠습니다.</p>\n<p>먼저, npm으로 <code>nodemon</code> 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D nodemon</code></pre></div>\n<p>그리고 <code>node</code> 대신에 <code>nodemon</code>으로 서버를 실행하기 위해서 <code>npm start</code> 스크립트를 수정합니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// 생략</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// </span><span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node .\"</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon .\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 생략</span></code></pre></div>\n<p>다시 서버를 구동하고, 코드를 수정하면 바로 서버가 재구동되어 변경 사항이 반영되는 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> start\n\n<span class=\"token operator\">></span> app@1.0.0 start /Users/dale/temp/app\n<span class=\"token operator\">></span> nodemon <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> <span class=\"token number\">2.0</span>.2\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> to restart at any time, enter <span class=\"token variable\"><span class=\"token variable\">`</span>rs<span class=\"token variable\">`</span></span>\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching dir<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: *.*\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching extensions: js,mjs,json\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> starting <span class=\"token variable\"><span class=\"token variable\">`</span>node <span class=\"token builtin class-name\">.</span><span class=\"token variable\">`</span></span>\nExample app listening at http://localhost:3000\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> restarting due to changes<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> starting <span class=\"token variable\"><span class=\"token variable\">`</span>node <span class=\"token builtin class-name\">.</span><span class=\"token variable\">`</span></span>\nExample app listening at http://localhost:3000</code></pre></div>\n<h2 id=\"image-re-build\" style=\"position:relative;\"><a href=\"#image-re-build\" aria-label=\"image re build permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Image Re-build</h2>\n<p>패키지를 추가로 설치하고, 애플리케이션 코드가 변경이 되었기 때문에 container image를 다시 빌드해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build -t app <span class=\"token builtin class-name\">.</span>\nSending build context to Docker daemon  <span class=\"token number\">4</span>.101MB\nStep <span class=\"token number\">1</span>/7 <span class=\"token builtin class-name\">:</span> FROM node:12-alpine\n ---<span class=\"token operator\">></span> f77abbe89ac1\nStep <span class=\"token number\">2</span>/7 <span class=\"token builtin class-name\">:</span> WORKDIR /app\n ---<span class=\"token operator\">></span> Using cache\n ---<span class=\"token operator\">></span> d35e95c03571\nStep <span class=\"token number\">3</span>/7 <span class=\"token builtin class-name\">:</span> COPY package*.json ./\n ---<span class=\"token operator\">></span> 19a62b523c51\nStep <span class=\"token number\">4</span>/7 <span class=\"token builtin class-name\">:</span> RUN <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --silent\n ---<span class=\"token operator\">></span> Running <span class=\"token keyword\">in</span> c065e658a150\nLove nodemon? You can now support the project via the <span class=\"token function\">open</span> collective:\n <span class=\"token operator\">></span> https://opencollective.com/nodemon/donate\n\nadded <span class=\"token number\">152</span> packages from <span class=\"token number\">81</span> contributors and audited <span class=\"token number\">267</span> packages <span class=\"token keyword\">in</span> <span class=\"token number\">7</span>.603s\n\n<span class=\"token number\">1</span> package is looking <span class=\"token keyword\">for</span> funding\n  run <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> fund<span class=\"token variable\">`</span></span> <span class=\"token keyword\">for</span> details\n\nfound <span class=\"token number\">0</span> vulnerabilities\n\nRemoving intermediate container c065e658a150\n ---<span class=\"token operator\">></span> ce1d94d9a42c\nStep <span class=\"token number\">5</span>/7 <span class=\"token builtin class-name\">:</span> COPY <span class=\"token builtin class-name\">.</span> <span class=\"token builtin class-name\">.</span>\n ---<span class=\"token operator\">></span> 1c6a54516b65\nStep <span class=\"token number\">6</span>/7 <span class=\"token builtin class-name\">:</span> CMD <span class=\"token punctuation\">[</span> <span class=\"token string\">\"npm\"</span>, <span class=\"token string\">\"start\"</span> <span class=\"token punctuation\">]</span>\n ---<span class=\"token operator\">></span> Running <span class=\"token keyword\">in</span> 4fe914c9f3f7\nRemoving intermediate container 4fe914c9f3f7\n ---<span class=\"token operator\">></span> e34bbe1f6f29\nStep <span class=\"token number\">7</span>/7 <span class=\"token builtin class-name\">:</span> EXPOSE <span class=\"token number\">3000</span>\n ---<span class=\"token operator\">></span> Running <span class=\"token keyword\">in</span> 11ed3ee81bc3\nRemoving intermediate container 11ed3ee81bc3\n ---<span class=\"token operator\">></span> 25aa20b5aa5d\nSuccessfully built 25aa20b5aa5d\nSuccessfully tagged app:latest</code></pre></div>\n<p>이제 재빌드된 image를 Docker container로 다시 실행해보면 마찬가지로 Nodemon이 애플리케이션을 실행해주는 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -p <span class=\"token number\">5000</span>:3000 app\n\n<span class=\"token operator\">></span> app@1.0.0 start /app\n<span class=\"token operator\">></span> nodemon <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> <span class=\"token number\">2.0</span>.2\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> to restart at any time, enter <span class=\"token variable\"><span class=\"token variable\">`</span>rs<span class=\"token variable\">`</span></span>\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching dir<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: *.*\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching extensions: js,mjs,json\n<span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> starting <span class=\"token variable\"><span class=\"token variable\">`</span>node <span class=\"token builtin class-name\">.</span><span class=\"token variable\">`</span></span>\nExample app listening at http://localhost:3000</code></pre></div>\n<p><code>http://localhost:5000</code>에 접속해보면 변경된 응답을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:5000\nHello NodeJS<span class=\"token operator\">!</span></code></pre></div>\n<h2 id=\"volume-mount\" style=\"position:relative;\"><a href=\"#volume-mount\" aria-label=\"volume mount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Volume Mount</h2>\n<p>여기서 Docker로 개발을 진행하는데 한 가지 큰 문제점이 발생합니다.<br>바로, 아무리 로컬(host 컴퓨터)에서 코드를 수정해도, container 내부에서 돌아기는 Nodemon은 이 변경 사항을 감지하지 못한다는 것입니다.<br>왜냐하면, container는 host로 부터 격리된 파일 시스템을 가지기 때문에, image 빌드 당시의 코드 본사본을 계속 쳐다보고 있기 때문입니다.</p>\n<p>이 문제를 해결하기 위해서는 container 내부에서 돌아가는 애플리케이션도 로컬 작업 디렉토리를 바라볼 수 있게 volume을 마운트(mount)해줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -p <span class=\"token number\">5000</span>:3000 -v <span class=\"token environment constant\">$PWD</span>:/app app</code></pre></div>\n<p>자 이제, 로컬에서 코드를 수정하면 container에서 돌아가는 Nodemon이 변경 사항을 감지하고 서버를 재구동해줄 것입니다.<br>저는 <code>Hello NodeJS!</code> 대신에 <code>Hello Docker!</code>를 응답하도록 서버 애플리케이션을 수정해보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:5000\nHello Docker<span class=\"token operator\">!</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 NodeJS로 작성한 간단한 Express 서버 애플리케이션을 container image로 빌드하여 Docker container 안에서 실행하는 방법에 대해서 살펴보았습니다. 또한, 로컬에서 수정한 코드를 container 안 에서 돌아가는 애플리케이션에 자연스럽게 반영하는 방법에 대해서도 알아보았습니다.</p>\n<p>이렇게 개발 환경을 컨테이너화(containerization)해놓고 해당 프로젝트를 <code>Dockerfile</code> 함께 Github와 같은 코드 저장소에 올려두면 개발자들은 Docker만 설치하면 바로 애플리케이션을 띄우고 개발을 시작할 수 있습니다.<br>왜냐하면, NodeJS 런타임 설치부터 Express, Nodemon 패키지 설치가 iamge가 떠져서 container 안에서 이미 모두 갖춰지 있기 때문입니다.<br>또한 모든 개발자들이 동일한 개발 환경에서 작업하는 것을 보장받을 수 있어서 개개인 간의 미묘한 세팅 차이로 인한 황당한 상황도 피할 수 있습니다.</p>","timeToRead":8,"fields":{"slug":"/docker-nodejs/","tags":["Docker","도커","container","컨테이너","image","이미지","Dockerfile","NodeJS","Express"]},"frontmatter":{"title":"Docker를 이용한 NodeJS 개발","date":"Apr 5, 2020"}},"next":{"fields":{"slug":"/docker/"},"frontmatter":{"title":"Docker 시작하기 (개념/설치)"}}}}}