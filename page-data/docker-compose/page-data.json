{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/docker-compose/","result":{"pageContext":{"previous":null,"node":{"html":"<p>Docker Compose는 여러 개의 컨테이너(container)로 구성된 애플리케이션을 관리하기 위한 간단한 오케스트레이션(Orchestration) 도구입니다.<br>\n이번 포스트에서는 Compose 애플리케이션을 터미널에서 제어하기 위해 사용되는 Docker Compose 커맨드에서 대해서 알아보겠습니다.</p>\n<h2 id=\"-f-옵션\" style=\"position:relative;\"><a href=\"#-f-%EC%98%B5%EC%85%98\" aria-label=\" f 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>-f 옵션</h2>\n<p>Docker Compose는 기본적으로 커맨드가 실행하는 디렉토리에 있는 <code>docker-compose.yml</code> 또는 <code>docker-compose.yaml</code>를 설정 파일로 사용합니다.<br>\n다른 이름이나 경로의 파일을 Docker Compose 설정 파일로 사용하고 싶다면 <code>-f</code> 옵션으로 명시를 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose -f docker-compose-local.yml up</code></pre></div>\n<p><code>-f</code> 옵션은 여러 개의 설정 파일을 사용할 때도 사용할 수 있습니다.<br>\n이 때는 나중에 나오는 설정이 앞에 나오는 설정보다 우선하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose -f docker-compose.yml -f docker-compose-test.yml up</code></pre></div>\n<h2 id=\"up\" style=\"position:relative;\"><a href=\"#up\" aria-label=\"up permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>up</h2>\n<p><code>docker-compose up</code> 커맨드는 아마도 Docker Compose에서 가장 자주 사용되는 커맨드일 텐데요.<br>\nDocker Compose에 정의되어 있는 모든 서비스 컨테이너를 한 번에 생성하고 실행하기 위해서 사용합니다.</p>\n<p>보통 <code>-d</code> 옵션을 사용하여 백그라운드에서 컨테이너를 띄우는 경우가 많습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose up -d\nCreating network <span class=\"token string\">\"django-app_default\"</span> with the default driver\nCreating django-app_db_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating django-app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\n$</code></pre></div>\n<p><code>-d</code> 옵션을 사용하지 않으면 현재 터미널이 컨테이너의 로그가 출력되고 <code>Ctrl + C</code>를 눌러서 탈출하는 순간 컨테이너가 모두 정지되기 때문입니다.</p>\n<h2 id=\"down\" style=\"position:relative;\"><a href=\"#down\" aria-label=\"down permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>down</h2>\n<p><code>docker-compose down</code> 커맨드는 <code>docker-compose up</code> 커맨드와 정반대의 동작을 합니다.<br>\nDocker Compose에 정의되어 있는 모든 서비스 컨테이너를 한 번에 정지시키고 삭제합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose down\nStopping django-app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping django-app_db_1  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving django-app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving django-app_db_1  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving network django-app_default</code></pre></div>\n<h2 id=\"start\" style=\"position:relative;\"><a href=\"#start\" aria-label=\"start permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>start</h2>\n<p><code>docker-compose start</code> 커맨드는 내려가 있는 있는 특정 서비스 컨테이너를 올리기 위해서 사용합니다.<br>\n대부분의 경우에는 <code>docker-compose up</code> 커맨드를 사용해도 내려간 서비스를 알아서 올려주므로 무방합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose start web\nStarting web <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span></code></pre></div>\n<h2 id=\"stop\" style=\"position:relative;\"><a href=\"#stop\" aria-label=\"stop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stop</h2>\n<p><code>docker-compose stop</code> 커맨드는 <code>docker-compose start</code> 커맨드와 정반대의 동작을 합니다.<br>\n돌아기고 있는 특정 서비스 컨테이너를 정지시키기 위해서 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose stop web\nStopping django-app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span></code></pre></div>\n<h2 id=\"ps\" style=\"position:relative;\"><a href=\"#ps\" aria-label=\"ps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ps</h2>\n<p><code>docker-compose ps</code> 커맨드는 Docker Compose에 정의되어 있는 모든 서비스 컨테이너 목록을 조회할 때 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose <span class=\"token function\">ps</span>\n      Name                    Command               State           Ports\n----------------------------------------------------------------------------------\ndjango-app_db_1    docker-entrypoint.sh postgres    Up      <span class=\"token number\">5432</span>/tcp\ndjango-app_web_1   python manage.py runserver <span class=\"token punctuation\">..</span>.   Up      <span class=\"token number\">0.0</span>.0.0:8000-<span class=\"token operator\">></span><span class=\"token number\">8000</span>/tcp</code></pre></div>\n<h2 id=\"logs\" style=\"position:relative;\"><a href=\"#logs\" aria-label=\"logs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logs</h2>\n<p><code>docker-compose logs</code> 커맨드는 서비스 컨테이너의 로그를 확인하고 싶을 때 사용하며, 보통 <code>-f</code> 옵션을 붙여서 실시간 로그를 확인합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose logs -f web\nAttaching to django-app_web_1\nweb_1  <span class=\"token operator\">|</span> Watching <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes with StatReloader\nweb_1  <span class=\"token operator\">|</span> Performing system checks<span class=\"token punctuation\">..</span>.\nweb_1  <span class=\"token operator\">|</span>\nweb_1  <span class=\"token operator\">|</span> System check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span>.\nweb_1  <span class=\"token operator\">|</span>\nweb_1  <span class=\"token operator\">|</span> May <span class=\"token number\">30</span>, <span class=\"token number\">2020</span> - <span class=\"token number\">22</span>:16:29\nweb_1  <span class=\"token operator\">|</span> Django version <span class=\"token number\">3.0</span>.6, using settings <span class=\"token string\">'our_project.settings'</span>\nweb_1  <span class=\"token operator\">|</span> Starting development server at http://0:8000/\nweb_1  <span class=\"token operator\">|</span> Quit the server with CONTROL-C.</code></pre></div>\n<h2 id=\"exec\" style=\"position:relative;\"><a href=\"#exec\" aria-label=\"exec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>exec</h2>\n<p><code>docker-compose exec</code> 커맨드는 실행 중인 서비스 컨테이너를 대상으로 어떤 명령어를 날릴 때 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose <span class=\"token builtin class-name\">exec</span> db psql postgres postgres\npsql <span class=\"token punctuation\">(</span><span class=\"token number\">12.2</span> <span class=\"token punctuation\">(</span>Debian <span class=\"token number\">12.2</span>-2.pgdg100+1<span class=\"token punctuation\">))</span>\nType <span class=\"token string\">\"help\"</span> <span class=\"token keyword\">for</span> help.\n\n<span class=\"token assign-left variable\">postgres</span><span class=\"token operator\">=</span><span class=\"token comment\">#</span></code></pre></div>\n<h2 id=\"run\" style=\"position:relative;\"><a href=\"#run\" aria-label=\"run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>run</h2>\n<p><code>docker-compose run</code> 커맨드는 서비스 컨테이너의 특정 명령어를 일회성으로 실행할 때 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose run web <span class=\"token function\">env</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTNAME</span></span><span class=\"token operator\">=</span>10757eb6642e\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">TERM</span></span><span class=\"token operator\">=</span>xterm\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>C.UTF-8\n<span class=\"token assign-left variable\">GPG_KEY</span><span class=\"token operator\">=</span>E3FF2839C048B25C084DEBE9B26995E310250568\n<span class=\"token assign-left variable\">PYTHON_VERSION</span><span class=\"token operator\">=</span><span class=\"token number\">3.8</span>.2\n<span class=\"token assign-left variable\">PYTHON_PIP_VERSION</span><span class=\"token operator\">=</span><span class=\"token number\">20.1</span>\n<span class=\"token assign-left variable\">PYTHON_GET_PIP_URL</span><span class=\"token operator\">=</span>https://github.com/pypa/get-pip/raw/1fe530e9e3d800be94e04f6428460fc4fb94f5a9/get-pip.py\n<span class=\"token assign-left variable\">PYTHON_GET_PIP_SHA256</span><span class=\"token operator\">=</span>ce486cddac44e99496a702aa5c06c5028414ef48fdfd5242cd2fe559b13d4348\n<span class=\"token assign-left variable\">PYTHONUNBUFFERED</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/root</code></pre></div>\n<h2 id=\"config\" style=\"position:relative;\"><a href=\"#config\" aria-label=\"config permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>config</h2>\n<p><code>docker-compose config</code> 커맨드는 Docker Compose 설정을 확인할 때 사용합니다.<br>\n<code>-f</code> 옵션으로 여러 개의 설정 파일을 사용할 때, 최종적으로 어떻게 설정이 적용되는지 확인해볼 때 유용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose config\nservices:\n  db:\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    image: postgres\n  web:\n    build:\n      context: /Users/dale/temp/django-app\n    command: python manage.py runserver <span class=\"token number\">0</span>:8000\n    depends_on:\n    - db\n    ports:\n    - <span class=\"token number\">8000</span>:8000/tcp\n    volumes:\n    - /Users/dale/temp/django-app:/web:rw\nversion: <span class=\"token string\">'3.0'</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 자주 사용되는 Docker Compose 커맨드 위주로 간단하게 어떻게 사용하는지 살펴보았습니다.<br>\nDocker Compose의 다른 커맨드는 <a href=\"https://docs.docker.com/compose/reference/\">Docker 공식 레퍼런스</a>를 참고 바랍니다.</p>","timeToRead":4,"fields":{"slug":"/docker-compose/","tags":["Docker","도커","Compose","container","컨테이너","image","이미지","Dockerfile","docker-compose.yml"]},"frontmatter":{"title":"Docker Compose 커맨드 사용법","date":"May 30, 2020"}},"next":{"fields":{"slug":"/python-type-hinting/"},"frontmatter":{"title":"파이썬 타입 힌팅 (Type Hinting)"}}}}}