{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/jest-mock-modules/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-babel/"},"frontmatter":{"title":"바벨(Babel 7) 기본 사용법"}},"node":{"html":"<p><a href=\"/jest-fn-spy-on\">지난 포스팅</a>에서 <code>jest.fn()</code>과 <code>jest.spyOn()</code> 함수를 어떻게 사용하는지 배웠습니다.\n이번 포스팅에서는 Jest에서 제공하는 또 다른 모킹 함수인 <code>jest.mock()</code>를 활용해서 좀더 다양한 상황에서 모킹을 해보도록 하겠습니다.</p>\n<h2 id=\"자바스크립트-모듈\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%93%88\" aria-label=\"자바스크립트 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 모듈</h2>\n<p>먼저 자바스크립트에서 모듈이 무엇인지에 대해서 간단하게 개념만 짚고 넘어가겠습니다.\n모듈이란 어떤 코드를 다른 자바스크립트 파일에서 불러오기 편하도록 하나의 파일에 모아둔 것입니다.\n프로젝트의 규모가 커지면 모든 자바스크립트 코드를 하나의 파일에 두기 어렵기 때문에, 자연스럽게 코드가 여러 자바스크립트 파일로 나눠지게 됩니다.</p>\n<p>이러한 모듈 파일들은 해당 프로젝트의 내부 디렉터리에 라이브러리로 존재할 수도 있고, NPM을 통해 설치 후에 사용할 수 있는 외부 패키지가 될 수도 있습니다.\n어떤 형태가 되었든 이러한 모듈 파일들은 결국은 CommonJS의 <code>require</code>나 ES6의 <code>import</code> 키워드를 통해서 다른 자바스크립트 파일에서 불러내어 사용되게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> moment <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myLib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./myLib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">'moment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> myLib <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myLib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>자바스크립트 모듈에 대한 좀 더 자세한 설명은 아래 관련 포스팅를 참고 바라겠습니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/js-module-require\">자바스크립트 CommonJS 모듈 내보내기/불러오기</a></li>\n<li><a href=\"/js-module-import\">자바스크립트 ES6 모듈 내보내기/불러오기</a></li>\n</ul>\n<h2 id=\"테스트-대상-모듈\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8C%80%EC%83%81-%EB%AA%A8%EB%93%88\" aria-label=\"테스트 대상 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 대상 모듈</h2>\n<p>먼저 실습을 위해 간단하게 테스트의 대상이 될 간단한 자바스크립트 모듈 두 개를 작성해보겠습니다.</p>\n<p>이메일과 문자를 보낼 때 사용하는 <code>messageService</code>라는 자바스크립트 모듈이 있다고 가정해보겠습니다.\n이렇게 외부 매체를 통해 메시지를 보내는 작업은 어플리케이션에서 수시로 일어날 수 있지만, 단위 테스트 측면에서는 모킹 기법 없이는 처리가 매우 끼다로운 대표적인 케이스 중 하나입니다.\n왜냐하면, 일반적으로 이메일과 문자는 외부 서비스를 이용하는 경우가 많아서 테스트 실행 시 마다 불필요한 과금 발생할 수 있고, 해당 외부 서비스에 장애가 발생하면 관련 테스트가 모두 깨지는 불상사가 발생할 수 있기 때문입니다.</p>\n<p>따라서 어차피 앞으로 테스트를 작성하면서 이 모듈은 모킹을 할 것이기 때문에, <code>messageService</code> 모듈의 내 함수의 실제 구현은 주석 처리 하겠습니다.</p>\n<ul>\n<li>messageService.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 이메일 보내는 코드 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phone<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 문자를 보내는 코드 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 위 모듈을 사용해서 회원 가입 또는 탈퇴 시 이메일과 문자를 보내는 <code>userService</code>라는 자바스크립트 모듈이 있다고 가정해보겠습니다.\nDB에 회원 레코드를 추가하거나 삭제하는 부분은 본 포스팅에서 관심을 두는 부분이 아니기 때문에 주석 처리 하였습니다.\n중요한 것은 <code>userService</code> 모듈에서 <code>messageService</code> 모듈의 <code>sendEmail</code>과 <code>sendSMS</code>을 임포트하여 사용하고 있다는 점입니다.</p>\n<ul>\n<li>userService.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sendEmail<span class=\"token punctuation\">,</span> sendSMS <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./messageService\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* DB에 회원 추가 */</span>\n  <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"회원 가입을 환영합니다!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deregister</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* DB에 회원 삭제 */</span>\n  <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"탈퇴 처리 되었습니다.\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음 섹션부터 <code>userService</code> 모듈를 테스트 하기 위해서 <code>messageService</code> 모듈을 모킹해보도록 하겠습니다.</p>\n<h2 id=\"jestfn을-이용한-모듈-모킹\" style=\"position:relative;\"><a href=\"#jestfn%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%AA%A8%EB%93%88-%EB%AA%A8%ED%82%B9\" aria-label=\"jestfn을 이용한 모듈 모킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest.fn()을 이용한 모듈 모킹</h2>\n<p>이제 <code>userService</code>가 회원 가입 또는 탈퇴 처리 시, 이메일과 문자를 보내기 위해서 <code>messageService</code> 모듈의 함수를 호출하는지 검증하는 테스트 코드를 작성하려고 합니다.\n여기서 우리는 <code>messageService</code> 모듈의 <code>sendEmail</code> 함수와 <code>sendSMS</code> 함수를 목(mock) 함수로 대체를 해야합니다.\n왜냐하면 실제로 이메일이나 문자를 보낼 의도가 없고, 단순히 <code>userService</code>가 제대로 호출을 하는지 여부만 알면 되기 때문입니다.</p>\n<p>이 상황에서 테스트를 작성할 때 흔이 많은 나오는 실수가 임포트한 함수를 저장하고 있는 변수에 목(mock) 함수를 바로 할당하려고 하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sendEmail<span class=\"token punctuation\">,</span> sendSMS <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./messageService\"</span><span class=\"token punctuation\">;</span>\n\nsendEmail <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"sendEmail\" is read-only.</span>\nsendSMS <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"sendSMS\" is read-only.</span></code></pre></div>\n<p>이 방법은 자바스크립트 문법을 위반하기 때문에 컴파일 에러가 발생하는 것을 볼 수 있으실 겁니다.\n왜냐하면 <code>import</code> 키워드로 불러오기 된 함수들은 기본적으로 <code>const</code> 변수이기 때문에 한 번 초기화되면 다른 값으로 변경이 불가능하기 때문입니다.</p>\n<p>조금은 억지스럽지만 차선책으로 <code>messageService</code> 모듈의 모든 함수를 하나의 객체로 불러오면, 객체의 속성으로 목(mock) 함수를 할당할 수 있습니다.</p>\n<ul>\n<li>userService1.test.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> register<span class=\"token punctuation\">,</span> deregister <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./userService\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> messageService <span class=\"token keyword\">from</span> <span class=\"token string\">\"./messageService\"</span><span class=\"token punctuation\">;</span>\n\nmessageService<span class=\"token punctuation\">.</span>sendEmail <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessageService<span class=\"token punctuation\">.</span>sendSMS <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sendEmail <span class=\"token operator\">=</span> messageService<span class=\"token punctuation\">.</span>sendEmail<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sendSMS <span class=\"token operator\">=</span> messageService<span class=\"token punctuation\">.</span>sendSMS<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  sendEmail<span class=\"token punctuation\">.</span><span class=\"token function\">mockClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sendSMS<span class=\"token punctuation\">.</span><span class=\"token function\">mockClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span>\n  phone<span class=\"token operator\">:</span> <span class=\"token string\">\"012-345-6789\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"register sends messeges\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"회원 가입을 환영합니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendSMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendSMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span> <span class=\"token string\">\"회원 가입을 환영합니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deregister sends messaes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">deregister</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"탈퇴 처리 되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendSMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendSMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span> <span class=\"token string\">\"탈퇴 처리 되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 <code>jest.fn()</code>(또는 <code>jest.spyOn()</code>)함수를 이용해서 모듈을 모킹 하려고 하면 불필요하게 처리가 까다로워지는 경우가 많습니다.\n예를 들어, <code>messageService</code> 모듈에서 제공하는 함수가 엄청 많다면 어떨까요? 일일이 <code>jest.fn()</code>으로 모든 함수를 모킹하는 작업이 매우 번겨로울 것입니다.</p>\n<p><a href=\"/jest-fn-spy-on\">지난 포스팅</a>에서 다뤘듯이 <code>jest.fn()</code>과 <code>jest.spyOn()</code> 함수를 사용해서 함수 하나 하나를 모킹하는 것은 그다지 어렵지 않습니다.\n하지만 여러 모듈을 임포트해서 사용하고 있는 코드에 대한 테스트를 작성하다보면 단순히 함수 하나를 모킹하기 보다는 하나의 모듈 전체를 모킹하는 편이 더 유용한 경우가 많습니다.</p>\n<h2 id=\"jestmock을-이용한-모듈-모킹\" style=\"position:relative;\"><a href=\"#jestmock%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%AA%A8%EB%93%88-%EB%AA%A8%ED%82%B9\" aria-label=\"jestmock을 이용한 모듈 모킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest.mock()을 이용한 모듈 모킹</h2>\n<p>Jest는 이렇게 까다로울 수 있는 모듈 모킹을 좀 더 편하게 할 수 있도록 <code>jest.mock()</code>이라는 강력한 함수를 제공합니다.\n이 함수는 자동으로 모듈을 모킹을 해주기 때문에 위와 같이 직접 일일이 모킹을 해줄 필요가 없습니다.</p>\n<p>예를 들어, 이전 섹션에서 작성했던 테스트 코드를 <code>jest.mock()</code>을 이용해서 작성하면 다음과 같습니다.\n<code>jest.mock()</code> 함수는 첫 번째 인자로 넘어온 모듈 내의 모든 함수를 자동으로 목(mock) 함수로 바꿔줍니다.</p>\n<ul>\n<li>userService2.test.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> register<span class=\"token punctuation\">,</span> deregister <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./userService\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sendEmail<span class=\"token punctuation\">,</span> sendSMS <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./messageService\"</span><span class=\"token punctuation\">;</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./messageService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  sendEmail<span class=\"token punctuation\">.</span><span class=\"token function\">mockClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sendSMS<span class=\"token punctuation\">.</span><span class=\"token function\">mockClear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span><span class=\"token punctuation\">,</span>\n  phone<span class=\"token operator\">:</span> <span class=\"token string\">\"012-345-6789\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"register sends messeges\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"회원 가입을 환영합니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendSMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendSMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span> <span class=\"token string\">\"회원 가입을 환영합니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deregister sends messaes\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">deregister</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"탈퇴 처리 되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendSMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>sendSMS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span> <span class=\"token string\">\"탈퇴 처리 되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 <code>jest.mock('./messageService')</code> 호출이 <code>userService</code> 모듈을 임포트 하기 전에 일어나야된느 것 아니냐고 생각하시는 분들이 있을 것입니다.\n먼저 <code>messageService</code> 모듈을 모킹을 해놔야지 <code>userService</code> 모듈이 불러오는 시점에 목 함수들이 사용될 것이기 때문입니다.\n사실 Jest는 <code>jest.mock()</code> 함수를 호출을 테스트 파일의 맨 위로 자동으로 hoist 시켜 주기 때문에 <code>jest.mock()</code>의 호출 위치은 크게 걱정하지 않으셔셔도 됩니다.</p>\n<h2 id=\"jestmock을-이용한-외부-모듈-모킹\" style=\"position:relative;\"><a href=\"#jestmock%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%99%B8%EB%B6%80-%EB%AA%A8%EB%93%88-%EB%AA%A8%ED%82%B9\" aria-label=\"jestmock을 이용한 외부 모듈 모킹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jest.mock()을 이용한 외부 모듈 모킹</h2>\n<p>아래 코드는 지난 포스팅에 작성했던 내부적으로 <code>axios</code>라는 NPM 패키지를 사용하고 있는 <code>userService</code>에 대한 테스트 코드입니다.\n첫번째 테스트 케이스는 <code>axios</code> 객체의 <code>get</code> 함수의 호출 이력을 추적하기 위해서 <code>jest.spyOn()</code> 함수를 사용하고 있고,\n두번째 테스트 케이스는 실제 API 호출하지 않고, 임의의 데이터를 리졸브(resolve)하도록 <code>jest.fn()</code> 함수를 이용해서 <code>axios.get</code> 함수를 모킹하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> userService <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./userService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"findOne fetches data from the API endpoint\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> spyGet <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spyGet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spyGet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://jsonplaceholder.typicode.com/users/1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"findOne returns what axios get returns\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  axios<span class=\"token punctuation\">.</span>get <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Dale Seo\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dale Seo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>jest.mock()</code> 함수를 사용해서 위 두 개의 테스트 케이스를 하나의 테스트 케이스로 재작성 해보겠습니다.\n<code>axios</code> 모듈 전체를 모킹해버리면 <code>get</code>을 포함한 <code>axios</code> 모든 함수가 목 함수로 자동으로 대체되기 때문에, 이미 목 함수가 되어버린 <code>axios.get</code> 함수가 임의의 데이터를 리졸브(resolve)하도록 처리만 해주면, 호출 이력까지 추가 설정없이 기본적으로 제공됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> userService <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./userService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"findOne fetches data from the API endpoint and returns what axios get returns\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  axios<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">.</span><span class=\"token function\">mockResolvedValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Dale Seo\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dale Seo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://jsonplaceholder.typicode.com/users/1</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p><a href=\"https://codesandbox.io/s/jest-fn-spy-on-n1emm?fontsize=14\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit jest-mock-modules\"></a></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 <code>jest.mock()</code> 함수를 이용해서 내부 모듈과 외부 모듈을 모킹하는 방법에 대해서 알아보았습니다.</p>\n<h2 id=\"연관-포스팅\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B4%80-%ED%8F%AC%EC%8A%A4%ED%8C%85\" aria-label=\"연관 포스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연관 포스팅</h2>\n<ul>\n<li><a href=\"/jest-basic\">Jest로 기본적인 테스트 작성하기</a></li>\n<li><a href=\"/jest-async\">Jest로 비동기 코드 테스트 작성하기</a></li>\n<li><a href=\"/jest-before-after\">Jest로 테스트 전/후 처리하기</a></li>\n<li><a href=\"/jest-fn-spy-on\">[Jest] jest.fn(), jest.spyOn() 함수 모킹</a></li>\n</ul>","timeToRead":7,"fields":{"slug":"/jest-mock-modules/","tags":["JavaScript","Jest","testing","TDD","Mock","mocking"]},"frontmatter":{"title":"[Jest] jest.mock() 모듈 모킹","date":"Oct 19, 2019"}},"next":{"fields":{"slug":"/graphql-apollo-server-auth/"},"frontmatter":{"title":"GraphQL 서버의 사용자 인증/인가 (Apollo Server Authentication/Authorization)"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}