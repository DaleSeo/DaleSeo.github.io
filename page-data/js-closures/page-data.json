{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-closures/","result":{"pageContext":{"previous":{"fields":{"slug":"/react-hooks-use-reducer/"},"frontmatter":{"title":"React Hooks: useReducer 사용법"}},"node":{"html":"<p>자바스크립트로 코딩을 하다보면 한 번쯤 듣게 되는 용어가 클로저(closure)입니다.\n기술 면접 같은데서 자주 물어보는 질문이기도 한데요.\n이번 포스트에서는 이 알쏭달쏭한 클로저에 대해서 한 번 얘기해보려고 합니다.</p>\n<h2 id=\"클로저란\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EB%9E%80\" aria-label=\"클로저란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로저란?</h2>\n<p>클로저에 대해서 얘기를 하려면 일단 클로저가 도대체 어떤 개념인지에 알아야겠죠?\n클로저는 일반적으로 어떤 함수가 자신의 내부가 아닌 외부에서 선언된 변수에 접근하는 것을 뜻합니다.</p>\n<p>다음과 같이 미국 달러를 대한민국 원으로 환전해주는 간단한 함수를 예를 들어 설명해보겠습니다.\n이 함수는 미국 달러(usd)를 인자로 받아서 함수 내부에 선언된 환율(rate)을 이용하여 대한민국 원(krw)으로 환전한 결과를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dollar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">1113.5</span>\n  <span class=\"token keyword\">return</span> dollar <span class=\"token operator\">*</span> rate\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>인자로 5달러를 넘겨서 이 함수를 호출하면 예상대로 5567,5원이 반환됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">convertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">5567.5</span></code></pre></div>\n<p>이번에는 환율(rate)을 함수 외부에 선언하면 어떨까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">1113.5</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dollar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> dollar <span class=\"token operator\">*</span> rate\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 함수를 동일한 인자를 넘겨서 호출해보면 완전히 동일한 결과값이 반환되는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">convertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">5567.5</span></code></pre></div>\n<p>이렇게 자바스크립트에서 함수는 매개 변수와 로컬 변수 뿐만 아니라 외부에서 선언된 변수도 자유롭게 접근을 할 수 있습니다.\n그리고 이렇게 함수가 자신의 밖에서 선언된 변수에 접근하는 것을 클로저라고 합니다.</p>\n<h2 id=\"클로저의-예\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%EC%98%88\" aria-label=\"클로저의 예 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로저의 예</h2>\n<p>대부분의 자바스크립트 개발자들은 알게 모르게 이미 작성하는 코드의 많은 부분에서 클로저를 사용하고 있을 것입니다.\n특히, 어떤 함수 내에서 또 다른 함수를 선언할 때, 알게 모르게 클로저를 자주 사용하게 됩니다.</p>\n<p>예를 들어, 여러 개의 미국 달러를 대한민국 원으로 환전해주는 함수를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">batchConvertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dollars</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">1113.5</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">convertUsdToKrw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dollar</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dollar <span class=\"token operator\">*</span> rate\n  <span class=\"token keyword\">return</span> dollars<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>convertUsdToKrw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">batchConvertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">1113.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2227</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11135</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22270</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55675</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111350</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>자바스크립트 배열의 <code>map()</code> 메서드의 인자로 <code>convertUsdToKrw()</code> 함수가 넘어가고 있습니다.\n여기서 <code>batchConvertUsdToKrw()</code> 함수의 내부에서 선언된 <code>rate</code> 변수는 <code>convertUsdToKrw()</code> 함수의 입장에서 보면 외부에서 선언이 되어있습니다.\n즉, <code>convertUsdToKrw()</code> 함수는 자신의 내부가 아닌 외부에서 선언된 <code>rate</code> 변수에 접근하고 있으므로 정확히 위에서 정의한 클로저라는 것을 알 수 있습니다.</p>\n<h2 id=\"클로저의-특징\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"클로저의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로저의 특징</h2>\n<p>좀 억지스러운 예로 다음과 같이 회원 가입을 위한 <code>signUp()</code> 함수를 작성한다고 가정해보겠습니다.\n이 함수는 내부적으로 사용자 생성과 알람 전송을 위해서 각각 <code>createUser()</code>과 <code>sendNotifications()</code> 함수가 정의되어 있고 호출되고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> phone</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">과 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>password<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">를 검증 중...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">사용자 생성 중...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// DB에 사용자 레코드 저장하는 코드</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendNotifications</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>email<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 이메일 전송 중...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>phone<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 문자 전송 중...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 실제로 알람을 전송하는 코드</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">sendNotifications</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메인 페이지로 이동...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test@test.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123-456-7890\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"대한민국\"</span><span class=\"token punctuation\">)</span>\nuser과 <span class=\"token number\">1234</span>를 검증 중<span class=\"token operator\">...</span>\n사용자 생성 중<span class=\"token operator\">...</span>\ntest@test<span class=\"token punctuation\">.</span>com로 이메일 전송 중<span class=\"token operator\">...</span>\n<span class=\"token number\">123</span><span class=\"token operator\">-</span><span class=\"token number\">456</span><span class=\"token operator\">-</span><span class=\"token number\">7890</span>로 문자 전송 중<span class=\"token operator\">...</span>\n메인 페이지로 이동<span class=\"token operator\">...</span></code></pre></div>\n<p><code>signUp()</code> 함수는 4개의 매개 변수를 받고 있는데, <code>createUser()</code> 함수와 <code>sendNotifications()</code> 함수 입장에서 보면 모두 외부에서 선언된 변수들입니다.\n<code>createUser()</code> 함수는 외부에서 선언된 <code>username</code>, <code>password</code> 변수에 접근하고 있고, <code>sendNotifications()</code> 함수는 외부에서 선언된 <code>email</code>과 <code>phone</code>에 접근하고 있습니다.\n다시 말해, <code>signUp()</code> 함수 내부에는 2개의 클로저가 있는 것입니다.</p>\n<p>여기서 재미있는 클로저의 특징을 몇가지 찾아볼 수 있는데요.\n자세히 살펴보시면 <code>createUser()</code> 함수와 <code>sendNotifications()</code> 함수에 어떤 매개 변수도 필요가 없고, <code>signUp()</code> 함수 내에서 호출할 때 어떤 인자도 넘길 필요가 없습니다.\n만약에 이 두 개의 함수를 <code>signUp()</code> 함수 외부로 빼낸다면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">과 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>password<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">를 검증 중...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">사용자 생성 중...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendNotifications</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">email<span class=\"token punctuation\">,</span> phone</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>email<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 이메일 전송 중...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>phone<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">로 문자 전송 중...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">signUp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> phone</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">sendNotifications</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메인 페이지로 이동...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code>createUser()</code> 함수와 <code>sendNotifications()</code> 함수에는 매개 변수가 필요하게 되고, <code>signUp()</code> 함수 내에서 호출할 때 인자를 넘겨줘야 합니다.\n이와 같이 클로저를 활용하면 어떤 함수 내부에서만 사용되는 일회성 함수(정의 후 바로 호출되는)의 매개 변수를 생략할 수 있습니다.</p>\n<h2 id=\"클로저의-부작용\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%9D%98-%EB%B6%80%EC%9E%91%EC%9A%A9\" aria-label=\"클로저의 부작용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로저의 부작용</h2>\n<p>위에서 살펴본 클로저의 특징은 과용하거나 오용하게 되면 오히려 코드 품질 측면에서 부정적인 영향을 미칠 수 있습니다.\n왜냐하면 클로저가 많아지게 되면 코드가 읽거나 고치기가 어려워지고 버그가 발생하기 쉬워지기 때문입니다.</p>\n<p>예를 들어, 이 전에 작성한 <code>batchConvertUsdToKrw()</code> 함수 내부에 선언되어 있던 <code>rate</code> 변수를 밖으로 <code>let</code> 키워드를 사용하여 빼내어 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">1113.5</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">batchConvertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dollars</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">convertUsdToKrw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dollar</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dollar <span class=\"token operator\">*</span> rate\n  <span class=\"token keyword\">return</span> dollars<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>convertUsdToKrw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 되면 <code>rate</code> 변수로 인해서 <code>batchConvertUsdToKrw()</code> 함수에게도 클로저가 생기고, <code>convertUsdToKrw()</code> 함수 입장에서는 중첩 클로저가 생깁니다.\n이 함수가 짧으니까 망정이지 매우 긴 함수였다면 <code>rate</code> 변수의 출저가 어디인지 알아내려면 두 겹의 함수 네임 스페이스를 뒤지느라 곤혹 스러울 것입니다.</p>\n<p>뿐만 아니라, <code>let</code> 키워드를 사용해서 <code>rate</code> 변수를 선언하였기 때문에, <code>rate</code> 변수에 할당된 값을 <code>batchConvertUsdToKrw()</code> 함수 외부에서 자유롭게 바꿀 수가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">batchConvertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">1113.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5567.5</span> <span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> rate <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token number\">100</span>\n<span class=\"token operator\">></span> <span class=\"token function\">batchConvertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>이러한 문제는 심각한 버그로 이어질 수 있어서 값이 바뀔 수 있는 외부 변수에 접근할 때는 각별히 주의해야 합니다.</p>\n<p>특히, 이러한 버그는 비동기 처리 시에 발생할 확률이 더욱 높아집니다.\n아래 프로그램을 실행해보면, <code>rate</code> 변수에 중간에 할당된 값은 무시되고 제일 마지막에 할당한 값이 계속해서 출력되는 것을 볼 수 있는데요.\n<code>setTimeout()</code> 함수 때문에 콘솔에 출력되는 시점이 1초씩 지연되기 때문에 발생하는 현상입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">1113.5</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">현재 미달러 환율은 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rate<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">원 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 현재 미달러 환율은 500원 입니다.</span>\n\nrate <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token function\">printRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 현재 미달러 환율은 500원 입니다.</span>\n\nrate <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n<span class=\"token function\">printRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 현재 미달러 환율은 500원 입니다.</span></code></pre></div>\n<h2 id=\"클로저-피하기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-label=\"클로저 피하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로저 피하기</h2>\n<p>중접 클로저를 피하는 간단한 방법은 <code>convertUsdToKrw()</code> 함수를 <code>batchConvertUsdToKrw()</code> 함수 밖으로 빼주어 최대한 클로저가 중첩되지 않도록 해주는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> rate <span class=\"token operator\">=</span> <span class=\"token number\">1113.5</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">convertUsdToKrw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dollar</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dollar <span class=\"token operator\">*</span> rate\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">batchConvertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dollars</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> dollars<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>convertUsdToKrw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 내부에서 정의된 함수를 외부로 빼면 이 함수에 대해서도 단위 테스트를 작성할 수 있으며, 이 함수는 <code>batchConvertUsdToKrw()</code> 함수를 벗어나 다른 곳에서도 호출이 가능해집니다.\n(이 부분은 상황에 따라서 장점이 될 수고 있고 단점이 될 수도 있습니다.)</p>\n<p>한 발짝 더 나아가, 아예 <code>rate</code>를 <code>batchConvertUsdToKrw()</code> 함수의 매개 변수로 넣어주면, <code>rate</code> 변수의 값이 외부에서 수정될 수 있는 문제를 근본적으로 예방할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">batchConvertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dollars<span class=\"token punctuation\">,</span> rate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">convertUsdToKrw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dollar</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dollar <span class=\"token operator\">*</span> rate\n  <span class=\"token keyword\">return</span> dollars<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>convertUsdToKrw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제는 <code>batchConvertUsdToKrw()</code> 함수를 호출할 때, 항상 명시적으로 <code>rate</code> 인자를 넘겨줘야 하기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">batchConvertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1113.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">1113.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5567.5</span> <span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token function\">batchConvertUsdToKrw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>사실 클로저는 자바스크립트만 국한된 개념이 아니며 다른 많은 프로그래밍 언어에서도 존재하는 개념입니다.\n그럼에도 불구하고 특히 자바스크립트 커뮤니티에서 클로저가 많은 거론되는 이유는 함수를 마치 일반 값처럼 다룰 수 있는 자바스크립트의 유연함 때문일 것입니다.\n어떻게 사용하느냐에 따라서 양날의 검이 될 수 있는 클로저에 대한 개념을 잡으시는데 도움이 되었으면 좋겠습니다.</p>","timeToRead":6,"fields":{"slug":"/js-closures/","tags":["JavaScript"]},"frontmatter":{"title":"[자바스크립트] 클로저(closure) 바로알기","date":"Nov 15, 2020"}},"next":{"fields":{"slug":"/pre-commit/"},"frontmatter":{"title":"pre-commit 도구로 Git Hook 사용하기"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}