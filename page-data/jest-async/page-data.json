{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/jest-async/","result":{"pageContext":{"previous":{"fields":{"slug":"/jest-before-after/"},"frontmatter":{"title":"Jest로 테스트 전/후 처리하기"}},"node":{"html":"<p><a href=\"/jest-basic\">지난 포스트</a>에서 Jest로 기본적인 테스트 코드 작성하는 방법에 대해서 알아보았습니다.\n자바스크립트 언어 특상 상 실제 프로젝트에서는 비동기(Asynchronus)로 돌아가는 코드를 테스트해야 할 일이 많은데요.\nJest Runner가 비동기 코드에 대한 테스트라는 사실을 인지할 수 있도록 테스트를 작성해주지 않으면 예상치 못했던 테스트 결과에 당황할 수가 있습니다.\n이번 포스트에서는 이러한 비동기 코드에 대한 테스트를 작성할 때 흔히 하는 실수들과 적절한 대응 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"콜백-함수-테스트\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"콜백 함수 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 함수 테스트</h2>\n<p>먼저 콜백 함수를 이용해서 구현된 비동기 코드에 대한 테스트를 작성하는 방법에 대해서 알아보겠습니다.</p>\n<p>예를 들어, 다음과 같은 콜백 함수를 인자로 받는 자바스크립트 함수가 있다고 가정해보겠습니다.\n이 함수는 인자로 넘어온 <code>id</code>를 가진 사용자 객체를 다시 인자로 넘어온 콜백 함수(<code>cb</code>)의 인자로 넘겨서 호출해줍니다.\n(실제 코드라면, DB를 조회하거나 API를 호출하거 하겠지만 간단한 예제를 위해서 사용자 객체를 임의로 만들어주었습니다.)\n이 함수는 <code>setTimeout()</code> 이라는 자바스크립트 내장 함수를 사용해서 0.1초의 지연 후에 콜백 함수를 호출해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait 0.1 sec.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"User\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"@test.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>자바스크립트의 콜백 함수에 대한 자세한 설명은 <a href=\"/js-async-callback\">관련 포스트</a>를 참고 바랍니다.</p>\n</blockquote>\n<p>이 함수에 대한 테스트를 지난 포스트에서 다루었던 데로 기본적인 방법으로 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch a user\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"User1\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"1@test.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트를 실행해보면 다음과 같이 테스트가 통과합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token operator\">></span> my-jest@1.0.0 <span class=\"token builtin class-name\">test</span> /my-jest\n<span class=\"token operator\">></span> jest\n\n PASS  ./async.test.js\n  ✓ fetch a user <span class=\"token punctuation\">(</span>1ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">0</span>.756s, estimated 1s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p>그런데 자세히 보면 테스트가 실행되는데는 1ms가 걸렸던 것을 알 수 있습니다. (PC 성능에 따라 틀리겠지요.)\n그렇다면, 0.1초, 즉 100ms의 지연이 제대로 효과를 발희할 수 있었을까요?\n게다가 콘솔에 <code>wait 0.1 sec.</code>라는 메시지도 출력되지 않았기 때문에 테스트가 통과되었어도 상당히 뭔가 수상합니다.</p>\n<p>테스트가 제대로 실패하는지 확인하기 위해서 테스트 코드를 다음과 같이 <code>id</code>를 <code>1</code> 대신에 <code>2</code>를 넘기도록 수정해보겠습니다.\n이 테스트는 실패를 해야합니다. 왜냐하면 <code>id</code> <code>2</code>를 넘기면서 <code>id</code>가 <code>1</code>인 사용자 객체가 콜백 함수에 넘어오길 기대하고 있기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch a user\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"User1\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"1@test.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 테스트를 실행해보면 이 테스트도 통과합니다. 뭔가 확실히 잘못되고 있다는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token operator\">></span> my-jest@1.0.0 <span class=\"token builtin class-name\">test</span> /my-jest\n<span class=\"token operator\">></span> jest\n\n PASS  ./async.test.js\n  ✓ fetch a user <span class=\"token punctuation\">(</span>1ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">0</span>.88s, estimated 1s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p>Jest Runner는 기본적으로 테스트 함수를 그저 가능한한 최대한 빨리 호출해줍니다. 그래야 실행한 테스트가 많을 때도 성능이 좋겠죠?\n따라서 위 경우에, 콜백 함수는 호출될 기회조차 얻지 못하고, 콜백 함수 내의 <code>toEqual()</code> Matcher 함수도 호출되지 못했던 것 입니다.</p>\n<p>해결 방법은 간단합니다. Jest Runner에게 명시적으로 이 테스트 함수는 비동기 코드를 테스트 하니 콜백 함수가 호출되는지도 좀 봐주라고 알려주는 것입니다.\n다음과 같이 실행할 테스트 함수가 <code>done</code>이라는 함수 인자를 받도록 수정하고, 이 <code>done</code> 함수를 콜백 함수의 제일 마지막에 호출하도록 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch a user\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"User1\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"1@test.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>수정된 테스트를 실행해보면 다음과 같이 예상했던 바와 같이 테스트가 실패하는 것을 알 수 있습니다.\n대신에 테스트 수행 시간도 124ms도 대폭 증가되었습니다. 100ms의 지연을 고려해보면 자연스러운 현상입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token operator\">></span> my-jest@1.0.0 <span class=\"token builtin class-name\">test</span> /my-jest\n<span class=\"token operator\">></span> jest\n\n FAIL  ./async.test.js\n  ✕ fetch a user <span class=\"token punctuation\">(</span>124ms<span class=\"token punctuation\">)</span>\n\n  ● fetch a user\n\n    expect<span class=\"token punctuation\">(</span>received<span class=\"token punctuation\">)</span>.toEqual<span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span>\n\n    Difference:\n\n    - Expected\n    + Received\n\n      Object <span class=\"token punctuation\">{</span>\n    -   <span class=\"token string\">\"email\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1@test.com\"</span>,\n    -   <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,\n    -   <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"User1\"</span>,\n    +   <span class=\"token string\">\"email\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2@test.com\"</span>,\n    +   <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,\n    +   <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"User2\"</span>,\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token number\">13</span> <span class=\"token operator\">|</span> test<span class=\"token punctuation\">(</span><span class=\"token string\">'fetch a user'</span>, <span class=\"token keyword\">done</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token number\">14</span> <span class=\"token operator\">|</span>   fetchUser<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, user <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token operator\">|</span>     expect<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>.toEqual<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n         <span class=\"token operator\">|</span>                  ^\n      <span class=\"token number\">16</span> <span class=\"token operator\">|</span>       id: <span class=\"token number\">1</span>,\n      <span class=\"token number\">17</span> <span class=\"token operator\">|</span>       name: <span class=\"token string\">'User1'</span>,\n      <span class=\"token number\">18</span> <span class=\"token operator\">|</span>       email: <span class=\"token string\">'1@test.com'</span>\n\n      at toEqual <span class=\"token punctuation\">(</span>async.test.js:15:18<span class=\"token punctuation\">)</span>\n      at cb <span class=\"token punctuation\">(</span>async.test.js:9:5<span class=\"token punctuation\">)</span>\n\n  console.log async.test.js:3\n    <span class=\"token function\">wait</span> <span class=\"token number\">0.1</span> sec.\n\nTest Suites: <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">0</span>.894s, estimated 1s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p>이제 <code>fetchUser()</code> 함수를 호출할 때 인자를 <code>2</code> 대신 다시 <code>1</code>을 넘기도록 코드를 수정하면 콜백 함수도 호출되면서 Jest는 모든 코드를 빠짐없이 실행하면서 정확하게 테스트를 통과시켜 줍니다.</p>\n<h2 id=\"promise-테스트\" style=\"position:relative;\"><a href=\"#promise-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"promise 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise 테스트</h2>\n<p>다음으로는 Promise를 사용해서 구현된 비동기 코드에 대한 테스트를 어떻게 작성하는지 알아보겠습니다.</p>\n<p>위에서 작성한 콜백 함수를 사용하는 비동기 코드는 다음과 같이 Promise를 이용해서 재작성 해보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait 0.1 sec.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"User\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"@test.com\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>차이점은 인자로 콜백 함수를 받는 대신 0.1초를 기다렸다가 사용자 객체를 제공(resolve)하는 Promise 객체를 리턴한다는 것입니다.</p>\n<blockquote>\n<p>위 코드가 잘 이해되지 않으시는 분들은 <a href=\"/js-async-promise\">자바스크립트의 Promise에 대한 포스트</a>를 먼저 읽어보시면 도움이 되실 겁니다.</p>\n</blockquote>\n<p>먼저 실패하는 테스트를 작성하고 정말 실패하는지 살펴보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch a user\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"User1\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"1@test.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트를 실행해보면 예상했던 것 처럼 실패하지 않습니다. 실행 시간도 1ms이고, 콘솔에 <code>wait 0.1 sec.</code>이 출력되지 않은 걸로 말미암아 <code>fetchUser()</code> 함수에서 리턴된 Promise 객체의 <code>then()</code> 메서드가 실행될 기회도 얻지 못했을 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ npm test\n\n<span class=\"token operator\">></span> my<span class=\"token operator\">-</span>jest@<span class=\"token number\">1.0</span><span class=\"token number\">.0</span> test <span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>jest\n<span class=\"token operator\">></span> jest\n\n <span class=\"token constant\">PASS</span>  <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>promise<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>js\n  ✓ fetch a <span class=\"token function\">user</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>ms<span class=\"token punctuation\">)</span>\n\nTest Suites<span class=\"token operator\">:</span> <span class=\"token number\">1</span> passed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> total\nTests<span class=\"token operator\">:</span>       <span class=\"token number\">1</span> passed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> total\nSnapshots<span class=\"token operator\">:</span>   <span class=\"token number\">0</span> total\nTime<span class=\"token operator\">:</span>        <span class=\"token number\">0.766</span>s<span class=\"token punctuation\">,</span> estimated <span class=\"token number\">1</span>s\nRan all test suites<span class=\"token punctuation\">.</span></code></pre></div>\n<p>해결 방법은 이외로 간단합니다. 다음과 같이 <code>return</code> 문만 추가해주면 원했던 바와 같이 테스트는 실패하게 됩니다.\n테스트 함수가 Promise를 리턴하면 Jest Runner는 리턴된 Promise가 resolve될 때까지 기다려줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch a user\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"User1\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"1@test.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token operator\">></span> my-jest@1.0.0 <span class=\"token builtin class-name\">test</span> /my-jest\n<span class=\"token operator\">></span> jest\n\n FAIL  ./promise.test.js\n  ✕ fetch a user <span class=\"token punctuation\">(</span>117ms<span class=\"token punctuation\">)</span>\n\n  ● fetch a user\n\n    expect<span class=\"token punctuation\">(</span>received<span class=\"token punctuation\">)</span>.toEqual<span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span>\n\n    Difference:\n\n    - Expected\n    + Received\n\n      Object <span class=\"token punctuation\">{</span>\n    -   <span class=\"token string\">\"email\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1@test.com\"</span>,\n    -   <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,\n    -   <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"User1\"</span>,\n    +   <span class=\"token string\">\"email\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2@test.com\"</span>,\n    +   <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,\n    +   <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"User2\"</span>,\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token number\">15</span> <span class=\"token operator\">|</span> test<span class=\"token punctuation\">(</span><span class=\"token string\">'fetch a user'</span>, <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token number\">16</span> <span class=\"token operator\">|</span>   <span class=\"token builtin class-name\">return</span> fetchUser<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>.then<span class=\"token punctuation\">(</span>user <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">></span> <span class=\"token number\">17</span> <span class=\"token operator\">|</span>     expect<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>.toEqual<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n         <span class=\"token operator\">|</span>                  ^\n      <span class=\"token number\">18</span> <span class=\"token operator\">|</span>       id: <span class=\"token number\">1</span>,\n      <span class=\"token number\">19</span> <span class=\"token operator\">|</span>       name: <span class=\"token string\">'User1'</span>,\n      <span class=\"token number\">20</span> <span class=\"token operator\">|</span>       email: <span class=\"token string\">'1@test.com'</span>\n\n      at toEqual <span class=\"token punctuation\">(</span>promise.test.js:17:18<span class=\"token punctuation\">)</span>\n\n  console.log promise.test.js:4\n    <span class=\"token function\">wait</span> <span class=\"token number\">0.1</span> sec.\n\nTest Suites: <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">1</span>.021s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<h2 id=\"asyncawait-테스트\" style=\"position:relative;\"><a href=\"#asyncawait-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"asyncawait 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async/Await 테스트</h2>\n<p>마지막으로 ES6의 async/await 키워드를 사용하면 더 읽기 쉬운 테스트를 작성할 수 있습니다.</p>\n<blockquote>\n<p>자바스크립트의 async/await에 대한 자세한 설명은 <a href=\"/js-async-async-await\">관련 포스트</a>를 참고 바랍니다.</p>\n</blockquote>\n<p>다음과 같이 테스트 함수 맨 앞에 <code>async</code> 를 추가하고, Promise를 리턴하는 함수 앞에 <code>await</code>를 붙여주면 마치 동기 코드처럼 보이는 테스트를 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch a user\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"User1\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"1@test.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 테스트는 예상했던 바와 <code>id</code> 2를 넘기면서 <code>id</code>가 <code>1</code>인 사용자 객체를 기대하고 있기 때문에 실패합니다.\n하지만 실행 시간이 114ms로 0.1초 이상이고 콘솔에 <code>wait 0.1 sec.</code>가 출력되는 걸로 봐서는 테스트 함수가 제대로 실행된 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token operator\">></span> my-jest@1.0.0 <span class=\"token builtin class-name\">test</span> /my-jest\n<span class=\"token operator\">></span> jest\n\n FAIL  ./promise.test.js\n  ✕ fetch a user <span class=\"token punctuation\">(</span>114ms<span class=\"token punctuation\">)</span>\n\n  ● fetch a user\n\n    expect<span class=\"token punctuation\">(</span>received<span class=\"token punctuation\">)</span>.toEqual<span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span>\n\n    Difference:\n\n    - Expected\n    + Received\n\n      Object <span class=\"token punctuation\">{</span>\n    -   <span class=\"token string\">\"email\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1@test.com\"</span>,\n    -   <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,\n    -   <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"User1\"</span>,\n    +   <span class=\"token string\">\"email\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2@test.com\"</span>,\n    +   <span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,\n    +   <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"User2\"</span>,\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token number\">15</span> <span class=\"token operator\">|</span> test<span class=\"token punctuation\">(</span><span class=\"token string\">'fetch a user'</span>, async <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token number\">16</span> <span class=\"token operator\">|</span>   const user <span class=\"token operator\">=</span> await fetchUser<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">></span> <span class=\"token number\">17</span> <span class=\"token operator\">|</span>   expect<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>.toEqual<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n         <span class=\"token operator\">|</span>                ^\n      <span class=\"token number\">18</span> <span class=\"token operator\">|</span>     id: <span class=\"token number\">1</span>,\n      <span class=\"token number\">19</span> <span class=\"token operator\">|</span>     name: <span class=\"token string\">'User1'</span>,\n      <span class=\"token number\">20</span> <span class=\"token operator\">|</span>     email: <span class=\"token string\">'1@test.com'</span>\n\n      at Object.toEqual <span class=\"token punctuation\">(</span>promise.test.js:17:16<span class=\"token punctuation\">)</span>\n\n  console.log promise.test.js:4\n    <span class=\"token function\">wait</span> <span class=\"token number\">0.1</span> sec.\n\nTest Suites: <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">0</span>.997s, estimated 1s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p>다음과 같이 인자에 맞게 기대 값을 바꿔주면 테스트는 통과하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch a user\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"User2\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"2@test.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token operator\">></span> my-jest@1.0.0 <span class=\"token builtin class-name\">test</span> /my-jest\n<span class=\"token operator\">></span> jest\n\n PASS  ./promise.test.js\n  ✓ fetch a user <span class=\"token punctuation\">(</span>119ms<span class=\"token punctuation\">)</span>\n\n  console.log promise.test.js:4\n    <span class=\"token function\">wait</span> <span class=\"token number\">0.1</span> sec.\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">1</span>.476s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Jest를 이용해서 비동기 코드에 대한 테스트를 작성하고 실행하는 방법에 대해서 알아보았습니다.\n다음 포스트에서는 Jest로 테스트 전/후 처리 방법에 대해서 다뤄보도록 하겠습니다.</p>\n<h2 id=\"연관-포스트\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B4%80-%ED%8F%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"연관 포스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연관 포스트</h2>\n<ul>\n<li><a href=\"/jest-basic\">Jest로 기본적인 테스트 작성하기</a></li>\n<li><a href=\"/jest-before-after\">Jest로 테스트 전/후 처리하기</a></li>\n<li><a href=\"/jest-fn-spy-on\">Jest Mock: jest.fn(), jest.spyOn()</a></li>\n</ul>","timeToRead":7,"fields":{"slug":"/jest-async/","tags":["JavaScript","Jest","Test","TDD"]},"frontmatter":{"title":"Jest로 비동기 코드 테스트 작성하기","date":"Jan 26, 2019"}},"next":{"fields":{"slug":"/jest-basic/"},"frontmatter":{"title":"Jest로 기본적인 테스트 작성하기"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}