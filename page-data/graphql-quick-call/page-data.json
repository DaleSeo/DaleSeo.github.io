{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-quick-call/","result":{"pageContext":{"previous":{"fields":{"slug":"/vue-cli3/"},"frontmatter":{"title":"Vue CLI 3 사용법"}},"node":{"html":"<p>GraphQL API를 별다른 라이브러리 없이 최대한 간단하게 호출하는 방법에 대해서 알아보겠습니다. 아래에 소개된 방법들로 GraphQL API 호출하는 방법에 대한 감을 잡는데 도움이 되셨으면 좋겠습니다.</p>\n<h2 id=\"내장-web-ui\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EC%9E%A5-web-ui\" aria-label=\"내장 web ui permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내장 Web UI</h2>\n<p>많은 GraphQL 서비스는 GraphiQL이나 Playground와 같은 내장 UI를 제공합니다. 예를 들어, 가짜 데이터를 응답해주는 <a href=\"https://fakerql.com/\">FakerQL</a>의 경우 브라우저에서 열어보면 Playground가 나옵니다.</p>\n<p>좌측 패널에 다음과 같이 쿼리를 입력하고 중간에 있는 실행 버튼을 누릅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Todo</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token string\">\"cjkskilwt00422c10dezjgdhw\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    id\n    title\n    completed\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러면 우측 패널에 다음과 같이 쿼리에 대한 응답이 표시됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Todo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cjkskilwt00422c10dezjgdhw\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"neural transmit firmware\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"completed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"터미널-curl-커맨드\" style=\"position:relative;\"><a href=\"#%ED%84%B0%EB%AF%B8%EB%84%90-curl-%EC%BB%A4%EB%A7%A8%EB%93%9C\" aria-label=\"터미널 curl 커맨드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>터미널 CURL 커맨드</h2>\n<p>GraphQL API도 기본적으로 HTTP 프로토콜 기반으로 동작하기 때문에, 일반적인 REST API처럼 터미널에서 <code>curl</code> 커맨드로 호출이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -X POST -H <span class=\"token string\">\"Content-Type: application/json\"</span> <span class=\"token punctuation\">\\</span>\n-d <span class=\"token string\">'{ \"query\": \"{ Todo(id: \\\"cjkskilwt00422c10dezjgdhw\\\") { id title completed } }\" }'</span> <span class=\"token punctuation\">\\</span>\nhttps://fakerql.com/graphql</code></pre></div>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"data\"</span>:<span class=\"token punctuation\">{</span><span class=\"token string\">\"Todo\"</span>:<span class=\"token punctuation\">{</span><span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"cjkskilwt00422c10dezjgdhw\"</span>,<span class=\"token string\">\"title\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Movies\"</span>,<span class=\"token string\">\"completed\"</span>:false<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>curl</code> 커맨드의 옵션을 간단히 살펴보면,</p>\n<ul>\n<li><code>-X POST</code>: 쿼리 문자열을 HTTP Body로 전송하기 위해서 POST 메소드를 사용합니다.</li>\n<li><code>-H \"Content-Type: application/json\"</code>: 쿼리를 JSON 포멧으로 전송합니다.</li>\n<li><code>-d '{ \"query\": \"...\" }'</code>: 전송할 쿼리 문자열을 query 속성의 값으로 세팅합니다.</li>\n<li><code>https://fakerql.com/graphql</code>: 호출을 받을 GraphQL Endpoint 주소입니다.</li>\n</ul>\n<h2 id=\"브라우저-fetch-함수\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-fetch-%ED%95%A8%EC%88%98\" aria-label=\"브라우저 fetch 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 Fetch 함수</h2>\n<p>브라우저에서도 <code>fetch</code> 함수를 사용하면 간단하게 GraphQL API를 호출할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">const</span> endpoint <span class=\"token operator\">=</span> <span class=\"token string\">'https://fakerql.com/graphql'</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{\n    Todo(id: \"cjkskilwt00422c10dezjgdhw\") {\n      id\n      title\n      completed\n    }\n  }</span><span class=\"token template-punctuation string\">`</span></span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    endpoint<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>콘솔 출력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"Todo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cjkskilwt00422c10dezjgdhw\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Horizontal\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"completed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"graphql-request-패키지\" style=\"position:relative;\"><a href=\"#graphql-request-%ED%8C%A8%ED%82%A4%EC%A7%80\" aria-label=\"graphql request 패키지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Graphql Request 패키지</h2>\n<p>NodeJS에는 GraphQL API를 호출을 도와주는 여러 가지 패키지들이 있습니다. 그 중 가장 간단하다고 생각하는 <a href=\"https://www.npmjs.com/package/graphql-request\">graphql-request</a> 패키지를 사용해서 GraphQL API를 호출해보았습니다.</p>\n<ul>\n<li>call-graphql.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> request <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-request\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> endpoint <span class=\"token operator\">=</span> <span class=\"token string\">\"https://fakerql.com/graphql\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{\n  Todo(id: \"cjkskilwt00422c10dezjgdhw\") {\n    id\n    title\n    completed\n  }\n}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">request</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>콘솔 출력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ babel<span class=\"token operator\">-</span>node call<span class=\"token operator\">-</span>graphql<span class=\"token punctuation\">.</span>js\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"Todo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cjkskilwt00422c10dezjgdhw\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GB\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"completed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>스크립트를 작성하거나 간단한 애플리케이션의 경우, GraphQL API를 호출하는데 위에 소개된 방법들로 충분할 수도 있겠지만, 좀 더 복잡한 애플리케이션을 개발할 때는 <a href=\"https://github.com/apollographql/apollo-client\">Apollo</a>나 <a href=\"https://github.com/graphql/graphql-relay-js\">Relay</a>와 같은 GraphQL 클라이언트 라이브러리의 사용을 고려해보시기 바랍니다.</p>","timeToRead":2,"fields":{"slug":"/graphql-quick-call/","tags":["JavaScript","자바스크립트","GraphQL","graphql-request"]},"frontmatter":{"title":"GraphQL API 간단하게 호출하기","date":"Aug 5, 2018"}},"next":{"fields":{"slug":"/webpack-development/"},"frontmatter":{"title":"웹팩(Webpack) 개발 편의 기능"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}