{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-package-locks/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-open/"},"frontmatter":{"title":"[파이썬] open() 함수를 이용한 파일 입출력"}},"node":{"html":"<p>자바스크립트 프로젝트에서 개발을 하따보면 <code>package-lock.json</code> 또는 <code>yarn.lock</code> 파일을 자주 접하게 됩니다.<br>\n일부 개발자들이 이 파일을 대수롭지 않게 생각하고 그냥 무시하거나, 심지어 무심코 지웠다가 낭패를 보는 경우가 종종 발생하는데요.<br>\n이번 포스트에서는 패키지 잠금을 위해서 사용되는 이러한 패키지 잠금 파일(package locks)에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"자바스크립트-패키지-매니저\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80\" aria-label=\"자바스크립트 패키지 매니저 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 패키지 매니저</h2>\n<p>우선 현재 자바스크립트에서 사용되고 있는 패키지 매니저에 대해서 간단히 짚고 넘어가겠습니다.<br>\n패키지를 프로젝트에 설치하거나 갱신 또는 삭제하는데 사용되는 도구를 패키지 매니저라고 하는데요.<br>\n현재 자바스크립트 커뮤니티는 <code>npm</code>과 <code>yarn</code>, 이렇게 두가지 도구로 양분이 되어 있는 상황입니다.</p>\n<p>기본적으로 이 두가지 도구 모두 앞으로 설명드릴 패키지 잠금 기능을 지원하고 있는데요.<br>\n<code>npm</code>은 <code>package-lock.json</code> 파일을, <code>yarn</code>은 <code>yarn.lock</code> 파일을 패키지 잠금 파일로 사용합니다.<br>\n즉, 패키지 잠금 파일은 자신이 개발을 하는 프로젝트에서 어떤 패키지 매니저를 사용하느냐에 따라 달라지게 됩니다.</p>\n<h2 id=\"패키지-관리-매커니즘\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B4%80%EB%A6%AC-%EB%A7%A4%EC%BB%A4%EB%8B%88%EC%A6%98\" aria-label=\"패키지 관리 매커니즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 관리 매커니즘</h2>\n<p>패키지 잠금을 이해하려면 먼저 패키지 매니저가 프로젝트가 의존하는 패키지를 어떻게 관리해주는지 이해하는 것이 좋습니다.</p>\n<p>패키지 관리를 위해 <code>npm</code>을 사용하든 <code>yarn</code>을 사용하든 해당 프로젝트의 메타 정보는 <code>package.json</code> 파일을 통해 관리가 됩니다.<br>\n이 <code>package.json</code> 파일에는 해당 프로젝트가 의존하고 있는 모든 패키지 이름과 버전이 나열되어 있는데요.<br>\n일반적으로 설치되어야 하는지 패키지들은 <code>dependencies</code> 항목에, 그리고 개발할 때만 필요한 패키지들은 <code>devDependencies</code> 항목에 명시됩니다.</p>\n<p>예를 들어, <code>react</code>와 <code>react-dom</code> 패키지에 의존하는 프로젝트의 <code>package.json</code> 파일의 모습은 대략 다음과 같을 것입니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-project\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.8.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.8.2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 설치가 필요한 패키지들이 <code>package.json</code> 파일에 등록이 되어 있으면, 프로젝트의 모든 개발자는 패키지 매니저의 설치 커맨드 하나로 모든 패키지를 한번에 설치할 수 있습니다.<br>\n아래와 같이 프로젝트에서 사용하고 있는 패키지 매니저에 따라 설치 커맨드를 날리면 <code>package.json</code> 파일에 등록되어 있는 모든 패키지가 npm registry로 부터 다운받아져 <code>node_modules</code> 디렉터리에 저장됩니다.</p>\n<ul>\n<li>npm</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i\n또는\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<ul>\n<li>yarn</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span>\n또는\n$ <span class=\"token function\">yarn</span> <span class=\"token function\">install</span></code></pre></div>\n<p>참고로, 설치가 끝나고 <code>node_modules</code> 디렉터리 내부에 들어가보면, <code>react</code>와 <code>react-dom</code> 패키지 외에도 생소한 패키지들을 볼 수 있으실 것입니다.<br>\n이러한 패키지들은 해당 프로젝트가 직접적으로 필요하지는 않지만, <code>react</code>와 <code>react-dom</code> 패키지가 필요로하기 때문에 간접적으로 의존하게 된 패키지입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> node_modules\njs-tokens     loose-envify  object-assign prop-types    react         react-dom     react-is      scheduler</code></pre></div>\n<p>이렇게 <code>package.json</code> 파일만 있으면 해당 프로젝트가 의존하고 있는 모든 패키지를 설치할 수 있기 때문에, <code>node_modules</code> 디렉터리는 Git 저장소에 올라가지 않도록 보통 <code>.gitignore</code> 파일에 추가합니다.</p>\n<h2 id=\"설치-시점에-따라-달라지는-패키지-버전\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98-%EC%8B%9C%EC%A0%90%EC%97%90-%EB%94%B0%EB%9D%BC-%EB%8B%AC%EB%9D%BC%EC%A7%80%EB%8A%94-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B2%84%EC%A0%84\" aria-label=\"설치 시점에 따라 달라지는 패키지 버전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치 시점에 따라 달라지는 패키지 버전</h2>\n<p>그렇다면 <code>package.json</code> 파일만 있으면 프로젝트의 모든 개발자가 패키지 매니저를 이용해서 항상 동일한 버전의 패키지를 설치할 수 있을까요?<br>\n안타깝게도 모든 개발자가 정확히 같은 시각 동시에 패키지를 설치하지 않는 이상 개발자들은 서로 상이한 버전의 패키지를 설치할 확률이 발생하게 됩니다.<br>\n가장 큰 이유는 <code>package.json</code> 파일에 등록된 패키지의 버전이 <code>^</code>나 <code>~</code> 등을 이용해서 범위로 지정된 경우가 많기 때문인데요.</p>\n<p>예를 들어, 위 예제와 같이 <code>react</code> 패키지가 <code>\"react\": \"^16.8.2\"</code>이라고 등록되어 있으면, SemVer 규칙에 따라 <code>16.8.2</code> 이상 <code>17.0.0</code> 미만의 범위로 버전이 지정됩니다.<br>\n맨 처음 프로젝트에 <code>react</code> 패키지를 설치한 개발자 A가 특정 버전을 지정하지 않았다고 가정하면, 당시 <code>react</code> 패키지의 최신 버전은 <code>16.8.2</code> 였을 것입니다.<br>\n만약에 추후 개발자 B가 <code>npm i</code>나 <code>yarn</code> 명령어를 통해 모든 패키지를 설치할 당시 <code>react</code> 패키지의 최신 버전이 <code>16.8.3</code>이였다면 개발자 B의 PC에는 <code>16.8.3</code>이 설치되어 있을 것입니다.<br>\n마찬가지로 프로젝트에 몇달 후에 합류한 개발자 C가 <code>react</code> 패키지의 최신 버전이 <code>16.9.1</code>일 때 같은 방법으로 모든 패키지를 설치했다면, 개발자 C의 PC에는 <code>16.9.1</code>이 설치되었을 것입니다.<br>\n게다가 프로젝트의 CI 서버는 배포할 때마다 매번 모든 패키지를 설치한다고 가정하면, 애플리케이션이 배포되는 서버에는 항상 그 당시 최신 버전의 <code>react</code> 패키지가 설치되어 사용될 것입니다.</p>\n<ul>\n<li>package.json: <code>^16.8.2</code></li>\n<li>개발자 A의 PC: <code>16.8.2</code></li>\n<li>개발자 B의 PC: <code>16.8.3</code></li>\n<li>개발자 C의 PC: <code>16.9.1</code></li>\n<li>개발/상용 서버: <code>16.10.0</code></li>\n</ul>\n<p>이렇게 서로 다른 버전의 패키지를 설치해서 사용하는 개발자 간에 큰 혼선이 발생할 수 있습니다.<br>\n(ex. 개발자 A의 PC에서 성공하는 테스트가, 개발자 B의 PC에서는 실패, 개발자 C의 PC에서만 특정 버그 발생)<br>\n또한, 실제 서버에 배포된 애플리케이션이 개발자 컴퓨터에서 돌아가는 애플리케이션과 100% 동일하게 작동한다는 보장이 없어지게 되어 디버깅시 매우 난감한 상황에 빠질 수 있습니다.<br>\n이러한 상황은 패키지 매니저에서 패키지 잠금이 지원되지 않던 시절에 매우 골칫거리였던 문제이며, <code>yarn</code>에서 패키지 잠금을 지원하고, 추후 <code>npm</code>에서도 패키지 잠금을 지원하게 된 이유이기도 합니다.</p>\n<h2 id=\"패키지-잠금\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%9E%A0%EA%B8%88\" aria-label=\"패키지 잠금 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 잠금</h2>\n<p>이렇게 동일한 <code>package.json</code> 파일을 사용해도 시간과 장소에 따라서 서로 다른 버전의 패키지가 설치되는 문제는 패키지 잠금을 통해 해결할 수 있습니다.<br>\n<code>yarn</code>이나 비교적 최근에 릴리즈된 <code>npm</code>을 사용해서 프로젝트에 새로운 패키지를 설치하면 <code>package.json</code> 파일에 해당 패키지가 등록될 뿐만 아니라 패키지 잠금 파일이 생성되는 것을 보실 수 있으실 겁니다.<br>\n<code>package-lock.json</code>이나 <code>yarn.lock</code>과 같은 패키지 잠금 파일에는 프로젝트에 패키지에 최초로 추가될 당시에 정확히 어떤 버전이 설치가 되었는지를 기록됩니다.</p>\n<p>예를 들어, 예제 프로젝트에서 <code>npm i</code>를 실행하면 프로젝트 최상위 디렉터리에 다음과 같이 <code>package-lock.json</code> 파일이 생깁니다.</p>\n<ul>\n<li>package-lock.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-project\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lockfileVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"requires\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"16.11.0\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"resolved\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://registry.npmjs.org/react/-/react-16.11.0.tgz\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"integrity\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha512-M5Y8yITaLmU0ynd0r1Yvfq98Rmll6q8AxaEe88c8e7LxO8fZ2cNgmFt0aGAS9wzf1Ao32NKXtCl+/tVVtkxq6g==\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"requires\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"loose-envify\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.1.0\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"object-assign\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.1.1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"prop-types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^15.6.2\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"loose-envify\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ... 생략 ... <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"object-assign\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ... 생략 ... <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"prop-types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ... 생략 ... <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>react</code> 패키지 부분을 보면 현재 이 글을 쓰고 있는 당시 <code>react</code>의 최신 버전인 <code>16.11.0</code>이 설치된 것을 알 수 있습니다.<br>\n이렇게 한 번 <code>package-lock.json</code> 파일이 생성되면, 그 이후로는 <code>npm i</code> 커맨드를 실행했을 때, npm registry에 등록된 최신 버전을 설치하지 않습니다.<br>\n대신에, 항상 <code>package-lock.json</code> 파일에 명시되어 있는 버전으로 패키지를 설치를 해주기 때문에, 설치 시점에 상관없이 항상 동일한 버전의 패키지가 설치되는 것을 보장받을 수 있습니다.</p>\n<p>자, 이제 제가 이 <code>package-lock.json</code> 파일을 프로젝트의 Git 저장소에 올려두면, 다른 개발자들은 <code>package.json</code> 파일 뿐만 아니라 <code>package-lock.json</code> 파일까지 내려받게 될 것입니다.<br>\n그러면 앞으로 프로젝트의 모든 개발자의 PC뿐만 아니라 애플리케이션이 배포되는 서버까지도, npm registry에 배포된 최신 버전을 무시하고 <code>package-lock.json</code>에 기록된 버전 기준으로 패키지가 설치될 것입니다. 🤗</p>\n<h2 id=\"주의-사항\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\" aria-label=\"주의 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의 사항</h2>\n<p>여러 개발자가 함께 작업하는 프로젝트에서 패키지 잠금 관련해서 불상사가 일어나지 않도록 각별히 주의해야합니다.</p>\n<p>우선, 프로젝트를 최초 셋업하는 개발자는 패키지 잠금 파일을 Git 저장소에 반드시 올려서 다른 개발자들이 패키지 잠금 파일을 기준으로 패키지를 설치할 수 있도록 해야합니다.<br>\n그리고 패키지 잠금 파일은 패키지 매니저가 신규 패키지를 설치하거나 기존 패키지를 갱신/제거할 때마다 <code>package.json</code>과 자동으로 동기를 맞춰주기 때문에 개발자가 이 파일을 직접 수정해야 할 필요는 없으며 해서도 안 됩니다.<br>\n마지막으로 신규 패키지를 설치하거나 기존 패키지를 갱신/제거한 개발자는 <code>package.json</code>과 더불어 함께 업데이트된 패키지 잠금 파일을 반드시 커밋해야 합니다.<br>\n그렇게 하지 않으면 다른 개발자들이 <code>npm i</code>나 <code>yarn</code>를 실행했을 때, <code>package.json</code>는 그대로인데 <code>package-lock.json</code>만 업데이트되는 황당한 경우를 겪게 됩니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 <code>package-lock.json</code> 또는 <code>yarn.lock</code> 파일이 왜 필요하고 어떻게 관리해야되는지 알아보았습니다.<br>\n패키지 잠금 파일에 대한 좀 더 자세하 설명은 각 패키지 매니저의 공식 레퍼런스를 참고 바라겠습니다.</p>\n<ul>\n<li>npm: <a href=\"https://docs.npmjs.com/files/package-lock.json\">https://docs.npmjs.com/files/package-lock.json</a></li>\n<li>yarn: <a href=\"https://yarnpkg.com/lang/en/docs/yarn-lock/\">https://yarnpkg.com/lang/en/docs/yarn-lock/</a></li>\n</ul>","timeToRead":6,"fields":{"slug":"/js-package-locks/","tags":["JavaScript","자바스크립트","NodeJS","노드JS","npm","npm login","npm whoami","npm info","npm publish","npm unpublish"]},"frontmatter":{"title":"패키지 잠금 파일 (package-lock.json, yarn.lock)","date":"Nov 9, 2019"}},"next":{"fields":{"slug":"/python-unittest-testcase/"},"frontmatter":{"title":"[파이썬] 단위 테스트의 기본 (unittest)"}}}}}