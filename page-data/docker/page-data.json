{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/docker/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/docker-nodejs/"},"frontmatter":{"title":"Docker를 이용한 NodeJS 개발"}},"node":{"html":"<h2 id=\"개발자에게-docker란\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%97%90%EA%B2%8C-docker%EB%9E%80\" aria-label=\"개발자에게 docker란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발자에게 Docker란?</h2>\n<p>Docker는 쉽게 말해서 컨테이너(container)를 돌려주는 엔진(engine)이라고 생각할 수 있는데요.\n2013년 출시 후 꾸준히 인기를 얻어온 Docker는 이제는 개발자들도 모르면 불편할 정도로 대중화가 되어 버린 것 같습니다.\n하지만 아직도 많은 개발자들이 업무에서 Docker를 매일 사용하고 있음에도 불구하고, Docker를 시스템 또는 DevOps 엔지니어만을 위한 도구로 여기거나, Docker 직접 다루는 것을 회피하다가, 문제가 생겼을 때 스스로 해결을 하지 못해서 곤혼스러워하는 개발자들도 종종 보게 됩니다.</p>\n<p>Docker가 대세가 되면서 최근에 대다수의 애플리케이션들은 컨테이너화(containerization)되어 개발되고 배포되고 있습니다.\n개발자의 컴퓨터에는 당연히 Docker가 깔려있어야 하고, 전체 개발 프로세스가 Docker를 위에서 이뤄진다고 해도 과언이 아닐 것입니다.\n따라서 개발자 입장에서도 Docker는 피하기 어려운 도구이고, 잘 다룰 줄 알면 개발 업무에 있어서 여러 가지로 편해지는 점들이 많아집니다.</p>\n<h2 id=\"container\" style=\"position:relative;\"><a href=\"#container\" aria-label=\"container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Container</h2>\n<p>Docker에서 가장 중요한 개념인 컨테이너(container)는 기본적으로 호스트(host) 컴퓨터에서 돌아가고 있는 하나의 프로세스입니다.\n하지만, 일반 프로세스와는 다르게 container는 host 컴퓨터와 그 위에서 돌아가는 다른 프로세스들로 부터 격리되도록 설계되어 있습니다.\n흔히 container를 VM(virtual machine)과 많이 비교하는데, 자체적인 운영체제(guest OS)를 포함하고 있어서 하드웨어 리소스를 많이 잡아 먹어서 느리고 무거운 VM 대비, container는 VM처럼 격리된 환경에서도 일반 프로세스처럼 빠르고 가볍게 돌아갑니다.\n이러한 container의 효율성과 보안성 때문에 Docker는 많은 사람들로부터 빠르게 사랑받을 수 있게 되었습니다.</p>\n<h2 id=\"image\" style=\"position:relative;\"><a href=\"#image\" aria-label=\"image permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Image</h2>\n<p>container image, 줄여서 이미지(image)는 애플리케이션 코드 뿐만 아니라 애플리케이션 실행에 필요한 최소한의 환경(언어 런타임, 라이브러리 패키지 등)을 포함하고 있는 바이너리(binary) 파일입니다.\n하나의 image로 부터 동일한 container를 계속해서 만들어낼 수 있으며, 동시에 여러 개의 container를 띄울 수도 있어서 확장성(scalability)이 좋습니다.\n이러한 image는 <a href=\"https://hub.docker.com/\">Docker Hub</a>와 같은 네트워크 상의 Docker registry통해 손쉽게 공유할 수 있기 때문에 이식성(portability)도 매우 뛰어납니다.\n즉, 어떤 컴퓨터에서든지 Docker만 깔려 있다면 이 image를 내려받아 contianer로 구동하면 동일하게 작동하는 애플리케이션을 얻을 수 있습니다.</p>\n<h2 id=\"container-vs-image\" style=\"position:relative;\"><a href=\"#container-vs-image\" aria-label=\"container vs image permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Container vs. Image</h2>\n<p>contianer와 image를 햇갈려 하시는 부분이 많은데, 쉽게 말해 Image는 container의 스냅샷(snapshot)을 떠어놓은 것으로 생각하면 이해가 편하실 것입니다.\n반대로 container는 컴퓨터에서 살아서 돌아가고 있는 image의 한 인스턴스(instance)라고 생각할 수 있습니다.</p>\n<p><img src=\"https://docs.docker.com/engine/images/engine-components-flow.png\" alt=\"Docker Engine Components Flow\"></p>\n<h2 id=\"docker-desktop-설치\" style=\"position:relative;\"><a href=\"#docker-desktop-%EC%84%A4%EC%B9%98\" aria-label=\"docker desktop 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Desktop 설치</h2>\n<p>컴퓨터에서 Docker container를 돌리기 위한 환경을 구축하려면 기본적으로 해당 컴퓨터에 Docker Desktop 깔려 있어야 합니다.\nMac 또는 Windows 용 Docker Desktop은 <a href=\"https://www.docker.com/products/docker-desktop\">Docker 사이트</a>에서 다운로드하여 설치할 수 있습니다.</p>\n<p>설치 후에 터미널에서 다음과 같이 <code>docker</code> 명령어로 Docker 클라이언트와 서버의 버전을 확인해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> <span class=\"token parameter variable\">-v</span>\nDocker version <span class=\"token number\">19.03</span>.8, build afacb8b\n$ <span class=\"token function\">docker</span> version\nClient: Docker Engine - Community\n Version:           <span class=\"token number\">19.03</span>.8\n API version:       <span class=\"token number\">1.40</span>\n Go version:        go1.12.17\n Git commit:        afacb8b\n Built:             Wed Mar <span class=\"token number\">11</span> 01:21:11 <span class=\"token number\">2020</span>\n OS/Arch:           darwin/amd64\n Experimental:      <span class=\"token boolean\">false</span>\n\nServer: Docker Engine - Community\n Engine:\n  Version:          <span class=\"token number\">19.03</span>.8\n  API version:      <span class=\"token number\">1.40</span> <span class=\"token punctuation\">(</span>minimum version <span class=\"token number\">1.12</span><span class=\"token punctuation\">)</span>\n  Go version:       go1.12.17\n  Git commit:       afacb8b\n  Built:            Wed Mar <span class=\"token number\">11</span> 01:29:16 <span class=\"token number\">2020</span>\n  OS/Arch:          linux/amd64\n  Experimental:     <span class=\"token boolean\">true</span>\n containerd:\n  Version:          v1.2.13\n  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429\n runc:\n  Version:          <span class=\"token number\">1.0</span>.0-rc10\n  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd\n docker-init:\n  Version:          <span class=\"token number\">0.18</span>.0\n  GitCommit:        fec3683</code></pre></div>\n<p><code>hello-world</code> 라는 컨테이너를 실행해서 <code>Hello from Docker!</code>가 출력되면 정상적으로 설치가 완료된 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> run hello-world\nUnable to <span class=\"token function\">find</span> image <span class=\"token string\">'hello-world:latest'</span> locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete\nDigest: sha256:f9dfddf63636d84ef479d645ab5885156ae030f611a56f3a7ac7f2fdd86d7e4e\nStatus: Downloaded newer image <span class=\"token keyword\">for</span> hello-world:latest\n\nHello from Docker<span class=\"token operator\">!</span>\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n <span class=\"token number\">1</span>. The Docker client contacted the Docker daemon.\n <span class=\"token number\">2</span>. The Docker daemon pulled the <span class=\"token string\">\"hello-world\"</span> image from the Docker Hub.\n    <span class=\"token punctuation\">(</span>amd64<span class=\"token punctuation\">)</span>\n <span class=\"token number\">3</span>. The Docker daemon created a new container from that image <span class=\"token function\">which</span> runs the\n    executable that produces the output you are currently reading.\n <span class=\"token number\">4</span>. The Docker daemon streamed that output to the Docker client, <span class=\"token function\">which</span> sent it\n    to your terminal.\n\nTo try something <span class=\"token function\">more</span> ambitious, you can run an Ubuntu container with:\n $ <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> ubuntu <span class=\"token function\">bash</span>\n\nShare images, automate workflows, and <span class=\"token function\">more</span> with a <span class=\"token function\">free</span> Docker ID:\n https://hub.docker.com/\n\nFor <span class=\"token function\">more</span> examples and ideas, visit:\n https://docs.docker.com/get-started/</code></pre></div>\n<h2 id=\"play-with-docker\" style=\"position:relative;\"><a href=\"#play-with-docker\" aria-label=\"play with docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Play with Docker</h2>\n<p>본인의 컴퓨터에서 Docker를 설치하기가 부담스러운 분들에게는 <a href=\"https://labs.play-with-docker.com\">Play with Docker</a>라고 하는 Docker Playground를 추천드립니다.\n이 사이트에 접속하시면 브라우저 상에서 간단하게 Docker 명령어들을 연습해볼 수 있습니다.</p>\n<p><img src=\"https://i.imgur.com/L6jRZ9f.png\" alt=\"Play with Docker\"></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Docker에 대한 기본 기념과 Docker Desktop 설치 방법에 대해서 간단히 알아보았습니다.\n앞으로 개발자를 위한 Docker 사용법에 대해서 꾸준히 포스팅을 해보도록 하겠습니다.</p>","timeToRead":4,"fields":{"slug":"/docker/","tags":["Docker","도커","container","컨테이너","image","이미지"]},"frontmatter":{"title":"Docker 시작하기 (개념/설치)","date":"Apr 4, 2020"}},"next":{"fields":{"slug":"/python-functools-reduce/"},"frontmatter":{"title":"파이썬 reduce 함수 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}