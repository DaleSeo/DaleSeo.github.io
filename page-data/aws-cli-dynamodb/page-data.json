{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/aws-cli-dynamodb/","result":{"pageContext":{"previous":{"fields":{"slug":"/aws-cli-s3/"},"frontmatter":{"title":"AWS CLI로 Amazon S3 다루기 - 1"}},"node":{"html":"<p>DynamoDB는 AWS에서 제공하는 관리형 NoSQL 데이터베이스 서비스입니다. AWS CLI를 이용하면 간편하게 DynamoDB 테이블을 제어하고 테이터에 접근할 수 있습니다. 이 번 포스트에서는 자주 사용되는 AWS CLI의 DynamoDB 관련 커맨드을 살펴보도록 하겠습니다.</p>\n<h2 id=\"테이블-생성하기\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"테이블 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테이블 생성하기</h2>\n<p>아직 본인 AWS 계정에 DynamoDB 테이블이 없으신 분들은 일단 테이블부터 생성하셔야 합니다. 예제로 과일 정보를 저장하기 위해서 <code>Fruits</code> 테이블을 생성해보겠습니다. <code>aws dynamodb create-table</code> 커맨드를 사용하며 다음 4가지 옵션을 옵션값을 넘겨줘야 합니다.</p>\n<ul>\n<li><code>--table-name</code>: 테이블명 (앞으로 나오는 다른 커맨드들에서도 사용됨)</li>\n<li><code>--attribute-definitions</code>: 애트리뷰트(RDB의 열/칼럼/필드 개념) 스키마(이름과 타입) 정의</li>\n<li><code>--key-schema</code>: 키 정의. Hash 키는 반드시 필요하며, Range 키는 선택</li>\n<li><code>--provisioned-throughput</code>: 테이블 처리량</li>\n</ul>\n<p>여기서 주의할 점은 <code>attribute-definitions</code> 옵션에는 키로 사용될 애트리뷰트에 대한 스키마 정의만 필요로 합니다.\nDynamoDB는 Schemaless 데이터베이스이기 때문에 키 애트리뷰트를 제외한 다른 애트리뷰트의 스키마 정의에는 관심이 없기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb create-table --table-name Fruits <span class=\"token punctuation\">\\</span>\n  --attribute-definitions <span class=\"token assign-left variable\">AttributeName</span><span class=\"token operator\">=</span>Id,AttributeType<span class=\"token operator\">=</span>S <span class=\"token punctuation\">\\</span>\n  --key-schema <span class=\"token assign-left variable\">AttributeName</span><span class=\"token operator\">=</span>Id,KeyType<span class=\"token operator\">=</span>HASH <span class=\"token punctuation\">\\</span>\n  --provisioned-throughput <span class=\"token assign-left variable\">ReadCapacityUnits</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>,WriteCapacityUnits<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"TableDescription\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"AttributeDefinitions\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"AttributeName\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Id\"</span>,\n                <span class=\"token string\">\"AttributeType\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"S\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>,\n        <span class=\"token string\">\"TableName\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Fruits\"</span>,\n        <span class=\"token string\">\"KeySchema\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"AttributeName\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Id\"</span>,\n                <span class=\"token string\">\"KeyType\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"HASH\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>,\n        <span class=\"token string\">\"TableStatus\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"CREATING\"</span>,\n        <span class=\"token string\">\"CreationDateTime\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1526698654.133</span>,\n        <span class=\"token string\">\"ProvisionedThroughput\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"NumberOfDecreasesToday\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,\n            <span class=\"token string\">\"ReadCapacityUnits\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,\n            <span class=\"token string\">\"WriteCapacityUnits\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>응답 값에서 <code>TableStatus</code> 필드값이 <code>CREATING</code>이 것에 주목할 필요가 있습니다. <code>aws dynamodb create-table</code> 커맨드는 비동기로 응답하기 때문에 응답 순간에는 아직 테이블이 생성되고 있는 중입니다. 왜냐면 DynamoDB가 테이블을 생성하는데는 약간의 (경험상 수십초? 길어야 1~2분) 시간이 필요하기 때문입니다. 그럼 테이블이 생성이 완료되었다는 것은 어떻게 알 수 있을까요?</p>\n<h2 id=\"테이블-정보-조회하기\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%95%EB%B3%B4-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0\" aria-label=\"테이블 정보 조회하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테이블 정보 조회하기</h2>\n<p><code>aws dynamodb describe-table</code> 커맨드를 사용하면 생성한 테이블의 현재 상태를 포함한 기본적인 테이블 자체의 정보를 조회할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb describe-table --table-name Fruits\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n        <span class=\"token string\">\"KeySchema\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"AttributeName\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Id\"</span>,\n                <span class=\"token string\">\"KeyType\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"HASH\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>,\n        <span class=\"token string\">\"TableStatus\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ACTIVE\"</span>,\n        <span class=\"token string\">\"CreationDateTime\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1526698654.133</span>,\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>TableStatus</code> 필드값이 <code>ACTIVE</code>로 응답되었으므로 테이블이 활성화 상태입니다. 이 테이블은 이제 데이터를 받아드릴 준비가 되었습니다.</p>\n<h2 id=\"데이터-추가\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80\" aria-label=\"데이터 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 추가</h2>\n<p><code>aws dynamodb put-item</code> 커맨드로 사과에 대한 데이터를 추가해보겠습니다. <code>--item</code> 옵션에 Json 포멧의 문자열을 넘겨주면 되는데, 애트리뷰트 값 부분이 단순 값이 아닌 <code>{\"타입\": \"값\"}</code> 형태라는 것에 주의하셔야 합니다. <code>S</code>은 문자열(String) 타입을 의미하고, <code>N</code>은 숫자(Number) 타입을 의미합니다. DynamoDB에서 지원하는 데이터 타입에 대해서 더 알고 싶은 신 분들은 <a href=\"https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/DynamoDBMapper.DataTypes.html\">여기</a>를 참고하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb put-item --table-name Fruits <span class=\"token punctuation\">\\</span>\n  --item <span class=\"token string\">'{\"Id\": {\"S\": \"A1\"}, \"Name\": {\"S\": \"Apple\"}, \"Price\": {\"N\": \"1000\"}}'</span></code></pre></div>\n<h2 id=\"데이터-조회\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C\" aria-label=\"데이터 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 조회</h2>\n<p>방금 <code>Fruits</code>에 추가한 사과 데이터는 <code>aws dynamodb get-item</code> 커맨드로 조회할 수 있습니다. <code>--key</code> 옵션에 해당 데이터를 생성할 때 사용했던 키 값을 넘겨주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb get-item --table-name Fruits <span class=\"token punctuation\">\\</span>\n  --key <span class=\"token string\">'{\"Id\": {\"S\": \"A1\"}}'</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Item\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"S\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"A1\"</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Price\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"N\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1000\"</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"S\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Apple\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"데이터-수정\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%88%98%EC%A0%95\" aria-label=\"데이터 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 수정</h2>\n<p>사과 가격을 2배로 올려보겠습니다. 데이터 수정은 데이터를 추가할 때 처럼 <code>aws dynamodb put-item</code> 커맨드로 레코드 전체를 덮어쓰기를 해거나 <code>aws dynamodb update-item</code> 커맨드로 일부 애트리뷰트만 수정할 수 있습니다. <code>--key</code> 옵션으로 수정할 데이터를 지정해주고, <code>--update-expression</code>과 <code>--expression-attribute-values</code> 옵션으로 수정될 애트리뷰트와 수정될 값을 지정해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb update-item --table-name Fruits <span class=\"token punctuation\">\\</span>\n  --key <span class=\"token string\">'{\"Id\": {\"S\": \"A1\"}}'</span> <span class=\"token punctuation\">\\</span>\n  --update-expression <span class=\"token string\">'SET Price=:Price'</span> <span class=\"token punctuation\">\\</span>\n  --expression-attribute-values <span class=\"token string\">'{\":Price\": {\"N\": \"2000\"}}'</span></code></pre></div>\n<h2 id=\"데이터-삭제\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C\" aria-label=\"데이터 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 삭제</h2>\n<p>데이터 삭제는 <code>aws dynamodb delete-item</code> 커맨드를 이용하는데, 데이터 단건 조회처럼 <code>--key</code> 옵션에 삭제할 데이터의 키를 넘겨주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb delete-item --table-name Fruits <span class=\"token punctuation\">\\</span>\n  --key <span class=\"token string\">'{\"Id\": {\"S\": \"A1\"}}'</span></code></pre></div>\n<h2 id=\"여러-데이터-추가삭제\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EA%B0%80%EC%82%AD%EC%A0%9C\" aria-label=\"여러 데이터 추가삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 데이터 추가/삭제</h2>\n<p>AWS CLI는 한 번에 여러 개의 데이터를 추가/삭제할 수 있도록 <code>aws dynamodb batch-write-item</code> 커맨드를 제공합니다. <code>--request-items</code> 옵션을 통해 추가/삭제되는 내용을 넘겨주면 됩니다. 이 커맨드를 이용해서 3개의 과일 레코드를 한 번에 추가해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb batch-write-item --request-items file://fruites.json\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"UnprocessedItems\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>--request-items</code> 옵션 값이 너무 길어서 별도의 파일에 저장하고 파일 이름을 넘겼습니다. <code>fruites.json</code> 파일의 내용은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Fruits\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"PutRequest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"Item\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"Id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"S\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"S\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"Price\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"N\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1000\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"PutRequest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"Item\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"Id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"S\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"B1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"S\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"Price\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"N\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2000\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"PutRequest\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"Item\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"Id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"S\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"S\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Cherry\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"Price\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"N\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5000\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"데이터-쿼리\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%BF%BC%EB%A6%AC\" aria-label=\"데이터 쿼리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 쿼리</h2>\n<p>테이블로 부터 여러 건의 레코드를 키나 인덱스를 기준으로 조회하려면 <code>aws dynamodb query</code> 커맨드를 이용해서 DynamoDB에 쿼리 요청해야합니다. 본 예제 테이블은 Range 키가 없고 별도의 인덱스도 추가해주지 않았기 때문에 Hash 키로만 쿼리를 날릴 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb query --table-name Fruits\n  --key-condition-expression <span class=\"token string\">'Id = :Id'</span>\n  --expression-attribute-values <span class=\"token string\">'{\":Id\": {\"S\": \"B1\"}}'</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Items\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"S\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"B1\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"Price\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"N\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2000\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"S\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Banana\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"Count\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,\n    <span class=\"token string\">\"ScannedCount\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,\n    <span class=\"token string\">\"ConsumedCapacity\"</span><span class=\"token builtin class-name\">:</span> null\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>응답 결과에서 <code>ScannedCount</code> 필드는 쿼리 수행을 위해 내부적으로 DynamoDB가 접근한 레코드 수를 의미하고 <code>Count</code> 필드는 최종 응답을 통해 반환된 레코드 수를 의미합니다. 본 예제에서는 별도의 필터를 사용하지 않았기 때문에 1로 일치합니다.</p>\n<h2 id=\"데이터-스캔\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8A%A4%EC%BA%94\" aria-label=\"데이터 스캔 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 스캔</h2>\n<p><code>aws dynamodb scan</code> 커맨드로 데이터를 스캔을 하면 키나 인덱스가 아닌 다른 일반 애트리뷰트로도 여러 건의 데이터를 조회할 수 있습니다. 대신에 테이블 전체를 스캔하기 때문에 성능이 떨어지며 비용도 비싼 단점이 있습니다. 아래는 3000보다 저렴한 과일을 조회하는 스캔 예제입니다. <code>--filter-expression</code> 옵션에 필터링 조건을 넘기고, <code>--expression-attribute-values</code> 옵션에 조건에서 사용될 값을 넘겨주면 됩니다. 추가적으로 <code>--return-consumed-capacity</code> 옵션을 사용하면 해당 커맨드가 얼마의 테이블 처리량을 소모했는지를 알 수 있어서 스캔 같이 비용이 비쌀 수 있는 커맨드를 날릴 때 유용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">aws dynamodb scan --table-name Fruits <span class=\"token punctuation\">\\</span>\n  --filter-expression <span class=\"token string\">'Price &lt; :Price'</span> <span class=\"token punctuation\">\\</span>\n  --expression-attribute-values <span class=\"token string\">'{\":Price\": {\"N\": \"3000\"}}'</span> <span class=\"token punctuation\">\\</span>\n  --return-consumed-capacity TOTAL\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Items\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"S\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"B1\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"Price\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"N\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2000\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"S\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Banana\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"S\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"A1\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"Price\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"N\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1000\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"S\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Apple\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>,\n    <span class=\"token string\">\"Count\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,\n    <span class=\"token string\">\"ScannedCount\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">3</span>,\n    <span class=\"token string\">\"ConsumedCapacity\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"TableName\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Fruits\"</span>,\n        <span class=\"token string\">\"CapacityUnits\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0.5</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>응답 결과에서 <code>ScannedCount</code>와 <code>Count</code> 필드를 통해 총 3개의 데이터가 스캔 되었고 그 중 필터링 조건에 맞는 2개의 데이터만 반환되었음을 알 수 있습니다. 이를 위해 해당 테이블의 처리량을 0.5 RCU 만큼 소모했다는 것을 알 수 있습니다. 테이블에 레코드수가 많을 수록 <code>ScannedCount</code>와 <code>Count</code> 필드 값의 차이는 커지게 됩니다.</p>\n<h2 id=\"테이블-제거\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%9C%EA%B1%B0\" aria-label=\"테이블 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테이블 제거</h2>\n<p>마지막으로 <code>Fruits</code> 테이블을 제거해보록 하겠습니다. <code>aws dynamodb delete-table</code> 커맨드에 <code>--table-name</code> 옵션으로 테이블 이름만 넘겨주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb delete-table --table-name Fruits\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"TableDescription\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"TableName\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Fruits\"</span>,\n        <span class=\"token string\">\"TableStatus\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"DELETING\"</span>,\n        <span class=\"token string\">\"ProvisionedThroughput\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"NumberOfDecreasesToday\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,\n            <span class=\"token string\">\"ReadCapacityUnits\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,\n            <span class=\"token string\">\"WriteCapacityUnits\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테이블 생성과 마찬가지로 테이블 삭제도 비동기 커맨드이므로 아직 삭제 작업이 끝나지 않았다는 것을 알려주기 위해 <code>TableStatus</code> 값을 <code>DELETING</code>로 응답합니다. 잠시 후에 <code>aws dynamodb describe-table</code> 커맨드를 날려보시면 테이블이 삭제되었기 때문에 <code>ResourceNotFoundException</code> 예외가 응답될 것입니다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>지금까지 DynamoDB를 다루기 위한 여러가지 AWS CLI 커맨드와 옵션들을 살펴보았습니다. 커맨드들을 최종 정리를 해보면 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>커맨드</th>\n<th>용도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aws dynamodb create-table</td>\n<td>테이블 생성</td>\n</tr>\n<tr>\n<td>aws dynamodb describe-table</td>\n<td>테이블 정보 조회</td>\n</tr>\n<tr>\n<td>aws dynamodb put-item</td>\n<td>데이터 추가</td>\n</tr>\n<tr>\n<td>aws dynamodb get-item</td>\n<td>데이터 조회</td>\n</tr>\n<tr>\n<td>aws dynamodb update-item</td>\n<td>데이터 수정</td>\n</tr>\n<tr>\n<td>aws dynamodb delete-item</td>\n<td>데이터 삭제</td>\n</tr>\n<tr>\n<td>aws dynamodb batch-write-item</td>\n<td>여러 데이터 추가/삭제</td>\n</tr>\n<tr>\n<td>aws dynamodb query</td>\n<td>데이터 쿼리</td>\n</tr>\n<tr>\n<td>aws dynamodb scan</td>\n<td>데이터 스캔</td>\n</tr>\n<tr>\n<td>aws dynamodb delete-table</td>\n<td>테이블 제거</td>\n</tr>\n</tbody>\n</table>","timeToRead":7,"fields":{"slug":"/aws-cli-dynamodb/","tags":["AWS","Amazon Web Services","AWS CLI","DynamoDB","DDB","아마존 웹 서비스","다이나모DB"]},"frontmatter":{"title":"AWS CLI로 DynamoDB 다루기","date":"May 19, 2018"}},"next":{"fields":{"slug":"/aws-cli-configure/"},"frontmatter":{"title":"AWS CLI로 인증 정보 (Access Key ID, Secret Access Key) 관리하기"}}}}}