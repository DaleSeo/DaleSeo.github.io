{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/aws-cli-configure/","result":{"pageContext":{"previous":{"fields":{"slug":"/aws-cli-dynamodb/"},"frontmatter":{"title":"AWS CLI로 DynamoDB 다루기"}},"node":{"html":"<p>Amazon Web Services(AWS)에 접근을 하기위해서는 필수적으로 인증 절차를 필요로 합니다. 사람이 직접 터미널 상에서 AWS CLI를 통해서 접근하든, 어플리케이션이 AWS SDK를 통해서 접근하든지, 적절한 방법을 통해 인증을 받지 않으면 AWS로 부터 정상적인 응답을 얻을 수 없습니다. 본 포스트에서는 AWS CLI를 통해서 간단하게 AWS 인증 정보를 설정하는 방법에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"인증-정보-개념\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%A0%95%EB%B3%B4-%EA%B0%9C%EB%85%90\" aria-label=\"인증 정보 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 정보 개념</h2>\n<p>AWS도 기본적으로 일반적인 웹사이트처럼 아이디와 비밀번호와 같은 인증 정보를 사용자로 부터 받아 검증하는 방식으로 인증을 처리합니다. 단지 차이는 AWS에서는 이 인증 정보를 다소 생소한 용어로 부르고 있기 때문에 이를 숙지해 놓으면 도움이 됩니다.</p>\n<ul>\n<li>Access Key ID: 일반 웹사이트의 아이디에 해당. 줄여서 Aceess Key(접근키)라고 부르기도 함.</li>\n<li>Secret Access Key: 일반 웹사이트의 비밀번호에 해당. 줄여서 Secret Key(보안키)라고 부르기도 함.</li>\n</ul>\n<p>하나의 AWS 계정은 여러 개의 Access Key ID와 Secret Access Key 쌍을 생성해서 사용할 수 있습니다. AWS에서는 보안을 위해서 IAM 사용자에 대한 Access Key ID와 Secret Access Key를 생성하여 쓰도록 가이드하고 있습니다. IAM이 생소하시고 당장 IAM을 공부할 시간이 없으신 분들은 <a href=\"https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_add-key\">관련 개발자 가이드</a>를 참조하셔서 루트 사용자에 대한 Access Key ID와 Secret Access Key를 생성하신 후 다음 섹션을 따라오시기 바랍니다.</p>\n<h2 id=\"인증-정보-설정\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%A0%95%EB%B3%B4-%EC%84%A4%EC%A0%95\" aria-label=\"인증 정보 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 정보 설정</h2>\n<p>매번 AWS을 호출할 때 마다 위에서 생성한 Access Key ID와 Secret Access Key를 보내려면 클라이언트 측에서 설정이 필요합니다. AWS CLI은 간편하게 인증 정보 설정이 가능하도록 <code>aws configure</code> 커맨드를 제공해주고 있습니다. 예를 들어, 다음 커맨드는 Access Key ID는 <code>ABCDEF</code>로 Secret Access Key는 <code>GHIJKL</code>로 설정해줍니다. (실제값은 이보다 훨씬 깁니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws configure\nAWS Access Key ID <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>: ABCDEF\nAWS Secret Access Key <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>: GHIJKL\nDefault region name <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>: ap-northeast-2\nDefault output <span class=\"token function\">format</span> <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>: json</code></pre></div>\n<p>아래 두 개의 항목(디폴트 으 리전 및 출력 포멧)은 인증과 직접적인 관계는 없으며 편의상 제공되는 옵션이라고 생각하시면 됩니다. AWS CLI의 모든 커맨드는 <code>--region</code>과 <code>--output</code> 옵션을 가지고 있는데, 생략했을 경우, <code>aws configure</code> 커맨드로 설정해준 값이 사용됩니다.</p>\n<h2 id=\"인증-정보-확인\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%A0%95%EB%B3%B4-%ED%99%95%EC%9D%B8\" aria-label=\"인증 정보 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 정보 확인</h2>\n<p>설정한 인증 정보를 확인하기 위해서는 <code>aws configure list</code> 커맨드를 사용하시면 됩니다. 아래와 같이 테이블 형태로 결과가 출력이 돠는데, 보안을 위해서 인증 정보 설정값들은 뒷에 4자리만 보여줍니다. 그 밖에 <code>profile</code> 항목을 포함한 다른 결과값들은 다음 섹션에서 차례대로 다루도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws configure list\n      Name                    Value             Type    Location\n      ----                    -----             ----    --------\n   profile                <span class=\"token operator\">&lt;</span>not set<span class=\"token operator\">></span>             None    None\naccess_key     ****************CDEF shared-credentials-file\nsecret_key     ****************IJKL shared-credentials-file\n    region           ap-northeast-2      config-file    ~/.aws/config</code></pre></div>\n<p>추가로 <code>aws configure get</code> 커맨드를 사용하면 마스킹되지 않은 인증 정보도 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws configure get aws_access_key_id\nABCDEF\n$ aws configure get aws_secret_access_key\nGHIJKL</code></pre></div>\n<p>반대로 <code>aws configure set</code> 커맨드를 사용하면 개별 항목 별로 설정이 가능한데, Access Key ID를 바꾸면서 Secret Access Key는 안 바꾸는 경우는 거의 없으므로 이 커맨드는 그리 많이 쓸 일은 없는 것 같습니다.</p>\n<h2 id=\"인증-프로파일-설정\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC-%EC%84%A4%EC%A0%95\" aria-label=\"인증 프로파일 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 프로파일 설정</h2>\n<p>만약 한 쌍 이상의 인증 정보를 설정하고 싶을 때는 어떻게 할까요? 인증 정보가 외우기 쉬운 형태도 아니고 매번 <code>aws configure</code> 커맨드를 통해서 바꾸기는 번거롭습니다. 다행히 AWS에서는 프로파일 기능을 지원하기 때문에 우리는 여러 쌍의 인증 정보를 설정해놓고 전환하면서 사용할 수 있습니다. 사용 방법은 위에서 살펴본 <code>aws configure</code> 커맨드에 <code>--profile</code> 옵션만 추가해주면 됩니다. <code>--profile</code> 옵션을 생략한 경우는 디폴트 프로파일에 대한 커맨드였다고 보시면 됩니다.</p>\n<p>예를 들어, 개인 AWS 계정에 대한 인증 정보는 디폴트 프로파일을 사용하고, 회사 AWS 계정에 대한 인증 정보는 다른 프로파일에 설정해서 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws configure --profile work\nAWS Access Key ID <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>: WORK1234\nAWS Secret Access Key <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>: WORK5678\nDefault region name <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>: us-east-1\nDefault output <span class=\"token function\">format</span> <span class=\"token punctuation\">[</span>None<span class=\"token punctuation\">]</span>: table\n\n$ aws configure list --profile work\n      Name                    Value             Type    Location\n      ----                    -----             ----    --------\n   profile                     work           manual    --profile\naccess_key     ****************1234 shared-credentials-file\nsecret_key     ****************5678 shared-credentials-file\n    region           \t\t\tus-east-1      config-file    ~/.aws/config</code></pre></div>\n<p>디폴트 프로파일 외에 다른 프로파일을 사용할 때는 AWS CLI 커맨드에 <code>--profile</code> 옵션을 붙여주기만 하시면 됩니다. 아래 예제는 동일한 <code>aws ec2 describe-instances</code> 커맨드를 디폴트 프로파일과 work 프로파일에 각각 실행시킨 모습입니다. 두 프로파일이 접근하는 AWS 계정이 다르기 때문에 결과값의 내용이 상이할 뿐만 아니라 결과 포멧 설정도 다르기 때문에 (json vs. table) 다른 스타일로 출력되게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws ec2 describe-instances\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Reservations\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>. 생략 <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n$ aws ec2 describe-instances --profile <span class=\"token builtin class-name\">test</span>\n------------------------------------------------------------------------------\n<span class=\"token operator\">|</span>                              DescribeInstances                             <span class=\"token operator\">|</span>\n+----------------------------------------------------------------------------+\n<span class=\"token operator\">||</span>                               Reservations                               <span class=\"token operator\">||</span>\n<span class=\"token operator\">|</span>+-------------------------------------+------------------------------------+<span class=\"token operator\">|</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>. 생략 <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span></code></pre></div>\n<p>아무래도 더 자주 사용하는 AWS 계정을 디폴트 프로파일로 설정해놓는 것이 타이핑을 적게 할 수 있으므로 더욱 생산적일 것입니다.</p>\n<h2 id=\"인증-정보-파일\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D-%EC%A0%95%EB%B3%B4-%ED%8C%8C%EC%9D%BC\" aria-label=\"인증 정보 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증 정보 파일</h2>\n<p>지금까지 <code>aws configure</code> 커맨드를 통해서 설정한 인증 정보들은 내 컴퓨터의 어느 곳에 저장되는 걸까요? 사용자 홈 디렉터리를 보시면 <code>.aws</code>라는 디렉터리에 <code>credentials</code>라는 파일을 찾으실 수 있을 겁니다. 이 파일을 열어보면 프로파일 별로 인증 정보가 저장되어 있음을 확인하실 수 있으실 겁니다. 사실 굳이 <code>aws configure</code> 커맨드를 사용하지 않더라도 이 파일을 직접 수정하실 수도 있습니다. 당연히 부득이한 경우가 아니라면 권장되지는 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cat ~/.aws/credentials\n[default]\naws_access_key_id = ABCDEF\naws_secret_access_key = GHIJKL\n[work]\naws_access_key_id = WORK1234\naws_secret_access_key = WORK5678</code></pre></div>\n<p>참고로 <code>.aws</code> 디렉터리에는 <code>credentials</code> 파일 말고도 <code>config</code>라는 파일도 있는데 이 곳에는 위에서 설정한 디폴트 기본 리전 및 출력 포멧 옵션들이 저장되어 있습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p><code>credentials</code> 파일에 있는 설정되어 있는 인증 정보를 이용하는 것은 비단 AWS CLI뿐만이 아닙니다. 엄밀히 말하면 해당 머신에서 돌아가는 모든 앱들이 이 인증 정보를 이용하여 AWS SDK를 통해 AWS 서비스들과 연동할 수 있습니다. 환경 변수나 소스 코드 등의 명시적인 방법을 통해 인증 정보 설정해주지 않았다면 디폴트로 <code>credentials</code> 파일의 인증 정보가 사용되기 때문입니다.</p>\n<p>특히, AWS 연동 기능을 가지고 있는 오픈 소스 소프트웨어들은 우선적으로 <code>credentials</code> 파일의 디폴트 프로파일에 설정된 인증 정보를 사용하는 경우가 대부분이기 때문에 아무 설정없이도 본인 AWS 계정으로 인증되어 작동되는 경우가 많습니다.</p>","timeToRead":5,"fields":{"slug":"/aws-cli-configure/","tags":["AWS","Amazon Web Services","AWS CLI","Authentication","아마존 웹 서비스","인증"]},"frontmatter":{"title":"AWS CLI로 인증 정보 (Access Key ID, Secret Access Key) 관리하기","date":"May 13, 2018"}},"next":{"fields":{"slug":"/css-position-fixed-navigation/"},"frontmatter":{"title":"[CSS] 메뉴바 상단에 고정 시키기"}}}}}