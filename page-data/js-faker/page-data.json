{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-faker/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-test-object-factory/"},"frontmatter":{"title":"[자바스크립트] 테스트 데이터 생성"}},"node":{"html":"<h2 id=\"가짜-데이터\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%A7%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0\" aria-label=\"가짜 데이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가짜 데이터</h2>\n<p>시제품(prototype)을 개발하거나, 단위 테스트를 작성할 때 가짜 데이터가 필요할 때가 자주 있습니다.\n이럴 때, 직접 가짜 데이터를 하드코딩(hard-coding)할 수도 있겠지만, 좀 더 편하고 빠르게 가짜 데이터를 얻을 수 있는 방법이 있어서 소개드리려고 합니다.\n바로, Faker.js라는 라이브러리인데요. Faker.js를 사용하면 가짜 데이터를 정말 너무 간단하게 생성할 수 있습니다. 👍</p>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i faker</code></pre></div>\n<h2 id=\"패키지-임포트\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%9E%84%ED%8F%AC%ED%8A%B8\" aria-label=\"패키지 임포트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 임포트</h2>\n<p>ES 모듈을 사용하는 프로젝트에서는 <code>import</code> 키워드를 사용해서 패키지를 임포트 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>CommonJS를 사용하는 프로젝트에서는 <code>require</code> 키워드를 사용해서 패키지를 임포트 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> faker <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>본 포스팅의 모든 예제 코드는 ES 모듈을 기준으로 작성하도록 하겠습니다.</p>\n<h2 id=\"가짜-이메일-생성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%A7%9C-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-label=\"가짜 이메일 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가짜 이메일 생성</h2>\n<p>가장 자주 필요한 대표적인 가짜 데이터로 이메일을 들 수 있는데요.\nFaker.js를 이용해서 가짜 이메일을 생성하여 출력하는 코드를 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 여러 번 실행해보면 매번 다른 이메일이 출력되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node <span class=\"token builtin class-name\">.</span>\nPaolo.Sauer54@hotmail.com\n$ node <span class=\"token builtin class-name\">.</span>\nEmmanuel.Hane80@hotmail.com\n$ node <span class=\"token builtin class-name\">.</span>\nFredy.Parker@yahoo.com</code></pre></div>\n<p>Faker.js API는 기본적으로 <code>faker.&#x3C;범주>.&#x3C;함수>()</code> 형태로 사용하는데요.\n<a href=\"http://marak.github.io/faker.js/#toc5__anchor\">Faker.js 공식 문서</a>를 통해서 본인이 원하는 가짜 데이터를 생성하려면 어떤 범주에서 어떤 함수를 사용해야하는지 찾아볼 수 있습니다.</p>\n<h2 id=\"가짜-ip-생성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%A7%9C-ip-%EC%83%9D%EC%84%B1\" aria-label=\"가짜 ip 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가짜 IP 생성</h2>\n<p>인터넷(internet) 범주에는 이메일 뿐만 아니라 IP와 같이 다른 가짜 데이터도 생성할 수 있도록 다양한 함수를 제공하고 있습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마찬가지로 호출할 때 마다 매번 다른 IP를 랜덤하게 만들어줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node <span class=\"token builtin class-name\">.</span>\n<span class=\"token number\">241.85</span>.118.52\n$ node <span class=\"token builtin class-name\">.</span>\n<span class=\"token number\">160.76</span>.56.141\n$ node <span class=\"token builtin class-name\">.</span>\n<span class=\"token number\">101.238</span>.204.161</code></pre></div>\n<h2 id=\"다국어-지원\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EA%B5%AD%EC%96%B4-%EC%A7%80%EC%9B%90\" aria-label=\"다국어 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다국어 지원</h2>\n<p>영어가 아닌 다른 언어로 가짜 데이터를 사용하고 싶을 때는 <code>faker.locale</code>에 해당 언어의 locale 값을 설정해주면 됩니다.</p>\n<p>예를 들어, 이름(name) 범주를 이용해서 한국 사람의 이름과 성을 랜덤으로 생성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">\"faker\"</span><span class=\"token punctuation\">;</span>\n\nfaker<span class=\"token punctuation\">.</span>locale <span class=\"token operator\">=</span> <span class=\"token string\">\"ko\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> firstName <span class=\"token operator\">=</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lastName <span class=\"token operator\">=</span> faker<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fullName <span class=\"token operator\">=</span> lastName <span class=\"token operator\">+</span> firstName<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이름이 다소 부자연스러운 감은 있지만… 😅 그래도 그럭저럭 구색 맞추는 용도로 쓰는데는 문제가 없는 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node <span class=\"token builtin class-name\">.</span>\n연형태\n$ node <span class=\"token builtin class-name\">.</span>\n홍희율\n$ node <span class=\"token builtin class-name\">.</span>\n감용찬</code></pre></div>\n<h2 id=\"아무말-대잔치\" style=\"position:relative;\"><a href=\"#%EC%95%84%EB%AC%B4%EB%A7%90-%EB%8C%80%EC%9E%94%EC%B9%98\" aria-label=\"아무말 대잔치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아무말 대잔치</h2>\n<p>이제, Faker.js를 어떻게 사용하는지 더 설명 안 드려도 대강 감이 오셨을 것 같은데요.\n마지막으로 제가 개인적으로 애용하는 Faker.js의 API를 소개시켜 드리면서 마무리 하려고 합니다.\n저는 랜덤하게 단어나 문장, 문단을 생성할 때 lorem 범주를 요긴하게 사용하고 있습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> faker <span class=\"token keyword\">from</span> <span class=\"token string\">'faker'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>lorem<span class=\"token punctuation\">.</span><span class=\"token function\">word</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>lorem<span class=\"token punctuation\">.</span><span class=\"token function\">words</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>lorem<span class=\"token punctuation\">.</span><span class=\"token function\">sentence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>lorem<span class=\"token punctuation\">.</span><span class=\"token function\">sentences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>lorem<span class=\"token punctuation\">.</span><span class=\"token function\">paragraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>lorem<span class=\"token punctuation\">.</span><span class=\"token function\">paragraphs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>lorem<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faker<span class=\"token punctuation\">.</span>lorem<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node <span class=\"token builtin class-name\">.</span>\nsuscipit\nmodi quo modi\nVoluptatem deleniti molestiae et ab dolor ipsum.\nQuia commodi impedit aut dolor odio. Dolor sapiente ducimus consectetur praesentium natus corrupti natus. Aut inventore <span class=\"token builtin class-name\">alias</span> qui voluptas eius fuga quos architecto et. Aut neque qui sit omnis. Minus <span class=\"token keyword\">in</span> <span class=\"token function\">id</span> expedita modi unde magnam eaque tempore ratione.\nLabore dicta dolor. Repellendus qui nemo labore placeat. Nostrum non sit odit et ut unde. Accusantium quia quis voluptatem magni. Enim nisi consequuntur incidunt. Ut quas expedita tenetur quia.\nVoluptatibus provident quas assumenda facere aut. Illo qui unde nostrum unde ullam doloribus molestiae ratione quasi. Similique tempore <span class=\"token function\">id</span> illo quis mollitia debitis est ipsam non.\nOptio cumque nulla placeat. Commodi consectetur ratione. Qui laboriosam ab quia aliquam ipsa. Quis quis quia dolorum perferendis soluta repudiandae tempore voluptas occaecati.\nMaxime dolore minima illo dolores. Inventore at magni et <span class=\"token function\">sed</span> similique facere corporis quia incidunt. Est natus <span class=\"token function\">id</span> voluptatibus rerum at aliquam. Corporis qui consequuntur cumque veniam voluptatem. Ratione <span class=\"token function\">id</span> sunt.\nSimilique explicabo vitae recusandae quae. Asperiores qui <span class=\"token builtin class-name\">alias</span> autem et. Dolores delectus eum eius reiciendis sunt et at.\nQuia cupiditate odit voluptas consequatur hic quia. Autem perferendis suscipit dolore nisi totam aperiam illum nobis. Voluptatem quae eos quia. Ea repellendus voluptatem maiores aliquid at et cupiditate. Quidem et ab quae vitae natus et dolorem aut ut. Corporis asperiores accusantium.\nVoluptatibus aperiam nam cupiditate quos. Consequatur quia ut quis ipsa et et. Unde laudantium ipsam sapiente porro dignissimos aut dolores laboriosam. Eveniet rem quaerat rerum quis consectetur excepturi qui id. Autem aut qui in. Enim repellendus excepturi voluptas.\nDicta et ut laborum quibusdam ut id.\nBeatae distinctio sit soluta aspernatur voluptate voluptatum.\nOfficia nisi doloribus quas dolorem ducimus et.\nPlaceat minima laboriosam ullam ducimus est eligendi.\nLibero soluta ab ut.</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>Faker.js의 사용법이 워낙 간단해서 딱히 예제 코드 말고는 크게 설명드릴 것도 없는 것 같습니다.\n사실 제가 보여드린 부분은 Faker.js의 빙산의 일각일 뿐이며 Faker.js가 가짜로 생성할 수 있는 방대한 양의 데이터는 아래 공식 문서를 참고 바랍니다.</p>\n<ul>\n<li><a href=\"https://github.com/marak/Faker.js/\">Faker.js Github</a></li>\n<li><a href=\"http://marak.github.io/faker.js/\">Faker.js Docs</a></li>\n</ul>\n<p>실제로 테스트 코드를 작성할 때 Faker.js를 어떻게 활용하는지 궁금하시다면 <a href=\"/js-test-object-factory\">다음 포스팅</a>를 참고하세요!</p>","timeToRead":4,"fields":{"slug":"/js-faker/","tags":["JavaScript","testing","faker"]},"frontmatter":{"title":"자바스크립트로 가짜 데이터 생성하기 - Faker.js","date":"Sep 4, 2021"}},"next":{"fields":{"slug":"/html-tabindex/"},"frontmatter":{"title":"HTML의 tabindex 속성과 키보드 포커스"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}