{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/git-config/","result":{"pageContext":{"previous":{"fields":{"slug":"/github-actions-steps/"},"frontmatter":{"title":"GitHub Actions 단계(step) 고급 설정"}},"node":{"html":"<p>이번 포스팅에서는 Git 설정을 위해 사용하는 <code>git config</code> 명령어에 대해서 알아보겠습니다.</p>\n<h2 id=\"설정-범위와-설정-파일\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%EB%B2%94%EC%9C%84%EC%99%80-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC\" aria-label=\"설정 범위와 설정 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 범위와 설정 파일</h2>\n<p><code>git config</code> 명령어에 대해서 배우기 전에 먼저 간단하게 설정 범위에 대해서 짚고 넘어가겠습니다.\nGit은 지역(local), 전역(global), 시스템(system) 이렇게 크게 3가지 범위로 설정이 가능한데요.</p>\n<p>지역 범위로 설정하면 특정 저장소(repository)로 한정되고, 전역 범위는 현재 사용자(user)의 모든 저장소를 포함시킵니다.\n자주 사용되지는 않지만 시스템 범위로 설정하면 해당 컴퓨터의 모든 저장소와 사용자를 걸쳐서 적용됩니다.</p>\n<p>이렇게 설정된 정보는 컴퓨터 내에서 서로 다른 위치에 텍스트 파일의 형태로 관리가 되는데요.\n지역 범위의 설정 정보는 저장소 폴더의 <code>.git/config</code>에 저장되며, 전역 범위의 설정값은 운영체제의 사용자 폴더의 <code>.gitconfig</code>에 저장됩니다.\n시스템 범위의 설정값은 운영체제에 따라 다른데 유닉스 계열에서는 <code>/etc/gitconfig</code>, 윈도우즈 계열에서는 <code>C:\\ProgramData\\Git\\config</code>에 저장됩니다.</p>\n<h2 id=\"설정-쓰기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%EC%93%B0%EA%B8%B0\" aria-label=\"설정 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 쓰기</h2>\n<p><code>git config</code> 명령어를 사용해서 다양한 범위에서 설정을 할 수 있는데요.</p>\n<p>기본적인 문법은 설정이 필요한 이름과 값을 차례대로 명령어의 인자로 넘기는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config <span class=\"token operator\">&lt;</span>이름<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>값<span class=\"token operator\">></span></code></pre></div>\n<p>옵션을 주지 않으면 기본적으로 지역(local) 범위에서 설정이 이루어지는데요.\n다른 범위를 사용하고 싶다면 범위 옵션(<code>--global</code> 또는 <code>--system</code>)을 명시해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --<span class=\"token operator\">&lt;</span>범위<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>이름<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>값<span class=\"token operator\">></span></code></pre></div>\n<p>여러 범위에서 동일한 이름에 대해서 다른 값을 설정했을 경우 좁은 범위가 넓은 범위보다 우선 시 됩니다.\n이러한 특성을 이용하면 전역에서 설정한 값들을 지역에서 덮어쓰기 할 수 있는데요.\n밑에서 예제를 통해서 좀 더 설명드리겠습니다.</p>\n<h2 id=\"설정-읽기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%EC%9D%BD%EA%B8%B0\" aria-label=\"설정 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 읽기</h2>\n<p><code>git config</code> 명령어를 사용하면 현재 설정을 읽을 수도 있습니다.</p>\n<p>값을 제외하고 이름만 넘기면 현재 설정되어 있는 값을 출력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config <span class=\"token operator\">&lt;</span>이름<span class=\"token operator\">></span></code></pre></div>\n<p>설정을 읽을 때도 범위 옵션을 줄 수 있지만 옵션을 주지 않으면 알아서 범위를 넓혀가면서 설정을 찾아주기 때문에 옵션을 주지 않는 것이 더 편리한 경우가 많습니다.</p>\n<h2 id=\"설정-지우기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%EC%A7%80%EC%9A%B0%EA%B8%B0\" aria-label=\"설정 지우기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 지우기</h2>\n<p>특정 설정을 지우고 싶다면 <code>--unset</code> 옵션을 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --unset <span class=\"token operator\">&lt;</span>이름<span class=\"token operator\">></span></code></pre></div>\n<p>전역 범위의 설정을 지우고 싶다면 <code>--global</code> 옵션을 사용해야겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global --unset <span class=\"token operator\">&lt;</span>이름<span class=\"token operator\">></span></code></pre></div>\n<p>지금까지 <code>git config</code> 명령어의 기본적인 사용법을 알아보았는데요.\n지금부터 실질적인 활용 사례에 대해서 알아보겠습니다.</p>\n<h2 id=\"사용자-이름과-이메일-설정\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B4%EB%A6%84%EA%B3%BC-%EC%9D%B4%EB%A9%94%EC%9D%BC-%EC%84%A4%EC%A0%95\" aria-label=\"사용자 이름과 이메일 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용자 이름과 이메일 설정</h2>\n<p>여러 개발자가 함께 작업하는 프로젝트에서 코드 변경 이력에 정확한 사용자 이름과 이메일을 남기는 것은 매우 중요합니다.\n그래야지 문제가 발생했을 때 해당 코드를 누가 변경하였는지 쉽게 파악할 수 있기 때문입니다.</p>\n<p>아마도 이것이 많은 분들이 <code>git config</code> 명령어를 처음으로 접하게 되는 계기가 될텐데요.</p>\n<p><code>git config</code> 명령어를 사용하면 코드 변경분을 커밋(commit)할 때 어떤 사용자 이름과 이메일로 남길지를 설정할 수 있습니다.\n사용자 이름과 이메일은 각각 <code>user.name</code>과 <code>user.email</code>을 설정 이름으로 사용하고 일반적으로 전역(global) 범위에서 설정합니다.</p>\n<p>예를 들어, <code>John Doh</code>라는 이름으로 커밋을 남기도록 설정해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"John Doh\"</span></code></pre></div>\n<p>설정이 잘 되었는지 확인도 해봐야겠네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config user.name\nJohn Doh</code></pre></div>\n<p>마찬가지 방법으로 사용자 이메일을 <code>john@personal.com</code>로 설정한 후 설정값을 확인해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global user.email john@personal.com\n$ <span class=\"token function\">git</span> config user.email\njohn@personal.com</code></pre></div>\n<p>이렇게 설정을 해주면 본인 컴퓨터에서 어느 저장소(repository)에서 작업을 하든 커밋을 할 때 동일한 사용자 이름과 이메일이 사용됩니다.</p>\n<p>이제 코드 커밋을 해보면 코드 변경 이력의 <code>Author</code> 항목에 다음과 같이 설정한 사용자 이름과 이메일이 보일 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> log\ncommit 4dced225d108c1719d178173023528876705224f <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span>\nAuthor: John Doh <span class=\"token operator\">&lt;</span>john@personal.com<span class=\"token operator\">></span>\nDate:   Thu Jun <span class=\"token number\">2</span> <span class=\"token number\">20</span>:59:34 <span class=\"token number\">2022</span> -0400\n\n    <span class=\"token function\">git</span> config <span class=\"token builtin class-name\">test</span></code></pre></div>\n<p>만약에 동일한 컴퓨터에서 개인 프로젝트와 업무 프로젝트를 왔다갔다 하면서 개발을 해야하는 상황이라면,\n지역(local) 범위에서, 즉 <code>--global</code> 옵션을 빼고 사용자 이름과 이메일을 덮어쓰기 해주면 되는데요.</p>\n<p>예를 들어, 업무 관련 저장소에서는 사용자 이메일로 <code>john@business.com</code>을 사용해야 한다면 해당 저장소 폴더로 이동하여 다음과 같이 설정해줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config user.email\njohn@personal.com\n$ <span class=\"token function\">git</span> config user.email john@business.com\n$ <span class=\"token function\">git</span> config user.email\njohn@business.com</code></pre></div>\n<p>이렇게 로컬 범위에서 이메일을 설정을 해주면 해당 저장소에서만 <code>john@business.com</code>으로 커밋이 되고, 그 밖에 저장소에서는 여전히 <code>john@personal.com</code>이 사용됩니다.</p>\n<h2 id=\"기본-브랜치-변경\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B3%80%EA%B2%BD\" aria-label=\"기본 브랜치 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 브랜치 변경</h2>\n<p>최근에는 기본 브랜치명을 GitHub부터 시작해서 과거 노예 역사의 잔재가 남아있는 단어인 <code>master</code> 대신에 <code>main</code>을 사용하는 추세죠?</p>\n<p>사실 Git 저장소 생성할 때마다 기본 브랜치명을 바꿔주는 것은 번거롭고 까먹기 쉽죠?</p>\n<p>다음과 같이 <code>init.defaultBranch</code>를 전역 범위에서 <code>main</code>으로 설정해주면 항상 기본 브랜치명이 <code>main</code>이 되기 때문에 상당히 유용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global init.defaultBranch main</code></pre></div>\n<h2 id=\"기본-에디터-변경\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%97%90%EB%94%94%ED%84%B0-%EB%B3%80%EA%B2%BD\" aria-label=\"기본 에디터 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 에디터 변경</h2>\n<p>Git은 기본적으로 커밋 메시지를 남길 때 CLI 기반 도구인 vi를 사용하도록 되어 있는데요.\nVSCode와 같이 GUI 기반 에디터에 익숙하신 분들은 vi가 어렵게 느껴질 수도 있습니다.</p>\n<p>이럴 때는 <code>core.editor</code> 설정을 원하는 에디터의 실행 명령어로 변경해주시면 좀 더 익숙한 환경에서 커밋 메시지를 남기거나 리베이스(rebase)와 같이 에디터가 필요한 작업을 할 수 있습니다.</p>\n<p>예를 들어, VSCode를 기본 에디터로 사용하도록 설정해볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global core.editor <span class=\"token string\">\"code --wait --disable-extensions\"</span></code></pre></div>\n<h2 id=\"단축-명령어-설정\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%B6%95-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%84%A4%EC%A0%95\" aria-label=\"단축 명령어 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단축 명령어 설정</h2>\n<p>주변에서 Git을 잘 쓰시는 분들을 관찰해보면 단축 명령어를 잘 활용하신다는 것을 알 수 있는데요.\n이것도 사실 <code>git config</code> 명령어를 통해 별칭(alias) 설정을 해준 거라고 보시면 됩니다.</p>\n<p>보통 어느 저장소에 있느냐와 무방하게 동일한 명령어를 사용하고 싶을 것이므로 다음과 같은 방식으로 전역에서 설정을 해주는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global alias.<span class=\"token operator\">&lt;</span>단축 명령어<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>실제 명령어<span class=\"token operator\">></span></code></pre></div>\n<p>예를 들어, <code>git status</code>를 <code>git st</code>로 줄여볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global alias.st status </code></pre></div>\n<p>마찬가지 방법으로 다른 명령어도 줄일 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> config --global alias.ci commit\n$ <span class=\"token function\">git</span> config --global alias.co checkout \n$ <span class=\"token function\">git</span> config --global alias.br branch </code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>예전에는 <code>git config</code> 명령어를 쓸 일이 그리 많지는 않았습니다.\n기껏해야 컴퓨터를 새로 샀거나 포멧할 경우 정도 였지요.</p>\n<p>하지만 요즘에는 클라우드 환경에서 매번 새로운 가상 서버를 사용하는 것이 보편화되면서 Git을 처음부터 셋업해야하는 경우가 좀 더 빈번해지는 것처럼 느껴집니다.\n그래서 한 번 정리해보았는데 도움이 되었으면 좋겠습니다 😄</p>","timeToRead":5,"fields":{"slug":"/git-config/","tags":["Git","CLI"]},"frontmatter":{"title":"git config 명령어 사용법","date":"Jun 2, 2022"}},"next":{"fields":{"slug":"/python-sorted/"},"frontmatter":{"title":"파이썬의 sorted() 내장 함수로 데이터 정렬하기 (feat. 리스트의 sort() 함수)"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}