{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/jest-snapshot/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/testing-library-user-agent/"},"frontmatter":{"title":"React Testing Library 유저 이벤트 처리"}},"node":{"html":"<p>이번 포스팅에서는 Jest를 이용해서 스냅샷(snapshot) 테스트를 하는 방법에 대해서 알아보겠습니다.</p>\n<blockquote>\n<p>Jest에 대한 기본적인 설치 및 사용 방법은 <a href=\"/jest-basic/\">관련 포스팅</a>를 참고하시길 바랍니다.</p>\n</blockquote>\n<h2 id=\"스냅샷-테스팅\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%83%85%EC%83%B7-%ED%85%8C%EC%8A%A4%ED%8C%85\" aria-label=\"스냅샷 테스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스냅샷 테스팅</h2>\n<p>스냅샷 테스팅(snapshot testing)이란 어떤 기능의 예상 결과를 미리 정확히 포착해두고 실제 결과에 비교하는 테스트 기법입니다.\n테스트 대상 기능의 구현이 변경되어 실제 결과과 스냅샷을 떠놓은 예상 결과와 달라질 경우 해당 테스트 케이스는 실패하게 되는데요.\n이럴 경우, 다시 새로운 스냅샷을 떠서 기존 스냅샷을 교체하는 방식으로 테스트 코드와 함께 스냅샷도 함께 유지보수를 합니다.\nJest와 같은 테스팅 라이브러리를 사용하면 이러한 스냅샷 테스팅을 위한 일련의 과정을 좀 더 편하게 수행할 수 있습니다.</p>\n<h2 id=\"인라인-스냡샷-생성\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EC%8A%A4%EB%83%A1%EC%83%B7-%EC%83%9D%EC%84%B1\" aria-label=\"인라인 스냡샷 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인라인 스냡샷 생성</h2>\n<p>먼저 별도의 파일없이 테스트 코드에 스냅샷을 삽입하는 방식인 인라인(inline) 스냅샷에 대해서 알아보도록 하겠습니다.</p>\n<p>예를 들어, 아래와 같이 단어(word)와 횟수(times)가 주어졌을 때, 횟수만큼의 단어를 담고 있는 배열을 반환하는 함수를 테스트한다고 가정해보겠습니다.</p>\n<div class=\"gatsby-code-title\">repeat.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word<span class=\"token punctuation\">,</span> times <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    words<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> words<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> repeat<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jest가 제공하는 <code>toMatchInlineSnapshot()</code> 함수를 이용하여 <code>repeat()</code> 함수에 대한 인라인 스냅샷 테스트를 한 번 작성해볼까요?</p>\n<p><code>Test</code>라는 단어와 <code>3</code>번의 횟수를 넘겼을 때, <code>[\"Test\", \"Test\", \"Test\"]</code>가 리턴되는지 확인합니다.</p>\n<div class=\"gatsby-code-title\">repeat.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> repeat <span class=\"token keyword\">from</span> <span class=\"token string\">\"./repeat\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"repeats words three times\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 테스트 코드를 실행해보면 테스트 케이스가 통과하고, 하나의 스냅샷에 써졌다는 메시지가 표시될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx jest\n PASS  src/repeat.test.js\n  ✓ repeats words three <span class=\"token builtin class-name\">times</span> <span class=\"token punctuation\">(</span><span class=\"token number\">37</span> ms<span class=\"token punctuation\">)</span>\n\n › <span class=\"token number\">1</span> snapshot written.\nSnapshot Summary\n › <span class=\"token number\">1</span> snapshot written from <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> suite.\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">1</span> written, <span class=\"token number\">1</span> total\nTime:        <span class=\"token number\">7.38</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p>스냡샷이 어디에 써졌다는 걸까요❓</p>\n<p>다시 테스트 파일을 열어보면 다음과 같이 코드가 알아서 수정된 것을 확인하실 수 있으실 겁니다❗</p>\n<div class=\"gatsby-code-title\">repeat.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> repeat <span class=\"token keyword\">from</span> <span class=\"token string\">\"./repeat\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"repeats words three times\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    [\n      \"Test\",\n      \"Test\",\n      \"Test\",\n    ]\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jest가 자동으로 스냅샷을 테스트 코드에 삽입해주는 게 매우 신기합니다. 😮</p>\n<h2 id=\"인라인-스냅샷-갱신\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EC%8A%A4%EB%83%85%EC%83%B7-%EA%B0%B1%EC%8B%A0\" aria-label=\"인라인 스냅샷 갱신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인라인 스냅샷 갱신</h2>\n<p>이번에는 테스트 대상인 <code>repeat()</code> 함수가 배열 대신에 문자열을 반환하도록 구현을 살짝 바꿔보도록 하겠습니다.</p>\n<div class=\"gatsby-code-title\">repeat.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word<span class=\"token punctuation\">,</span> times <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    words<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 베열 대신 문자열 반환</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> repeat<span class=\"token punctuation\">;</span></code></pre></div>\n<p>다시 테스트 코드를 실행해보면 테스트 케이스가 실패하게 되는데 다음과 같이 스냅샷과 실제 결과가 어떻게 다른지 자세하게 피드백을 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx jest\n FAIL  src/repeat.test.js\n  ✕ repeats words three <span class=\"token builtin class-name\">times</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> ms<span class=\"token punctuation\">)</span>\n\n  ● repeats words three <span class=\"token builtin class-name\">times</span>\n\n    expect<span class=\"token punctuation\">(</span>received<span class=\"token punctuation\">)</span>.toMatchInlineSnapshot<span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">)</span>\n\n    Snapshot name: <span class=\"token variable\"><span class=\"token variable\">`</span>repeats words three <span class=\"token builtin class-name\">times</span> <span class=\"token number\">1</span><span class=\"token variable\">`</span></span>\n\n    - Snapshot  - <span class=\"token number\">5</span>\n    + Received  + <span class=\"token number\">1</span>\n\n    - <span class=\"token punctuation\">[</span>\n    -   <span class=\"token string\">\"Test\"</span>,\n    -   <span class=\"token string\">\"Test\"</span>,\n    -   <span class=\"token string\">\"Test\"</span>,\n    - <span class=\"token punctuation\">]</span>\n    + <span class=\"token string\">\"Test,Test,Test\"</span>\n\n      <span class=\"token number\">2</span> <span class=\"token operator\">|</span>\n      <span class=\"token number\">3</span> <span class=\"token operator\">|</span> test<span class=\"token punctuation\">(</span><span class=\"token string\">\"repeats words three times\"</span>, <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span>   expect<span class=\"token punctuation\">(</span>repeat<span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">))</span>.toMatchInlineSnapshot<span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span>\n        <span class=\"token operator\">|</span>                             ^\n      <span class=\"token number\">5</span> <span class=\"token operator\">|</span>     <span class=\"token punctuation\">[</span>\n      <span class=\"token number\">6</span> <span class=\"token operator\">|</span>       <span class=\"token string\">\"Test\"</span>,\n      <span class=\"token number\">7</span> <span class=\"token operator\">|</span>       <span class=\"token string\">\"Test\"</span>,\n\n      at Object.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>src/repeat.test.js:4:29<span class=\"token punctuation\">)</span>\n\n › <span class=\"token number\">1</span> snapshot failed.\nSnapshot Summary\n › <span class=\"token number\">1</span> snapshot failed from <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> suite. Inspect your code changes or re-run jest with <span class=\"token variable\">`</span></span>-u` to update them.\n\nTest Suites: <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nTime:        <span class=\"token number\">5.589</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p><code>-u</code> 옵션과 함께 Jest를 재실행해주면, 테스트 코드 안에 스냅샷을 직접 수정할 필요가 없이 Jest가 알아서 수정해줍니다. 👍</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx jest <span class=\"token parameter variable\">-u</span>\n PASS  src/repeat.test.js <span class=\"token punctuation\">(</span><span class=\"token number\">7.498</span> s<span class=\"token punctuation\">)</span>\n  ✓ repeats words three <span class=\"token builtin class-name\">times</span> <span class=\"token punctuation\">(</span><span class=\"token number\">86</span> ms<span class=\"token punctuation\">)</span>\n\n › <span class=\"token number\">1</span> snapshot updated.\nSnapshot Summary\n › <span class=\"token number\">1</span> snapshot updated from <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> suite.\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">1</span> updated, <span class=\"token number\">1</span> total\nTime:        <span class=\"token number\">11.583</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p>다시 테스트 코드를 열어보면 쉼표로 연결된 문자열을 반환되는지 테스트하도록 코드가 알아서 편집이 되어있을 것입니다.</p>\n<div class=\"gatsby-code-title\">repeat.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> repeat <span class=\"token keyword\">from</span> <span class=\"token string\">\"./repeat\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"repeats words three times\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"Test,Test,Test\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>스냡샷 테스트를 일반 테스트로 변경하고 싶으시다면, <code>toMatchInlineSnapshot()</code> 함수 대신에 Jest의 다른 매처(matcher) 함수를 사용하면 됩니다.</p>\n<div class=\"gatsby-code-title\">repeat.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> repeat <span class=\"token keyword\">from</span> <span class=\"token string\">\"./repeat\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"repeats words three times\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test,Test,Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트를 작성하다보면 함수의 반환 결과를 <code>console.log()</code>로 한 번 콘솔에 출력해보고, 그 내용을 테스트 코드로 복사하는 경우가 있는데 상당히 귀찮습니다.\n대신에 저는 개인적으로 이렇게 인라인 스냅샷을 활용해서 좀 더 편하게 테스트 코드를 작성하고 있습니다.</p>\n<p>한가짐 주의할 점은 인라인 스냅샷은 내부적으로 <code>Prettier</code> 코드 포맷터를 사용하고 있습니다.\n따라서 자신의 프로젝트의 <code>Prettier</code>가 아직 설치가 안되어 있다면 Jest와 별도로 설치를 해주셔야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> prettier</code></pre></div>\n<blockquote>\n<p>코드 포맷터 Prettier에 대한 좀 더 자세한 내용은 <a href=\"/js-prettier/\">관련 포스팅</a>를 참고하시길 바랍니다.</p>\n</blockquote>\n<h2 id=\"파일-스냅샷-생성\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%8A%A4%EB%83%85%EC%83%B7-%EC%83%9D%EC%84%B1\" aria-label=\"파일 스냅샷 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 스냅샷 생성</h2>\n<p>스냅샷이 길거나 복잡한 경우에는 테스트 파일 안에 스냅샷을 함께 두는 것보다는 별도의 파일에 관리하는 것이 용이합니다.</p>\n<p>Jest에서는 파일 스냅샷 테스팅을 지원하기 위해서 <code>toMatchSnapshot()</code>이라는 함수를 제공하고 있습니다.</p>\n<div class=\"gatsby-code-title\">repeat.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> repeat <span class=\"token keyword\">from</span> <span class=\"token string\">\"./repeat\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"repeats words three times\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>toMatchSnapshot()</code> 함수를 사용해서 테스트 코드를 수정 후 실행해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx jest\n PASS  src/repeat.test.js\n  ✓ repeats words three <span class=\"token builtin class-name\">times</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span> ms<span class=\"token punctuation\">)</span>\n\n › <span class=\"token number\">1</span> snapshot written.\nSnapshot Summary\n › <span class=\"token number\">1</span> snapshot written from <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> suite.\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">1</span> written, <span class=\"token number\">1</span> total\nTime:        <span class=\"token number\">6.589</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p>테스트 파일이 위치하는 경로에 <code>__snapshots__</code> 디렉토리가 생성되고, 그 안에 <code>repeat.test.js.snap</code> 파일이 생길 것입니다.</p>\n<div class=\"gatsby-code-title\">repeat.test.js.snap</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Jest Snapshot v1, https://goo.gl/fbAQLP</span>\n\nexports<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">repeats words three times 1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"Test,Test,Test\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"파일-스냅샷-갱신\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%8A%A4%EB%83%85%EC%83%B7-%EA%B0%B1%EC%8B%A0\" aria-label=\"파일 스냅샷 갱신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 스냅샷 갱신</h2>\n<p>이번에는 테스트 대상인 <code>repeat()</code> 함수가 문자열 대신에 배열을 반환하는 원래 구현으로 다시 되돌려놓겠습니다.</p>\n<div class=\"gatsby-code-title\">repeat.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word<span class=\"token punctuation\">,</span> times <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    words<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> words<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문자열 대신 배열 반환</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> repeat<span class=\"token punctuation\">;</span></code></pre></div>\n<p>다시 테스트 코드를 실행해보면 실제 결과가 스냅샷이 달려져서 테스트가 케이스 실패할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx jest\n PASS  src/repeat.test.js\n  ✓ repeats words three <span class=\"token builtin class-name\">times</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span> ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTime:        <span class=\"token number\">5.699</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.\n npx jest\n FAIL  src/repeat.test.js\n  ✕ repeats words three <span class=\"token builtin class-name\">times</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> ms<span class=\"token punctuation\">)</span>\n\n  ● repeats words three <span class=\"token builtin class-name\">times</span>\n\n    expect<span class=\"token punctuation\">(</span>received<span class=\"token punctuation\">)</span>.toMatchSnapshot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    Snapshot name: <span class=\"token variable\"><span class=\"token variable\">`</span>repeats words three <span class=\"token builtin class-name\">times</span> <span class=\"token number\">1</span><span class=\"token variable\">`</span></span>\n\n    - Snapshot  - <span class=\"token number\">1</span>\n    + Received  + <span class=\"token number\">5</span>\n\n    - <span class=\"token string\">\"Test,Test,Test\"</span>\n    + <span class=\"token punctuation\">[</span>\n    +   <span class=\"token string\">\"Test\"</span>,\n    +   <span class=\"token string\">\"Test\"</span>,\n    +   <span class=\"token string\">\"Test\"</span>,\n    + <span class=\"token punctuation\">]</span>\n\n      <span class=\"token number\">2</span> <span class=\"token operator\">|</span>\n      <span class=\"token number\">3</span> <span class=\"token operator\">|</span> test<span class=\"token punctuation\">(</span><span class=\"token string\">\"repeats words three times\"</span>, <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span>   expect<span class=\"token punctuation\">(</span>repeat<span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">))</span>.toMatchSnapshot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|</span>                             ^\n      <span class=\"token number\">5</span> <span class=\"token operator\">|</span>   // expect<span class=\"token punctuation\">(</span>repeat<span class=\"token punctuation\">(</span><span class=\"token string\">\"Test\"</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">))</span>.toEqual<span class=\"token punctuation\">(</span><span class=\"token string\">\"Test,Test,Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token number\">6</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token number\">7</span> <span class=\"token operator\">|</span>\n\n      at Object.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>src/repeat.test.js:4:29<span class=\"token punctuation\">)</span>\n\n › <span class=\"token number\">1</span> snapshot failed.\nSnapshot Summary\n › <span class=\"token number\">1</span> snapshot failed from <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> suite. Inspect your code changes or re-run jest with <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token parameter variable\">-u</span><span class=\"token variable\">`</span></span> to update them.\n\nTest Suites: <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nSnapshots:   <span class=\"token number\">1</span> failed, <span class=\"token number\">1</span> total\nTime:        <span class=\"token number\">5.979</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites.</code></pre></div>\n<p>인라인 스냅샷 테스팅할 때와 동일하게 <code>-u</code> 옵션을 줘서 Jest를 실행하면 다시 스냅샷이 생성됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ npx jest <span class=\"token operator\">-</span>u\n <span class=\"token constant\">PASS</span>  src<span class=\"token operator\">/</span>repeat<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>js\n  ✓ repeats words three <span class=\"token function\">times</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span> ms<span class=\"token punctuation\">)</span>\n\n › <span class=\"token number\">1</span> snapshot updated<span class=\"token punctuation\">.</span>\nSnapshot Summary\n › <span class=\"token number\">1</span> snapshot updated from <span class=\"token number\">1</span> test suite<span class=\"token punctuation\">.</span>\n\nTest Suites<span class=\"token operator\">:</span> <span class=\"token number\">1</span> passed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> total\n<span class=\"token literal-property property\">Tests</span><span class=\"token operator\">:</span>       <span class=\"token number\">1</span> passed<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> total\n<span class=\"token literal-property property\">Snapshots</span><span class=\"token operator\">:</span>   <span class=\"token number\">1</span> updated<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> total\n<span class=\"token literal-property property\">Time</span><span class=\"token operator\">:</span>        <span class=\"token number\">6.379</span> s\nRan all test suites<span class=\"token punctuation\">.</span></code></pre></div>\n<p><code>__snapshots__/repeat.test.js.snap</code> 파일을 열어보면 스냅샷이 변경된 코드 기준으로 자동으로 편집되어 있는 것이 확인될 것입니다.</p>\n<div class=\"gatsby-code-title\">repeat.test.js.snap</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Jest Snapshot v1, https://goo.gl/fbAQLP</span>\n\nexports<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">repeats words three times 1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n[\n  \"Test\",\n  \"Test\",\n  \"Test\",\n]\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 코드는 아래에서 확인하시고 바로 실행해보실 수 있습니다.</p>\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@DaleSeo/jest-snapshot?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Jest를 이용하여 어떻게 인라인 스냅샷과 파일 스냅샷 테스팅을 할 수 있는지에 대해서 살펴보았습니다.\n스냅샷 테스팅은 어떤 함수의 예상 결과를 직접 코딩하지 않아도 되는 편리함이 있지만, 무분별하게 사용할 경우 스냅샷 자체의 유지보수가 어려워지는 부작용도 있습니다.\n따라서, 테스트의 예상 결과를 개발자가 직접 작성하는데 시간과 노력이 많이 들어가는 경우에만 제한적으로 사용하시기를 권장드립니다.</p>\n<blockquote>\n<p>Jest에 연관된 포스팅은 <a href=\"/?tag=Jest\">Jest 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":7,"fields":{"slug":"/jest-snapshot/","tags":["JavaScript","library","Jest","testing"]},"frontmatter":{"title":"Jest로 스냅샷(snapshot) 테스트하기","date":"Dec 16, 2020"}},"next":{"fields":{"slug":"/python-requests/"},"frontmatter":{"title":"파이썬에서 requests 라이브러리로 원격 API 호출하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}