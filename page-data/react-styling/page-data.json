{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/react-styling/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-react-apollo-client/"},"frontmatter":{"title":"[GraphQL] Apollo Client로 React 앱 개발하기"}},"node":{"html":"<p><a href=\"https://reactjs.org/docs/faq-styling.html\">React 공식 레퍼런스</a>에 따르면 React에서는 명확한 스타일 가이드를 제공하지 않습니다.</p>\n<blockquote>\n<p>React does not have an opinion about how styles are defined.</p>\n</blockquote>\n<p>그도 그럴 것이 현재 CSS 기술 자체가 사용되는 방식이 워낙 다양하기 때문에 React에서 꼭 찝어 어느 방식을 따르라고 얘기하기가 조심스러울 것입니다.</p>\n<p>그래서 이번 포스트에서는 React 컴포넌트를 별도의 라이브러리 없이 CSS로만 스타일하는 가장 기본적인 방법을 알아보겠습니다.</p>\n<h2 id=\"inline-style\" style=\"position:relative;\"><a href=\"#inline-style\" aria-label=\"inline style permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inline Style</h2>\n<p>가장 간단하고 쉬운 방법은 해당 React 컴포넌트에 CSS 인라인 스타일(inline style)을 바로 적용하는 것입니다.\n일반적인 웹페이지에서 인라인 스타일을 적용할 때 처럼 HTML 엘리먼트의 <code>style</code> 속성을 이용하면 됩니다.</p>\n<p>하지만 React는 자바스크립트로 작성하기 때문에 웹페이지에서 인라인 스타일을 적용할 때와 약간의 차이점이 있습니다.</p>\n<ul>\n<li><code>style</code> 속성값에 일반 문자열이 아닌 자바스크립트 객체가 할당되야 합니다.</li>\n<li>CSS 속성명이 케밥 케이스(kebab case)이 아닌 카멜 케이스(camel case)로 작성되야 합니다. </li>\n</ul>\n<p>예를 들어, 버튼 엘리먼트에 간단한 인라인 스타일을 적용해보겠습니다.\nCSS 속성이 정의된 객체를 버튼 엘리먼트의 <code>style</code> 속성에 넘겨주면 됩니다.</p>\n<p><code>white</code>나 <code>1rem</code>과 같은 자바스크립트에는 존재하지 않는 키워드는 스트링 값으로 인식되도록 쿼테이션 기호로 감싸줘야 합니다.\n그리고 <code>font-size</code>와 같이 중간에 대시 기호(<code>-</code>)가 들어간 속성명은 <code>fontSize</code>와 같이 카멜 케이스로 바꿔줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> btnStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span>\n  background<span class=\"token operator\">:</span> <span class=\"token string\">\"teal\"</span><span class=\"token punctuation\">,</span>\n  padding<span class=\"token operator\">:</span> <span class=\"token string\">\".375rem .75rem\"</span><span class=\"token punctuation\">,</span>\n  border<span class=\"token operator\">:</span> <span class=\"token string\">\"1px solid teal\"</span><span class=\"token punctuation\">,</span>\n  borderRadius<span class=\"token operator\">:</span> <span class=\"token string\">\".25rem\"</span><span class=\"token punctuation\">,</span>\n  fontSize<span class=\"token operator\">:</span> <span class=\"token string\">\"1rem\"</span><span class=\"token punctuation\">,</span>\n  lineHeight<span class=\"token operator\">:</span> <span class=\"token number\">1.5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>btnStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Inline<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe src=\"https://codesandbox.io/embed/react-styling-grw66?fontsize=14&initialpath=%3Finline&module=%2Fsrc%2Finline%2FButton.js\" title=\"react-styling\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>인라인 스타일은 CSS에서도 그렇듯이 React에서도 유지 보수나 성능 상으로 이유로 권장되지 않는 방법입니다.\n직접 사용해보면 매번 CSS 속성명을 케밥 케이스로 바꿔줘야 하는 것도 번거롭고, 무엇보다 <code>:hover</code>와 같은 pseudo-selecto도 사용할 수 없다는 치명적인 제약도 있습니다.\n하지만 개발 중에 임시로 스타일을 빠르게 적용해볼 때 꽤 유용하기 때문에 소개해드렸습니다.</p>\n<h2 id=\"external-stylesheet\" style=\"position:relative;\"><a href=\"#external-stylesheet\" aria-label=\"external stylesheet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>External Stylesheet</h2>\n<p>다음으로 소개시켜드릴 방법은 별도의 파일에 스타일을 정의해놓고, React 컴포넌트 파일에서 해당 CSS 파일을 임포트합니다.\n그 다음, 엘리먼트의 <code>className</code> 속성을 이용해서 외부 파일에 정의된 스타일을 맵핑시켜주는 것입니다.</p>\n<p>보통 CSS를 직접 작성하지 않고 Bootstrap과 같은 외부 CSS 라이브러리를 사용할 때 자주 쓰이는 방법인데요.</p>\n<p>예를 들어, <code>Button.css</code> 파일에 다음과 같이 스타일을 정의합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.btn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> teal<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.375rem 0.75rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid teal<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0.25rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 버튼 컴포넌트가 작성된 <code>Button.js</code> 파일에서 다음과 같이 위 CSS 파일을 임포트합니다.\n이때 속성명을 <code>class</code> 대신에 <code>className</code>를 사용해야 한다는 것의 주의하세요.\n(<code>class</code>는 자바스크립트에서 클래스 정의 용도로 사용되는 키워드이기 때문입니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./Button.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span><span class=\"token operator\">></span>External<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe src=\"https://codesandbox.io/embed/react-styling-grw66?fontsize=14&initialpath=%3Fexternal&module=%2Fsrc%2Fexternal%2FButton.js\" title=\"react-styling\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"css-modules\" style=\"position:relative;\"><a href=\"#css-modules\" aria-label=\"css modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Modules</h2>\n<p>위에서 소개한 외부 스타일시트를 사용하는 방법은 React 앱의 규모가 커짐에 따라 CSS 클래스 이름이 겹치게 될 가능성이 커지게 됩니다.\n기본적으로 글로벌 네임 스페이스(global namespace)를 사용하기 때문에, 만약 2개의 CSS 파일에 동일한 클래스에 대한 스타일이 정의되어 있다면, 해당 클래스가 적용된 엘리먼트는 2개의 스타일에 모두 영향을 받게 됩니다.</p>\n<p>이 문제를 해결하기 위한 방법으로 각 CSS 파일에 고유의 네임 스페이스를 부여해주는 CSS 모듈(CSS Modules)이라는 기법이 있습니다.\nReact 컴포넌트에 CSS 모듈을 통해서 스타일을 적용하는 방법은 다음과 같습니다.</p>\n<ul>\n<li>외부 스타일 시트를 작성할 때, <code>.css</code> 확장자가 아닌 <code>.module.css</code> 확장자를 사용해야 합니다.</li>\n<li>React 컴포넌트 파일에서 임포트할 때, 임포트된 CSS 모듈의 이름을 명시적으로 지정해줍니다. (<code>import modlue_name from \"./my/style.module.css\";</code>)</li>\n<li>엘리먼트의 <code>className</code> 속성을 할당해줄 때, 해당 클래스가 어느 CSS 모듈 소속인지 알려줍니다. (<code>module_name.class_name</code>)</li>\n</ul>\n<p>예를 들어, <code>Button.module.css</code> 파일을 생성하고, 위 섹션에서 작성한 <code>Button.css</code> 파일의 내용을 그대로 복사해 넣습니다.</p>\n<p>그 다음, <code>Button.module.css</code> 파일을 임포트할 때, CSS 모듈명을 <code>styles</code>라고 지정해줍니다.\n그리고 버튼 엘리먼트의 <code>className</code> 속성에, 그냥 <code>btn</code>이 아닌 <code>styles.btn</code>을 넘겨줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Button.module.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>btn<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Module<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button<span class=\"token punctuation\">;</span></code></pre></div>\n<p>브라우저에서 페이지 소스 보기를 해보면 실제 클래스 이름이 다음과 같이 설정 되었음 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>_src_module_Button_module__btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Module<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이렇게 CSS 모듈을 사용하면, 각 CSS 파일마다 고유한 네임 스페이스를 부여해주기 때문에, 각 React 컴포넌트는 완전히 격리된 스타일을 보장받습니다.\n따라서, 다른 CSS 파일에 <code>btn</code> 클래스에 대한 스타일이 정의가 되어 있더라도, 이 CSS 파일에 있는 <code>btn</code> 클래스는 영향을 받지 않게 됩니다.</p>\n<iframe src=\"https://codesandbox.io/embed/react-styling-grw66?fontsize=14&module=%2Fsrc%2Fmodule%2FButton.js\" title=\"react-styling\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 React 컴포넌트를 CSS 만으로 스타일하는 가장 기본적인 3가지 방법을 살펴보았습니다.\n간단한 React 앱에서는 이 정도 방법으로 충분하겠지만, 실제 React 프로젝트에서는 Styled Components와 같은 CSS-in-JS 라이브러리가 많이 사용되고 있습니다.\n추후 포스트를 통해 이 부분에 대해서 다뤄보도록 하겠습니다.</p>","timeToRead":3,"fields":{"slug":"/react-styling/","tags":["JavaScript","자바스크립트","JS","React","리액트","CSS","Style","스타일","CSS Modules"]},"frontmatter":{"title":"React 컴포넌트 CSS 스타일링 기본","date":"Jul 7, 2019"}},"next":{"fields":{"slug":"/graphql-apollo-server-testing/"},"frontmatter":{"title":"GraphQL 서버 테스트 방법 (Apollo Server Testing)"}}}}}