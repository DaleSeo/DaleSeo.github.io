{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/rust-thiserror/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>Rust는 명시적이고 안전한 오류 처리를 중시하는 프로그래밍 언어입니다.\n대표적으로 <code>Result&#x3C;T, E></code> 타입을 통해 다양한 에러 상황을 타입 시스템으로 포착할 수 있죠.\n하지만 실무에서 직접 오류 자료형을 정의하고 <code>Error</code> 트레이트를 구현하다 보면, 반복적인 보일러플레이트 코드 작성에 지치는 경우가 많습니다.</p>\n<p>이럴 때 thiserror 라이브러리가 여러분의 구세주가 될 수 있습니다.</p>\n<h2 id=\"error-트레이트\" style=\"position:relative;\"><a href=\"#error-%ED%8A%B8%EB%A0%88%EC%9D%B4%ED%8A%B8\" aria-label=\"error 트레이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error 트레이트</h2>\n<p>우선 표준 라이브러리의 <code>Error</code> 트레이트를 직접 구현하는데 필요한 최소한의 코드를 보여드리겠습니다.</p>\n<p>아래 <code>ValidationError</code> 열거형은 3개의 변형(variant)로 이루어져있습니다.\n우선 <code>Debug</code> 트레이트를 파생시키고, <code>Display</code> 트레이트를 구현하고, 마지막으로 <code>Error</code> 트레이트를 구현해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>fmt<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">ValidationError</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">InvalidEmail</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">RequiredField</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">OutOfRange</span> <span class=\"token punctuation\">{</span> min<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Display</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">ValidationError</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fmt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Formatter</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'_</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token namespace\">fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Result</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ValidationError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">InvalidEmail</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">write!</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid email format\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ValidationError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">RequiredField</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">write!</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Field '{}' is required\"</span><span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ValidationError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">OutOfRange</span> <span class=\"token punctuation\">{</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token macro property\">write!</span><span class=\"token punctuation\">(</span>\n                    f<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"Value must be between {} and {}, got {}\"</span><span class=\"token punctuation\">,</span>\n                    min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> value\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Error</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">ValidationError</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예제는 최소한의 구현이고 실제로는 <code>Error</code> 트레이트의 메서드까지 구현하게 되는데요.\n매번 새로운 오류 자료형을 정의할 때 마다 이렇게 코드를 많이 작성하려면 개발 생산성이 떨어질 수 있겠죠?</p>\n<h2 id=\"thiserror란\" style=\"position:relative;\"><a href=\"#thiserror%EB%9E%80\" aria-label=\"thiserror란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thiserror란?</h2>\n<p>thiserror는 개발자가 오류 자료형을 쉽게 정의할 수 있도록 도와주는 Rust 라이브러리입니다.\n<code>Error</code> 트레이트(trait) 구현을 자동화하기 위해서 <code>#[derive(Error)]</code> 매크로를 제공하는데요.\n덕분에 오류 메시지, 변환, 체인 구성 등을 매우 간단하게 처리할 수 있습니다.</p>\n<p>thiserror 크레이트(crate)는 터미널에서 <code>cargo add</code> 명령어를 사용하거나 <code>Cargo.toml</code>를 편집하여 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cargo</span> <span class=\"token function\">add</span> thiserror</code></pre></div>\n<div class=\"gatsby-code-title\">Cargo.toml</div>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">thiserror</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0\"</span></code></pre></div>\n<h2 id=\"오류-정의\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%A0%95%EC%9D%98\" aria-label=\"오류 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 정의</h2>\n<p>자 그럼, 지금부터 thiserror을 사용하여 동일한 오류 자료형을 정의해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">thiserror<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Error, Debug)]</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">ValidationError</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Invalid email format\"</span>)]</span>\n    <span class=\"token class-name\">InvalidEmail</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Field '{0}' is required\"</span>)]</span>\n    <span class=\"token class-name\">RequiredField</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'static</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Value must be between {min} and {max}, got {value}\"</span>)]</span>\n    <span class=\"token class-name\">OutOfRange</span> <span class=\"token punctuation\">{</span> min<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>어떤가요? 코드 양이 확 줄고 읽기도 편해졌죠?</p>\n<p>변경 사항을 간단히 설명을 드리면,</p>\n<ul>\n<li><code>std::error::Error</code> 대신에 <code>thiserror::Error</code>를 불러옵니다.</li>\n<li>오류 자료형 위에 <code>#[derive(Error)]</code> 매크로를 붙여줍니다.</li>\n<li>열거형의 각 변형 위에 <code>#[error(\"...\")]</code> 속성으로 오류 메시지를 지정합니다.</li>\n<li>필드 값을 <code>{}</code> 또는 <code>{0}</code>, <code>{message}</code> 같은 형식으로 메시지에 삽입할 수 있습니다.</li>\n</ul>\n<h2 id=\"오류-메세지\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%A9%94%EC%84%B8%EC%A7%80\" aria-label=\"오류 메세지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 메세지</h2>\n<p>위와 같이 오류 자료형을 정의하면 <code>Display</code> 트레이트가 자동으로 구현된 효과가 납니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> invalid_email <span class=\"token operator\">=</span> <span class=\"token class-name\">ValidationError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">InvalidEmail</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> required_field <span class=\"token operator\">=</span> <span class=\"token class-name\">ValidationError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">RequiredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> out_of_range <span class=\"token operator\">=</span> <span class=\"token class-name\">ValidationError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">OutOfRange</span> <span class=\"token punctuation\">{</span>\n        min<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        max<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token punctuation\">:</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> invalid_email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> required_field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> out_of_range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>필드 값을 메시지 안에 자연스럽게 녹여 사용자에게 명확한 피드백을 제공할 수 있게 되었습니다.</p>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Invalid email <span class=\"token function\">format</span>\nField <span class=\"token string\">'password'</span> is required\nValue must be between <span class=\"token number\">1</span> and <span class=\"token number\">100</span>, got <span class=\"token number\">101</span></code></pre></div>\n<h2 id=\"오류-변환\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B3%80%ED%99%98\" aria-label=\"오류 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 변환</h2>\n<p>다른 에러 타입을 감싸는 코드를 직접 작성하면 번거롭지만, <code>#[from]</code>을 사용하면 자동으로 <code>From</code> 트레이트가 구현되어 손쉽게 변환할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">thiserror<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Error, Debug)]</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">FileError</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"File not found: {filename}\"</span>)]</span>\n    <span class=\"token class-name\">NotFound</span> <span class=\"token punctuation\">{</span> filename<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Permission denied\"</span>)]</span>\n    <span class=\"token class-name\">PermissionDenied</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"IO error\"</span>)]</span>\n    <span class=\"token class-name\">Io</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[from]</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">read_config_file</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FileError</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Read</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">mut</span> file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> contents <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            file<span class=\"token punctuation\">.</span><span class=\"token function\">read_to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> contents<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// io::Error → FileError::Io로 자동 변환됨</span>\n            <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">match</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ErrorKind</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotFound</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">NotFound</span> <span class=\"token punctuation\">{</span>\n                filename<span class=\"token punctuation\">:</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">ErrorKind</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">PermissionDenied</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">PermissionDenied</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=></span> <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileError</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Io</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"오류-체인\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%B2%B4%EC%9D%B8\" aria-label=\"오류 체인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 체인</h2>\n<p><code>#[source]</code> 메크로를 통해서 에러의 원인을 명시할 수 있습니다.\n<code>Error::source()</code> 메서드를 통해 체인을 순차적으로 추적할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">thiserror<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Error, Debug)]</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">DatabaseError</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Connection failed\"</span>)]</span>\n    <span class=\"token class-name\">ConnectionFailed</span><span class=\"token punctuation\">(</span><span class=\"token attribute attr-name\">#[source]</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token attribute attr-name\">#[error(<span class=\"token string\">\"Query failed: {query}\"</span>)]</span>\n    <span class=\"token class-name\">QueryFailed</span> <span class=\"token punctuation\">{</span>\n        query<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n        <span class=\"token attribute attr-name\">#[source]</span>\n        source<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Send</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Sync</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 Rust에서 에러 자료형을 깔끔하게 정의할 수 있게 해주는 강력한 라이브러리인 thiserror에 대해서 알아보았습니다.\nthiserror를 잘 활용하셔서 보일러플레이트 코드를 최소화하시고 더 생산성있게 에러 처리를 하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":4,"fields":{"slug":"/rust-thiserror/","tags":["Rust","error"]},"frontmatter":{"title":"Rust 오류 자료형: thiserror 라이브러리 사용법","date":"Jul 13, 2025"}},"next":{"fields":{"slug":"/rust-serde/"},"frontmatter":{"title":"Rust 데이터 직렬화: Serde 라이브러리 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}