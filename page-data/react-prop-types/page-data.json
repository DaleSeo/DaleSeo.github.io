{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/react-prop-types/","result":{"pageContext":{"previous":{"fields":{"slug":"/html-semantic-markup/"},"frontmatter":{"title":"[HTML] 시멘틱 마크업"}},"node":{"html":"<p>PropTypes는 React에서 타입 체크를 위해서 사용되는 라이브러리입니다.\n이 번 포스트에서는 PropTypes를 이용해서 React 컴포넌트의 prop에 대한 타입 정의와 기본값 설정을 하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<p>PropTypes 라이브러리는 <code>prop-types</code>이라는 패키지 이름을 가지고 있는데요.\n기본적으로 <code>react</code> 패키지에 내장이 되어 있기 때문에, React만 설치되어 있다면 별도로 설치할 필요가 없습니다.</p>\n<h2 id=\"예제-컴포넌트\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"예제 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 컴포넌트</h2>\n<p>PropTypes를 어떻게 사용하는지 보여드리기 위해서 먼저 예제 컴포넌트를 작성하도록 하겠습니다.</p>\n<p>아래 코드는 prop으로 <code>path</code>와 <code>chidren</code>, <code>blank</code>, <code>size</code>를 받아서, <code>&#x3C;a/></code> 엘리먼트를 랜더링해주는 간단한 React 함수 컴포넌트입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">BASE_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Anchor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> blank<span class=\"token punctuation\">,</span> size <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>a\n      href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BASE_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      target<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>blank <span class=\"token operator\">?</span> <span class=\"token string\">\"_blank\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"_self\"</span><span class=\"token punctuation\">}</span>\n      style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> fontSize<span class=\"token operator\">:</span> size <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예를 들어, 위 <code>Anchor</code> 컴포넌트는 다음과 같이 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Anchor path<span class=\"token operator\">=</span><span class=\"token string\">\"/react-prop-types\"</span> blank size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  PropTypes\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Anchor<span class=\"token operator\">></span></code></pre></div>\n<p>그러면 실제로 브라우저에서는 다음과 같이 랜더링됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>\n  <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.daleseo.com/react-prop-types<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span>\n  <span class=\"token punctuation\">></span></span>PropTypes<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span>\n<span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"타입-체크-부재로-인한-문제점\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%B2%B4%ED%81%AC-%EB%B6%80%EC%9E%AC%EB%A1%9C-%EC%9D%B8%ED%95%9C-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"타입 체크 부재로 인한 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 체크 부재로 인한 문제점</h2>\n<p>만약에 <code>Anchor</code> 컴포넌트를 사용하는 사람이 아래와 같은 실수를 한다고 가정해보겠습니다.</p>\n<p><code>children</code> prop을 누락시킨다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Anchor path<span class=\"token operator\">=</span><span class=\"token string\">\"/react-prop-types\"</span> blank size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">20</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p><code>size</code> prop에 숫자가 아닌 문자열을 넘긴다면?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Anchor path<span class=\"token operator\">=</span><span class=\"token string\">\"/react-prop-types\"</span> blank size<span class=\"token operator\">=</span><span class=\"token string\">\"20\"</span><span class=\"token operator\">></span>\n  PropTypes\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Anchor<span class=\"token operator\">></span></code></pre></div>\n<p>이런 경우, <code>Anchor</code> 컴포넌트는 원치않는 방식으로 랜더링되게 됩니다.</p>\n<p>이렇게 React에서 흔히 발생하는 버그는 컴포넌트의 prop에 대한 명시적인 타입 체크를 통해 해결을 할 수 있으며, 이를 도와주는 라이브러리가 <code>PropTypes</code> 입니다.</p>\n<h2 id=\"prop-타입-정의\" style=\"position:relative;\"><a href=\"#prop-%ED%83%80%EC%9E%85-%EC%A0%95%EC%9D%98\" aria-label=\"prop 타입 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prop 타입 정의</h2>\n<p>PropTypes를 이용해서 React 컴포넌트에 prop으로 넘어오는 입력값들이 어떤 타입을 가져야하는지 정의할 수 있습니다.</p>\n<p>우선, <code>prop-types</code> 패키지에서 <code>PropTypes</code> 객체를 임포트해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">\"prop-types\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 <code>PropTypes</code> 객체는 타입을 정의할 때 필요한 다양한 타입 검증자(validator)들을 제공합니다.\n그리고 React 컴포넌트의 <code>PropTypes</code>을 이용해 정의된 타입 정보를 할당받기 위한 <code>propTypes</code> 속성을 가지고 있습니다.</p>\n<p>예를 들어, 위에서 작성한 <code>Anchor</code> 컴포넌트는 타입 정의는 다음과 같이 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Anchor<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  path<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  blank<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">,</span>\n  size<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>path</code>와 <code>children</code> prop은 문자열, <code>blank</code> prop은 불리언, <code>size</code> porp은 숫자로 타입을 정의하였습니다.\n그리고 <code>children</code> prop은 맨 뒤에 <code>isRequired</code>를 붙임으로써 반드시 입력되어야 하는 필수 prop으로 정의하였습니다.</p>\n<p>이렇게 타입 명시적으로 컴포넌트에 넘어올 prop에 대한 타입 정의를 해주면, React는 타입 정의 위반 시 경고 메세지를 콘솔에 출력해줍니다.\n예를 들어, <code>size</code> prop에 숫자가 아닌 문자열을 넘기면, 다음과 같은 경고 메세지를 확인하실 수 있으실 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Anchor path<span class=\"token operator\">=</span><span class=\"token string\">\"/react-prop-types\"</span> blank size<span class=\"token operator\">=</span><span class=\"token string\">\"20\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Warning: Failed prop type: Invalid prop <span class=\"token variable\"><span class=\"token variable\">`</span>size<span class=\"token variable\">`</span></span> of <span class=\"token builtin class-name\">type</span> <span class=\"token variable\"><span class=\"token variable\">`</span>string<span class=\"token variable\">`</span></span> supplied to <span class=\"token variable\"><span class=\"token variable\">`</span>Anchor<span class=\"token variable\">`</span></span>, expected <span class=\"token variable\"><span class=\"token variable\">`</span>number<span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>이러한 경고 메세지는 개발 모드에서만 출력되기 때문에, 실제 사용자에게 아무 영향을 주지 않으면서, 오직 개발자들만 확인할 수 있습니다.</p>\n<h2 id=\"prop-기본값-설정\" style=\"position:relative;\"><a href=\"#prop-%EA%B8%B0%EB%B3%B8%EA%B0%92-%EC%84%A4%EC%A0%95\" aria-label=\"prop 기본값 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prop 기본값 설정</h2>\n<p>추가로 타입 정의와 더불어 많이 사용되는 prop의 기본값을 설정하는 방법을 알아보겠습니다.\n타입 정의를 할 때와 비슷한 방식으로 React 컴포넌트는 <code>defaultProps</code> 속성을 가지고 있고, 여기에 기본값을 정의하는 객체를 할당해주면 됩니다.</p>\n<p>예를 들어, 위에서 작성한 <code>Anchor</code> 컴포넌트는 기본값 설정은 다음과 같이 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Anchor<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  path<span class=\"token operator\">:</span> <span class=\"token string\">\"/#\"</span><span class=\"token punctuation\">,</span>\n  blank<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  size<span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 각 prop에 대한 기본값을 설정해주면, 해당 prop에 입력값이 넘어오지 않은 경우, 이 기본값이 사용됩니다.\n그리고 <code>children</code> prop의 경우 위에서 타입을 정의할 때 필수 prop으로 정의하였기 때문에 기본값을 설정해줄 필요가 없습니다.</p>\n<p>이제, 다음과 같이 <code>Anchor</code> 컴포넌트에 <code>children</code> prop만을 넘기게 되면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Anchor<span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Anchor<span class=\"token operator\">></span></code></pre></div>\n<p>아래와 같이 prop에 기본값이 설정된 상태로 랜더링이 되게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.daleseo.com/#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_self<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span>\n  <span class=\"token punctuation\">></span></span>Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span>\n<span class=\"token punctuation\">></span></span></code></pre></div>\n<p>전체 코드는 아래에 올려두었으니 참고바라겠습니다.</p>\n<iframe src=\"https://codesandbox.io/embed/frosty-sammet-d4fr9?fontsize=14\" title=\"frosty-sammet-d4fr9\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"복잡한-타입-정의\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%83%80%EC%9E%85-%EC%A0%95%EC%9D%98\" aria-label=\"복잡한 타입 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복잡한 타입 정의</h2>\n<p>위 예제처럼 단순한 타입이 아닌 복잡한 구조를 가진 객체를 prop으로 받는 컴포넌트들은 어떻게 타입 정의를 할 수 있을까요?\n<code>PropTypes</code> 객체는 복잡한 타입 정의를 위한 <code>shape()</code>, <code>arrayOf()</code>, <code>oneOf()</code>, <code>instanceOf()</code>와 같은 고급 검증자들도 제공하고 있습니다.</p>\n<p>예를 들어, 아래의 <code>UserProfie</code> 컴포넌트의 경우, 필수 prop인 <code>user</code>와 선택 prop인 <code>friends</code>를 갖도록 정의되어 있습니다.\n<code>user</code> prop의 경우, 숫자 타입인 <code>id</code> 속성과 문자열 타입인 <code>name</code> 속성을 반드시 갖는 객체로 타입이 정의되어 있습니다.\n<code>avatar</code>는 선택적으로 필요한 속성인데, 필수인 <code>theme</code> 속성은 <code>black</code>과 <code>white</code> 중 하나의 값이 될 수 있는 Enum 타입이며, 선택인 <code>image</code> 속성은 <code>Image</code> 클래스의 인스턴스여야 합니다.</p>\n<p><code>friends</code> prop의 경우 선택 사항이며, <code>user</code>와 유사한 구조를 가진 객체를 원소로 갖는 배열의 형태로 입력되도록 정의되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">UserProfie<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    preference<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      theme<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">oneOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"black\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n      image<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  friends<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>\n    PropTypes<span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isRequired\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 PropTypes 라이브러리를 사용해서 React 컴포넌트의 타입 체크를 하는 아주 기본적인 방법에 대해서 알아보았습니다.\n왠만한 프로젝트에서는 이 정도 수준의 타입 체크만 해줘도 많은 버그를 예방할 수 있을 것이라고 생각합니다.\nPropTypes 라이브러리에 대한 세부적인 사항들은 아래 사이트를 참고바라겠습니다.</p>\n<ul>\n<li>NPM: <a href=\"https://www.npmjs.com/package/prop-types\">https://www.npmjs.com/package/prop-types</a></li>\n<li>Github: <a href=\"https://github.com/facebook/prop-types\">https://github.com/facebook/prop-types</a></li>\n</ul>","timeToRead":5,"fields":{"slug":"/react-prop-types/","tags":["JavaScript","자바스크립트","React","리액트","PropTypes"]},"frontmatter":{"title":"PropTypes로 React 입력 타입 체크하기","date":"Jul 20, 2019"}},"next":{"fields":{"slug":"/react-styled-components/"},"frontmatter":{"title":"[React] Styled Components 사용법"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}