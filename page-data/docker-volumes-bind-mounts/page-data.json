{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/docker-volumes-bind-mounts/","result":{"pageContext":{"previous":{"fields":{"slug":"/docker-compose-django/"},"frontmatter":{"title":"Docker Compose로 Django 프로젝트 셋업"}},"node":{"html":"<p>Docker 컨테이너(container)에 쓰여진 데이터는 기본적으로 컨테이너가 삭제될 때 함께 사라지게 됩니다.\nDocker에서 돌아가는 많은 애플리케이션이 컨테이너의 생명 주기와 관계없이 데이터를 영속적으로 저장을 해야하는데요.\n뿐만 아니라 많은 경우 여러 개의 Docker 컨테이너가 하나의 저장 공간을 공유해서 데이터를 읽거나 써야합니다.</p>\n<p>이렇게 Docker 컨테이너의 생명 주기와 관계없이 데이터를 영속적으로 저장할 수 있도록 Docker는 두가지 옵션을 제공하는데요.\n첫번째는 Docker 볼륨(volume), 두번째는 바인드 마운트(bind mount)입니다.\n이번 포스트에서는 Docker 컨테이너에 데이터를 저장하는데 사용되는 이 두가지 방법에 대해서 알아보도록 하겠습니다.</p>\n<p><img src=\"https://docs.docker.com/storage/images/types-of-mounts.png\" alt=\"types of mounts and where they live on the Docker host\"></p>\n<h2 id=\"볼륨-생성-및-조회\" style=\"position:relative;\"><a href=\"#%EB%B3%BC%EB%A5%A8-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%A1%B0%ED%9A%8C\" aria-label=\"볼륨 생성 및 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>볼륨 생성 및 조회</h2>\n<p>먼저, Docker에서 권장하는 방법인 볼륨(volume)에 대해서 먼저 살펴보겠습니다.</p>\n<p><code>docker volume create</code> 커맨드를 이용해서 볼륨을 하나 생성해보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker volume create our-vol\nour-vol</code></pre></div>\n<p>그 다음, <code>docker volume ls</code> 커맨드를 실행하면 다음과 같이 막 생성한 볼륨을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker volume <span class=\"token function\">ls</span>\nDRIVER              VOLUME NAME\n<span class=\"token builtin class-name\">local</span>               our-vol</code></pre></div>\n<p><code>docker volume inspect</code> 커맨드를 통해 해당 볼륨을 좀 더 상세한 정보를 확인해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker volume inspect our-vol\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"CreatedAt\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2020-05-09T17:03:46Z\"</span>,\n        <span class=\"token string\">\"Driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"local\"</span>,\n        <span class=\"token string\">\"Labels\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Mountpoint\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/volumes/our-vol/_data\"</span>,\n        <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"our-vol\"</span>,\n        <span class=\"token string\">\"Options\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Scope\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"local\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p><code>Mountpoint</code> 항목을 보면 해당 볼륨이 컴퓨터의 어느 경로에 생성되었는지를 알 수 있습니다.</p>\n<h2 id=\"볼륨을-컨테이너에-마운트하기\" style=\"position:relative;\"><a href=\"#%EB%B3%BC%EB%A5%A8%EC%9D%84-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90-%EB%A7%88%EC%9A%B4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"볼륨을 컨테이너에 마운트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>볼륨을 컨테이너에 마운트하기</h2>\n<p>컨테이너가 볼륨을 사용하기 위해서는 볼륨을 컨테이너에 마운트(mount)해줘야 합니다.\n<code>docker run</code> 커맨드로 컨테이너를 실행할 때 <code>-v</code> 옵션을 사용하면 되는데요.\n콜론(<code>:</code>)을 구분자로 해서 앞에는 마운트할 볼륨명 뒤에는 컨테이너 내의 경로를 명시해주면 됩니다.</p>\n<p>예를 들어, <code>our-vol</code> 볼륨을 <code>one</code> 컨테이너의 <code>/app</code> 경로에 마운트를 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -v our-vol:/app --name one busybox <span class=\"token function\">touch</span> /app/test.txt</code></pre></div>\n<p><code>touch /app/test.txt</code> 커맨드를 실행하였기 때문에, <code>test.txt</code> 파일이 <code>our-vol</code> 볼륨의 경로에도 남아있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> /var/lib/docker/volumes/our-vol/_data\ntest.txt</code></pre></div>\n<p><code>docker inspect</code> 커맨드로 컨테이너의 상세 정보를 확인해보면 <code>our-vol</code> 볼륨이 <code>volume</code> 타입으로 마운트되어 있는 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker inspect one\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"Mounts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"volume\"</span>,\n            <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"our-vol\"</span>,\n            <span class=\"token string\">\"Source\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/volumes/our-vol/_data\"</span>,\n            <span class=\"token string\">\"Destination\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/app\"</span>,\n            <span class=\"token string\">\"Driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"local\"</span>,\n            <span class=\"token string\">\"Mode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"z\"</span>,\n            <span class=\"token string\">\"RW\"</span><span class=\"token builtin class-name\">:</span> true,\n            <span class=\"token string\">\"Propagation\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>,\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"볼륨을-다른-컨테이너에도-마운트하기\" style=\"position:relative;\"><a href=\"#%EB%B3%BC%EB%A5%A8%EC%9D%84-%EB%8B%A4%EB%A5%B8-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90%EB%8F%84-%EB%A7%88%EC%9A%B4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"볼륨을 다른 컨테이너에도 마운트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>볼륨을 다른 컨테이너에도 마운트하기</h2>\n<p>이 번에는 같은 <code>our-vol</code> 볼륨을 <code>two</code> 컨테이너의 <code>/app</code> 경로에 마운트를 해보겠습니다.\n<code>ls /app</code> 커맨드를 실행해보니, <code>one</code> 컨테이너가 볼륨에 생성해놓은 파일이 그대로 보이는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -v our-vol:/app --name two busybox <span class=\"token function\">ls</span> /app\ntest.txt</code></pre></div>\n<p>이렇게 여러 개의 컨테이너가 하나의 볼륨에 접근할 수 있기 때문에 컨테이너 간 데이터 공유가 가능한 것입니다.\n다시 말해, 어떤 볼륨에 데이터를 저장해두고, 여러 컨테이너에 마운트만 해주면 해당 데이터를 모든 컨테이너에서 접근할 수 있게 됩니다.</p>\n<h2 id=\"볼륨-삭제\" style=\"position:relative;\"><a href=\"#%EB%B3%BC%EB%A5%A8-%EC%82%AD%EC%A0%9C\" aria-label=\"볼륨 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>볼륨 삭제</h2>\n<p>마지막으로 <code>docker volume rm</code> 커맨드를 사용해서 <code>our-vol</code> 볼륨을 제거해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker volume <span class=\"token function\">rm</span> our-vol\nError response from daemon: remove our-vol: volume is <span class=\"token keyword\">in</span> use - <span class=\"token punctuation\">[</span>f73130c9dad14644ac46b89fe4018e561a7bcbfa4118d637949642d0d5d742e4, 666dda54f6be8ca852f3150b9741a9cab5a4659fa2e83fe6ca339550072c861ex<span class=\"token punctuation\">]</span></code></pre></div>\n<p>위와 같이 제거하려는 볼륨이 마운트되어 있는 컨테이너가 있을 때는 해당 볼륨이 제거가 되지가 않습니다.</p>\n<p>그럴 때는 해당 볼륨이 마운트되어 있는 모든 컨테이너를 먼저 삭제하고, 볼륨을 삭제해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker <span class=\"token function\">rm</span> -f one two\none\ntwo\n$ docker volume <span class=\"token function\">rm</span> our-vol\nour-vol</code></pre></div>\n<h2 id=\"볼륨-청소\" style=\"position:relative;\"><a href=\"#%EB%B3%BC%EB%A5%A8-%EC%B2%AD%EC%86%8C\" aria-label=\"볼륨 청소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>볼륨 청소</h2>\n<p><code>docker volume prune</code> 커맨드를 이용해서 마운트되어 있지 않은 모든 볼륨을 한번에 제거할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker volume prune\nWARNING<span class=\"token operator\">!</span> This will remove all <span class=\"token builtin class-name\">local</span> volumes not used by at least one container.\nAre you sure you want to continue? <span class=\"token punctuation\">[</span>y/N<span class=\"token punctuation\">]</span> y</code></pre></div>\n<h2 id=\"바인드-마운트\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EC%9D%B8%EB%93%9C-%EB%A7%88%EC%9A%B4%ED%8A%B8\" aria-label=\"바인드 마운트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바인드 마운트</h2>\n<p>Docker 컨테이너에 데이터를 저장하기 위한 다른 방법으로 바인드 마운트(bind mount)라는 것도 있습니다.\n바인드 마운트를 사용하면 호스트 파일 시스템의 특정 경로를 컨테이너로 바로 마운트할 수 있습니다.</p>\n<p>바인드 마운트를 사용하는 방법은 <code>docker run</code> 커맨드를 실행할 때, <code>-v</code> 옵션의 콜론(<code>:</code>) 앞 부분에 마운트명 대신에 호스트의 경로를 지정해주는 것입니다.</p>\n<p>예를 들어, 현재 경로에 <code>test.txt</code> 파일을 생성하고, 해당 호스트 경로를 컨테이너의 <code>/app</code> 경로에 마운트해보겠습니다.\n컨테이너에 터미널을 붙여서 <code>ls /app</code> 커맨드를 실행해보면 <code>test.txt</code> 파일이 컨테이너의 <code>/app</code> 경로에도 존재하는 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">touch</span> test.txt\n$ docker run -v <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">`</span></span>:/app -it --name one busybox /bin/sh\n/ <span class=\"token comment\"># ls /app</span>\ntest.txt</code></pre></div>\n<p>반대로 컨테이너의 <code>/app</code> 경로 상에서 <code>test2.txt</code> 파일을 실행해보면 호스트의 현재 경로에도 해당 파일이 보이는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/ <span class=\"token comment\"># touch /app/test2.txt</span>\n/ <span class=\"token comment\"># exit</span>\n<span class=\"token punctuation\">[</span>node1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>local<span class=\"token punctuation\">)</span> root@192.168.0.18 ~\n$ <span class=\"token function\">ls</span>\ntest.txt   test2.txt</code></pre></div>\n<p><code>docker inspect</code> 커맨드로 해당 컨테이너의 상세 정보를 확인해보면 현재 경로(<code>/root</code>)가 <code>bind</code> 타입으로 마운트되어 있는 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker inspect one\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"Mounts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bind\"</span>,\n            <span class=\"token string\">\"Source\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/root\"</span>,\n            <span class=\"token string\">\"Destination\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/app\"</span>,\n            <span class=\"token string\">\"Mode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n            <span class=\"token string\">\"RW\"</span><span class=\"token builtin class-name\">:</span> true,\n            <span class=\"token string\">\"Propagation\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"rprivate\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>,\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"볼륨-vs-바인드-마운트\" style=\"position:relative;\"><a href=\"#%EB%B3%BC%EB%A5%A8-vs-%EB%B0%94%EC%9D%B8%EB%93%9C-%EB%A7%88%EC%9A%B4%ED%8A%B8\" aria-label=\"볼륨 vs 바인드 마운트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>볼륨 vs 바인드 마운트</h2>\n<p>볼륨(volume)과 바인드 마운트(bind mount)의 가장 큰 차이점은 Docker가 해당 마운트 포인트를 관리해주느냐 안 해주느냐 입니다.\n볼륨을 사용할 때는 우리가 스스로 볼륨을 생성하거나 삭제해야하는 불편함이 있지만, 해당 볼륨은 Docker 상에서 이미지(image)나 컨테이너(container), 네트워크(network)와 비슷한 방식으로 관리가 되는 이점이 있습니다.\n그래서 대부분의 상황에서는 볼륨을 사용하는 것이 권장되지만 컨테이너화된 로컬 개발 환경을 구성할 때는 바인드 마운트가 더 유리할 수 있습니다.</p>\n<p>로컬에서 개발을 할 때는 일반적으로 현재 작업 디렉터리에 프로젝트 저장소를 <code>git clone</code> 받아놓고 코드를 변경합니다.\n따라서 바인드 마운트를 이용해서 해당 디렉터리를 컨테이너의 특정 경로에 마운트해주면 코드를 변경할 때 마다 변경 사항을 실시간으로 컨테이너를 통해 확인할 수 있습니다.\n반대로 컨테이너를 통해 변경된 부분도 현재 작업 디렉터리에도 반영이 되기 때문에 편리할 것입니다.</p>\n<p>바인드 마운트를 실제 프로젝트에서 활용하는 예제는 <a href=\"/docker-nodejs\">관련 포스트</a>를 참고 바라겠습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Docker 볼륨과 바인트 마운트를 사용하는 방법에 대해서 살펴보았습니다.\n본 포스트에서 사용했던 각 커맨드에 대한 좀 더 자세한 내용은 아래 Docekr CLI 레퍼런스를 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/volume_create/\">docker volume create</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/volume_ls/\">docker volume ls</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/volume_inspect/\">docker volume inspect</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/volume_rm/\">docker volume rm</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/volume_prune/\">docker volume prune</a></li>\n</ul>","timeToRead":6,"fields":{"slug":"/docker-volumes-bind-mounts/","tags":["Docker","도커","volume","볼륨","mount","마운트","container","컨테이너","CLI"]},"frontmatter":{"title":"Docker 컨테이너에 데이터 저장 (볼륨/바인드 마운트)","date":"May 8, 2020"}},"next":{"fields":{"slug":"/unified-remark-rehype/"},"frontmatter":{"title":"Markdown을 HTML로 변환 (unified, remark, rehype)"}}}}}