{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/docker-compose-networks/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-mypy/"},"frontmatter":{"title":"파이썬 타입 체크 - Mypy"}},"node":{"html":"<p>Docker Compose는 여러 개의 컨테이너(container)로 구성된 애플리케이션을 관리하기 위한 간단한 오케스트레이션(Orchestration) 도구입니다.\n여러 개의 컨테이너로 구성된 Docker Compose 애플리케이션 내에서 컨테이너 간의 통신은 어떻게 이루어질까요?</p>\n<blockquote>\n<p>Docker 네트워크에 대해서 생소하신 분들은 <a href=\"/docker-networks\">관련 포스팅</a>를 통해 먼저 기본 개념을 파악하시기를 권장드립니다.</p>\n</blockquote>\n<blockquote>\n<p>Docker Compose 설정법이나 커맨드가 생소하신 분들은 아래 포스팅를 먼저 읽고 돌아오시기를 추천드립니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/docker-compose-file\">Docker Compose 설정 방법</a></li>\n<li><a href=\"/docker-compose\">Docker Compose 커맨드 사용법</a></li>\n</ul>\n<h2 id=\"디폴트-네트워크\" style=\"position:relative;\"><a href=\"#%EB%94%94%ED%8F%B4%ED%8A%B8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC\" aria-label=\"디폴트 네트워크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디폴트 네트워크</h2>\n<p>기본적으로 Docker Compose는 하나의 디폴트 네트워크에 모든 컨테이너를 연결합니다.\n디폴트 네트워크의 이름은 <code>docker-compose.yml</code>가 위치한 디렉토리 이름 뒤에 <code>_default</code>가 붙습니다.\n예를 들어, 디렉토리 이름이 <code>our_app</code>라면 디폴트 네트워크 이름은 <code>our_app_default</code>가 됩니다.</p>\n<p>디폴트 네트워크의 이름은 Docker Compose로 애플리케이션을 올릴 때 어렵지 않게 확인할 수 있습니다.\n왜냐하면 Compose는 먼저 네트워크를 생성해놓고 각 컨테이너를 구동한 후 네트워크에 연결시키기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> our_app\n$ docker-compose up -d\nCreating network <span class=\"token string\">\"our_app_default\"</span> with the default driver\nCreating our_app_db_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating our_app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span></code></pre></div>\n<p>Docker Compose로 애플리케이션을 내릴 때는 반대 순서로 먼저 컨테이너를 종료/제거해놓고 제일 마지막에 네트워크를 제거합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose down\nStopping our_app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping our_app_db_1  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving our_app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving our_app_db_1  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving network our_app_default</code></pre></div>\n<p>애플리케이션이 돌아가고 있는 중에도 Docker 네트워크 목록을 조회하면 디폴트 네트워크가 확인됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">➜  docker network <span class=\"token function\">ls</span>\nNETWORK ID          NAME                   DRIVER              SCOPE\nf1859120a0c3        bridge                 bridge              <span class=\"token builtin class-name\">local</span>\n95b00551745b        <span class=\"token function\">host</span>                   <span class=\"token function\">host</span>                <span class=\"token builtin class-name\">local</span>\n1f7202baa40a        none                   null                <span class=\"token builtin class-name\">local</span>\n2539640ca106        our_app_default        bridge              <span class=\"token builtin class-name\">local</span></code></pre></div>\n<h2 id=\"컨테이너-간-통신\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EA%B0%84-%ED%86%B5%EC%8B%A0\" aria-label=\"컨테이너 간 통신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너 간 통신</h2>\n<p>디폴트 네트워크 안에서 컨테이너 간의 통신에서는 서비스의 이름이 호스트명으로 사용됩니다.</p>\n<p>예를 들어, <code>web</code> 서비스의 컨테이너에서 <code>db</code> 서비스의 컨테이너를 대상으로 <code>ping</code> 명령어를 날릴 수 있습니다.\n디폴트 네트워크 상에서 <code>db</code> 서비스 컨테이너의 IP가 <code>192.168.48.2</code>인 것으로 확인이되네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose <span class=\"token builtin class-name\">exec</span> web <span class=\"token function\">ping</span> db\nPING db <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.48.2<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data.\n<span class=\"token number\">64</span> bytes from our_app_db_1.our_app_default <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.48.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.094</span> ms\n<span class=\"token number\">64</span> bytes from our_app_db_1.our_app_default <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.48.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.162</span> ms\n<span class=\"token number\">64</span> bytes from our_app_db_1.our_app_default <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.48.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.080</span> ms\n<span class=\"token number\">64</span> bytes from our_app_db_1.our_app_default <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.48.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">4</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.348</span> ms\n<span class=\"token number\">64</span> bytes from our_app_db_1.our_app_default <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.48.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.195</span> ms\n<span class=\"token number\">64</span> bytes from our_app_db_1.our_app_default <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.48.2<span class=\"token punctuation\">)</span>: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">6</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.187</span> ms</code></pre></div>\n<p>컨테이넌 간 통신에서 주의할 점은 접속하는 위치가 디폴트 네트워크 내부냐 외부냐에 따라서 포트(port)가 달라질 수 있다는 것입니다.</p>\n<p>예를 들어, <code>docker-compose.yml</code>에 <code>web</code> 서비스의 <code>ports</code> 설정이 아래와 같다면,</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8001:8000\"</span></code></pre></div>\n<p>호스트 컴퓨터에서 접속할 때는 <code>8001</code> 포트를 사용해야 하고, 같은 디폴트 네트워크 내의 다른 컨테이너에서 접속할 때는 포트 <code>8000</code>을 사용해야 합니다.</p>\n<ul>\n<li>호스트 컴퓨터에서 <code>web</code> 서비스 컨테이너 접속</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -I localhost:8001\nHTTP/1.1 <span class=\"token number\">200</span> OK\nDate: Fri, 05 Jun <span class=\"token number\">2020</span> 02:05:10 GMT\nServer: WSGIServer/0.2 CPython/3.8.2\nContent-Type: text/html\nX-Frame-Options: DENY\nContent-Length: <span class=\"token number\">16351</span>\nX-Content-Type-Options: nosniff</code></pre></div>\n<ul>\n<li>같은 네트워크 내의 다른 컨테이너에서 <code>web</code> 서비스 컨테이너 접속</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose <span class=\"token builtin class-name\">exec</span> alpine <span class=\"token function\">curl</span> -I web:8000\nHTTP/1.1 <span class=\"token number\">200</span> OK\nDate: Fri, 05 Jun <span class=\"token number\">2020</span> 02:13:46 GMT\nServer: WSGIServer/0.2 CPython/3.8.2\nContent-Type: text/html\nX-Frame-Options: DENY\nContent-Length: <span class=\"token number\">16351</span>\nX-Content-Type-Options: nosniff</code></pre></div>\n<h2 id=\"커스텀-네트워크-추가\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%B6%94%EA%B0%80\" aria-label=\"커스텀 네트워크 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커스텀 네트워크 추가</h2>\n<p>Docker Compose는 디플트 네트워크 뿐만 아니라 다른 네트워크도 필요에 따라 추가해줄 수 있습니다.</p>\n<p><code>docker-compose.yml</code>의 <code>networks</code> 항목 아래에 <code>our_net</code>이라는 네트워크를 추가하고, <code>web</code> 서비스의 <code>networks</code> 항목 아래에 <code>our_net</code> 네트워크를 추가하겠습니다.\n이렇게 설정을 하게되면 <code>db</code> 서비스는 디폴트 네트워크에만 연결되지만, <code>web</code> 서비스는 디폴트 네트워크 뿐만 아니라 <code>our_net</code> 네트워크에도 연결되게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8000:8000\"</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> default\n      <span class=\"token punctuation\">-</span> our_net\n\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> POSTGRES_USER=postgres\n      <span class=\"token punctuation\">-</span> POSTGRES_PASSWORD=postgres\n\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">our_net</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> bridge</code></pre></div>\n<p>Docker Compose로 애플리케이션을 올려보면 두 개의 네트워크가 생성되는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose up -d\nCreating network <span class=\"token string\">\"our_app_default\"</span> with the default driver\nCreating network <span class=\"token string\">\"our_app_our_net\"</span> with driver <span class=\"token string\">\"bridge\"</span>\nCreating our_app_db_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating our_app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ our_app docker network <span class=\"token function\">ls</span>\nNETWORK ID          NAME                   DRIVER              SCOPE\nf1859120a0c3        bridge                 bridge              <span class=\"token builtin class-name\">local</span>\n95b00551745b        <span class=\"token function\">host</span>                   <span class=\"token function\">host</span>                <span class=\"token builtin class-name\">local</span>\n1f7202baa40a        none                   null                <span class=\"token builtin class-name\">local</span>\n2682634e6535        our_app_default        bridge              <span class=\"token builtin class-name\">local</span>\n525403b38bbe        our_app_our_net        bridge              <span class=\"token builtin class-name\">local</span></code></pre></div>\n<p><code>our_net</code>은 Docker Compose 내부에서 정의된 네트워크 이므로 애플리케이션을 내릴 때 디폴트 네트워크와 함께 삭제됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose down\nStopping our_app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping our_app_db_1  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving our_app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving our_app_db_1  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving network our_app_default\nRemoving network our_app_our_net</code></pre></div>\n<h2 id=\"외부-네트워크-사용\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%82%AC%EC%9A%A9\" aria-label=\"외부 네트워크 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 네트워크 사용</h2>\n<p>Docker Compose가 제공하는 디폴트 네트워크 대신에 외부에서 미리 생성해놓은 다른 네트워크를 사용할 수도 있습니다.</p>\n<p>먼저 <code>our_net</code>이라는 네트워크를 별도로 생성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker network create our_net\n6d791b927c8c151c45a10ac13c62f3571ecf38a90756fd2ca1c62b7d3de804e8</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker network <span class=\"token function\">ls</span>\nNETWORK ID          NAME                   DRIVER              SCOPE\nf1859120a0c3        bridge                 bridge              <span class=\"token builtin class-name\">local</span>\n95b00551745b        <span class=\"token function\">host</span>                   <span class=\"token function\">host</span>                <span class=\"token builtin class-name\">local</span>\n1f7202baa40a        none                   null                <span class=\"token builtin class-name\">local</span>\n6d791b927c8c        our_net                bridge              <span class=\"token builtin class-name\">local</span></code></pre></div>\n<p>그 다음, <code>docker-compose.yml</code>에서 <code>default</code> 네트워크의 <code>external</code> 옵션에 <code>our_net</code>을 설정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> our_net</code></pre></div>\n<p>이제 Docker Compose로 애프리케이션을 올리고, <code>our_net</code> 네트워크의 상세 정보를 확인해보면 <code>Containers</code> 항목에 두 개의 컨테이너가 연결된 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose up -d\nCreating our_app_db_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nCreating our_app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\n$ docker network inspect our_net\n<span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"our_net\"</span>,\n        <span class=\"token string\">\"Id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"6d791b927c8c151c45a10ac13c62f3571ecf38a90756fd2ca1c62b7d3de804e8\"</span>,\n        <span class=\"token string\">\"Created\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2020-06-06T15:55:05.3384403Z\"</span>,\n        <span class=\"token string\">\"Scope\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"local\"</span>,\n        <span class=\"token string\">\"Driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bridge\"</span>,\n        <span class=\"token string\">\"EnableIPv6\"</span><span class=\"token builtin class-name\">:</span> false,\n        <span class=\"token string\">\"IPAM\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"default\"</span>,\n            <span class=\"token string\">\"Options\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"Config\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token string\">\"Subnet\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.208.0/20\"</span>,\n                    <span class=\"token string\">\"Gateway\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.208.1\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Internal\"</span><span class=\"token builtin class-name\">:</span> false,\n        <span class=\"token string\">\"Attachable\"</span><span class=\"token builtin class-name\">:</span> false,\n        <span class=\"token string\">\"Ingress\"</span><span class=\"token builtin class-name\">:</span> false,\n        <span class=\"token string\">\"ConfigFrom\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Network\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"ConfigOnly\"</span><span class=\"token builtin class-name\">:</span> false,\n        <span class=\"token string\">\"Containers\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"7bcc8194e4018fa48328c6a1aa95a47829c77b850091bebaf1dd6661f5c79df9\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"our_app_db_1\"</span>,\n                <span class=\"token string\">\"EndpointID\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"4f3ffce8c6afc8d3de543859c1671bfe38b897c6e492a1be891de56ec2dfbf90\"</span>,\n                <span class=\"token string\">\"MacAddress\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:42:c0:a8:d0:02\"</span>,\n                <span class=\"token string\">\"IPv4Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.208.2/20\"</span>,\n                <span class=\"token string\">\"IPv6Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">}</span>,\n            <span class=\"token string\">\"dda9d355041adc8f90063e8876fe20a2c804b84b55ece3b6860e3dfb139099c7\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"our_app_web_1\"</span>,\n                <span class=\"token string\">\"EndpointID\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"b0f93bbb39c9eb83d4f286250b90239632667c6b89954d57c9593f32a44c3033\"</span>,\n                <span class=\"token string\">\"MacAddress\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:42:c0:a8:d0:03\"</span>,\n                <span class=\"token string\">\"IPv4Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.208.3/20\"</span>,\n                <span class=\"token string\">\"IPv6Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Options\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>,\n        <span class=\"token string\">\"Labels\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>외부에서 생성된 네트워크이므로 Docker Compose 애플리케이션을 내릴 때 해당 네트워크가 함께 삭제되지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose down\nStopping our_app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping our_app_db_1  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving our_app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving our_app_db_1  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nNetwork our_net is external, skipping</code></pre></div>\n<p>외부 네트워크를 잘 활용하면 서로 다른 Docker Compose에서 돌아가고 있는 컨테이너 간에도 연결도 가능하게 됩니다.\n예를 들어, 첫 번째 Docker Compose의 디폴트 네트워크를 두 번째 Docker Compose의 커스텀 네트워크로 추가해주면, 두 번째 Docker Compose 내의 컨테이너도 첫 번째 Docker Compose의 디폴트 네트워크에 연결될 수 있습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>Docker Compose는 디폴트 네트워크를 제공하기 때문에 별도 네트워크 관련 설정 없이도 모든 컨테이너가 연결되어 편리하게 사용할 수 있습니다.\n약간의 설정을 통해서 다른 네트워크를 추가하거나 외부 네트워크를 사용하는 것도 가능합니다.</p>","timeToRead":7,"fields":{"slug":"/docker-compose-networks/","tags":["Docker","도커","Compose","container","컨테이너","network","네트워크","docker-compose.yml"]},"frontmatter":{"title":"Docker Compose 네트워크","date":"Jun 4, 2020"}},"next":{"fields":{"slug":"/material-ui-containers-grids/"},"frontmatter":{"title":"Material UI의 Container, Grid 컴포넌트"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}