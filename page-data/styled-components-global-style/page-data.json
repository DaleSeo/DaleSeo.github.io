{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/styled-components-global-style/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/react-button-component/"},"frontmatter":{"title":"React로 버튼 컴포넌트 만들기"}},"node":{"html":"<p>이번 포스팅에서는 Styled Components로 전역 스타일(global style)을 정의하는 방법에 대해서 알아보겠습니다.</p>\n<blockquote>\n<p>Styled Components 자체에 대한 자세한 설명은 <a href=\"/react-styled-components\">관련 포스팅</a>를 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"컴포넌트-레벨-스타일링\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A0%88%EB%B2%A8-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81\" aria-label=\"컴포넌트 레벨 스타일링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 레벨 스타일링</h2>\n<p>React와 Styled Components로 웹 개발을 하다보면 대부분의 경우 컴포넌트 레벨에서 스타일을 하게 됩니다.\nReact가 컴포넌트 기반 자바스크립트 라이브러리라는 것을 감안해보면 너무나 자연스러운 현상일 것입니다.</p>\n<p>예를 들어, 다음 <code>&#x3C;BlogPost/></code> React 컴포넌트는 Styled Components로 스타일되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// BlogPost.js</span>\n\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">BlogPost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Wrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Content</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Wrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Title <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>h2<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n  line-height: 1.5;\n  font-size: 1.5rem;\n  margin: 0;\n  margin-bottom: 8px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Content <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>p<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  margin: 0;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n  line-height: 1.5;\n  font-size: 1rem;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Wrapper <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>article<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  border: 1px solid;\n  border-radius: 8px;\n  padding: 16px;\n  margin: 16px auto;\n  max-width: 400px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BlogPost<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>&#x3C;Wrapper/></code>와 <code>&#x3C;Title/></code>, <code>&#x3C;Content/></code> 컴포넌트는 각각 <code>&#x3C;article></code>, <code>&#x3C;h2></code>, <code>&#x3C;p></code> HTML 엘리먼트를 스타일하고 있는데요.\nStyled Components는 이렇게 컴포넌트 단위로 적용한 스타일을 외부와 완전히 격리시켜 해당 컴포넌트 내부에서만 유효하도록 해줍니다.</p>\n<h2 id=\"애플리케이션-레벨-스타일링\" style=\"position:relative;\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81\" aria-label=\"애플리케이션 레벨 스타일링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>애플리케이션 레벨 스타일링</h2>\n<p>하지만 규모가 있는 웹 애플리케이션을 개발할 때는 개별 컴포넌트가 아닌 모든 컴포넌트에 동일한 스타일을 적용하는 편이 유리한 경우가 있습니다.\n대표적인 예로 <code>font-family</code> CSS 속성을 들 수 있는데, 여러 컴포넌트에 걸쳐 통일된 글꼴을 사용하고 싶은 경우가 대부분이기 때문입니다.\nCSS에서 글꼴 관련 속성은 부모 엘리먼트에서 자식 엘리먼트로 상속(inherit)되기 때문에 <code>&#x3C;body></code> 엘리먼트를 대상으로 정의해주면 좋을 것 같습니다.</p>\n<p>또 다른 예로, 브라우저에 상관없이 일괄적인 스타일을 적용하기 위해서 사용하는 CSS 정규화(normalize)나 CSS 초기화(reset)를 들 수 있습니다.\n이러 종류의 전역 CSS 스타일도 애플리케이션 레벨에서 일괄적으로 적용해주는 것이 이상적일 것입니다.</p>\n<p>애플리케이션 레벨 스타일을 지원하기 위해서 Styled Components는 <code>createGlobalStyle()</code>라는 함수를 제공하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// GlobalStyle.jsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createGlobalStyle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> GlobalStyle <span class=\"token operator\">=</span> createGlobalStyle<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  *, *::before, *::after {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: \"Helvetica\", \"Arial\", sans-serif;\n    line-height: 1.5;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> GlobalStyle<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 <code>createGlobalStyle()</code> 함수로 생성한 전역 스타일 컴포넌트를 애플리케이션의 최상위 컴포넌트에 추가해주면 하위 모든 컴포넌트에 해당 스타일이 일괄 적용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// App.jsx</span>\n\n<span class=\"token keyword\">import</span> GlobalStyle <span class=\"token keyword\">from</span> <span class=\"token string\">\"./GlobalStyle\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> BlogPost <span class=\"token keyword\">from</span> <span class=\"token string\">\"./BlogPost\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>GlobalStyle <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>BlogPost title<span class=\"token operator\">=</span><span class=\"token string\">\"Styled Components 전역 스타일링\"</span><span class=\"token operator\">></span>\n        이번 포스팅에서는 Styled Components로 전역 스타일을 정의하는 방법에\n        대해서 알아보겠습니다<span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BlogPost<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"엘리먼트-기본-스타일링\" style=\"position:relative;\"><a href=\"#%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EA%B8%B0%EB%B3%B8-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81\" aria-label=\"엘리먼트 기본 스타일링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엘리먼트 기본 스타일링</h2>\n<p>빈번하게 사용되는 엘리먼트에 대해서는 애플리케이션 레벨에서 기본 스타일을 정의해주면 편리한 경우가 있습니다.\n예를 들어, <code>&#x3C;h2></code>와 <code>&#x3C;p></code> 엘리먼트에 대한 전역 스타일을 추가해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// GlobalStyle.jsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createGlobalStyle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> GlobalStyle <span class=\"token operator\">=</span> createGlobalStyle<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  *, *::before, *::after {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: \"Helvetica\", \"Arial\", sans-serif;\n    line-height: 1.5;\n  }\n\n  h2, p {\n    margin: 0;\n  }\n\n  h2 {\n    font-size: 1.5rem;\n  }\n\n  p {\n    font-size: 1rem;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> GlobalStyle<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 해주면 컴포넌트 레벨에서 스타일해줄 부분이 줄어들 게 되어, 여러 컴포넌트에 동일한 스타일을 반복해서 정의할 일이 적어집니다.\n뿐만 아니라 전역 스타일을 변경없이 그대로 사용할 경우에는 아예 해당 엘리먼트에 대한 스타일을 생략할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// BlogPost.jsx</span>\n\n<span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">BlogPost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Wrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Wrapper</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Title <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>h2<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  margin-bottom: 8px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Wrapper <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>article<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  border: 1px solid;\n  border-radius: 8px;\n  padding: 16px;\n  margin: 16px auto;\n  max-width: 400px;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BlogPost<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 코드는 아래에서 직접 확인하고 실행해볼 수 있습니다.</p>\n<iframe src=\"https://codesandbox.io/embed/upbeat-hertz-94e81?fontsize=14&hidenavigation=1&module=%2Fsrc%2FBlogPost.jsx&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"styled-components-global-style\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Styled Components를 이용하여 애플리케이션 레벨에서 스타일하는 방법에 대해서 살펴보았습니다.</p>","timeToRead":3,"fields":{"slug":"/styled-components-global-style/","tags":["JavaScript","React","CSS","style","CSS-in-JS","StyledComponents"]},"frontmatter":{"title":"Styled Components 전역 스타일링 (Global Style)","date":"Apr 17, 2021"}},"next":{"fields":{"slug":"/css-before-after/"},"frontmatter":{"title":"[CSS] ::before / ::after"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}