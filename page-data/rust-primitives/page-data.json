{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/rust-primitives/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/rust-struct/"},"frontmatter":{"title":"Rust 기초: 구조체 (Structure) 사용법"}},"node":{"html":"<p>어떤 프로그래밍 언어를 학습하든 Primitives, 즉 원시 자료형에 대한 이해은 매우 중요합니다.\n나중에 배우게 될 struct과 enum과 같은 커스텀(Custom) 자료형의 근간이 되는 중요한 개념이기 때문입니다.</p>\n<p>이번 글에서는 Rust의 주요 원시 자료형들을 살펴보고, 각 타입이 어떤 특성을 가지는지, 그리고 실제로 어떻게 사용하는지 예제를 통해 알아보겠습니다.</p>\n<h2 id=\"원시-자료형이란\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C-%EC%9E%90%EB%A3%8C%ED%98%95%EC%9D%B4%EB%9E%80\" aria-label=\"원시 자료형이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시 자료형이란?</h2>\n<p>Rust의 원시 자료형은 언어에 내장되어 있는 가장 기본적인 데이터 유형(type)입니다.\n변수나 함수 선언 시 명시적으로 자료형을 지정할 수도 있고, 컴파일러가 자동으로 추론하기도 합니다.</p>\n<p>Rust의 주요 원시 자료형은 아래와 같습니다.</p>\n<ul>\n<li>정수형(<code>u16</code>, <code>i32</code> 등)</li>\n<li>부동소수점형(<code>f32</code>, <code>f64</code>)</li>\n<li>불리언형: <code>bool</code></li>\n<li>문자형: <code>char</code></li>\n<li>튜플형: <code>(i32, bool)</code></li>\n<li>배열형: <code>[i32; 5]</code></li>\n</ul>\n<p>Rust는 성능과 안정성을 모두 추구하는 시스템 프로그래밍 언어입니다.\n이를 위해 메모리 레이아웃이 명확하고, 타입 시스템이 엄격하게 설계가 되어 있죠.</p>\n<h2 id=\"정수형-integers\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%88%98%ED%98%95-integers\" aria-label=\"정수형 integers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정수형 (Integers)</h2>\n<p>Rust는 부호 개념이 있는 정수(Signed)와 부호 개념이 없는 정수(Unsigned)를 명확히 구분합니다.\nSigned 정수형은 <code>i</code> 뒤에 비트 수가 붙고, Unsigned 정수형은 <code>u</code> 뒤에 비트 수가 붙습니다.</p>\n<p>예를 들어, <code>i8</code>은 8비트로 이루어진 Signed 정수형이며, <code>-2^7 (=-128)</code> 부터 <code>2^7 - 1 (=127)</code>까지 표현할 수 있습니다.\n반면에, <code>u8</code>은 8비트로 이루어진 Unsigned 정수형이며, <code>0</code> 부터 <code>2^8 - 1 (=255)</code>까지 표현할 수 있습니다.\n동일한 개수의 비트를 가지고 표현할 수 있는 수의 개수는 256개로 동일하나, 음수 개념이 없는 Unsigned 자료형으로는 Signed 자료형보다 2배 큰 양수를 표현할 수 있는 것을 알 수 있습니다.</p>\n<p>크기에 따라 8비트, 16비트, 32비트, 64비트 정수 자료형이 존재합니다.\n비트 수가 클수록 더 큰 범위를 표현할 수 있지만, 그만큼 많은 양의 메모리를 소모합니다.</p>\n<table>\n<thead>\n<tr>\n<th>자료형</th>\n<th>부호</th>\n<th>크기</th>\n<th>범위</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>i8</code></td>\n<td>✅</td>\n<td>8비트</td>\n<td>-128 ~ 127</td>\n</tr>\n<tr>\n<td><code>u8</code></td>\n<td>❌</td>\n<td>8비트</td>\n<td>0 ~ 255</td>\n</tr>\n<tr>\n<td><code>i16</code></td>\n<td>✅</td>\n<td>16비트</td>\n<td>-32,768 ~ 32,767</td>\n</tr>\n<tr>\n<td><code>u16</code></td>\n<td>❌</td>\n<td>16비트</td>\n<td>0 ~ 65,535</td>\n</tr>\n<tr>\n<td><code>i32</code></td>\n<td>✅</td>\n<td>32비트</td>\n<td>-2,147,483,648 ~ 2,147,483,647</td>\n</tr>\n<tr>\n<td><code>u32</code></td>\n<td>❌</td>\n<td>32비트</td>\n<td>0 ~ 4,294,967,295</td>\n</tr>\n<tr>\n<td><code>i64</code></td>\n<td>✅</td>\n<td>64비트</td>\n<td>-2^63 ~ 2^63-1</td>\n</tr>\n<tr>\n<td><code>u64</code></td>\n<td>❌</td>\n<td>64비트</td>\n<td>0 ~ 2^64-1</td>\n</tr>\n<tr>\n<td><code>isize</code></td>\n<td>✅</td>\n<td>32/64비트</td>\n<td>-2^31 ~ 2^31-1 (32비트) / -2^63 ~ 2^63-1 (64비트)</td>\n</tr>\n<tr>\n<td><code>usize</code></td>\n<td>❌</td>\n<td>32/64비트</td>\n<td>0 ~ 2^32-1 (32비트) / 0 ~ 2^64-1 (64비트)</td>\n</tr>\n</tbody>\n</table>\n<p><code>isize</code>와 <code>usize</code>는 포인터를 위한 자료형인데 크기가 시스템 아키텍쳐에 따라서 32비트가 될 수도 있고 64비트가 될 수도 있습니다.</p>\n<p>각 자료형마다 표현할 수 있는 숫자의 범위가 틀리기 때문에, 범위를 벗어나는 숫자를 할당하지 않도록 주의해야 합니다.\n예를 들어, 숫자 <code>200</code>을 타입 <code>i8</code>인 변수에 할당하려고 하면 컴파일 오류가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i8</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">// ^^^ error: literal out of range for `i8`</span></code></pre></div>\n<p>변수에 명시적으로 자료형을 지정하지 않고 정수를 할당하면 기본적으로 컴파일러가 <code>i32</code>로 추론합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본 정수형 `i32`</span></code></pre></div>\n<h2 id=\"실수형-floating-point\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%88%98%ED%98%95-floating-point\" aria-label=\"실수형 floating point permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실수형 (Floating Point)</h2>\n<p>Rust에는 실수형으로는 32비트를 사용하는 <code>f32</code>와 64비트를 사용하는 <code>f64</code>가 있습니다.\nIEEE-754 표준을 따르는 부동소수점 자료형입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> e<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f32</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.71828</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.1415</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기본 실수형 `i64`</span></code></pre></div>\n<p>변수에 명시적으로 자료형을 지정하지 않고 실수를 할당하면 기본적으로 컴파일러가 <code>i64</code>로 추론합니다.</p>\n<h2 id=\"불리언-boolean\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%A6%AC%EC%96%B8-boolean\" aria-label=\"불리언 boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불리언 (Boolean)</h2>\n<p>Rust에서 <code>bool</code> 자료형은 다른 프로그래밍 언어처럼 <code>true</code> 또는 <code>false</code>의 두 가지 값만 가집니다.\n분기나 반복을 할 때 조건문에 많이 사용되죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> is_valid<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> is_valid <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"유효합니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"유효하지 않습니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"문자형-character\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%ED%98%95-character\" aria-label=\"문자형 character permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자형 (Character)</h2>\n<p>Rust에서 문자를 표현할 때는 <code>char</code> 자료형을 사용합니다.\n<code>char</code> 자료형에는 4바이트 크기의 유니코드 문자 하나를 표현할 수 있습니다.\n1바이트가 아니라 4바이트이기 때문에 영어 알파벳 뿐만 아니라 한국어를 포함한 다국어, 이모지를 할당할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> english<span class=\"token punctuation\">:</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> korean<span class=\"token punctuation\">:</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">=</span> <span class=\"token char\">'뷁'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> smiley<span class=\"token punctuation\">:</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">=</span> '😃'<span class=\"token punctuation\">;</span></code></pre></div>\n<p>참고로 Rust에서 문자 값은 반드시 작은 따옴표로 감싸줘야 합니다.\n큰 따옴표로 감싸면 한 글자라도 문자열 슬라이스로 인식됩니다.</p>\n<h2 id=\"유닛-unit\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%9B-unit\" aria-label=\"유닛 unit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유닛 (Unit)</h2>\n<p><code>()</code> 자료형은 함수에서 반환값이 없을 때 사용하는 특수한 자료형입니다.\nKotlin을 써보셨다면 익숙한 자료형일텐데요.\n굳이 JavaScript에서 비교하자면 <code>Undefined</code> 자료형이 그나마 가장 비슷한 개념일 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">print_rust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rust\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">print_rust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result의 타입은 ()</span></code></pre></div>\n<h2 id=\"튜플-tuple\" style=\"position:relative;\"><a href=\"#%ED%8A%9C%ED%94%8C-tuple\" aria-label=\"튜플 tuple permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>튜플 (Tuple)</h2>\n<p>튜플은 서로 다른 자료형의 값들을 하나로 묶을 때 사용하는 자료형입니다.\n각 요소는 인덱스로 접근할 수 있으며, 구조 분해 할당(Destructuring)을 통해 여러 변수에 할당할 후에 접근할 수도 있습니다.</p>\n<p><code>(자료형1, 자료형2, ...)</code> 형식으로 자료형을 명시하여 다양한 자료형의 여러 개 담을 수 있는 변수를 선언할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'M'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"나이: {}, 성별: {}, 활성화: {}\"</span><span class=\"token punctuation\">,</span> user<span class=\"token number\">.0</span><span class=\"token punctuation\">,</span> user<span class=\"token number\">.1</span><span class=\"token punctuation\">,</span> user<span class=\"token number\">.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> active<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"나이: {}, 성별: {}, 활성화: {}\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>튜플 자료형은 함수에서 두 개 이상의 값을 반환하고 싶을 때도 유용하게 사용됩니다.\nPython이나 Kotlin을 써보신 분들께는 아주 익숙한 자료형일거라 생각합니다.</p>\n<h2 id=\"배열-array\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4-array\" aria-label=\"배열 array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 (Array)</h2>\n<p>배열은 동일한 자료형의 값 여러 개를 묶을 때 사용하는 자료형입니다.\n튜플과 마찬가지로 담을 수 있는 요소의 개수, 즉 배열의 길이는 고정됩니다.</p>\n<p><code>[자료형; 개수]</code> 형식으로 자료형을 명시하여 동일한 자료형의 값을 여러 개 담을 수 있는 변수를 선언할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> scores<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">u8</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> score <span class=\"token keyword\">in</span> scores <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"점수: {score}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>[값; 개수]</code> 형식으로 초기화하면 동일한 값이 여러 개 들어있는 배열을 쉽게 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> temperatures <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    temperatures<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    temperatures<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    temperatures<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> temperature <span class=\"token keyword\">in</span> temperatures <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"온도: {temperature}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 Rust 프로그래밍의 중요한 기초인 원시 자료형에 대해서 알아보았습니다.\nRust로 코딩을 하면서 상황에 따라 적절한 자료형을 선택해서 사용하는 것은 프로그램의 안정성과 성능에 매우 중요한 부분입니다.</p>\n<p>Rust를 배우는 초반에는 다른 프로그래밍 언어에 비해서 자료형이 너무 많고 복잡해서 까다롭게 느껴질 수 있습니다.\n하지만 엄격한 타입 시스템 때문에 런타임 오류를 최소화 하면서 안전한 코드를 작성할 수 있으니 적응을 하시면 그 가치를 충분히 느끼실 수 있으실 것입니다.</p>","timeToRead":5,"fields":{"slug":"/rust-primitives/","tags":["Rust"]},"frontmatter":{"title":"Rust 기초: 원시 자료형(Primitives) 정리","date":"Jun 22, 2025"}},"next":{"fields":{"slug":"/rust-print/"},"frontmatter":{"title":"Rust 기초: 출력 매크로와 Display, Debug 트레잇"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}