{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-script-defer-async/","result":{"pageContext":{"previous":{"fields":{"slug":"/react-hooks-use-web-storage/"},"frontmatter":{"title":"React에서 웹 스토리지 사용하기"}},"node":{"html":"<p>웹 개발을 하다보면 <code>&#x3C;script></code> 엘리먼트를 이용해서 HTML 문서 안에 자바스크립트 코드를 삽입하는 경우가 필연적으로 생기기 마련인데요.\n이번 포스팅에서는 이렇게 정말 자주 사용하게 되는 <code>&#x3C;script></code> 엘리먼트를 좀 더 효과적으로 사용하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"script-엘리먼트의-위치\" style=\"position:relative;\"><a href=\"#script-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EC%9D%98-%EC%9C%84%EC%B9%98\" aria-label=\"script 엘리먼트의 위치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>script 엘리먼트의 위치</h2>\n<p>혹시, 브라우저가 <code>&#x3C;script></code> 엘리먼트를 어떻게 처리하는지 생각해보신 적이 있으신가요?\n당연한 얘기처럼 들리기시겠지만 브라우저는 HTML 문서를 처리하다가 <code>&#x3C;script></code> 엘리먼트를 만나면 <code>src</code> 속성에 명시된 경로의 파일을 내려받아 자바스크립트 코드를 실행합니다.</p>\n<p>여기서 <code>&#x3C;script></code> 엘리먼트가 HTML 문서에서 어디에 위치하는지가 웹 페이지의 로딩 속도에 영향을 미칠 수가 있는데요.</p>\n<p>아래와 같이 <code>&#x3C;script></code> 엘리먼트가 <code>&#x3C;body></code> 엘리먼트의 중간에 오게되면 어떤 일이 일어날까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>A<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>B<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위 HTML 문서는 브라우저에서 다음과 같이 순차적으로 처리가 됩니다.</p>\n<ul>\n<li><code>&#x3C;h2>A&#x3C;/h2></code>가 화면에 출력됨</li>\n<li><code>script.js</code> 파일을 내려받아 자바스립트 코드가 실행됨</li>\n<li><code>&#x3C;h2>B&#x3C;/h2></code>가 화면에 출력</li>\n</ul>\n<p>브라우저로 위 HTML 문서를 직접 열어보면 처리 속도가 워낙 빨라서 이 부분을 눈으로 확인하는 것은 불가능하겠지요?\n다음과 같이 일부로 3초의 지연 시간이 발생하도록 <code>script.js</code> 파일 안에 자바스크립트 코드를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// script.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> wakeUpTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> ms<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> wakeUpTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 이 HTML 문서를 브라우저로 열어보면 <code>A</code>가 화면에 먼저 나오고, 약 3초 후에 <code>B</code>가 화면에 뜨는 것을 보실 수 있으실 겁니다.</p>\n<p>이렇게 <code>&#x3C;script></code> 엘리먼트 때문에 브라우저에서 발생하는 HTML 코드 처리 중 딜레이는 매우 단순한 방법으로 최소화 할 수 있습니다.\n바로 <code>&#x3C;script></code> 엘리먼트를 <code>&#x3C;body></code> 엘리먼트의 가장 마지막으로 옮겨주는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>A<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>B<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>다시 브라우저에서 이 HTML 문서를 열어보면 화면에 <code>A</code>과 <code>B</code>가 동시에 출력되는 것을 보실 수 있으실 겁니다.</p>\n<p>정반대로 <code>&#x3C;script></code> 엘리먼트를 <code>&#x3C;head></code> 엘리먼트 안으로 이동시키면 어떤 일이 일어날까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>A<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>B<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이 HTML 문서를 브라우저로 열어보면, 브라우저에 <code>A</code>과 <code>B</code>가 3초 후에 동시에 나타날 것입니다.</p>\n<p>전통적으로 HTML 입문자들은 <code>&#x3C;script></code> 엘리먼트를 <code>&#x3C;head></code> 엘리먼트 안에 넣도록 배우는 경우가 많았습니다.\n하지만 실제 프로젝트에서 개발을 하다보면 <code>&#x3C;body></code> 엘리먼트의 제일 마지막에서 <code>&#x3C;script></code> 엘리먼트를 보게되는 경우가 훨씬 많다는 것을 사용자에게 보다 최적화된 웹페이지 로딩 경험을 제공하려면 <code>&#x3C;script></code> 엘리먼트를 <code>&#x3C;body></code> 엘리먼트의 마지막에 넣는 것이 유리하기 때문입니다.</p>\n<h2 id=\"defer-속성-활용\" style=\"position:relative;\"><a href=\"#defer-%EC%86%8D%EC%84%B1-%ED%99%9C%EC%9A%A9\" aria-label=\"defer 속성 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>defer 속성 활용</h2>\n<p>위에서 살펴본 것 처럼 <code>&#x3C;script></code> 엘리먼트를 <code>&#x3C;body></code> 엘리멘트의 마지막에 위치시킴으로써 브라우저가 막힘없이 HTML 코드 처리할 수 있도록 도울 수 있습니다.\n하지만 내려받아야 하는 자바스크립트 파일의 크기가 크거나 네트워크 속도가 느린 경우, 단순히 <code>&#x3C;script></code> 엘리먼트를 위치를 조정해주는 것만으로는 부족할 수가 있습니다.</p>\n<p>왜냐하면, 화면에 모든 HTML 코드가 처리되어 출력이 완료된 상태에서 자바스크립트 파일아 내려받아지는 동안 브라우저에서는 행이 걸린 것처럼 느껴질 수 있기 때문입니다.\n이 상태에서 사용자는 웹사이트의 출력 결과를 브라우저 상에서 볼 수는 있지만 웹사이트와 상호 작용은 아직 할 수가 없는데요.</p>\n<p><code>&#x3C;script></code> 엘리먼트에 <code>defer</code> 속성을 활용하면, 이렇게 브라우저에서 자바스크립트 파일을 내려받는 시간을 취소화할 수 있습니다.\n왜냐하면 <code>defer</code> 속성을 사용하면 브라우저는 HTML 코드가 처리하면서 동시에 자바스크립트 파일도 내려받기 때문입니다.\n뿐만 아니라, 해당 <code>&#x3C;script></code> 엘리먼트가 HTML 문서 내의 어디에 위치하더라도, 마치 <code>&#x3C;body></code> 엘리먼트의 제일 마지막에 넣은 것처럼 HTML 코드가 모두 처리된 이후에 자바스크립트 코드가 실행이 됩니다.</p>\n<p>예를 들어, 브라우저가 HTML 코드를 처리하는데 0.3초가 걸리고, 자바스크립트 파일을 내려 받는데 0.2초가 걸린다면, 내려받은 자바스크립트 코드는 0.3초 후, 즉 HTML 코드가 처리되지 마자 바로 실행될 수 있습니다. 왜냐하면 HTML 코드를 처리하는 동안 해당 자바스크립트 파일의 다운로드는 이미 끝났기 때문입니다.</p>\n<p>하지만 <code>defer</code> 속성을 사용하지 않는다면, 브라우저가 HTML 코드를 처리하는데 0.3초, 자바스크립트 파일을 내려 받는데 0.2초가 순차적으로 소요되어, 내려받은 자바스크립트 코드는 0.5초 후에 실행되게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>A<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>B<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위 HTML 문서를 브라우저에서 열어보면, 마치 <code>&#x3C;script></code> 엘리먼트를 <code>&#x3C;body></code> 엘리먼트의 제일 마지막에 넣은 것처럼 브라우저 화면에 <code>A</code>과 <code>B</code>가 동시에 출력되는 것을 보실 수 있으실 겁니다.</p>\n<h2 id=\"async-속성-활용\" style=\"position:relative;\"><a href=\"#async-%EC%86%8D%EC%84%B1-%ED%99%9C%EC%9A%A9\" aria-label=\"async 속성 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async 속성 활용</h2>\n<p><code>&#x3C;script></code> 엘리먼트는 <code>defer</code> 속성과 유사한 <code>async</code>라는 속성도 HTML5 부터 제공하고 있는데요.\n이 두 개의 속성은 동작 방식에서 미묘한 차이가 있지만 무분별하게 구분없이 사용되는 경우를 자주 보게 됩니다.</p>\n<p><code>async</code> 속성을 사용하면 브라우저는 HTML 코드를 처리하는 동안 자바스크립트 파일이 내려받는 것뿐만 아니라, 다운로드가 끝나자마자 지체없이 내려받은 자바스크립트 코드를 실행합니다.\n따라서 개발자는 해당 자바스크립트 코드가 어느 시점에 내려받아져 실행이 될지 알 수 없습니다. 자바스크립트 코드가 작은 경우, HTML 코드의 처리보다 먼저 끝날 수도 있고, 자바스크립트의 코드가 큰 경우, HTML 코드의 처리보다 늦게 끝날 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>A<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>B<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위 HTML 문서를 브라우저에서 열어보면, <code>defer</code> 속성을 사용했을 때와 마찬가지로 마치 브라우저 화면에 <code>A</code>과 <code>B</code>가 동시에 출력되는 것을 보실 수 있으실 겁니다.</p>\n<h2 id=\"defer-vs-async\" style=\"position:relative;\"><a href=\"#defer-vs-async\" aria-label=\"defer vs async permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>defer vs. async</h2>\n<p>자, 그럼 결론적으로 언제 <code>defer</code> 속성을 사용하는 게 낫고, 언제 <code>async</code> 속성을 사용하는 게 나을까요?\n자바스크립트 파일의 다운로드 측면에서는 <code>defer</code> 속성과 <code>async</code> 속성은 큰 차이가 없습니다.\n두 가지 방식에서 모두 브라우저는 HTML 코드를 실행하면서 백그라운드에서 자바스크립트 파일을 다운로드 하기 때문입니다.</p>\n<p>하지만 자바스크립트 코드의 실행 측면에서 았을 때는 <code>defer</code> 속성과 <code>async</code> 속성 간에는 의미있는 차이가 생깁니다.\n서로 연관이 있는 여러 개의 스크립트 파일을 순차적으로 실행해야하는 경우에는 <code>defer</code> 속성을 사용하는 편이 안전합니다.\n왜냐하면 <code>defer</code> 속성은 자바스크립트 코드를 HTML 문서에 나타는 순서대로 실행을 해주기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- 병렬 로드, 순차 실행 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./script-1.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./script-2.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./script-3.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>반면에 여러 개의 독립된 자바스크립트 파일을 삽입하는 경우에는 (ex. 광고/통계용 외부 스크립트) <code>async</code> 속성을 사용하는 편이 성능 측면에서 유리합니다.\n왜냐하면 <code>async</code> 속성을 사용해서 삽입된 자바스크립트 코드는 HTML 문서에 나타나는 순서대로 실행이된다는 보장이 없고 다운로드 완료 즉시 실행되기 때문입니다.\n하나의 자바스크립트 파일이 동일 HTML 문서 내에 삽입된 다른 자바스크립트 파일에 의존하는 경우 예상치 못한 자바스크립트 오류가 발생할 위험이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- 병렬 로드, 병렬 실행 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./google-ad.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./facebook-ad.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./naver-ad.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 <code>&#x3C;script></code> 엘리먼트를 HTML 문서 상에서 어디에 위치시키는지에 따라 웹 페이지의 로딩 속도에 어떤 영향을 미칠 수가 있는지 알아보았습니다. 더불어, 자바스크립트 파일의 다운로드와 자바스크립트 코드의 실행을 최적화하는데 도움이 될 수 있는 <code>&#x3C;script></code> 엘리먼트의 <code>defer</code> 속성과 <code>async</code> 속성에 대해서도 살펴보았습니다. <code>&#x3C;script></code> 엘리먼트에 대한 좀 더 상세한 내용은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\">MDN 공식 문서 - script: The Script element</a>를 참고하시길 바랍니다.</p>","timeToRead":6,"fields":{"slug":"/js-script-defer-async/","tags":["HTML","JavaScript"]},"frontmatter":{"title":"<script>로 HTML 문서에 자바스크립트 넣기 (feat. defer & async)","date":"Dec 30, 2020"}},"next":{"fields":{"slug":"/testing-library-user-agent/"},"frontmatter":{"title":"유저 이벤트 테스트 (@testing-library/user-event)"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}