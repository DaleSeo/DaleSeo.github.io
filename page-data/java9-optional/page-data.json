{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/java9-optional/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/java9-stream-iterate/"},"frontmatter":{"title":"Java9에서 강화된 Stream 클래스의 iterate 정적 메서드"}},"node":{"html":"<p>Java9에서 Optoinal 클래스에 몇가지 유용한 메서드들이 추가되었습니다. 이번 포스팅에서는 이 새로운 메서드들을 어떻게 활용할 수 있는지 살펴보겠습니다. Java8에서 추가되었던 Optional의 좀 더 기본적인 사용법은 아래 포스팅를 참고바랍니다.</p>\n<ul>\n<li><a href=\"/java8-optional-before\">자바8 Optional 1부: 빠져나올 수 없는 null 처리의 늪</a></li>\n<li><a href=\"/java8-optional-after\">자바8 Optional 2부: null을 대하는 새로운 방법</a></li>\n<li><a href=\"/java8-optional-effective\">자바8 Optional 3부: Optional을 Optional답게</a></li>\n</ul>\n<h2 id=\"or-메서드\" style=\"position:relative;\"><a href=\"#or-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"or 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>or() 메서드</h2>\n<p>Optional 객체가 담고 있는 값에 접근할 때, 비어있는 경우를 대비해서 <code>orElse​()</code>나 <code>orElseGet()</code> 메서드를 이용해서 대신 리턴할 값을 지정해줬었습니다. <code>orElse()</code> 메서드는 대신 리턴할 값 자체를 인자로 받는 반면, <code>orElseGet()</code> 메서드는 대신 리턴할 값을 만들어내는 람다를 인자로 받습니다. Java9에서 추가된 <code>or()</code> 메서드를 얄아보기 전에 먼저 이름이 유사한 기존 메서드을 먼저 리마인드 해보겠습니다.</p>\n<h3 id=\"orelse\" style=\"position:relative;\"><a href=\"#orelse\" aria-label=\"orelse permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>orElse()</h3>\n<p>예를 들어 커피 주문 시스템에서 주문한 커피 이름이 누락된 경우 디폴트로 아메리카노를 사용한다고 해봅시다.\n아래는 <code>orElse()</code> 메서드를 이용해서 주문한 커피 이름이 <code>null</code>인 경우, <code>coffeeToMake</code> 변수를 아메리카노(<code>Americano</code>)로 세팅해주는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> coffeeToMake <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getCoffee</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Americano\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"만들 커피: \"</span> <span class=\"token operator\">+</span> coffeeToMake<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약, <code>order.getCoffee()</code>가 <code>\"Latte\"</code>를 리턴한다면, <code>orElse()</code> 메서드 라인은 실행될 일이 없게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">만들 커피: Latte</code></pre></div>\n<p>하지만 <code>order.getCoffee()</code>가 <code>null</code>을 리턴하거나, <code>order</code> 객체 자체가 <code>null</code>인 경우에는 <code>orElse()</code> 메서드의 인자값으로 넘어간 <code>\"Americano\"</code>가 <code>coffeeToMake</code> 변수에 할당됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">만들 커피: Americano</code></pre></div>\n<h3 id=\"orelseget\" style=\"position:relative;\"><a href=\"#orelseget\" aria-label=\"orelseget permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>orElseGet()</h3>\n<p>고객 맞춤 서비스를 제공하기 위해서 커피 주문 시스템을 개선 해보겠습니다.\n디폴트 커피 이름을 아메리카노처럼 고정된 값이 아닌 해당 고객이 즐겨마시는 커피 이름으로 세팅하려면 어떻게 해야할까요?</p>\n<p>아래는 <code>orElseGet()</code> 메서드를 이용해서 주문한 커피 이름이 <code>null</code>인 경우, <code>coffeeToMake</code> 변수를 고객이 설정해 둔 즐겨마시는 커피 이름으로 세팅해주는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> coffeeToMake <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getCoffee</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orElseGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getFavoriteCoffee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"만들 커피: \"</span> <span class=\"token operator\">+</span> coffeeToMake<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마찬가지로 <code>order.getCoffee()</code>가 <code>\"Latte\"</code>를 리턴한다면, <code>orElseGet()</code> 메서드 라인은 실행될 일이 없게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">만들 커피: Latte</code></pre></div>\n<p>하지만 <code>order.getCoffee()</code>가 <code>null</code>을 리턴하거나, <code>order</code> 객체 자체가 <code>null</code>인 경우에는 <code>orElseGet()</code> 메서드의 인자로 넘어간 람다 함수의 리턴값이 <code>coffeeToMake</code> 변수에 할당됩니다. 만약에 <code>user.getFavoriteCoffee()</code>의 리턴값이 <code>\"Cappuccino\"</code>라면 다음과 같이 출력될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">만들 커피: Cappuccino</code></pre></div>\n<p><code>orElseGet()</code> 메서드는 <code>orElse()</code> 메서드와 달리 런타임에 고정되지 않는 값을 지연 로딩(Lazy Loading)할 수 있습니다. 그리고 이 두 개의 메서드 모두 Optional 객체 자체(<code>Optional&#x3C;T></code>)가 아닌 Optional 객체가 담고 있던 값(<code>T</code>)을 리턴한다는 공통점이 있습니다. 위 코드에서 <code>coffeeToMake</code> 변수의 타입이 <code>Optional&#x3C;String></code>이 아닌 <code>String</code>인 이유입니다.</p>\n<h3 id=\"or\" style=\"position:relative;\"><a href=\"#or\" aria-label=\"or permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>or()</h3>\n<p>Java9에서 추가된 <code>or()</code> 메서드는 위에서 복습한 <code>orElseGet()</code>나 <code>orElse()</code>와 달리 Optional 객체를 리턴하고 싶을 때 사용합니다. 따라서 인자로 넘기는 람다 함수는 <code>T</code>가 아닌 <code>Optional&#x3C;T></code>를 리턴해야 합니다.</p>\n<p>예를 들어 고객이 즐겨마시는 커피 이름을 설정하지 않았을 경우, 위에 <code>orElseGet()</code> 메서드를 사용하는 코드는 결국 <code>coffeeToMake</code> 변수에 <code>null</code>을 할당하게 될 것입니다. 왜냐하면, <code>orElseGet()</code> 메서드의 인자로 넘어간 람다 함수가 <code>null</code>을 리턴할 것이기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">만들 커피: null</code></pre></div>\n<p>자 그럼, <code>or()</code> 메서드를 활용해서 커피 주문 시스템을 한 단계 더 업그레이드 해보겠습니다. 이번에는 고객이 즐겨 마시는 커피가 있을 경우, 그 커피 이름로 사용하고, 없을 경우에는 아메리카노를 사용하도록 코드를 바꿔보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> coffeeToMake <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getCoffee</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getFavoriteCoffee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Americano\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"만들 커피: \"</span> <span class=\"token operator\">+</span> coffeeToMake<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 코드를 변경하게 되면 <code>user.getFavoriteCoffee()</code>의 리턴값이 <code>null</code>이라도 다음과 같이 출력되게 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">만들 커피: Americano</code></pre></div>\n<p><code>or()</code> 메서드의 인자로 넘어간 람다 함수는 <code>Optional.ofNullable()</code> 메서드를 사용하여 고객이 즐겨 마시는 커피 값을 Optional 객체에 담아서 리턴하고 있습니다. <code>or()</code> 메서드의 리턴 타입이 <code>Optonal</code>이기 때문에 계속해서 <code>orElse()</code>와 같은 Optional 클래스의 메서드들을 연쇄적으로 호출할 수 있게됩니다.</p>\n<p>기존의 <code>orElseGet()</code>나 <code>orElse()</code>가 주로 메서드 채인(Chain)의 최말단에서 최종적으로 <code>Optional</code> 객체가 담고 있는 값을 얻기위해서 사용됐다고 한다면, 이번에 추가된 <code>or()</code> 메서드는 주로 메서드 채인의 중간에서 <code>Optionl</code> 객체가 비어있을 경우 값을 채워주기 위한 용도로 사용할 수 있습니다.</p>\n<p>이렇게 주문한 커피 이름이나 고객이 즐겨마시는 커피 이름이 누락되어도 항상 디폴트로 아메리카노를 만들 수 있는 주문 시스템을 만들어졌습니다.</p>\n<h2 id=\"ifpresentorelse-메서드\" style=\"position:relative;\"><a href=\"#ifpresentorelse-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"ifpresentorelse 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ifPresentOrElse() 메서드</h2>\n<p>Java9에서 추가된 <code>ifPresentOrElse()</code> 메서드는 기존에 있던 <code>ifPresent()</code> 메서드와 이름이 유사합니다. 차이점이라고 하면 기존의 <code>ifPresent()</code> 메서드는 Optional 객체가 값을 담고 있을 때 처리할 내용만 정의했다고 한다면, <code>ifPresentOrElse()</code> 메서드는 그와 더불어, Optional 객체가 비어있을 경우 처리할 내용까지 정의할 수 있습니다.</p>\n<h3 id=\"ifpresent\" style=\"position:relative;\"><a href=\"#ifpresent\" aria-label=\"ifpresent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ifPresent()</h3>\n<p>아래는 <code>ifPresent()</code> 메서드를 사용하여 주문한 커피 이름이 있을 경우에만 만들 커피를 출력하는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getCoffee</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>coffee <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"만들 커피: \"</span> <span class=\"token operator\">+</span> coffee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>인자로 Optional 객체가 담고 있는 값을 가지고 수행할 로직을 넘기기 때문에, <code>order.getCoffee()</code>가 <code>null</code>을 리턴하거나, <code>order</code> 객체 자체가 <code>null</code>인 경우에는 Optional 객체가 비게 되어 아무 것도 출력되지 않습니다.</p>\n<h3 id=\"ifpresentorelse\" style=\"position:relative;\"><a href=\"#ifpresentorelse\" aria-label=\"ifpresentorelse permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ifPresentOrElse()</h3>\n<p>주문한 커피 이름이 없을 경우 고객이 즐겨 마시는 커피 이름울 출력할 수 있도록 <code>ifPresentOrElse()</code> 메서드를 사용하여 코드를 수정하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token operator\">::</span><span class=\"token function\">getCoffee</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresentOrElse</span><span class=\"token punctuation\">(</span>\n    coffee <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"만들 커피: \"</span> <span class=\"token operator\">+</span> coffee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"만들 커피: \"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getFavoriteCoffee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>ifPresentOrElse()</code> 메서드는 두 개의 인자를 받는데, 첫 번째 인자는 <code>ifPresent()</code> 메서드와 동일하며, 두 번째 인자는 <code>Optional</code> 객체가 비어있을 경우, 수행될 람다 함수입니다.</p>\n<h2 id=\"stream-메서드\" style=\"position:relative;\"><a href=\"#stream-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"stream 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stream() 메서드</h2>\n<p>마지막으로 Java9에서 Optional 클래스에 추가된 메서드는 <code>stream()</code> 입니다. 이 메서드는 Optional 객체를 Stream 객체로 변환하기 위해서 사용됩니다. 기본적으로 Stream 클래스는 Optional 클래스보다 더 다양하고 강력한 API를 가지고 있으며, Optional도 어떻게 보면 값이 하나 이거나 하나도 없는 Stream으로 확장해서 생각해볼 수 있습니다.</p>\n<p>예를 들어, 아래는 여러 개의 커피 이름이 각각 <code>Optonal</code> 객체에 담겨서 <code>Stream</code> 형태로 들어오는데, 이중 비어있는 <code>Optonal</code> 객체는 제외하고 존재하는 커피 이름들만 <code>List</code> 객체로 변환하는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> optionalStream <span class=\"token operator\">=</span>\n  <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Americano\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Latte\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cappuccino\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> validCoffeeList <span class=\"token operator\">=</span> optionalStream\n  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"만들 커피 목록: \"</span> <span class=\"token operator\">+</span> validCoffeeList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">만들 커피 목록: <span class=\"token punctuation\">[</span>Americano, Latte, Cappuccino<span class=\"token punctuation\">]</span></code></pre></div>\n<p>위와 같이 <code>Optional</code>의 <code>stream()</code> 메서드는 단독으로 쓰기 보다는 <code>Stream</code>의 <code>flatMap</code> 메서드와 함께 쓸 때 빛을 발휘하는 것 같습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Java9에서 <code>Optional</code> 클래스에 추가된 3개의 메서드 <code>or()</code>와 <code>ifPresentOrElse()</code>, <code>stream()</code>을 어떻게 사용하는지에 대해서 알아보았습니다. 개인적으로는 <code>or()</code> 메서드의 활용성이 가장 좋아보이는데 다른 메서드들도 익숙해질 수 있도록 더 많이 사용해봐야 겠습니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#stream\">https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#stream</a></li>\n<li><a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#or\">https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#or</a></li>\n<li><a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#ifPresentOrElse\">https://docs.oracle.com/javase/9/docs/api/java/util/Optional.html#ifPresentOrElse</a></li>\n</ul>","timeToRead":6,"fields":{"slug":"/java9-optional/","tags":["Java","자바","자바9","Java9","JDK9","Java8","Optional"]},"frontmatter":{"title":"Java9에서 추가된 Optional 기능 소개","date":"Aug 26, 2018"}},"next":{"fields":{"slug":"/java9-immutable-collections/"},"frontmatter":{"title":"Java9의 불변 컬렉션 생성"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}