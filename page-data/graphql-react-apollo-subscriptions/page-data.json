{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-react-apollo-subscriptions/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-os-environ/"},"frontmatter":{"title":"파이썬에서 환경 변수 읽어오기 (os.environ)"}},"node":{"html":"<h2 id=\"subscription\" style=\"position:relative;\"><a href=\"#subscription\" aria-label=\"subscription permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscription</h2>\n<p>GraphQL에는 query와 mutation 그리고 subscription 이렇게 총 3가지 operation type이 있습니다.\n이 중에 query는 데이터 조회를 위해서 필수적으로 사용되고, mutation은 데이터 변경을 위해서 많이 사용되고 있습니다.\nquery와 mutation 대비 다소 생소한 subscription은 주로 실시간(real-time) 애플리케이션을 구현하기 위해서 사용되는데요.\nsubscription도 기본적으로 query처럼 데이터를 조회를 위해서 사용되지만 작동 방식에서 큰 차이가 있습니다.</p>\n<p>query와 mutation은 전통적인 서버/클라이언트(server/client) 모델을 따르는 반면에, subscription은 발행\b/구독(pub/sub) 모델을 따릅니다.\nserver/client 모델에서는 클라이언트에서 최신의 데이터를 받아오려면, 더 자주 서버를 호출하는 방법 밖에 없는데요.\n접속자가 많은 서버에서 동시 다발적으로 변경이 발생하는 경우 클라이언트에서 아무리 자주 호출하더라도 완벽한 실시간을 달성하기는 어렵습니다.\n또한, 변경이 자주 발생하지 않는 서버의 경우, 클라이언트에서 어렇게 자주 호출하는 것이 자체가 서버와 클라이언트 측 모두 낭비와 부담이 될 것입니다.</p>\n<p>pub/sub 모델을 따르는 GraphQL의 subscription은 서버에서 발생하는 이벤트를 클라이언트에서 좀 더 효과적으로 인지할 수 있도록 해줍니다.\nquery와 mutation이 HTTP 프로토콜을 사용하는 반면에, subscription은 Web Socket 프로토콜을 사용합니다.\nWeb Socket을 사용하면 클라이언트는 서버와 연결 채널을 유지한체로, 서버에서 발생하는 이벤트를 실시간으로 수신받을 수 있습니다.\n이번 포스트에서는 React 용 Apollo Client를 사용하여 클라이언트 측에서 subscription을 어떻게 호출할 수 있는지 살펴보겠습니다.</p>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<p>Apollo Client로 React 앱을 개발하기 위해서 우선 자신의 리액트 프로젝트에 관련 패키지를 설치해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token function\">install</span> @apollo/react-hooks apollo-cache-inmemory apollo-client apollo-link-ws graphql graphql-tag subscriptions-transport-ws</code></pre></div>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &quot;dependencies&quot;: {\n    &quot;@apollo/react-hooks&quot;: &quot;^3.1.3&quot;,\n    &quot;apollo-cache-inmemory&quot;: &quot;^1.6.5&quot;,\n    &quot;apollo-client&quot;: &quot;^2.6.8&quot;,\n    &quot;apollo-link-ws&quot;: &quot;^1.0.19&quot;,\n    &quot;graphql&quot;: &quot;^14.6.0&quot;,\n    &quot;graphql-tag&quot;: &quot;^2.10.3&quot;,\n    &quot;react&quot;: &quot;^16.12.0&quot;,\n    &quot;react-dom&quot;: &quot;^16.12.0&quot;,\n    &quot;subscriptions-transport-ws&quot;: &quot;^0.9.0&quot;\n  },</code></pre></div>\n<p>여기서 눈여겨 볼 점은 GraphQL의 subscription은 Web Soket 프로토콜을 사용하기 때문에 <code>apollo-link-http</code> 대신에 <code>apollo-link-ws</code> 패키지를 설치해줘야 한다는 점입니다.\n<code>subscriptions-transport-ws</code> 패키지는 <code>apollo-link-ws</code> 패키지가 필요로 하기 때문에 함께 설치가 되야합니다.</p>\n<h2 id=\"apollo-client-생성\" style=\"position:relative;\"><a href=\"#apollo-client-%EC%83%9D%EC%84%B1\" aria-label=\"apollo client 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apollo Client 생성</h2>\n<p>먼저, <code>apollo-client</code> 패키지에서 임포트한 <code>ApolloClient</code> 생성자를 이용해서 Apollo Client를 생성합니다.\n<code>ApolloClient</code> 생성자는 두 개의 옵션을 가진 객체를 인자로 받습니다.\n첫번째, <code>cache</code> 옵션인데 가장 범용적으로 사용되는 <code>InMemoryCache</code> 객체를 설정합니다.\n두번째, <code>link</code> 옵션으로는 <code>WebSocketLink</code> 클래스에 연동할 GraphQL API의 Web Socket 주소를 넘겨줍니다.\n여기서는 이전 포스트에서 개발한 GraphQL 서버의 URL을 endpoint로 사용하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ApolloClient <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-client\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InMemoryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-cache-inmemory\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> WebSocketLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-ws\"</span>\n\n<span class=\"token keyword\">const</span> wsLink <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocketLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uri<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">wss://3wqzw.sse.codesandbox.io/graphql</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    reconnect<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  link<span class=\"token operator\">:</span> wsLink<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"react에-apollo-client-연결\" style=\"position:relative;\"><a href=\"#react%EC%97%90-apollo-client-%EC%97%B0%EA%B2%B0\" aria-label=\"react에 apollo client 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React에 Apollo Client 연결</h2>\n<p>다음으로, 위에서 생성한 <code>ApolloClient</code> 객체를 React에 연결해줘야 합니다.\n앱 내에서 특정 React 컴포넌트만 GraphQL API 호출이 필요한 경우가 아닌 이상, 모든 React 컴포넌트에서 <code>ApolloClient</code>를 사용하도록 설정하는 것이 일반적입니다.\n예를 들어, <code>create-react-app</code>으로 생성한 React 앱이라면 <code>App.js</code> 파일에서 이 작업을 해야합니다.</p>\n<p><code>@apollo/react-hooks</code> 패키지에서 임포트한 <code>ApolloProvider</code> 컴포넌트로 앱의 최상위 컴포넌트를 감싸줍니다.\n이 때, <code>ApolloProvider</code>의 <code>client</code> prop으로 위에서 생성한 <code>ApolloClient</code> 객체를 넘겨줘야 합니다.\n이렇게 설정을 해주면, 앱 내의 모든 컴포넌트에서 GraphQL API 연동이 가능해집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@apollo/react-hooks\"</span>\n\n<span class=\"token keyword\">import</span> Timeline <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Timeline\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ApolloProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>React Apollo Subscription<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Timeline <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ApolloProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"graphql-subscription-호출\" style=\"position:relative;\"><a href=\"#graphql-subscription-%ED%98%B8%EC%B6%9C\" aria-label=\"graphql subscription 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Subscription 호출</h2>\n<p>자, 이제 GraphQL API를 상대로 <code>messageAdded</code>라는 subscription을 호출해보도록 하겠습니다.</p>\n<p>먼저, <code>graphql-tag</code> 패키지에서 제공하는 <code>gql</code>이라는 template literal tag를 사용해서 일반 자바스크립트 문자열을 GraphQL 구문으로 바꿔줍니다.\n그 다음, <code>@apollo/react-hooks</code> 패키지에서 임포트한 <code>useSubscription</code> React Hook 함수에 이 GraphQL 쿼리를 인자로 넘겨서 호출합니다.\n그러면 <code>useSubscription</code> 함수는 응답 데이터(<code>data</code>) 뿐만 아니라, 로딩 여부(<code>loading</code>)와 오류 데이터(<code>error</code>)까지 함께 리턴합니다.</p>\n<p>정상적으로 서버로 부터 응답 데이터가 도착하면 <code>data</code>로 부터 <code>messageAdded</code> 값을 읽어서 새로운 메세지를 웹페이지에 출력해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSubscription <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@apollo/react-hooks\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MESSAGE_SUBSCRIPTION</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  subscription onMessageAdded {\n    messageAdded\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Timeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSubscription</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MESSAGE_SUBSCRIPTION</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Error<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> messageAdded <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>New message<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>messageAdded<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>앱을 실행해보면 화면에 메세지가 1초에 한 번씩 계속 업데이트되는 것을 보실 수 있을 것입니다.\n이 것은 GraphQL의 일반적인 query 호출과 달리, subscription은 서버와의 연결을 유지한체로 계속해서 데이터를 수신하기 때문입니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>화면에 계속 <code>Loading...</code> 이라고만 뜬다면 <code>https://3wqzw.sse.codesandbox.io</code>를 먼저 호출하여 GraphQL 서버를 활성화시켜주시기 바랍니다.</p>\n<iframe src=\"https://stackblitz.com/edit/graphql-react-apollo-subscriptions?embed=1&file=Timeline.js\"\nstyle=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Apollo Client를 이용해서 React 앱에서 GraphQL subscription을 호출하는 방법에 대해서 알아보았습니다.\nGraphQL subscription을 특징을 잘 살려서 실시간 애플리케이션을 개발하는데 유용하게 잘 활용하셨으면 좋겠습니다.</p>","timeToRead":4,"fields":{"slug":"/graphql-react-apollo-subscriptions/","tags":["자바스크립트","JavaScript","GraphQL","Subscription","Apollo","ApolloHooks","React"]},"frontmatter":{"title":"[GraphQL] React Apollo로 Subscription 호출","date":"Feb 23, 2020"}},"next":{"fields":{"slug":"/graphql-apollo-server-subscriptions/"},"frontmatter":{"title":"[GraphQL] Apollo Server로 Subscription 구현"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}