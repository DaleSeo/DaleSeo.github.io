{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-npm-cli/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-module-require/"},"frontmatter":{"title":"자바스크립트 CommonJS 모듈 내보내기/불러오기 (require)"}},"node":{"html":"<p>백앤드 개발을 하든 프런트앤드 개발을 하든 자바스크립트 프로젝트에서 NPM(Node Package Manager)을 사용하는 것은 거의 필수가 되었습니다. 이번 포스트에서는 실무에서 자주 사용되는 NPM 커맨드들에 대해서 살펴보겠습니다.</p>\n<h2 id=\"프로젝트-생성\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 생성</h2>\n<p><code>npm init</code> 커맨드를 사용하면 현재 디렉터리에 NPM 기반으로 프로젝트를 생성할 수 있습니다. 커맨드를 실행하면 패키지 이름, 버전, 설명 등등을 입력하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init\nThis utility will walk you through creating a package.json file.\nIt only covers the <span class=\"token function\">most</span> common items, and tries to guess sensible defaults.\n\nSee <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> <span class=\"token builtin class-name\">help</span> json<span class=\"token variable\">`</span></span> <span class=\"token keyword\">for</span> definitive documentation on these fields\nand exactly what they do.\n\nUse <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>pkg<span class=\"token operator\">></span><span class=\"token variable\">`</span></span> afterwards to <span class=\"token function\">install</span> a package and\nsave it as a dependency <span class=\"token keyword\">in</span> the package.json file.\n\nPress ^C at any <span class=\"token function\">time</span> to quit.\npackage name: <span class=\"token punctuation\">(</span>hello-npm<span class=\"token punctuation\">)</span>\nversion: <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span>.0<span class=\"token punctuation\">)</span>\ndescription:</code></pre></div>\n<p>프로젝트를 생성할 때 이러한 정보들을 일일이 입력하는 게 귀찮게 느껴질 수 있습니다. 이 때는 <code>--yes</code>나 <code>-y</code> 옵션을 주시면 디폴트 값으로 프로젝트가 생성이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init -y\nWrote to /temp/hello-npm/package.json:</code></pre></div>\n<p>이렇게 NPM 프로젝트를 생성하고 나면 디렉터리에 <code>package.json</code> 파일이 생성됩니다. 사실 NPM 프로젝트라는 게 별다른게 아니라 <code>package.json</code> 파일을 가진 모든 디렉터리를 NPM 프로젝트라고 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span>\npackage.json\n$ hello-npm <span class=\"token function\">cat</span> package.json\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hello-npm\"</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0.0\"</span>,\n  <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"main\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"index.js\"</span>,\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"keywords\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,\n  <span class=\"token string\">\"author\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"license\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ISC\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"신규-패키지-설치\" style=\"position:relative;\"><a href=\"#%EC%8B%A0%EA%B7%9C-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"신규 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>신규 패키지 설치</h2>\n<p>NPM을 사용하는 가장 큰 이유는 NPM에 등록되어 있는 무궁무진한 외부 패키지를 설치하기 위해서 일 것 입니다. <code>npm install</code> 또는 <code>npm i</code> 커맨드를 사용하면 원하시는 패키지를 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i lodash\n+ lodash@4.17.10\nadded <span class=\"token number\">1</span> package from <span class=\"token number\">2</span> contributors and audited <span class=\"token number\">1</span> package <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.914s\nfound <span class=\"token number\">0</span> vulnerabilities</code></pre></div>\n<p><code>lodash</code>라는 라이브러리를 설치해보았습니다. 설치가 끝나면 <code>node_modules</code> 디렉터리가 생기고 그 안에 <code>lodash</code> 디렉터리가 생겼음을 알 수 있습니다. NPM이 <code>lodash</code> 패키지의 파일들을 이 디렉터리 안으로 다운로드 받아놓았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> node_modules\nlodash</code></pre></div>\n<p>또한 <code>package.json</code> 파일을 열어보면 <code>dependencies</code> 속성에 해당 패키지의 이름과 버전이 추가되었음을 알 수 있습니다. 이는 다른 개발자들과 협업 시 외부 패키지는 제외하고 프로젝트 코드만 공유할 수 있도록 해줍니다. 이 부분은 아래에서 다시 살펴보도록 하겠습니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"lodash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.10\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>lodash</code>처럼 런타임에 필요한 패키지도 있지만 개발할 때만 필요한 패키지도 있습니다. 이러한 패키지는 <code>--save-dev</code> 또는 <code>-D</code> 옵션을 줘서 개발 의존성 모드로 설치해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D mocha</code></pre></div>\n<p><code>mocha</code>라는 테스트 라이브러리를 개발 의존성으로 설치해보았습니다. 테스트 라이브러리는 상용 빌드에 포함될 필요가 없기 때문입니다. 설치 후 <code>node_modules</code> 디렉터리를 열어보면 상당히 많은 디렉터리들이 추가되어 있음을 알 수 있습니다. <code>mocha</code>처럼 어떤 패키지는 다른 패키지들에 의존해서 작동합니다. 그리고 <code>mocha</code>가 의존하는 패키지들은 또 다른 패키지에 의존할 수 있습니다. 이렇게 NPM은 직접 의존하고 있는 패키지 뿐만 아니라 간접적으로 의존하고 있는 패키지(transitive dependency)까지 모조리 다운받아 줍니다.</p>\n<p>개발 의존성으로 설치된 패키지는 <code>package.json</code> 파일에서 <code>devDependencies</code> 속성에 들어가게 됩니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"mocha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.2.0\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"패키지-전역-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%A0%84%EC%97%AD-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 전역 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 전역 설치</h2>\n<p>간혹 패키지를 현재 디렉터리 뿐만 아니라 어디서나 실행할 수 있도록 전역으로 설치해야 할 때가 있습니다. 이러한 패키지는 <code>--global</code> 또는 <code>-g</code> 옵션을 줘서 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -g http-server</code></pre></div>\n<p><code>http-server</code>라는 CLI 도구를 전역으로 설치해보았습니다. <code>http-server</code>는 현재 디렉터리에 있는 파일을 웹처럼 서비스해주는 간단한 HTTP 서버입니다. 설치가 끝난 후 터미널에 <code>http-server</code>라고 입력해보면 8080 포트로 HTTP 서버가 구동되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ http-server\nStarting up http-server, serving ./\nAvailable on:\n  http://127.0.0.1:8080\n  http://192.168.0.3:8080\nHit CTRL-C to stop the server</code></pre></div>\n<p>하지만 <code>node_modules</code> 디렉터리나 <code>package.json</code> 파일에는 아무 변화가 일어나지 않습니다. 이 패키지는 전역으로 설치했기 때문에 이 프로젝트에만 국한되지 않기 때문입니다. 참고로 전역 패키지들은 보통 노드JS가 설치된 디렉터리 내의 <code>lib/node_modules</code>에서 찾을 수 있습니다. (또는 터미널에 <code>npm bin -g</code>라고 입력하면 정확한 패키지 전역 설치 디렉터리 경로가 출력됩니다.)</p>\n<h2 id=\"기존-패키지-일괄-설치\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%9D%BC%EA%B4%84-%EC%84%A4%EC%B9%98\" aria-label=\"기존 패키지 일괄 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 패키지 일괄 설치</h2>\n<p>위에서 잠깐 언급했던 것 처럼 Git과 같은 소스 관리 시스템에 NPM 프로젝트를 올려놓을 때 일반적으로 <code>node_modules</code> 디렉터리는 제외시키는 경우가 일반적입니다. 그래서 Git 리파지토리를 클론 후에는 최초 1회 기존에 설치된 패키지들을 설치해줘야 합니다. 위에서 살펴본 것 처럼 <code>package.json</code> 파일에 설치된 패키지에 대한 메타 데이터가 담겨있기 때문에 기존에 설치되어 있던 모든 패키지를 한 번에 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git clone &lt;패키지 이름>\n$ cd &lt;패키지 이름>\n$ npm i</code></pre></div>\n<p>위와 같이 <code>npm i</code> 커맨드 뒤에 패키지명을 붙이지 않으면 <code>package.json</code> 파일에 등록되어 있는 모든 패키지를 설치해줍니다.</p>\n<h2 id=\"설치된-패키지-확인\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98%EB%90%9C-%ED%8C%A8%ED%82%A4%EC%A7%80-%ED%99%95%EC%9D%B8\" aria-label=\"설치된 패키지 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치된 패키지 확인</h2>\n<p>기존에 설치된 패키지를 확인할 때는 보통 <code>package.json</code> 파일을 열어 <code>dependencies</code>와 <code>devDependencies</code> 항목을 확인하게 됩니다. 하지만 많은 패키지들이 내부적으로 또 다른 패키지들에 의존하고 있기 때문에 가끔 전체적인 의존성 트리를 확인하고 싶을 때가 생깁니다. 이럴 때는 <code>npm ls</code> 커맨드를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">ls</span>\nhello-npm@1.0.0 /temp/hello-npm\n├── lodash@4.17.10\n└─┬ mocha@5.2.0\n  ├── browser-stdout@1.3.1\n  ├── commander@2.15.1\n  ├─┬ debug@3.1.0\n  │ └── ms@2.0.0\n  ├── diff@3.5.0\n  ├── escape-string-regexp@1.0.5\n  ├─┬ glob@7.1.2\n  │ ├── fs.realpath@1.0.0\n  │ ├─┬ inflight@1.0.6\n  │ │ ├── once@1.4.0 deduped\n  │ │ └── wrappy@1.0.2\n  │ ├── inherits@2.0.3\n  │ ├── minimatch@3.0.4 deduped\n  │ ├─┬ once@1.4.0\n  │ │ └── wrappy@1.0.2 deduped\n  │ └── path-is-absolute@1.0.1\n  ├── growl@1.10.5\n  ├── he@1.1.1\n  ├─┬ minimatch@3.0.4\n  │ └─┬ brace-expansion@1.1.11\n  │   ├── balanced-match@1.0.0\n  │   └── concat-map@0.0.1\n  ├─┬ mkdirp@0.5.1\n  │ └── minimist@0.0.8\n  └─┬ supports-color@5.4.0\n    └── has-flag@3.0.0</code></pre></div>\n<h2 id=\"패키지-제거\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%A0%9C%EA%B1%B0\" aria-label=\"패키지 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 제거</h2>\n<p>설치된 패키지를 제거하려면 어떻게 해야될까요?</p>\n<p><code>npm uninstall</code> 또는 <code>npm r</code> 커맨드를 사용하면 원하시는 패키지를 프로젝트로 부터 제거할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> r mocha</code></pre></div>\n<p>위에서 설치한 <code>mocha</code> 라이브러리를 제거해보았습니다. <code>package.json</code> 파일을 열어보면 제거한 패키지에 대한 메타 데이터도 지워졌음을 알 수 있습니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>전역으로 설치한 패키지는 설치할 때와 동일하게 <code>--global</code> 또는 <code>-g</code> 옵션을 줘서 제거하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> r -g http-server\nremoved <span class=\"token number\">25</span> packages <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.261s\n$ http-server\nzsh: <span class=\"token builtin class-name\">command</span> not found: http-server</code></pre></div>\n<p>위에서 설치했던 <code>http-server</code> 라이브러리를 제거 후에 터미널에 <code>http-server</code>라고 입력해보면 해당 커맨드를 찾지 못하는 것을 알 수 있습니다.</p>\n<h2 id=\"패키지-무설치-실행-npx\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%AC%B4%EC%84%A4%EC%B9%98-%EC%8B%A4%ED%96%89-npx\" aria-label=\"패키지 무설치 실행 npx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 무설치 실행 (NPX)</h2>\n<p>NPM 5.2.0 버전 부터는 <code>npx</code>라는 유용한 커맨드가 추가되어 굳이 패키지를 설치하지 않고도 실행할 수 있는 방법이 생겼습니다. 방대한 NPM 라이브러리들을 설치의 부담없이 1회성으로 즉석해서 실행해볼 수 있기 때문에 최근에 많이 사용되고 있습니다.</p>\n<p>예를 들어 <code>http-server</code> 패키지를 프로젝트나 전역에 설치하지 않고 다음과 같이 <code>npx</code> 커맨드 뒤에 패키지명만 붙여서 실행해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx http-server\nnpx: installed <span class=\"token number\">25</span> <span class=\"token keyword\">in</span> <span class=\"token number\">3</span>.28s\nStarting up http-server, serving ./\nAvailable on:\n  http://127.0.0.1:8080\n  http://10.212.5.70:8080\nHit CTRL-C to stop the server</code></pre></div>\n<p>하지만 실행 후에도 <code>$PATH</code> 환경변수에 해당 커맨드를 추가되지 않으며 설치 파일을 전역 설치 디렉터리에도 남기지 않습니다. 또한 프로젝트의 <code>node_modules</code> 디렉터리나 <code>package.json</code> 파일에도 아무 변화가 일어나지 않습니다.</p>\n<h2 id=\"스크립트-실행\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-label=\"스크립트 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크립트 실행</h2>\n<p>NPM 프로젝트를 테스트나 구동, 빌드할 때 반복적으로 실행해야하는 스크립트를 <code>package.json</code> 파일에 등록해두고 <code>npm run</code> 커맨드를 이용해서 간편하게 실행시킬 수 있습니다.</p>\n<p>예를 들어 어떤 NPM 프로젝트의 <code>package.json</code>에 다음과 같이 3개의 스크립트가 등록되어 있다고 가정해봅시다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mocha --compilers js:babel-register\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=development webpack-dev-server --open --hot\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=production webpack --progress --hide-modules\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>빌드를 실행하려면 <code>npm run</code> 커맨드 뒤에 스크립트 이름을 붙여서 터미널에 입력하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run build</code></pre></div>\n<p>이는 아래 커맨드를 직접 입력해서 실행한 것과 같이 효과를 발생시킵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./node_modules/mocha --compilers js:babel-register</code></pre></div>\n<p>예외적으로 <code>test</code>와 <code>start</code> 스크립트의 경우, 많이 사용되기 때문에 <code>run</code>을 생략하고 실행시킬 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> start</code></pre></div>\n<p>이상으로 자주 사용되는 NPM 커맨드에 대해서 알아보았습니다. 이 정도만 숙지하고 계시면 큰 어려움 없이 NPM을 사용해서 자바스크립트 개발을 하실 수 있으실 것입니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://docs.npmjs.com/cli/npm\">https://docs.npmjs.com/cli/npm</a></li>\n</ul>","timeToRead":7,"fields":{"slug":"/js-npm-cli/","tags":["JavaScript","자바스크립트","NodeJS","노드JS","npm","npx","CLI","command","커맨드","명령어","npm init","npm install","npm i","npm ls","npm uninstall","npm r","npm run","npm start","npm test"]},"frontmatter":{"title":"자주 사용되는 npm 커맨드 (+npx)","date":"Mar 3, 2018"}},"next":{"fields":{"slug":"/java8-instant/"},"frontmatter":{"title":"[Java8 Time API] Instant 사용법"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}