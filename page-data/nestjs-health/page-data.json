{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/nestjs-health/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/css-z-index/"},"frontmatter":{"title":"CSS의 z-index 속성 이해하기"}},"node":{"html":"<p>마이크로서비스(microservices) 아키텍처나 분산 시스템 환경에서는 모든 서비스가 정상적으로 살아서 동작하는지를 검사하는 것이 매우 중요합니다.\n이를 위해서 각 서비스에 생존 여부(liveness)와 가용 여부(readiness)를 응답해주는 HTTP 엔드포인트(endpoint)가 필요하기 마련인데요.</p>\n<p>이번 포스팅에서는 NestJS 앱에서 이러한 엔드포인트(endpoint)를 어떻게 구현할 수 있는지에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"실습-프로젝트-구성\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"실습 프로젝트 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 프로젝트 구성</h2>\n<p>먼저 간단한 실습을 위해서 NestJS 프로젝트가 하나 필요할 것 같은데요.\n터미널에서 NestJS CLI 도구의 <code>nest new</code> 명령어를 실행하여 새로운 프로젝트를 구성하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest new our-nestjs\n⚡  We will scaffold your app <span class=\"token keyword\">in</span> a few seconds<span class=\"token punctuation\">..</span>\n\n? Which package manager would you ❤️  to use? <span class=\"token punctuation\">(</span>Use arrow keys<span class=\"token punctuation\">)</span>\n❯ <span class=\"token function\">npm</span>\n  <span class=\"token function\">yarn</span>\n  <span class=\"token function\">pnpm</span></code></pre></div>\n<blockquote>\n<p>NestJS CLI를 설치하고 NestJS 프로젝트를 구성하는 기본적인 방법은 <a href=\"/nestjs/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"liveness-엔드포인트-구현\" style=\"position:relative;\"><a href=\"#liveness-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EA%B5%AC%ED%98%84\" aria-label=\"liveness 엔드포인트 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>liveness 엔드포인트 구현</h2>\n<p>먼저 단순히 서비스가 살아있는지 죽었는지를 재빠르게 확인하기 위해서 사용하는 liveness 엔드포인트(endpoint)를 구현해볼까요?</p>\n<p>주로 AWS ELB와 같은 로드 밸런서(load balancer)나 쿠버네티스(Kubernetes)와 컨테이너 관리 플랫폼이 이러한 엔드포인트를 주기적으로 찔러보면서 서비스의 생존여부를 모니터링하게 됩니다.</p>\n<p>우선 NestJS CLI 도구로 <code>health</code> 모듈을 생성한 후, <code>health</code> 컨트롤러도 생성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest generate module health\nCREATE src/health/health.module.ts <span class=\"token punctuation\">(</span><span class=\"token number\">83</span> bytes<span class=\"token punctuation\">)</span>\nUPDATE src/app.module.ts <span class=\"token punctuation\">(</span><span class=\"token number\">315</span> bytes<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest generate controller health\nCREATE src/health/health.controller.spec.ts <span class=\"token punctuation\">(</span><span class=\"token number\">492</span> bytes<span class=\"token punctuation\">)</span>\nCREATE src/health/health.controller.ts <span class=\"token punctuation\">(</span><span class=\"token number\">101</span> bytes<span class=\"token punctuation\">)</span>\nUPDATE src/health/health.module.ts <span class=\"token punctuation\">(</span><span class=\"token number\">174</span> bytes<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>health</code> 컨트롤러 구현은 매우 단순합니다.\n응답 상태가 항상 <code>200 OK</code>가 되어야 하며, 사람이 직접 확인하는 용도가 아니므로 응답 전문은 그닥 중요하지 않습니다.\n<code>GET /health</code>로 요청이 들어오면 <code>checkHealth()</code> 메서드가 처리하도록 코드를 작성하겠습니다.</p>\n<div class=\"gatsby-code-title\">src/health/health.controller.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HealthController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"health\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">checkHealth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 터미널에서 <code>curl</code> 명령어를 사용하여 작성한 엔드포인트를 호출해보면 예상했던 응답이 돌아옵니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:3000/health <span class=\"token parameter variable\">-i</span>\n<span class=\"gatsby-highlight-code-line\">HTTP/1.1 <span class=\"token number\">200</span> OK</span>X-Powered-By: Express\nContent-Type: text/html<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>utf-8\nContent-Length: <span class=\"token number\">2</span>\nETag: W/<span class=\"token string\">\"2-nOO9QiTIwXgNtWtBJezz8kv3SLc\"</span>\nDate: Mon, <span class=\"token number\">20</span> Feb <span class=\"token number\">2023</span> <span class=\"token number\">21</span>:36:32 GMT\nConnection: keep-alive\nKeep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n\n<span class=\"gatsby-highlight-code-line\">OK</span></code></pre></div>\n<h2 id=\"readiness-엔드포인트-구현---메모리-검사\" style=\"position:relative;\"><a href=\"#readiness-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EA%B5%AC%ED%98%84---%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B2%80%EC%82%AC\" aria-label=\"readiness 엔드포인트 구현   메모리 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>readiness 엔드포인트 구현 - 메모리 검사</h2>\n<p>다음으로 서비스가 살아있을 뿐만 아니라 정상적으로 요청을 처리할 수 있는 상태인지를 확인할 때 사용하는 readiness 엔드포인트(endpoint)를 작성해보겠습니다.</p>\n<p>NestJS에서는 좀 더 쉽게 이러한 엔드포인트를 구현할 수 있도록 <code>@nestjs/terminus</code>라는 패키지를 제공하고 있는데요.\n이 패키지를 이용하면 하드웨어 사용량이나 외부 API가 정상인지를 손쉽게 검사할 수 있습니다.</p>\n<p>우선 실습 프로젝트에 <code>@nestjs/terminus</code>라는 npm 패키지를 프로젝트에 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i @nestjs/terminus\n\nwarn preInstall No repository field\n┌ <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>/4<span class=\"token punctuation\">]</span> 🔍  Resolving dependencies\n└ Completed <span class=\"token keyword\">in</span> <span class=\"token number\">7</span>.49s\n┌ <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>/4<span class=\"token punctuation\">]</span> 🚚  Fetching dependencies\n│ info pruneDeps Excluding <span class=\"token number\">1</span> dependency. For\n│ <span class=\"token function\">more</span> information use <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token parameter variable\">--verbose</span><span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">.</span>\n└ Completed <span class=\"token keyword\">in</span> <span class=\"token number\">11</span>.68s\n┌ <span class=\"token punctuation\">[</span><span class=\"token number\">3</span>/4<span class=\"token punctuation\">]</span> 🔗  Linking dependencies\n└ Completed <span class=\"token keyword\">in</span> <span class=\"token number\">13</span>.773s\ninfo security We found <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">install</span><span class=\"token variable\">`</span></span> scripts <span class=\"token function\">which</span>\nturbo skips <span class=\"token keyword\">for</span> security reasons. For <span class=\"token function\">more</span>\ninformation see\nhttps://turbo.sh/install-scripts.\n└─ @nestjs/core@9.3.9\n\nsuccess Saved lockfile <span class=\"token string\">\"package-lock.json\"</span>\nsuccess Updated <span class=\"token string\">\"package.json\"</span>\n\nsuccess Install finished <span class=\"token keyword\">in</span> <span class=\"token number\">33</span>.014s</code></pre></div>\n<p>그리고 <code>health</code> 모듈에서 <code>@nestjs/terminus</code> 패키지의 <code>TerminusModule</code>를 불러오겠습니다.</p>\n<div class=\"gatsby-code-title\">src/health/health.module.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TerminusModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/terminus\"</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HealthController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./health.controller\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TerminusModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>HealthController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HealthModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 힙(heap) 메모리 사용량이 300MB가 넘어가는지를 검사하도록 readiness 엔드포인트(endpoint)를 구현해볼까요?\n<code>GET /status</code>로 요청이 들어오면, <code>checkStatus()</code> 메서드가 처리하도록 코드를 작성하겠습니다.\n<code>checkStatus()</code> 메서드에는 <code>@HealthCheck()</code> 어노테이션을 붙여줘야합니다.</p>\n<div class=\"gatsby-code-title\">src/health/health.controller.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  HealthCheck<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  HealthCheckService<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  MemoryHealthIndicator<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/terminus\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HealthController</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> health<span class=\"token operator\">:</span> HealthCheckService<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> memory<span class=\"token operator\">:</span> MemoryHealthIndicator</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"health\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">checkHealth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">HealthCheck</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>health<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">.</span><span class=\"token function\">checkHeap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memory_heap\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>@nestjs/terminus</code> 패키지에서 제공하는 <code>MemoryHealthIndicator</code>를 사용하여 이처럼 아주 짧은 코드로 메모리 사용량을 검사할 수 있습니다.</p>\n<p>추가한 엔드포인트(endpoint) 호출해보면 <code>200 OK</code> 응답 상태와 함께 메모리 검사 결과가 JSON 형태로 응답이 될 것입니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://localhost:3000/status <span class=\"token parameter variable\">-i</span>\n<span class=\"gatsby-highlight-code-line\">HTTP/1.1 <span class=\"token number\">200</span> OK</span>X-Powered-By: Express\nContent-Type: application/json<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>utf-8\nContent-Length: <span class=\"token number\">107</span>\nETag: W/<span class=\"token string\">\"6b-ouXVoNOXyOxnMfI7caewF8/p97A\"</span>\nDate: Mon, <span class=\"token number\">20</span> Feb <span class=\"token number\">2023</span> <span class=\"token number\">21</span>:51:46 GMT\nConnection: keep-alive\nKeep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n\n<span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token string\">\"status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ok\"</span>,</span>  <span class=\"token string\">\"info\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"memory_heap\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"up\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"error\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"details\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"memory_heap\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"up\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"statusreadiness-엔드포인트-구현---api-검사\" style=\"position:relative;\"><a href=\"#statusreadiness-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EA%B5%AC%ED%98%84---api-%EA%B2%80%EC%82%AC\" aria-label=\"statusreadiness 엔드포인트 구현   api 검사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>status(readiness) 엔드포인트 구현 - API 검사</h2>\n<p>내부적으로 다른 API에 의존하는 서비스의 경우 원격 호출해야하는 API의 상태도 확인하는 것이 좋습니다.\n외부 API에 장애가 있다면 해당 서비스 자체적으로는 아무 문제가 없더라도 정상적으로 요청을 처리할 수 있는 상태라고 보기 어렵기 때문이죠.</p>\n<p>이럴 때는 <code>@nestjs/terminus</code> 패키지에서 제공하는 <code>HttpHealthIndicator</code>를 사용하여 외부 API가 접속이 가능한지 확인해볼 수 있는데요.\n이를 위해서는 HTTP 클라이언트가 되서 해당 API를 원격으로 호출해야하 하므로 <code>axios</code>와 <code>@nestjs/axios</code> 패키지를 설치해야합니다.\n(사실 외부 API를 호출하고 있다면 이미 해당 프로젝트에 설치되어있을 확률이 매우 높겠죠?)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i axios @nestjs/axios\nwarn preInstall No repository field\n┌ <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>/4<span class=\"token punctuation\">]</span> 🔍  Resolving dependencies\n└ Completed <span class=\"token keyword\">in</span> <span class=\"token number\">5</span>.961s\n┌ <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>/4<span class=\"token punctuation\">]</span> 🚚  Fetching dependencies\n│ info pruneDeps Excluding <span class=\"token number\">1</span> dependency. For <span class=\"token function\">more</span>\n│ information use <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token parameter variable\">--verbose</span><span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">.</span>\n└ Completed <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.016s\n┌ <span class=\"token punctuation\">[</span><span class=\"token number\">3</span>/4<span class=\"token punctuation\">]</span> 🔗  Linking dependencies\n└ Completed <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.025s\ninfo security We found <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">install</span><span class=\"token variable\">`</span></span> scripts <span class=\"token function\">which</span> turbo\nskips <span class=\"token keyword\">for</span> security reasons. For <span class=\"token function\">more</span> information see\nhttps://turbo.sh/install-scripts.\n└─ @nestjs/core@9.3.9\n\nsuccess Saved lockfile <span class=\"token string\">\"package-lock.json\"</span>\nsuccess Updated <span class=\"token string\">\"package.json\"</span>\n\nsuccess Install finished <span class=\"token keyword\">in</span> <span class=\"token number\">6</span>.053s</code></pre></div>\n<p>그 다음 <code>health</code> 모듈에서 <code>@nestjs/terminus</code> 패키지의 <code>HttpModule</code>을 불러오겠습니다.</p>\n<div class=\"gatsby-code-title\">src/health/health.module.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TerminusModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/terminus\"</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HttpModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/axios\"</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HealthController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./health.controller\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TerminusModule<span class=\"token punctuation\">,</span> HttpModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>HealthController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HealthModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code>health</code> 컨트롤러로 돌아와서 생성자의 인자로 <code>HttpHealthIndicator</code>을 추가하고, <code>checkStatus()</code> 메서드 내에서 사용하면 됩니다.</p>\n<div class=\"gatsby-code-title\">src/health/health.controller.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  HealthCheck<span class=\"token punctuation\">,</span>\n  HealthCheckService<span class=\"token punctuation\">,</span>\n  MemoryHealthIndicator<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  HttpHealthIndicator<span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/terminus\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HealthController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> health<span class=\"token operator\">:</span> HealthCheckService<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> memory<span class=\"token operator\">:</span> MemoryHealthIndicator<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> http<span class=\"token operator\">:</span> HttpHealthIndicator</span>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"health\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">checkHealth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">HealthCheck</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>health<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">.</span><span class=\"token function\">checkHeap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memory_heap\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">pingCheck</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other-api\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost:3001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 터미널에서 readiness 엔드포인트를 호출해보면 응답 전문에 외부 API 검사 결과까지 추가되고 <code>503 Service Unavailable</code> 상태가 응답될 것입니다.\n<code>3001</code> 포트에 아무 프로세스도 띄어논 것이 없기 때문에 당연한 결과입니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://localhost:3000/status <span class=\"token parameter variable\">-i</span>\n<span class=\"gatsby-highlight-code-line\">HTTP/1.1 <span class=\"token number\">503</span> Service Unavailable</span>X-Powered-By: Express\nContent-Type: application/json<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>utf-8\nContent-Length: <span class=\"token number\">277</span>\nETag: W/<span class=\"token string\">\"115-HMPfu5KBHxhtl8RGFTFr8j39gCA\"</span>\nDate: Mon, <span class=\"token number\">20</span> Feb <span class=\"token number\">2023</span> <span class=\"token number\">22</span>:07:21 GMT\nConnection: keep-alive\nKeep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n\n<span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token string\">\"status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"error\"</span>,</span>  <span class=\"token string\">\"info\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"memory_heap\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"up\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"error\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"other-api\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"down\"</span>,\n      <span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"connect ECONNREFUSED 127.0.0.1:3001\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"details\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"memory_heap\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"up\"</span> <span class=\"token punctuation\">}</span>,\n    <span class=\"token string\">\"other-api\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"down\"</span>,\n      <span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"connect ECONNREFUSED 127.0.0.1:3001\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>실습 프로젝트의 코드는 아래에서 직접 확인하고 실행해볼 수 있습니다.</p>\n<iframe src=\"https://stackblitz.com/edit/nestjs-health?ctl=1&embed=1&file=src/health/health.controller.ts\"\nstyle=\"width:100%; height:800px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 간단한 실습을 통해서 NestJS 앱에 서비스 생존 여부와 가용 여부를 확인하기 위한 엔드포인트를 구현해보았습니다.\n본 포스팅에서는 다루지 않았지만 <code>@nestjs/terminus</code> 패키지에는 디스크(disk) 사용량과 같은 다른 검사도 할 수 있으니 참고 바라겠습니다.</p>\n<p>liveness/readiness 엔드포인트를 잘 활용하셔서 운영하시는 서비스의 전반적인 가용성(availability)을 향상시키고 하드웨어 자원을 탄력적으로 프로비저닝(provisioning)하는데 도움이 되셨으면 좋겠습니다.</p>\n<p>NestJS에 관련된 다른 포스팅은 <a href=\"/?tag=NestJS\">관련 태그</a>를 참고 바라겠습니다.</p>","timeToRead":7,"fields":{"slug":"/nestjs-health/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","health"]},"frontmatter":{"title":"NestJS의 liveness/readiness 엔드포인트","date":"Feb 20, 2023"}},"next":{"fields":{"slug":"/react-checkboxes/"},"frontmatter":{"title":"React에서 체크박스 사용하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}