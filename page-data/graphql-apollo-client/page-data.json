{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-apollo-client/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-apollo-link-schema/"},"frontmatter":{"title":"[GraphQL] SchemaLink 사용법 - 서버없는 클라이언트"}},"node":{"html":"<p>GraphQL API를 호출할 때 사용하는 클라이언트 라이브러리인 Apollo Client에 대해서 알아보겠습니다.</p>\n<blockquote>\n<p>기본적으로 HTTP 기반으로 동작하는 GraphQL API를 호출할 때 반드시 Apollo Client와 같은 전용 클라이언트 라이브러리가 필요한 것은 아닙니다.\nGraphQL API를 별다른 라이브러리 없이 최대한 간단하게 호출하는 방법에 대해서 <a href=\"/graphql-quick-call\">관련 포스트</a>를 참고바라겠습니다.</p>\n</blockquote>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<p>프로젝트에 Apollo Client를 사용할 때 필요한 5개의 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i apollo-client apollo-cache-inmemory apollo-link-http graphql graphql-tag</code></pre></div>\n<ul>\n<li>pacakge.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"apollo-cache-inmemory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.6.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"apollo-client\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.6.4\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"apollo-link-http\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.5.15\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"graphql\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"14.4.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"graphql-tag\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.10.1\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 중, <code>apollo-client</code>와 <code>apollo-cache-inmemory</code>, <code>apollo-link-http</code>는 Apollo에서 제공하는 GraphQL 클라이언트 관련 라이브러리이며,\n<code>graphql</code>은 Facebook에 정의한 GraphQL 스팩을 JavaScript 언어로 구현체이고, <code>graphql-tag</code>는 GraphQL 쿼리를 파싱해주는 템플릿 리터럴 태그입니다.</p>\n<h2 id=\"패키지-임포트\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%9E%84%ED%8F%AC%ED%8A%B8\" aria-label=\"패키지 임포트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 임포트</h2>\n<p>위에서 설치한 패키지로 부터 <code>ApolloClient</code>, <code>InMemoryCache</code>, <code>createHttpLink</code>, <code>gql</code>을 임포트 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-client\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InMemoryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-cache-inmemory\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createHttpLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-http\"</span>\n<span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span></code></pre></div>\n<h2 id=\"클라이언트-생성\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"클라이언트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트 생성</h2>\n<p>Apollo Client를 사용하려면 먼저 <code>ApolloClient</code> 객체를 생성해야합니다.\n<code>ApolloClient</code> 생성자는 옵션 객체를 인자로 받는데, 이 객체의 <code>link</code>와 <code>cache</code>는 필수 옵션입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  link<span class=\"token operator\">:</span> <span class=\"token function\">createHttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> <span class=\"token string\">\"https://countries.trevorblades.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>link</code> 옵션에는 ApolloLink 객체를 넘거야 하고, <code>cache</code> 옵션에는 ApolloCache 객체를 넘거야 합니다.\nApollo에서는 다양한 종류를 ApolloLink와 ApolloCache 제공하고 있기 때문에 가장 기본적으로 사용되는 것을 사용하겠습니다.</p>\n<p><code>createHttpLink</code>는 HTTP를 통해 원격 GraphQL 서버와 연동할 수 있도록 <code>HttpLink</code> 객체를 생성해주는 팩토리 함수입니다.\n이 함수의 인자로 연동할 GraphQL 서버의 <code>uri</code>를 설정해줘야 하는데, 여기서는 대륙/국가 데이터를 제공하는 공개된 GraphQL API를 사용하였습니다.\n특별한 캐시 요구사항이 없다면 대부분의 경우, 가장 기본적인 <code>InMemoryCache</code> 옵션을 사용합니다.</p>\n<h2 id=\"graphql-api-호출\" style=\"position:relative;\"><a href=\"#graphql-api-%ED%98%B8%EC%B6%9C\" aria-label=\"graphql api 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL API 호출</h2>\n<p>위에서 생성한 <code>ApolloClient</code> 객체의 <code>query()</code> 메서드를 사용해서 GraphQL API 호출해보겠습니다.\n<code>query()</code> 메서드는 <code>query</code>와 <code>variables</code> 인자로 받는데, <code>query</code>에는 <code>gql</code> 템플릿 리터럴 태그로 감싼 쿼리문을 할당합니다.\n여기서 사용한 쿼리문은 변수를 포함하고 있지 않기 때문에, <code>variables</code> 인자는 넘길 필요가 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    query<span class=\"token operator\">:</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      query {\n        continents {\n          code\n          name\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loading:\"</span><span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">loading: <span class=\"token boolean\">false</span>\nerror: undefined\ndata: <span class=\"token punctuation\">{</span>continents: Array<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 주의할 점은 <code>query()</code>는 Promise 객체를 리턴한다는 것입니다. 따라서, 비동기 처리를 위해 <code>async/await</code> 키워드를 사용해야합니다.\n이 Promise 객체는 <code>loading</code>, <code>error</code>, <code>data</code> 프로퍼티를 갖는 객체로 resolve 됩니다.</p>\n<blockquote>\n<p><code>async/await</code> 키워드에 대한 자세한 설명은 <a href=\"/js-async-async-await\">관련 포스트</a>을 참고 바랍니다.</p>\n</blockquote>\n<p>이 중, <code>data</code>가 GraphQL 서버로 부터 응답된 데이터를 담고 있습니다.\n<code>loading</code>은 데이터가 수신되는 동안 <code>true</code>였다가 <code>false</code>로 바뀌는데, 보통 UI를 구현할 때 데이터 로딩 중 메세지나 spinner 애니메이션을 보여주기 위해서 사용됩니다.\n마지막으로 <code>error</code>는 예외가 발생했을 경우에, 관련 정보가 담깁니다.</p>\n<h2 id=\"참고-asyncawait-키워드를-사용할-수-없는-경우\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-asyncawait-%ED%82%A4%EC%9B%8C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"참고 asyncawait 키워드를 사용할 수 없는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[참고] <code>async/await</code> 키워드를 사용할 수 없는 경우</h2>\n<p><code>async/await</code> 키워드를 사용할 수 없는 경우에는 리턴된 Promise 객체의 <code>then()</code> 메서드를 사용하면 됩니다.</p>\n<blockquote>\n<p>Promise에 대한 자세한 설명은 <a href=\"/js-async-promise\">관련 포스트</a>를 참고 바랍니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  client\n    <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      query<span class=\"token operator\">:</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        query {\n          continents {\n            code\n            name\n          }\n        }\n      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loading:\"</span><span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<iframe src=\"https://stackblitz.com/edit/graphql-apollo-client?embed=1&file=index.js\"\nstyle=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Apollo Client를 사용하여 GraphQL API를 호출하는 방법을 간단하게 살펴보았습니다.\nApollo Client를 이렇게 직접 사용하기 보다는 React와 같은 UI 라이브러리와 함께 사용해야 하시는 분은 아래 포스트를 참고바랍니다.</p>\n<ul>\n<li>관련 포스트: <a href=\"/graphql-react-apollo-client\">[GraphQL] Apollo Client로 React 앱 개발하기</a></li>\n</ul>","timeToRead":4,"fields":{"slug":"/graphql-apollo-client/","tags":["JavaScript","JS","GraphQL","Apollo","ApolloClient","apollo-link-http"]},"frontmatter":{"title":"[GraphQL] Apollo Client 사용법","date":"Aug 17, 2019"}},"next":{"fields":{"slug":"/react-router-nested/"},"frontmatter":{"title":"React Router로 중첩 라우팅 하기"}}}}}