{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/ts-object-iteration/","result":{"pageContext":{"previous":null,"node":{"html":"<p>자바스크립트만 하시다가 처음으로 타입스크립트를 하시게 되면 매우 흔하게 겪는 문제가 있습니다.\n바로 자바스크립트에서 하던데로 객체를 순회하는 코드를 짜다보면 자꾸 예상치 못한 타입 오류에 부딪치게 되는 것인데요.</p>\n<p>이번 포스팅에서는 객체를 순회하다가 발생할 수 있는 타입 오류를 해결하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"objectkeys\" style=\"position:relative;\"><a href=\"#objectkeys\" aria-label=\"objectkeys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.keys()</h2>\n<p>간단한 실습을 위해서 <a href=\"https://www.typescriptlang.org/play\">TypeScript Playground</a>에서 객체를 순회하는 코드를 같이 작성해볼까요?\n<code>Object.keys()</code> 함수로 객체의 키 배열을 얻고, 이 배열을 <code>forEach()</code> 함수로 순회해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오류 발생 🚨</span></code></pre></div>\n<p>이 코드를 에서 실행해보면 다음과 같은 오류가 발생하는 것을 볼 수 있습니다. (<a href=\"https://www.typescriptlang.org/play?#code/MYewdgzgLgBCBGArGBeGBvGBDAXDAjADQzx4BMxweAzDAL4DcAUAPJICmwUAdANbsBPCAAoEiAJTcAZiABOAUSzAAFsOH8B41AD4YoSCAA27boZABzUUgDaGgLrjxDIA\">코드</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Element implicitly has an <span class=\"token string\">'any'</span> <span class=\"token builtin class-name\">type</span> because expression of <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'string'</span> can<span class=\"token string\">'t be used to index type '</span><span class=\"token punctuation\">{</span> a: number<span class=\"token punctuation\">;</span> b: number<span class=\"token punctuation\">;</span> c: number<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token string\">'.\n  No index signature with a parameter of type '</span>string<span class=\"token string\">' was found on type '</span><span class=\"token punctuation\">{</span> a: number<span class=\"token punctuation\">;</span> b: number<span class=\"token punctuation\">;</span> c: number<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>'.</code></pre></div>\n<p>오류 메세지를 해석해보면 <code>{ a: number; b: number; c: number; }</code> 형태의 객체를 문자열(string) 자료형의 키로 접근할 수 없다는 건데요.\n원인은 <code>Object.keys()</code> 함수의 반환형이 <code>string[]</code>이기 때문에, <code>forEach()</code> 함수에서 <code>key</code>의 자료형이 <code>string</code>으로 추론된 것입니다.</p>\n<p>그러면 어떻게 이러한 타입 오류없이 문자열을 키로 해서 객체를 순회할 수 있을까요?\n여기서 문제는 타입스크립트 컴파일러가 주어진 객체의 현재 모습만 보고 키가 반드시 <code>a</code> 또는 <code>b</code> 또는 <code>c</code> 중에 하나여야 한다고 생각하는 것입니다.</p>\n<p>사실 우리는 이 객체에 언제든지 <code>obj[d] = 4</code>와 같이 다른 키로 값을 추가할 수 있잖아요?\n따라서 <code>obj</code>의 자료형을 <code>Record&#x3C;string, number></code>로 명시하여 타입스크립트 컴파일러에게 객체의 키가 아무 문자열이든 상관없다고 알려주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 아무런 오류가 발생하지 않고, 콘솔에 <code>1</code>, <code>2</code>, <code>3</code>이 차례로 잘 출력될 거에요 👍 (<a href=\"https://www.typescriptlang.org/play?#code/MYewdgzgLgBCBGArAXDASgU1AJwCYB5psBLMAcwBoYwBXAW3g2wD4YBeGAbxgENUBGKvFQAmKsFQBmGAF8A3ACgA8kixQAdAGsMATwgAKBIgCU6gGYhsAUR7AAFvv3adx9q1CQQAGwzqvIMkMkAG1nAF1jYzkgA\">코드</a>)</p>\n<h2 id=\"for-in\" style=\"position:relative;\"><a href=\"#for-in\" aria-label=\"for in permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for-in</h2>\n<p>자바스크립트 개발자들 중에는 <code>Object.keys()</code> 대신에 <code>for-in</code> 구문을 사용해서 객체를 순회하기도 하시죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오류 발생 🚨</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>안타깝게도 객체가 할당되어 있는 변수의 자료형을 명시적으로 지정해주지 않으면 아까와 동일한 타입 오류가 발생하게 됩니다. (<a href=\"https://www.typescriptlang.org/play?#code/MYewdgzgLgBCBGArGBeGBvGBDAXDAjADQzx4BMxweAzDAL4DcAUAGYgBOMAFADYCmsANZ8AnjACWYOEgCUGJjBihIIfgDoeIAOZcEiANrCRAXRnM6QA\">코드</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Element implicitly has an <span class=\"token string\">'any'</span> <span class=\"token builtin class-name\">type</span> because expression of <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'string'</span> can<span class=\"token string\">'t be used to index type '</span><span class=\"token punctuation\">{</span> a: number<span class=\"token punctuation\">;</span> b: number<span class=\"token punctuation\">;</span> c: number<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token string\">'.\n  No index signature with a parameter of type '</span>string<span class=\"token string\">' was found on type '</span><span class=\"token punctuation\">{</span> a: number<span class=\"token punctuation\">;</span> b: number<span class=\"token punctuation\">;</span> c: number<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>'.</code></pre></div>\n<p>원인은 타입스크립트에서 <code>for-in</code> 구문을 사용하면 <code>key</code>는 항상 문자열로 취급이 되기 때문인데요.\n<code>obj</code>의 자료형이 <code>{ a: number; b: number; c: number; }</code>이기 때문에 타입 스크립트 컴파일러는 문자열인 <code>key</code>로 <code>obj</code>를 접근하는 것은 위험하다고 판단하는 것이지요.</p>\n<p>이 타입 오류는 <code>Object.keys()</code>와 마찬가지로 <code>obj</code>의 자료형을 <code>Record&#x3C;string, number></code>라고 명시해주면 사라지게 됩니다. (<a href=\"https://www.typescriptlang.org/play?#code/MYewdgzgLgBCBGArAXDASgU1AJwCYB5psBLMAcwBoYwBXAW3g2wD4YBeGAbxgENUBGKvFQAmKsFQBmGAF8A3ACgAZiGwwAFABsMsANYYAnjFJwkASi4KYMUJBDaAdJpBl1CRAG19BgLpnFMkA\">코드</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또 다른 편법으로는 자바스크립트의 <code>typeof</code> 키워드와 타입스크립트의 <code>keyof</code> 키워드를 사용해서 객체의 키 자료형을 추출 후에 타입스크립트의 <code>as</code> 키워드를 사용하여 <code>key</code>의 자료형을 <code>\"a\" | \"b\" | \"c\"</code>로 강제해주는 것이 있는데요. (<a href=\"https://www.typescriptlang.org/play?#code/MYewdgzgLgBCBGArGBeGBvGBDAXDAjADQzx4BMxweAzDAL4DcAUAGYgBOMAFADYCmsANZ8AnjACWYOEgCUGJjBihIIfgDoeIAOZcEiANrCxWCDCMgWMKCIAOfC9MQBdGczpA\">코드</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">as</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>저는 개인적으로는 이 방법은 잘 추천하지 않습니다.\n이런 식으로 타입을 강제하는 것은 애초에 타입스크립트를 사용하려는 취지와 어긋나는 것 같습니다.</p>\n<h2 id=\"objectvalues\" style=\"position:relative;\"><a href=\"#objectvalues\" aria-label=\"objectvalues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.values()</h2>\n<p>이렇게 객체를 순회할 때 마다 해당 객체의 자료형을 직접 명시해줘야 것이 상당히 번거롭게 느껴질 수도 있는데요.\n사실 <code>Object.values()</code>나 <code>Object.entries()</code>를 사용하면 굳이 키를 통해서 객체의 값에 접근할 필요가 없어지기 때문에 좀 더 편하게 타입 오류의 걱정으로 해방될 수 있습니다 😁 (<a href=\"https://www.typescriptlang.org/play?#code/MYewdgzgLgBCBGArGBeGBvGBDAXDAjADQzx4BMxweAzDAL4DcAUAPJICmwUAdAG5YAbAK7sIACgSIAlNwBmIAE4BRLMAAWYsf2HspqAHwxQkEAPbcBIAOZbBIqVIZA\">코드</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>자바스크립트에서 아무 생각없이 하던 짜던 코드를 타입스크립트로 짤 때는 많은 신경을 써야 하는 경우가 많은데요.\n특히 이렇게 별 것도 아닌 코드를 짜다가 막하기 되면 더욱 의욕을 상실하기 쉬운 것 같습니다.\n본 포스팅이 타입스크립트를 시작하자 마자 좌절하시는 분들에게 작은 도움이 되었으면 좋겠네요 🙏</p>","timeToRead":5,"fields":{"slug":"/ts-object-iteration/","tags":["TypeScript","JavaScript","iteration","for"]},"frontmatter":{"title":"객체를 순회하다가 발생하는 타입스크립트 오류 해결하기","date":"Nov 25, 2022"}},"next":{"fields":{"slug":"/css-svg-background/"},"frontmatter":{"title":"CSS에서 SVG 이미지를 배경으로 사용하기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}