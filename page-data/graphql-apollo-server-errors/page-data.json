{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-apollo-server-errors/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-apollo-server-auth/"},"frontmatter":{"title":"GraphQL 서버의 사용자 인증/인가 (Apollo Server Authentication/Authorization)"}},"node":{"html":"<p>GraphQL 서버에서 클라이언트로 부터 요청받은 쿼리(Query)나 뮤테이션(Mutation)을 실행하다가 오류가 발생할 수 있습니다.\n이런 경우, GraphQL 서버에서 해당 오류에 대한 정보를 응답해줘야 클라이언트에서도 그에 상응하는 화면 처리를 할 수가 있을 것입니다.</p>\n<p>이번 포스팅에서는 Apollo Server로 개발된 GraphQL 서버에서 어떻게 오류 처리를 해야하는지 알아보도록 하겠습니다.</p>\n<h2 id=\"오류-발생-시-응답-결과\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D-%EC%8B%9C-%EC%9D%91%EB%8B%B5-%EA%B2%B0%EA%B3%BC\" aria-label=\"오류 발생 시 응답 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 발생 시 응답 결과</h2>\n<p>GraphQL 서버에서 오류가 발생할 경우, Apollo Server는 HTTP 응답 바디의 <code>errors</code> 배열에 해당 오류에 대한 정보를 담아줍니다.\n여기서 오류 정보를 담기 위해서 객체 대신에 배열이 사용된 이유는 GraphQL API는 Rest API와 달리 한 번의 HTTP 요청에 여러 개의 리소스(resource)에 대한 쿼리가 가능하기 때문입니다.</p>\n<p>예를 들어, GraphQL 서버가 다음과 같은 쿼리를 요청받을 경우, <code>allUsers</code>와 <code>user</code> 쿼리 둘 다 에서 에러가 발생할 수도 있고, 둘 중 하나에서만 에러가 발생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allUsers <span class=\"token punctuation\">{</span>\n    email\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    email\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약에 <code>allUsers</code> 쿼리에서만 오류가 발생하고, <code>user</code> 쿼리는 정상적으로 실행된다면, HTTP 응답의 <code>errors</code> 배열은 <code>allUsers</code> 쿼리에 대한 오류 결과를 담고, <code>data</code> 객체는 <code>user</code> 쿼리에 대한 정상 결과만을 담습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"allUsers\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test@email.com\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"allUsers query failed\"</span>\n      <span class=\"token comment\">// 생략</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약에 두 개의 쿼리 모두 에러가 발생했다면, HTTP 응답의 <code>errors</code> 배열은 2개의 오류를 가질 것이고, <code>data</code> 객체는 2개의 쿼리에 대해 모두 <code>null</code>이 할당됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"allUsers\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"allUsers query failed\"</span>\n      <span class=\"token comment\">// 생략</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user query failed\"</span>\n      <span class=\"token comment\">// 생략</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"오류-객체의-내부-구조\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"오류 객체의 내부 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 객체의 내부 구조</h2>\n<p>다음으로 <code>errors</code> 배열에 들어가는 오류 객체 하나 하나는 어떠한 모습을 갖는지 살펴보겠습니다.\n먼저, <code>message</code> 속성은 오류 메세지를 담고 있으며, <code>locations</code>은 클라이언트가 전송한 쿼리문 내에서 오류가 발생한 줄과 열을 나타냅니다.\n<code>path</code>는 쿼리 경로를 나타내고, <code>extensions</code>는 에러 코드 및 그 외 부가적인 오류 정보를 담는 용도로 쓰입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user query failed\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"locations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INTERNAL_SERVER_ERROR\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"exception\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"stacktrace\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"Error: user query failed\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at user (/sandbox/index.js:31:13)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at field.resolve (/sandbox/node_modules/graphql-extensions/dist/index.js:133:26)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at resolveFieldValueOrError (/sandbox/node_modules/graphql/execution/execute.js:467:18)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at resolveField (/sandbox/node_modules/graphql/execution/execute.js:434:16)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at executeFields (/sandbox/node_modules/graphql/execution/execute.js:275:18)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at executeOperation (/sandbox/node_modules/graphql/execution/execute.js:219:122)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at executeImpl (/sandbox/node_modules/graphql/execution/execute.js:104:14)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at Object.execute (/sandbox/node_modules/graphql/execution/execute.js:64:35)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at /sandbox/node_modules/apollo-server-core/dist/requestPipeline.js:240:46\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"    at Generator.next (&lt;anonymous>)\"</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"일반-오류-발생시키기\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98-%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"일반 오류 발생시키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반 오류 발생시키기</h2>\n<p>지금까지 GraphQL 서버에서 오류 정보가 어떤 모습으로 응답되는지에 대해서 살펴보았으니, 지금부터는 실습 프로젝트를 통해 서버에서 직접 오류를 한 번 발생시키고, 응답 결과를 확인해보겠습니다.</p>\n<blockquote>\n<p>Apollo Server를 이용해서 GraphQL 서버를 개발해보지 않으신 분들은 아래 포스팅를 먼저 보시고 기본 프로젝트 세팅을 하시고 돌아오시기 바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/graphql-apollo-server\">Apollo Server를 이용한 초간단 GraphQL 서버 개발</a></li>\n</ul>\n<p>먼저 스키마를 작성합니다. <code>allUsers</code>와 <code>user</code> 쿼리를 정의하고, 두 쿼리에서 필요로하는 <code>User</code> 타입을 정의합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    allUsers: [User]\n    user(id: Int): User\n  }\n\n  type User {\n    id: Int\n    email: String\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음으로 리졸버를 작성합니다. <code>allUsers</code> 쿼리는 항상 오류를 던지고, <code>user</code> 쿼리는 <code>id</code> 입력 파라미터에 음수가 넘어왔을 때만 오류를 던지게 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">allUsers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allUsers query failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id must be non-negative\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">test</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">@email.com</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 작성한 두 개의 쿼리를 함께 호출해보면,</p>\n<ul>\n<li>요청</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allUsers <span class=\"token punctuation\">{</span>\n    email\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    email\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래와 같이 GraphQL 서버는 개의 2개의 쿼리에서 발생한 오류 정보를 <code>errors</code> 배열에 담아 응답합니다.</p>\n<ul>\n<li>응답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"allUsers\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"allUsers query failed\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"locations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"allUsers\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INTERNAL_SERVER_ERROR\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"exception\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"stacktrace\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"Error: allUsers query failed\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at allUsers (/sandbox/index.js:18:13)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at field.resolve (/sandbox/node_modules/graphql-extensions/dist/index.js:133:26)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at resolveFieldValueOrError (/sandbox/node_modules/graphql/execution/execute.js:467:18)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at resolveField (/sandbox/node_modules/graphql/execution/execute.js:434:16)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at executeFields (/sandbox/node_modules/graphql/execution/execute.js:275:18)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at executeOperation (/sandbox/node_modules/graphql/execution/execute.js:219:122)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at executeImpl (/sandbox/node_modules/graphql/execution/execute.js:104:14)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at Object.execute (/sandbox/node_modules/graphql/execution/execute.js:64:35)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at /sandbox/node_modules/apollo-server-core/dist/requestPipeline.js:240:46\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at Generator.next (&lt;anonymous>)\"</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"id must be non-negative\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"locations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INTERNAL_SERVER_ERROR\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"exception\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"stacktrace\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"Error: id must be non-negative\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at user (/sandbox/index.js:21:25)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at field.resolve (/sandbox/node_modules/graphql-extensions/dist/index.js:133:26)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at resolveFieldValueOrError (/sandbox/node_modules/graphql/execution/execute.js:467:18)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at resolveField (/sandbox/node_modules/graphql/execution/execute.js:434:16)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at executeFields (/sandbox/node_modules/graphql/execution/execute.js:275:18)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at executeOperation (/sandbox/node_modules/graphql/execution/execute.js:219:122)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at executeImpl (/sandbox/node_modules/graphql/execution/execute.js:104:14)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at Object.execute (/sandbox/node_modules/graphql/execution/execute.js:64:35)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at /sandbox/node_modules/apollo-server-core/dist/requestPipeline.js:240:46\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at Generator.next (&lt;anonymous>)\"</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"apolloerror-사용하기\" style=\"position:relative;\"><a href=\"#apolloerror-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"apolloerror 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ApolloError 사용하기</h2>\n<p>위와 같이 일반적인 에러 객체를 던질 경우에 <code>Error</code> 생성자로 넘기는 문자열이 오류 메세지가 되지만, 오류 코드는 항상 <code>INTERNAL_SERVER_ERROR</code>로 고정되게 됩니다.\n오류 코드를 포함해서 좀 더 다양한 정보를 오류 응답의 <code>extensions</code> 속성에 추가하고 싶다면 Apollo Server에서 제공하는 <code>ApolloError</code> 클래스를 사용해야 합니다.</p>\n<p><code>ApolloError</code> 클래스는 인자로 <code>message</code>와 <code>code</code>, <code>properties</code>를 받습니다.\n<code>code</code>에는 오류 코드로 사용할 문자열을 넘기고, <code>properties</code>에는 그 밖에 오류 관련 정보를 객체로 넘기면 됩니다.</p>\n<p>이전 섹션에서 작성한 <code>user</code> 쿼리에 대한 리졸버를 <code>ApolloError</code>를 이용해서 다시 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">allUsers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allUsers query failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id must be non-negative\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INVALID_ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          parameter<span class=\"token operator\">:</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">test</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">@email.com</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그 다음 다시 <code>user</code> 쿼리를 음수 <code>id</code>와 함께 호출을 해보면,</p>\n<ul>\n<li>요청</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    email\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>extensions</code> 속성에 <code>\"code\": \"INVALID_ID\"</code>와 <code>\"parameter\": \"id\"</code>이 세팅되어 응답되었음을 알 수 있습니다.</p>\n<ul>\n<li>응답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"id must be non-negative\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"locations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"INVALID_ID\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"exception\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"parameter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"stacktrace\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"Error: id must be non-negative\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at user (/sandbox/index.js:22:15)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at field.resolve (/sandbox/node_modules/graphql-extensions/dist/index.js:133:26)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at resolveFieldValueOrError (/sandbox/node_modules/graphql/execution/execute.js:467:18)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at resolveField (/sandbox/node_modules/graphql/execution/execute.js:434:16)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at executeFields (/sandbox/node_modules/graphql/execution/execute.js:275:18)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at executeOperation (/sandbox/node_modules/graphql/execution/execute.js:219:122)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at executeImpl (/sandbox/node_modules/graphql/execution/execute.js:104:14)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at Object.execute (/sandbox/node_modules/graphql/execution/execute.js:64:35)\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at /sandbox/node_modules/apollo-server-core/dist/requestPipeline.js:240:46\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"    at Generator.next (&lt;anonymous>)\"</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"에러-로그-남기기\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%A1%9C%EA%B7%B8-%EB%82%A8%EA%B8%B0%EA%B8%B0\" aria-label=\"에러 로그 남기기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 로그 남기기</h2>\n<p>GraphQL서버에서 에러가 발생했을 때 클라이언트에 알려주는 것도 중요하지만, 서버 내부적으로도 에러 로그를 남겨놔야 나중에 디버깅이 용이할 것입니다.\n이를 지원하기 위해서 <code>ApolloServer</code> 생성자는 <code>formatError</code> 속성을 통해, 함수를 하나 받습니다.\n이 함수에는 에러 객체가 인자로 넘어오기 때문에, 에러 객체에 접근하여 에러 내용을 콘솔이나 파일에 출력하는 코드를 작성할 수 있습니다.\n여기서 반드시 인자로 받은 에러 객체를 다시 리턴을 해줘야 클라이언트까지 에러 정보가 전달된다는 점 주의 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">formatError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- GraphQL Error ---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Path:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Code:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Original Error\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>originalError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n  formatError<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 GraphQL 서버에서 오류가 발생하면 다음과 같이 서버 콘솔에 오류 내용이 출력될 것 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">--- GraphQL Error ---\nPath: <span class=\"token punctuation\">[</span> <span class=\"token string\">'user'</span> <span class=\"token punctuation\">]</span>\nMessage: <span class=\"token function\">id</span> must be non-negative\nCode: INVALID_ID\nOriginal Error <span class=\"token punctuation\">{</span> Error: <span class=\"token function\">id</span> must be non-negative\n    at user <span class=\"token punctuation\">(</span>/sandbox/index.js:22:15<span class=\"token punctuation\">)</span>\n    at field.resolve <span class=\"token punctuation\">(</span>/sandbox/node_modules/graphql-extensions/dist/index.js:133:26<span class=\"token punctuation\">)</span>\n    at resolveFieldValueOrError <span class=\"token punctuation\">(</span>/sandbox/node_modules/graphql/execution/execute.js:467:18<span class=\"token punctuation\">)</span>\n    at resolveField <span class=\"token punctuation\">(</span>/sandbox/node_modules/graphql/execution/execute.js:434:16<span class=\"token punctuation\">)</span>\n    at executeFields <span class=\"token punctuation\">(</span>/sandbox/node_modules/graphql/execution/execute.js:275:18<span class=\"token punctuation\">)</span>\n    at executeOperation <span class=\"token punctuation\">(</span>/sandbox/node_modules/graphql/execution/execute.js:219:122<span class=\"token punctuation\">)</span>\n    at executeImpl <span class=\"token punctuation\">(</span>/sandbox/node_modules/graphql/execution/execute.js:104:14<span class=\"token punctuation\">)</span>\n    at Object.execute <span class=\"token punctuation\">(</span>/sandbox/node_modules/graphql/execution/execute.js:64:35<span class=\"token punctuation\">)</span>\n    at /sandbox/node_modules/apollo-server-core/dist/requestPipeline.js:240:46\n    at Generator.next <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> parameter: <span class=\"token string\">'id'</span>, extensions: <span class=\"token punctuation\">{</span> code: <span class=\"token string\">'INVALID_ID'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"스텍트레이스-숨기기\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%85%8D%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%8A%A4-%EC%88%A8%EA%B8%B0%EA%B8%B0\" aria-label=\"스텍트레이스 숨기기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스텍트레이스 숨기기</h2>\n<p>서버에서 에러가 발생했을 때 클리이언트에게 스텍트레이스(stacktrace)까지 제공하는 것은 보안 상의 이유로 일반적으로는 권장되지 않습니다.\n응답 결과에서 에러 스텍트레이스 정보를 제외시키고 싶은 경우에는 <code>ApolloServer</code> 생성자의 <code>debug</code> 속성을 <code>false</code>로 세팅하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n  formatError<span class=\"token punctuation\">,</span>\n  debug<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<iframe src=\"https://codesandbox.io/embed/graphql-apollo-server-errors-rhvqd?fontsize=14\" title=\"graphql-apollo-server-errors\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Apollo Server를 이용하여 GraphQL 서버에서 발생하는 오류를 처리하는 방법에 대해서 살펴보았습니다.</p>\n<h2 id=\"관련-포스팅\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EB%A0%A8-%ED%8F%AC%EC%8A%A4%ED%8C%85\" aria-label=\"관련 포스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 포스팅</h2>\n<ul>\n<li><a href=\"/graphql-apollo-server\">Apollo Server를 이용한 초간단 GraphQL 서버 개발</a></li>\n<li><a href=\"/graphql-apollo-server-testing\">GraphQL 서버 테스트 방법 (Apollo Server Testing)</a></li>\n<li><a href=\"/graphql-apollo-server-auth\">GraphQL 서버의 사용자 인증/인가 (Apollo Server Authentication/Authorization)</a></li>\n</ul>","timeToRead":8,"fields":{"slug":"/graphql-apollo-server-errors/","tags":["자바스크립트","JavaScript","GraphQL","Apollo","ApolloServer","ErrorHandling","오류 처리"]},"frontmatter":{"title":"GraphQL 서버의 오류 처리 (Apollo Server Error handling)","date":"Oct 12, 2019"}},"next":{"fields":{"slug":"/react-hooks-use-memo/"},"frontmatter":{"title":"React Hooks: useMemo 사용법"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}