{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/python-lt-not-supported/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/jest-basic/"},"frontmatter":{"title":"Jest로 기본적인 테스트 작성하기"}},"node":{"html":"<p>파이썬에서 힙(heap)이나 우선순위 큐(PriorityQueue)를 사용하다 보면 다음과 같은 에러를 만날 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TypeError: '&lt;' not supported between instances of 'Node' and 'Node'</code></pre></div>\n<p>이번 포스팅에서는 위 에러를 해결하는 방법에 대해서 알아보록 하겠습니다.</p>\n<h2 id=\"객체-정렬-기준\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EC%A4%80\" aria-label=\"객체 정렬 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 정렬 기준</h2>\n<p>힙과 우선순위 내부적으로 이진 트리를 이용해서 데이터를 정렫된 상태로 유지하고 있습니다.\n그런데 이 정렬이라는 게 가능하려면 원소 간의 대소 비교가 가능해야합니다.\n예를 들어, 숫자나 문자와 같은 기본형 데이터는 대소 비교가 간단합니다.\n<code>1</code>보다 <code>2</code>가 크고, <code>a</code>보다 <code>b</code>가 크다는 것은 일반적으로 알려진 사실이기 때문에 자료구조에게 알려주지 않더라도 됩니다.</p>\n<p>하지만 객체를 힙과 우선순위 큐에 추가할 경우에는 정렬의 기준이 무엇인지, 즉 어떻게 대소 비교를 해야 할지를 명시적으로 알려줘야 합니다.</p>\n<h2 id=\"에러-발생-원인\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-%EC%9B%90%EC%9D%B8\" aria-label=\"에러 발생 원인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 발생 원인</h2>\n<p>먼저 구제적으로 어떤 상황에서 에러가 발생하는지 보기 위해, 다음과 같이 과일을 표현하기 위한 클래스를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price</code></pre></div>\n<p>그리고 다음과 같이 <code>PriorityQueue</code>(우선순위 큐) 안에 과일 객체를 추가해봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> queue <span class=\"token keyword\">import</span> PriorityQueue\n\nfruit1 <span class=\"token operator\">=</span> Fruit<span class=\"token punctuation\">(</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\nfruit2 <span class=\"token operator\">=</span> Fruit<span class=\"token punctuation\">(</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\nque <span class=\"token operator\">=</span> PriorityQueue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nque<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>fruit1<span class=\"token punctuation\">)</span>\nque<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>fruit2<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># TypeError: '&lt;' not supported between instances of 'Fruit' and 'Fruit'</span></code></pre></div>\n<p>그러면 첫 번째 객체를 추가할 때는 문제가 없는데 두 번째 객체를 추가할 때 에러가 발생하는 것을 알 수 있습니다.\n데이터를 정렬된 상태로 보관해야하는 우선순위 큐는 두 번째 객체가 추가될 때 첫 번째 객체와 대소 비교를 시도합니다.\n하지만 우선순위 큐는 이 과일 객체 간에 어떻게 대소 비교를 해야하는지 모르기 때문에 에러가 발생시키고 맙니다.</p>\n<blockquote>\n<p>파이썬의 <code>PriorityQueue</code> 클래스를 통해 우선순위 큐를 사용하는 자세한 방법은 <a href=\"/python-priority-queue\">관련 포스팅</a>를 참고 바랍니다.</p>\n</blockquote>\n<p><code>heapq</code> 모듈을 사용할 때도 마찬가지 동일한 문제가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> heapq <span class=\"token keyword\">import</span> heapify\n\nheap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>fruit1<span class=\"token punctuation\">,</span> fruit2<span class=\"token punctuation\">]</span>\nheapify<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># TypeError: '&lt;' not supported between instances of 'Fruit' and 'Fruit'</span></code></pre></div>\n<blockquote>\n<p>파이썬의 <code>heapq</code> 내장 모듈을 통해 힙을 사용하는 자세한 방법은 <a href=\"/python-heapq\">관련 포스팅</a>를 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"대소비교-메소드-추가\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%86%8C%EB%B9%84%EA%B5%90-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%B6%94%EA%B0%80\" aria-label=\"대소비교 메소드 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대소비교 메소드 추가</h2>\n<p>가장 간단한 해결 방법은 객체 간 대소비교가 가능하도록 <code>__lt__()</code> 메서드를 클래스에 추가해주는 것입니다.\nless than의 약자를 이름으로 갖는 <code>__lt__()</code> 메서드는 객체 자신과 다른 객체를 대소 비교 결과를 리턴해야 합니다.\n힙과 우선순위 큐는 내부적으로 <code>&#x3C;</code> 연산자로 대소비교를 하며, 이 <code>__lt__()</code> 메서드는 그 때 호출이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>price <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>price</code></pre></div>\n<p>위와 같이 <code>Fruit</code> 클래스에 <code>__lt__()</code> 메서드를 추가하면, <code>price</code> 필드를 기준으로 정렬 기준으로 정의하였기 때문에, 가격이 제일 싼 과일부터 비싼 순으로 객체들이 정렬될 것입니다.</p>\n<h2 id=\"wrapper-클래스-활용\" style=\"position:relative;\"><a href=\"#wrapper-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%99%9C%EC%9A%A9\" aria-label=\"wrapper 클래스 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrapper 클래스 활용</h2>\n<p>클래스에 수정을 가하기 어려운 상황이라면 Wrapper 클래스 사용할 수 있습니다.\nWapper 클래스의 생성자는 과일 클래스를 인자로 받고, <code>__lt__()</code> 메서드를 대신 구현해줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Wrapper</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>fruit <span class=\"token operator\">=</span> fruit\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>fruit<span class=\"token punctuation\">.</span>price <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>fruit<span class=\"token punctuation\">.</span>price</code></pre></div>\n<p>힙이나 우선순위 큐에 객체를 추가 전에, 이 Wrapper 클래스 한 번 감싸줘야 합니다.\n그리고 힙이나 우선순위 큐에서 제거한 후에는, 반대로 Wrapper 클래스에서 본래 객체를 꺼낸 후에 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> queue <span class=\"token keyword\">import</span> PriorityQueue\n\nfruit1 <span class=\"token operator\">=</span> Fruit<span class=\"token punctuation\">(</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span>\nfruit2 <span class=\"token operator\">=</span> Fruit<span class=\"token punctuation\">(</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\nque <span class=\"token operator\">=</span> PriorityQueue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nque<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>Wrapper<span class=\"token punctuation\">(</span>fruit1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nque<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>Wrapper<span class=\"token punctuation\">(</span>fruit2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fruit<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Banana</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>que<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fruit<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Apple</span></code></pre></div>","timeToRead":3,"fields":{"slug":"/python-lt-not-supported/","tags":["Python","heapq","heap","힙","queue","큐","PriorityQueue","우선순위 큐"]},"frontmatter":{"title":"[파이썬] TypeError: < not supported","date":"Jan 6, 2019"}},"next":{"fields":{"slug":"/css-em-rem/"},"frontmatter":{"title":"CSS 상대 단위 - em과 rem"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}