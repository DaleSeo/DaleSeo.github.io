{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/prisma/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/css-long-words/"},"frontmatter":{"title":"부모 요소 밖으로 삐져나오는 긴 영단어 처리법"}},"node":{"html":"<p>최근에 ORM으로 Prisma를 선택하는 자바스크립트 또는 타입스크립트 프로젝트가 부쩍 많아진 느낌입니다.\n이번 포스팅에서는 차세대 ORM 프레임워크로 각광받고 있는 Prisma에 대해서 함께 알아볼까요?</p>\n<h2 id=\"prisma란\" style=\"position:relative;\"><a href=\"#prisma%EB%9E%80\" aria-label=\"prisma란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prisma란?</h2>\n<p><a href=\"https://www.prisma.io\">Prisma</a>는 자바스크립트와 타입스크립트 커뮤니티에서 주목받고 있는 차세대 ORM(Object Relational Mapping) 프레임워크입니다.</p>\n<p>데이터베이스와 상호작용하는 응용 애플리케이션을 개발할 때, 프로그래머가 직접 SQL을 작성하지 않아도 되므로, 개발 생산성을 높여주는 측면에서 기존에 사용되던 Sequelize나 TypeORM과 같은 여타의 ORM과 유사한데요.\nPrisma는 여기서 한 발자국 더 나아가 효과적인 데이터 모델링을 위한 간단하지만 강력한 자체적인 스키마 문법을 제공하고 이 스키마를 통해서 DB 마이그레이션과 클라이언트 코드 생성을 완전히 자동으로 생성해줍니다.</p>\n<p>따라서 개발자 입장에서는 데이터베이스에 접근하기 위해서 작성해야하는 코드가 비약적으로 줄어들 뿐만 아니라 스키마 파일 하나만 잘 관리하면 되기 때문에 유지보수에도 훨씬 수월해지는 이점이 있습니다. 뿐만 아니라 CLI나 GUI가 도구가 잘 갖춰져 있어서 개발자 경험도 상당히 뛰어난 것으로 알려져있습니다.</p>\n<h2 id=\"prisma-cli-설치\" style=\"position:relative;\"><a href=\"#prisma-cli-%EC%84%A4%EC%B9%98\" aria-label=\"prisma cli 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prisma CLI 설치</h2>\n<p>Prisma는 개발자가 좀 더 편리하게 Prisma를 설정하고 사용할 수 있도록 강력한 CLI(명령 줄 인터페이스) 도구를 제공하고 있습니다.\n따라서 Prisma CLI를 통해서 Prisma 시작하시는 것을 강력하게 추천드리고 싶습니다.</p>\n<p>그럼 터미널을 열고 npm 패키지 매니저로 <code>prisma</code> 패키지를 개발 의존성으로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> prisma\n\nadded <span class=\"token number\">2</span> packages, and audited <span class=\"token number\">3</span> packages <span class=\"token keyword\">in</span> 8s\n\nfound <span class=\"token number\">0</span> vulnerabilities</code></pre></div>\n<p>이제 <code>npx</code>로 <code>prisma</code>라는 커맨드를 사용할 수 있는데요.\n단순히 터미널에서 <code>prisma</code> 커맨드를 실행해보면 간단한 설명서를 보실 수 있으실 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx prisma\n\n◭  Prisma is a modern DB toolkit to query, migrate and model your database <span class=\"token punctuation\">(</span>https://prisma.io<span class=\"token punctuation\">)</span>\n\nUsage\n\n  $ prisma <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span>\n\nCommands\n\n            init   Set up Prisma <span class=\"token keyword\">for</span> your app\n        generate   Generate artifacts <span class=\"token punctuation\">(</span>e.g. Prisma Client<span class=\"token punctuation\">)</span>\n              db   Manage your database schema and lifecycle\n         migrate   Migrate your database\n          studio   Browse your data with Prisma Studio\n        validate   Validate your Prisma schema\n          <span class=\"token function\">format</span>   Format your Prisma schema\n\nFlags\n\n     --preview-feature   Run Preview Prisma commands\n\nExamples\n\n  Set up a new Prisma project\n  $ prisma init\n\n  Generate artifacts <span class=\"token punctuation\">(</span>e.g. Prisma Client<span class=\"token punctuation\">)</span>\n  $ prisma generate\n\n  Browse your data\n  $ prisma studio\n\n  Create migrations from your Prisma schema, apply them to the database, generate artifacts <span class=\"token punctuation\">(</span>e.g. Prisma Client<span class=\"token punctuation\">)</span>\n  $ prisma migrate dev\n\n  Pull the schema from an existing database, updating the Prisma schema\n  $ prisma db pull\n\n  Push the Prisma schema state to the database\n  $ prisma db push\n\n  Validate your Prisma schema\n  $ prisma validate\n\n  Format your Prisma schema\n  $ prisma <span class=\"token function\">format</span></code></pre></div>\n<blockquote>\n<p>npx나 npm 명령어에 대한 자세한 설명은 <a href=\"/js-npm-cli/\">관련 포스팅</a>를 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"prisma-프로젝트-구성\" style=\"position:relative;\"><a href=\"#prisma-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"prisma 프로젝트 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prisma 프로젝트 구성</h2>\n<p>다음으로 Prisma CLI를 이용해서 새로운 Prisma 프로젝트를 구성해보겠습니다.</p>\n<p>위의 커맨드 설명서에 나와있는 것처럼 <code>prisma init</code> 명령어를 이용하시면 되고요.\n데이터베이스는 최대한 간단한 실습을 위해서 파일 기반인 SQLite를 사용해보려고 합니다.\nPrisma는 기본적으로 PostgreSQL를 데이터베이스로 사용하기 때문에 이를 위해서는 <code>--datasource-provider</code> 옵션을 <code>sqlite</code>로 줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx prisma init --datasource-provider sqlite\n\n✔ Your Prisma schema was created at prisma/schema.prisma\n  You can now <span class=\"token function\">open</span> it <span class=\"token keyword\">in</span> your favorite editor.\n\nNext steps:\n<span class=\"token number\">1</span>. Set the DATABASE_URL <span class=\"token keyword\">in</span> the .env <span class=\"token function\">file</span> to point to your existing database. If your database has no tables yet, <span class=\"token builtin class-name\">read</span> https://pris.ly/d/getting-started\n<span class=\"token number\">2</span>. Run prisma db pull to turn your database schema into a Prisma schema.\n<span class=\"token number\">3</span>. Run prisma generate to generate the Prisma Client. You can <span class=\"token keyword\">then</span> start querying your database.\n\nMore information <span class=\"token keyword\">in</span> our documentation:\nhttps://pris.ly/d/getting-started</code></pre></div>\n<p>이제 프로젝트의 구조를 보면 <code>prisma</code> 디렉토리 안에 <code>schema.prisma</code> 파일이 생성되어 있는 것을 볼 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ tree <span class=\"token parameter variable\">-L</span> <span class=\"token number\">2</span> <span class=\"token parameter variable\">-a</span>\n<span class=\"token builtin class-name\">.</span>\n├── .env\n├── .gitignore\n├── node_modules\n│   ├── .bin\n│   ├── .package-lock.json\n│   ├── @prisma\n│   └── prisma\n├── package-lock.json\n├── package.json\n└── prisma\n    └── schema.prisma</code></pre></div>\n<h2 id=\"prisma-스키마-작성\" style=\"position:relative;\"><a href=\"#prisma-%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%9E%91%EC%84%B1\" aria-label=\"prisma 스키마 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prisma 스키마 작성</h2>\n<p>이제 Prisma의 심장과도 같은 <code>schema.prisma</code>을 작성해야하는데요.\nPrisma는 어떤 데이터베이스를 사용하든 동일한 방식으로 데이터 모델링을 할 수 있도록 자체적인 스키마 문법을 제공하고 있습니다.</p>\n<p>그럼 간단하게 <code>id</code>, <code>email</code>, <code>name</code> 필드(field)로 이뤄진 <code>User</code> 모델(model)에 대한 스키마를 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">prisma/prisma.schema</div>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">model User <span class=\"token punctuation\">{</span>\n  id    Int     <span class=\"token annotation punctuation\">@id</span> @<span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token function\">autoincrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  email String  <span class=\"token annotation punctuation\">@unique</span>\n  name  String<span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>관계형 데이터베이스의 관점에서 Prisma의 모델은 테이블(table)이 되고 Prisma의 필드는 칼럼(column)이랑 대응된다고 생각하시면 이해가 편하실 것 같습니다.</p>\n<h2 id=\"db-마이그레이션-실행\" style=\"position:relative;\"><a href=\"#db-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%EC%8B%A4%ED%96%89\" aria-label=\"db 마이그레이션 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB 마이그레이션 실행</h2>\n<p>이제 작성한 Prisma 스키마를 토대로 SQLite 데이터베이스에 테이블을 생성해야하는데요.\n이를 위해서는 <code>prisma migrate dev</code> 커맨드를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx prisma migrate dev <span class=\"token parameter variable\">--name</span> init\nEnvironment variables loaded from .env\nPrisma schema loaded from prisma/schema.prisma\nDatasource <span class=\"token string\">\"db\"</span><span class=\"token builtin class-name\">:</span> SQLite database <span class=\"token string\">\"dev.db\"</span> at <span class=\"token string\">\"file:./dev.db\"</span>\n\nSQLite database dev.db created at file:./dev.db\n\nApplying migration <span class=\"token variable\"><span class=\"token variable\">`</span>20230226182528_init<span class=\"token variable\">`</span></span>\n\nThe following migration<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> have been created and applied from new schema changes:\n\nmigrations/\n  └─ 20230226182528_init/\n    └─ migration.sql\n\nYour database is now <span class=\"token keyword\">in</span> <span class=\"token function\">sync</span> with your schema.\n\nRunning generate<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">(</span>Use --skip-generate to skip the generators<span class=\"token punctuation\">)</span>\n\nadded <span class=\"token number\">2</span> packages, and audited <span class=\"token number\">5</span> packages <span class=\"token keyword\">in</span> 6s\n\nfound <span class=\"token number\">0</span> vulnerabilities\n\n✔ Generated Prisma Client <span class=\"token punctuation\">(</span><span class=\"token number\">4.10</span>.1 <span class=\"token operator\">|</span> library<span class=\"token punctuation\">)</span> to ./node_modules/@prisma/client <span class=\"token keyword\">in</span> 37ms</code></pre></div>\n<p>이 커맨드는 여러 가지 일을 합니다.</p>\n<p>우선 <code>prisma</code> 디렉토리 안에 SQLite를 위해서 <code>dev.db</code>라는 파일이 생성해줍니다.</p>\n<p>참고로 SQLite가 사용할 파일 경로는 <code>prisma.schema</code> 파일의 <code>datasource</code> 구역에 정의가 되어있으며,</p>\n<div class=\"gatsby-code-title\">prisma/prisma.schema</div>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">datasource db <span class=\"token punctuation\">{</span>\n  provider <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"sqlite\"</span></span>\n  url      <span class=\"token operator\">=</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"DATABASE_URL\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이미 <code>.env</code> 파일에 <code>DATABASE_URL</code> 환경 변수의 값이 명시되어 있습니다.</p>\n<div class=\"gatsby-code-title\">.env</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">DATABASE_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"file:./dev.db\"</span></code></pre></div>\n<p>두 번째로 이 커맨드는 마이그레이션 파일을 <code>prisma/migrations</code> 디렉토리에 생성해주는데요.\n현재 날짜와 시간 그리고 <code>--name</code> 옵션에 넘겼던 문자열이 조합되어 디렉토리명이 만들어지고, 그 안에 <code>migration.sql</code> 파일이 생성됩니다.</p>\n<p>이 파일 안에는 SQLite에서 테이블과 인덱스를 생성하기 위한 필요한 SQL이 담겨져 있습니다.</p>\n<div class=\"gatsby-code-title\">prisma/migrations/20230226182528_init/migration.sql</div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- CreateTable</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token string\">\"User\"</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"id\"</span> <span class=\"token keyword\">INTEGER</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> AUTOINCREMENT<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"email\"</span> <span class=\"token keyword\">TEXT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">TEXT</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- CreateIndex</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> <span class=\"token string\">\"User_email_key\"</span> <span class=\"token keyword\">ON</span> <span class=\"token string\">\"User\"</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 커맨드는 DB 마이그레이션을 실행까지 해주기 때문에 그에 따라 <code>dev.db</code> 파일이 수정이 됩니다.\n하지만 <code>dev.db</code>는 사람이 직접 읽을 수 있는 형태의 데이터가 아니므로 잠시 뒤에 확인할 수 있는지에 대해서 따로 살펴볼께요.</p>\n<p>마지막으로 이 커맨드는 Prisma 클라이언트(client) 코드까지 생성을 해주는데요.\n이 클라이언트 코드를 사용하여 우리는 매우 간편하게 데이터베이스에 접근할 수 있을 것입니다.</p>\n<h2 id=\"프로그램-작성\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%9E%91%EC%84%B1\" aria-label=\"프로그램 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그램 작성</h2>\n<p>이제부터 데이터베이스에 사용자를 저장하고 그 사용자를 조회하는 간단한 타입스크립트 프로그램을 작성해보겠습니다.</p>\n<p>우선 <code>typescript</code>와 <code>@types/node</code>, <code>ts-node</code> 패키지를 개발 의존성으로 설치하겠습니다.\n<code>@types/node</code>는 타입스크립트로 Node.js에서 돌아가는 코드를 작성할 때 필요하며, <code>ts-node</code>는 타입스크립트로 작성된 코드를 Node.js에서 실행하기 위해서 필요합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> typescript @types/node ts-node\n\nadded <span class=\"token number\">19</span> packages, and audited <span class=\"token number\">24</span> packages <span class=\"token keyword\">in</span> 3s\n\nfound <span class=\"token number\">0</span> vulnerabilities</code></pre></div>\n<p>이전 단계에서 자동으로 생성해놓은 Prisma 클리언트 코드는 <code>@prisma/client</code> 패키지로부터 <code>PrismaClient</code>라는 클래스 이름으로 불러올 수 있는데요.\n이 <code>PrismaClient</code> 클래스로 생성한 인스턴스의 <code>user</code> 속성을 통해서 우리는 User 테이블에 데이터를 추가/조회/수정/삭제를 수행할 수 있습니다.</p>\n<p>그럼 <code>index.js</code> 파일을 생성하고 다음과 같은 타입스크립트 코드를 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@prisma/client\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> prisma <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrismaClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">await</span> prisma<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test1.com\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> prisma<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">findMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> prisma<span class=\"token punctuation\">.</span><span class=\"token function\">$disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> prisma<span class=\"token punctuation\">.</span><span class=\"token function\">$disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 프로그램을 터미널에서 <code>ts-node</code> 커맨드를 통해 실행해보면 데이터베이스에 저장된 사용자 레코드가 조회되어 출력되는 것을 볼 수 있을 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx ts-node index.ts\n<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> id: <span class=\"token number\">1</span>, email: <span class=\"token string\">'user@test.com'</span>, name: null <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"prisma-studio-활용\" style=\"position:relative;\"><a href=\"#prisma-studio-%ED%99%9C%EC%9A%A9\" aria-label=\"prisma studio 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prisma Studio 활용</h2>\n<p>Prisma는 데이터베이스에 저장된 데이터를 브라우저 상에서 좀 더 편하게 확인하고 편집할 수 있도록 Prisma Studio라는 GUI(그래픽 사용자 인터페이스) 도구도 제공하고 있는데요.\n터미널에서 <code>prisma studio</code> 커맨드를 실행하면 새로운 브라우저 창이 열리고 각 모델에 대한 테이블이 시각화될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx prisma studio\nEnvironment variables loaded from .env\nPrisma schema loaded from prisma/schema.prisma\nPrisma Studio is up on http://localhost:5555\nimports from <span class=\"token string\">\"@prisma/client/runtime\"</span> are deprecated.\nUse <span class=\"token string\">\"@prisma/client/runtime/library\"</span>,  <span class=\"token string\">\"@prisma/client/runtime/data-proxy\"</span> or  <span class=\"token string\">\"@prisma/client/runtime/binary\"</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 간단한 실습을 통해서 Prisma 프로젝트를 시작하고 필수적인 기능들을 체험해보았습니다.\n기존에 Sequelize나 TypeORM과 같은 ORM 라이브러리를 써보셨다면 특별히 새로울 것이 없겠지만,\n이러한 ORM 개념을 처음 접하시는 분들에게는 조금 어려운 내용이 되었을 것 같기도 합니다.</p>\n<p>본 포스팅에서 다룬 부분은 사실 Prisma가 제공하는 방대한 기능의 빙산의 일각이라고 볼 수 있는데요.\n추후 다른 포스팅을 통해서 Prisma의 여러 가지 기능들을 좀 더 깊게 알아보는 시간을 갖도록 하겠습니다.</p>\n<blockquote>\n<p>Prisma 관련 포스팅은 <a href=\"/?tag=Prisma\">Prisma 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":7,"fields":{"slug":"/prisma/","tags":["Prisma","ORM","framework","JavaScript","TypeScript","CLI","GUI","Node.js"]},"frontmatter":{"title":"Prisma 처음 시작하기","date":"Mar 1, 2023"}},"next":{"fields":{"slug":"/css-z-index/"},"frontmatter":{"title":"CSS의 z-index 속성 이해하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}