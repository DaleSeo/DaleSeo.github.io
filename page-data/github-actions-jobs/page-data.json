{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/github-actions-jobs/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/python-sorted/"},"frontmatter":{"title":"파이썬의 sorted() 내장 함수로 데이터 정렬하기 (feat. 리스트의 sort() 함수)"}},"node":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/VhkpvpMr2No?si=I2Ix6BX1XmQR9YFu\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p><a href=\"/github-actions-basics/\">지난 포스팅</a>에서는 GitHub Actions의 4가지 핵심적인 개념인 워크플로우(workflow), 작업(job), 단계(step), 액션(action)에 대해서 가볍게 살펴보았는데요.</p>\n<p>이번 포스팅에서는 이 중에서도 가장 다양하게 설정할 수 있는 작업(job)에 대해서 좀 더 깊이 알아보도록 하겠습니다.</p>\n<h2 id=\"github-actions에서-작업job이란\" style=\"position:relative;\"><a href=\"#github-actions%EC%97%90%EC%84%9C-%EC%9E%91%EC%97%85job%EC%9D%B4%EB%9E%80\" aria-label=\"github actions에서 작업job이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Actions에서 작업(job)이란?</h2>\n<p>먼저 GitHub Actions에서 작업(job)의 역할과 위치에 대해서 간단히 복습을 하고 넘어가겠습니다.</p>\n<p>작업(job)은 어떤 이벤트가 발생했을 때 독립된 환경에서 실행되야 하는 일련의 일을 나타내는 매우 중요한 개념인데요.\n워크플로우는(workflow)는 작업(job)의 상위 개념이고, 단계(step)는 하위 개념이라고 볼 수 있겠습니다.\n즉, 하나 이상의 작업(job)이 하나의 워크플로우(workflow)를 구성하며, 하나의 작업(job)은 순차적으로 수행되는 여러 개의 단계(step)로 이뤄집니다.</p>\n<p>워크플로우 YAML 파일 기준으로 보면 작업은 <code>jobs</code> 속성 아래에서 하나의 맵핑(mapping)으로 정의되며, 모든 작업에는\n필수적으로 키(key)로 작업 식별자(ID)가 명시되야하고, 값(value)으로 그 밖에 세부 내용(실행 환경, 작업 단계 등)이 도 맵팽의 형태로 명시가 됩니다.\n결과적으로 중첩된 맵핑 구조가 되겠죠?</p>\n<p>아래는 2개의 작업으로 이루어진 전형적인 워크플로우 파일의 모습입니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/jobs.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">job1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          echo 'Hello'\n          echo 'GitHub Actions'</span>\n  <span class=\"token key atrule\">job2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ls <span class=\"token punctuation\">-</span>al</code></pre></div>\n<h2 id=\"작업job의-독립성\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%97%85job%EC%9D%98-%EB%8F%85%EB%A6%BD%EC%84%B1\" aria-label=\"작업job의 독립성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작업(job)의 독립성</h2>\n<p>GitHub Actions에서 작업 설정을 할 때 염두해야하는 가장 중요한 부분은 바로 하나의 워크플로우 상에서 각각의 작업이 완전히 격리된 환경에서 실행된다는 것입니다.\n쉽게 말해 2개의 작업을 실행하면 각 작업은 서로 다른 CI 서버, 즉 별개의 컴퓨터에서 돌아가게 됩니다.</p>\n<p>이러한 작업의 독립성은 GitHub Actions에서 의도한 설계라고 볼 수 있는데요.\n우선 이렇게 작업 간에 완전히 격리되면 병렬 처리가 가능해져 성능 측면에서 유리합니다.\n또한 하나의 워크플로우를 다양한 실행 환경에서 실행할 수 있게 됩니다.\n다시 말해, 일부 작업은 리눅스에서 돌리고, 다른 작업은 윈도우즈에서 돌릴 수 있는 것이지요.</p>\n<p>이러한 작업의 특징을 고려하지 않고 워크플로우를 만들게 되면 의도치 않은 문제를 겪을 수 있는데요.\n예를 들어, 다음과 같이 하나의 파일을 두 개의 작업을 통해서 쓰고 읽는 워크플로우를 생각해보겠습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/jobs.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo 'Hello<span class=\"token punctuation\">,</span> GitHub Actions<span class=\"token tag\">!'</span> <span class=\"token punctuation\">></span> hello.txt\n  <span class=\"token key atrule\">hello2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> cat hello.txt</code></pre></div>\n<p>이 워크플로우를 얼핏 보면 마치 <code>hello.txt</code> 파일에 <code>Hello, GitHub Actions!</code>라는 문자열이 써진 후에, <code>hello.txt</code> 파일의 내용이 콘솔에 출력될 것 같은데요.\n실제로 실행 결과 로그를 보면 두 번째 작업에서 <code>hello.txt</code> 파일을 찾을 수 없다는 에러가 발생하는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-code-title\">hello1</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hello, GitHub Actions!'</span> <span class=\"token operator\">></span> hello.txt\n☑️ Complete Job</code></pre></div>\n<div class=\"gatsby-code-title\">hello2</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token function\">cat</span> hello.txt\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token function\">cat</span> hello.txt</span><span class=\"gatsby-highlight-code-line\">cat: hello.txt: No such <span class=\"token function\">file</span> or directory</span><span class=\"gatsby-highlight-code-line\">Error: Process completed with <span class=\"token builtin class-name\">exit</span> code <span class=\"token number\">1</span>.</span>☑️ Complete Job</code></pre></div>\n<p>왜 이런 문제가 발생하는 걸 까요?</p>\n<p><code>hello1</code> 작업과 <code>hello2</code> 작업은 엄밀히 얘기해서 서로 다른 CI 서버에서 돌아가게 됩니다.\n그러므로 첫 번째 작업이 생성한 <code>hello.txt</code> 파일에 두 번째 작업이 접근하는 것은 기술적으로 불가능한 것이지요.</p>\n<p>따라서 이러한 작업은 두 개의 작업으로 나누지 말고 하나의 작업에서 여러 단계(step)로 처리해야겠습니다.\n그러면 하나의 CI 서버에서 일어나는 작업이 되므로 첫 번째 단계에서 생성한 파일을 자연스럽게 두 번째 단계에서 읽을 수 있을 것입니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/jobs.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo 'Hello<span class=\"token punctuation\">,</span> GitHub Actions<span class=\"token tag\">!'</span> <span class=\"token punctuation\">></span> hello.txt\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> cat hello.txt</code></pre></div>\n<p>이제 의도했던데로 <code>hello.txt</code> 파일의 내용이 콘솔에 출력되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-code-title\">hello</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hello, GitHub Actions!'</span> <span class=\"token operator\">></span> hello.txt\n☑️ Run <span class=\"token function\">cat</span> hello.txt\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token function\">cat</span> hello.txt</span><span class=\"gatsby-highlight-code-line\">Hello, GitHub Actions<span class=\"token operator\">!</span></span>☑️ Complete Job</code></pre></div>\n<h2 id=\"작업의-실행-순서-제어\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%97%85%EC%9D%98-%EC%8B%A4%ED%96%89-%EC%88%9C%EC%84%9C-%EC%A0%9C%EC%96%B4\" aria-label=\"작업의 실행 순서 제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작업의 실행 순서 제어</h2>\n<p>워크플로우에 여러 개의 작업이 정의되어 있을 경우 기본적으로 모든 작업은 동시에 처리가 됩니다.\n위에서 설명드린 작업의 독립성을 상기해보면 여러 작업이 병렬 처리가 되는 게 당연하겠죠?\n하나의 컴퓨터를 재사용하는 게 아니고 여러 대의 컴퓨터를 동시에 돌릴 수 있는데 굳이 기다릴 필요가 없는 것이지요.</p>\n<p>간단한 실습을 위해 작업 식별자(ID)를 콘솔에 출력하기 위한 동일한 작업 3개로 이루어진 워크플로우를 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/jobs.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">job1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.job <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">job2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.job <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">job3</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.job <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 GitHub의 <code>Actions</code> 탭에서 <code>Our Jobs</code> 워크플로우를 선택해보면 다음과 같이 3개의 작업이 병렬로 처리되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-code-title\">Jobs</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">✅ job1\n✅ job2\n✅ job3</code></pre></div>\n<div class=\"gatsby-code-title\">job1</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token builtin class-name\">echo</span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> job1</span><span class=\"gatsby-highlight-code-line\">job1</span>☑️ Complete Job</code></pre></div>\n<div class=\"gatsby-code-title\">job2</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token builtin class-name\">echo</span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> job2</span><span class=\"gatsby-highlight-code-line\">job2</span>☑️ Complete Job</code></pre></div>\n<div class=\"gatsby-code-title\">job3</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token builtin class-name\">echo</span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> job3</span><span class=\"gatsby-highlight-code-line\">job3</span>☑️ Complete Job</code></pre></div>\n<p>여기서 문제는 우리가 언제나 병렬 처리를 원하는 것은 아니라는 건데요.</p>\n<p>대표적인 경우로 CI/CD를 들 수 있죠?\n보통 테스트 작업이나 빌드 작업이 종료된 다음에 배포 작업을 시작할 수 있습니다.</p>\n<p>그러면 작업 간에 실행 순서를 제어하고 싶다면 어떻게 해야할까요?\n이럴 때는 작업의 <code>needs</code> 속성을 사용해서 작업 간에 의존 관계를 설정해줄 수 있습니다.</p>\n<p>예를 들어 <code>job2</code>가 실행되기 전에 <code>job1</code>이 먼저 완료되야 하고, <code>job3</code>가 실행되기 전에 <code>job1</code>과 <code>job2</code>가 먼저 완료되도록 실습 워크플로우를 수정해보겠습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/jobs.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">job1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.job <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">job2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> job1</span>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.job <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">job3</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>job1<span class=\"token punctuation\">,</span> job2<span class=\"token punctuation\">]</span></span>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.job <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 다시 GitHub의 <code>Actions</code> 탭에서 해당 워크플로우를 확인해보면 다음과 같이 작업 간에 의존 관계가 설정되어 순차적으로 실행되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-code-title\">Jobs</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">✅ job1 - ✅ job2 - ✅ job3</code></pre></div>\n<h2 id=\"작업-간-출력값-전달\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%97%85-%EA%B0%84-%EC%B6%9C%EB%A0%A5%EA%B0%92-%EC%A0%84%EB%8B%AC\" aria-label=\"작업 간 출력값 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작업 간 출력값 전달</h2>\n<p>위에서 설명드린 것과 같이 <code>needs</code> 속성을 사용해서 작업 간에 의존 관계를 설정해주면,\n이떤 작업에서 발생한 결과물을 <code>outputs</code> 속성을 통해 이후 작업으로 전달하는 것이 가능합니다.\n즉, 어떤 단계에서 특정 값을 출력 매개변수로 내보내면 그 단계 이후로 실행되는 모든 단계에서 해당 출력 값을 불러올 수 있습니다.</p>\n<blockquote>\n<p>작업(job) 간 출력값을 전달하려면, 우선 단계(step) 간에 츨력값을 전달하는 방법을 알아야합니다.\n이 부분에 대해서는 <a href=\"/github-actions-steps/\">별도 포스팅</a>에서 자세히 설명하고 있으니 참고 바랍니다.</p>\n</blockquote>\n<p>예를 들어, 다음과 같이 두 개의 작업(job)로 이뤄진 워크플로우를 생각해볼까요?</p>\n<p><code>job1</code> 작업의 <code>step1</code> 단계에서는 <code>word=GitHub</code>를 <code>step2</code> 단계에서는 <code>word=Actions</code>를 출력값으로 내보내고 있습니다.\n그리고 <code>outputs</code> 속성을 통해서 각 단계에서 내보낸 출력값을 <code>word1</code>과 <code>word2</code>에 설정해주고 있습니다.</p>\n<p>이렇게 해주면 <code>job1</code>에 의존하는 <code>job2</code> 작업에서는 <code>needs.job1.outputs.word1</code>과 <code>needs.job1.outputs.word2</code>을 불러와서 콘솔에 출력할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/jobs.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">job1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> step1\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"word=GitHub\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> $GITHUB_OUTPUT\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> step2\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"word=Actions\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> $GITHUB_OUTPUT\n    <span class=\"token key atrule\">outputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">word1</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.step1.outputs.word <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token key atrule\">word2</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.step2.outputs.word <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">job2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> job1\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> needs.job1.outputs.word1 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\"\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> needs.job1.outputs.word2 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\"</code></pre></div>\n<div class=\"gatsby-code-title\">job1</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n<span class=\"gatsby-highlight-code-line\">☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"word=GitHub\"</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$GITHUB_OUTPUT</span></span><span class=\"gatsby-highlight-code-line\">☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"word=Actions\"</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$GITHUB_OUTPUT</span></span>☑️ Complete Job</code></pre></div>\n<div class=\"gatsby-code-title\">job2</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n<span class=\"gatsby-highlight-code-line\">☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"GitHub\"</span></span><span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"GitHub\"</span></span><span class=\"gatsby-highlight-code-line\">GitHub</span><span class=\"gatsby-highlight-code-line\">☑️ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Actions\"</span></span><span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Actions\"</span></span><span class=\"gatsby-highlight-code-line\">Actions</span>☑️ Complete Job</code></pre></div>\n<blockquote>\n<p>단순한 값이 아닌 데이터를 파일에 담아서 다른 작업에서 접근하게 하려면 아티팩트(Artifact)를 사용해야합니다.\n이 부분에 대해서는 <a href=\"/github-actions-artifacts/\">별도 포스팅</a>에서 자세히 다루고 있습니다.</p>\n</blockquote>\n<h2 id=\"작업의-선택적-실행\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%97%85%EC%9D%98-%EC%84%A0%ED%83%9D%EC%A0%81-%EC%8B%A4%ED%96%89\" aria-label=\"작업의 선택적 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작업의 선택적 실행</h2>\n<p>기본적으로 워크플로우는 <code>on</code> 속성을 통해서 언제 작업들이 실행되야하는지를 정의하는데요.\n간혹 각각의 작업 수준에서 추가적으로 실행 여부를 결정해야하는 경우가 생깁니다.\n이러한 조건은 해당 작업의 <code>if</code> 속성을 통해 명시해주면 되는데요.</p>\n<p>예를 들어, 다음과 같이 3개의 작업으로 이루어진 워크플로우를 생각해봅시다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/jobs.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">echo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo 'Hello<span class=\"token tag\">!'</span>\n  <span class=\"token key atrule\">echo_if</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.ref_name == 'main'\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo 'Hello<span class=\"token punctuation\">,</span> Main<span class=\"token tag\">!'</span>\n  <span class=\"token key atrule\">skip_ci</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> contains(github.event.head_commit.message<span class=\"token punctuation\">,</span> 'skip ci')\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo 'Hello<span class=\"token punctuation\">,</span> Skip CI<span class=\"token tag\">!'</span></code></pre></div>\n<p>첫 번째 <code>echo</code> 작업은 무조건 실행이 되고, 두 번째 <code>echo_if</code> 작업은 push 이벤트가 <code>main</code> 브랜치에서 발생했을 때만 실행됩니다.\n세 번째 <code>skip_ci</code> 작업은 마지막 커밋(commit) 메시지에 <code>skip ci</code>가 포함되었을 때만 실행됩니다.</p>\n<p>실제로 <code>main</code>이 아닌 다른 브랜치로 코드를 커밋할 때 메시지에 <code>skip ci</code>를 포함시키면 두 번째 작업이 생략되어 실행되지 않는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">✅ <span class=\"token builtin class-name\">echo</span>\n🚫 echo_if\n✅ skip_ci</code></pre></div>\n<h2 id=\"동일-작업을-여러-실행-환경에서-실행\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9D%BC-%EC%9E%91%EC%97%85%EC%9D%84-%EC%97%AC%EB%9F%AC-%EC%8B%A4%ED%96%89-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EC%8B%A4%ED%96%89\" aria-label=\"동일 작업을 여러 실행 환경에서 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동일 작업을 여러 실행 환경에서 실행</h2>\n<p>만약에 동일한 작업을 다양한 실행 환경에서 돌리고 싶을 때는 어떻게 해야할까요?\n보통 범용 라이브러리 프로젝트에서는 특정 운영체제에서만 발생하는 문제를 잡기 위해서 여러 운영체제에서 테스트를 돌리기도 하는데요.</p>\n<p>본 포스팅에서는 간단하게 날짜를 출력하는 작업을 여러 운영체제에서 실행하고 싶다고 가정해보겠습니다.\n가장 쉽게 생각해낼 수 있는 접근 방법은 워크플로우에 운영체제 별로 동일한 작업을 정의하는 것일 겁니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/jobs.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">date1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> date\n  <span class=\"token key atrule\">date2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> windows<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> date\n  <span class=\"token key atrule\">date3</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> macos<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> date</code></pre></div>\n<div class=\"gatsby-code-title\">Jobs</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">✅ date1\n✅ date2\n✅ date3</code></pre></div>\n<div class=\"gatsby-code-title\">date1</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token function\">date</span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token function\">date</span></span><span class=\"gatsby-highlight-code-line\">Sun May <span class=\"token number\">15</span> <span class=\"token number\">16</span>:11:26 UTC <span class=\"token number\">2022</span></span>☑️ Complete Job</code></pre></div>\n<div class=\"gatsby-code-title\">date2</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token function\">date</span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token function\">date</span></span><span class=\"gatsby-highlight-code-line\">Sun May <span class=\"token number\">15</span> <span class=\"token number\">16</span>:11:45 CUT <span class=\"token number\">2022</span></span>☑️ Complete Job</code></pre></div>\n<div class=\"gatsby-code-title\">date3</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">☑️ Set up Job\n☑️ Run <span class=\"token function\">date</span>\n<span class=\"gatsby-highlight-code-line\">▶ Run <span class=\"token function\">date</span></span><span class=\"gatsby-highlight-code-line\">Sun May <span class=\"token number\">15</span> <span class=\"token number\">16</span>:11:27 UTC <span class=\"token number\">2022</span></span>☑️ Complete Job</code></pre></div>\n<p>이 방법은 의도한데로 작동은 하지만 같은 작업 내용을 중복해야되기 때문에 최선은 아닌 것 같죠?</p>\n<p>사실 작업의 <code>strategy</code> 속성의 <code>matrix</code> 옵션을 활용하면 이러한 중복없이 훨씬 간단하게 동일한 목적을 달성할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/jobs.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> ubuntu<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> windows<span class=\"token punctuation\">-</span>latest\n          <span class=\"token punctuation\">-</span> macos<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> date</code></pre></div>\n<div class=\"gatsby-code-title\">Jobs</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">✅ <span class=\"token function\">date</span> <span class=\"token punctuation\">(</span>ubuntu-latest<span class=\"token punctuation\">)</span>\n✅ <span class=\"token function\">date</span> <span class=\"token punctuation\">(</span>windows-latest<span class=\"token punctuation\">)</span>\n✅ <span class=\"token function\">date</span> <span class=\"token punctuation\">(</span>macos-latest<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"작업-요약\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%97%85-%EC%9A%94%EC%95%BD\" aria-label=\"작업 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작업 요약</h2>\n<p>GitHub Actions의 요약 페이지에 어떤 작업에 대한 특정 내용을 마크다운(markdown) 문법으로 추가해줄 수도 있는데요.\n일일이 작업 로그에 들어가는 번거로움 없이 요약 페이지에 중요한 내용을 간단하게 보여주고 싶을 때 유용하게 활용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Our Jobs\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">todos</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          echo \"## 할일 목록\" >> $GITHUB_STEP_SUMMARY\n          echo \"- 자기\" >> $GITHUB_STEP_SUMMARY\n          echo \"- 놀기\" >> $GITHUB_STEP_SUMMARY\n          echo \"- 먹기\" >> $GITHUB_STEP_SUMMARY</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 GitHub Actions에서 작업을 설정할 때 흔히 겪을 수 있는 문제와 효과적인 설정 방법에 대해서 알아보았습니다.\nGitHub Actions를 여러 가지 목적으로 활용하시는데 도움이 되었으면 좋겠습니다.</p>\n<blockquote>\n<p>GitHub Actions 관련 포스팅은 <a href=\"/?tag=GitHubActions\">GitHub Actions 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":9,"fields":{"slug":"/github-actions-jobs/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions의 유용한 작업(job) 설정","date":"May 15, 2022"}},"next":{"fields":{"slug":"/github-actions-setup-node/"},"frontmatter":{"title":"GitHub Actions 자바스크립트 셋업"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}