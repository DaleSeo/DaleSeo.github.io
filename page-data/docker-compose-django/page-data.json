{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/docker-compose-django/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-collections-ordered-dict/"},"frontmatter":{"title":"[파이썬] collections 모듈의 OrderedDict 클래스 사용법"}},"node":{"html":"<p>최근에 많은 Django 프로젝트가 Docker를 이용해서 컨테이너(container) 기반으로 개발되고 테스트, 배포되고 있습니다.\n이번 포스트에서는 Docker Compose이용해서 PostgreSQL를 데이터베이스로 사용하는 Django 애플리케이션을 셋업해보도록 하겠습니다.</p>\n<blockquote>\n<p>Docker를 처음 접하시는 분들은 <a href=\"/docker\">관련 포스트</a>를 참고하시어 먼저 본인 컴퓨터에서 Docker에 설치하시기 바랍니다.</p>\n</blockquote>\n<h2 id=\"requirementstxt\" style=\"position:relative;\"><a href=\"#requirementstxt\" aria-label=\"requirementstxt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>requirements.txt</h2>\n<p>파이썬에서는 보통 프로젝트에서 필요한 패키지를 <code>requirements.txt</code> 파일에 등록해놓고, 패키지 매니저인 pip를 이용해서 패키지를 설치합니다.</p>\n<p>아래와 같이 원하는 위치에 디렉터리를 생성하고, 그 안에 <code>requirements.txt</code> 파일을 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> django-app <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> django-app</code></pre></div>\n<ul>\n<li>requirements.txt</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Django\npsycopg2</code></pre></div>\n<p>Django 패키지 외에도 psycopg2 패키지를 추가로 등록하였는데요.\n이 패키지는 PostgreSQL을 데이터베이스로 사용하기 위해서 필요합니다.</p>\n<h2 id=\"dockerfile\" style=\"position:relative;\"><a href=\"#dockerfile\" aria-label=\"dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile</h2>\n<p>컨테이너화된 소프트웨어 프로젝트에서는 모든 개발 작업이 Docker 컨테이너 안에서 이루어집니다.\n따라서 개발자의 로컬 컴퓨터에서 파이썬을 설치하거나 프로젝트에 필요한 패키지를 설치할 필요가 없습니다.</p>\n<p>대신에 Docker 컨테이너 안에서 해당 애플리케이션이 돌아갈 수 있는 환경을 이미지(image)를 떠 놓어야 합니다.\n이렇게 이미지를 떠 놓으면 개발자들은 번거로운 사전 세팅을 생략하고 바로 해당 이미지를 컨테이너 안에서 실행할 수 있습니다.</p>\n<p><code>Dockerfile</code>은 Docker 이미지가 빌드(build)될 때 거쳐야하는 단계를 정의하고 있는 텍스트 파일인데요.\n다음과 같이 프로젝트 최상위 디렉터리에 <code>Dockerfile</code>을 생성하고, 그 안에 다음과 같이 작성합니다.</p>\n<ul>\n<li>Dockerfile</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> python<span class=\"token punctuation\">:</span>3\n<span class=\"token keyword\">ENV</span> PYTHONUNBUFFERED 1\n<span class=\"token keyword\">WORKDIR</span> /web\n<span class=\"token keyword\">COPY</span> . .\n<span class=\"token keyword\">RUN</span> pip install <span class=\"token punctuation\">-</span>r requirements.txt</code></pre></div>\n<p>위 <code>Dockerfile</code> 파일은 <code>python:3</code> 이미지를 기반으로 다음 일련의 작업들을 순차적으로 명시하고 있습니다.</p>\n<ul>\n<li>이미지 내 <code>PYTHONUNBUFFERED</code> 환경 변수를 <code>1</code>로 설정</li>\n<li>이미지 내 작업 디렉터리를 <code>/web</code>으로 변경</li>\n<li>현재 디렉터리의 모든 파일을 이미지 내의 작업 디렉터리로 복사</li>\n<li><code>pip</code>를 이용해서 이미지 안에 패키지 설치</li>\n</ul>\n<blockquote>\n<p>Dockerfile을 작성하는 구체적인 방법에 대한 자세한 설명은 <a href=\"/dockerfile\">관련 포스트</a>을 참고바랍니다.</p>\n</blockquote>\n<p>이제, 작성한 <code>Dockerfile</code>를 이용해서 이미지를 빌드해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build <span class=\"token builtin class-name\">.</span>\nSending build context to Docker daemon  <span class=\"token number\">5</span>.632kB\nStep <span class=\"token number\">1</span>/5 <span class=\"token builtin class-name\">:</span> FROM python:3\n ---<span class=\"token operator\">></span> 4f7cd4269fa9\nStep <span class=\"token number\">2</span>/5 <span class=\"token builtin class-name\">:</span> ENV PYTHONUNBUFFERED <span class=\"token number\">1</span>\n ---<span class=\"token operator\">></span> Using cache\n ---<span class=\"token operator\">></span> 876aab098e56\nStep <span class=\"token number\">3</span>/5 <span class=\"token builtin class-name\">:</span> WORKDIR /web\n ---<span class=\"token operator\">></span> Using cache\n ---<span class=\"token operator\">></span> c60b0a18dc24\nStep <span class=\"token number\">4</span>/5 <span class=\"token builtin class-name\">:</span> COPY <span class=\"token builtin class-name\">.</span> <span class=\"token builtin class-name\">.</span>\n ---<span class=\"token operator\">></span> 33d85bf96191\nStep <span class=\"token number\">5</span>/5 <span class=\"token builtin class-name\">:</span> RUN pip <span class=\"token function\">install</span> -r requirements.txt\n ---<span class=\"token operator\">></span> Running <span class=\"token keyword\">in</span> f06ba6efc0ba\nCollecting Django\n  Downloading Django-3.0.6-py3-none-any.whl <span class=\"token punctuation\">(</span><span class=\"token number\">7.5</span> MB<span class=\"token punctuation\">)</span>\nCollecting psycopg2\n  Downloading psycopg2-2.8.5.tar.gz <span class=\"token punctuation\">(</span><span class=\"token number\">380</span> kB<span class=\"token punctuation\">)</span>\nCollecting sqlparse<span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0.2</span>.2\n  Downloading sqlparse-0.3.1-py2.py3-none-any.whl <span class=\"token punctuation\">(</span><span class=\"token number\">40</span> kB<span class=\"token punctuation\">)</span>\nCollecting pytz\n  Downloading pytz-2020.1-py2.py3-none-any.whl <span class=\"token punctuation\">(</span><span class=\"token number\">510</span> kB<span class=\"token punctuation\">)</span>\nCollecting asgiref~<span class=\"token operator\">=</span><span class=\"token number\">3.2</span>\n  Downloading asgiref-3.2.7-py2.py3-none-any.whl <span class=\"token punctuation\">(</span><span class=\"token number\">19</span> kB<span class=\"token punctuation\">)</span>\nBuilding wheels <span class=\"token keyword\">for</span> collected packages: psycopg2\n  Building wheel <span class=\"token keyword\">for</span> psycopg2 <span class=\"token punctuation\">(</span>setup.py<span class=\"token punctuation\">)</span>: started\n  Building wheel <span class=\"token keyword\">for</span> psycopg2 <span class=\"token punctuation\">(</span>setup.py<span class=\"token punctuation\">)</span>: finished with status <span class=\"token string\">'done'</span>\n  Created wheel <span class=\"token keyword\">for</span> psycopg2: <span class=\"token assign-left variable\">filename</span><span class=\"token operator\">=</span>psycopg2-2.8.5-cp38-cp38-linux_x86_64.whl <span class=\"token assign-left variable\">size</span><span class=\"token operator\">=</span><span class=\"token number\">500463</span> <span class=\"token assign-left variable\">sha256</span><span class=\"token operator\">=</span>bc9f1dc1d5b8f986a31f72daf1ff1a2605e733a561e064e05d84e7e954f550c6\n  Stored <span class=\"token keyword\">in</span> directory: /root/.cache/pip/wheels/35/64/21/9c9e2c1bb9cd6bca3c1b97b955615e37fd309f8e8b0b9fdf1a\nSuccessfully built psycopg2\nInstalling collected packages: sqlparse, pytz, asgiref, Django, psycopg2\nSuccessfully installed Django-3.0.6 asgiref-3.2.7 psycopg2-2.8.5 pytz-2020.1 sqlparse-0.3.1\nRemoving intermediate container f06ba6efc0ba\n ---<span class=\"token operator\">></span> c614bec34623\nSuccessfully built c614bec34623</code></pre></div>\n<p>마지막에 <code>Successfully built &#x3C;이미지ID></code>가 출력되었다면 제대로 이미지가 빌드가 된 것입니다.</p>\n<p>위에서 얻은 이미지ID를 이용하여 이미지를 컨테이너로 실행한 후, Django 설치가 잘 되었는지 파이썬 인터프리터에서 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it c614bec34623\nPython <span class=\"token number\">3.8</span>.2 <span class=\"token punctuation\">(</span>default, Apr <span class=\"token number\">23</span> <span class=\"token number\">2020</span>, <span class=\"token number\">14</span>:22:33<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>GCC <span class=\"token number\">8.3</span>.0<span class=\"token punctuation\">]</span> on linux\nType <span class=\"token string\">\"help\"</span>, <span class=\"token string\">\"copyright\"</span>, <span class=\"token string\">\"credits\"</span> or <span class=\"token string\">\"license\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> django\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span>django.get_version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n<span class=\"token number\">3.0</span>.6</code></pre></div>\n<h2 id=\"docker-composeyml\" style=\"position:relative;\"><a href=\"#docker-composeyml\" aria-label=\"docker composeyml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker-compose.yml</h2>\n<p>Docker Compose는 여러 개의 서비스를 이뤄진 애플리케이션을 하나의 YAML 파일에 정의할 수 있도록 해줍니다.\n우리가 셋업하려는 Django 프로젝트는 Django 애플리케이션과 PostgreSQL 데이터베이스로 이루어집니다.</p>\n<p>다음과 같이 프로젝트 최상위 디렉터리에 <code>docker-compose.yml</code>을 생성하고, <code>web</code> 서비스로 Django 애플리케이션을 <code>db</code> 서비스로 PostgreSQL 데이터베이스를 정의해줍니다.</p>\n<ul>\n<li>docker-compose.yml</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> python manage.py runserver 0<span class=\"token punctuation\">:</span><span class=\"token number\">8000</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8000:8000\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> .<span class=\"token punctuation\">:</span>/web\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> db\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> POSTGRES_USER=postgres\n      <span class=\"token punctuation\">-</span> POSTGRES_PASSWORD=postgres</code></pre></div>\n<p><code>web</code> 서비스를 보시면 현재 디렉터리에 있는 <code>Dockerfile</code>을 이용해서 이미지를 빌드하고, Django 애플리케이션을 구동하기 위해서 <code>python manage.py runserver 0:8000</code> 커맨드를 실행하게 되어 있습니다.\n또한, 호스트의 8000 포트와 컨테이너의 8000 포트를 바인드(bind)시키고, 현재 디렉터리를 컨테이너의 <code>/web</code> 디렉터리로 마운트(mount)하고 있습니다.\n마지막으로 <code>web</code> 서비스가 돌아가기 전에 <code>db</code> 서비스가 반드시 먼저 돌아갈 수 있도록 <code>depends-on</code> 설정이 되어 있습니다.</p>\n<p><code>db</code> 서비스는 <code>postgres</code> 외부 이미지를 사용하도록 되어 있으며, <code>POSTGRES_USER</code>와 <code>POSTGRES_PASSWORD</code> 환경변수를 설정해주고 있습니다.</p>\n<blockquote>\n<p>Docker Compose 설정 방법에 대한 좀 더 자세한 설명은 <a href=\"/docker-compose-file\">관련 포스트</a>를 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"django-프로젝트-생성\" style=\"position:relative;\"><a href=\"#django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"django 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 프로젝트 생성</h2>\n<p>지금부터 본격적으로 컨테이너 상에서 Django 프로젝트 셋업해보도록 하겠습니다.</p>\n<p>터미널에서 다음 <code>django-admin</code> 명령어를 실행하여 <code>our_project</code>라는 프로젝트를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose run web django-admin startproject our_project <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>이 명령어를 실행하면 다음과 같이 <code>manage.py</code>가 생성되고, <code>our_project</code> 디렉터리에 Django 관련 파일들이 생성될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ tree\n<span class=\"token builtin class-name\">.</span>\n├── Dockerfile\n├── docker-compose.yml\n├── manage.py\n├── our_project\n│   ├── __init__.py\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── requirements.txt</code></pre></div>\n<h2 id=\"django-프로젝트-실행\" style=\"position:relative;\"><a href=\"#django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-label=\"django 프로젝트 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 프로젝트 실행</h2>\n<p>터미널에서 <code>docker-compose up</code> 명령어를 실행해보면 다음과 같이 PostgreSQL 데이터베이스와 Django 애플리케이션이 모두 컨테이너 안에서 구동되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose up\nStarting django-app_db_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRecreating django-app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nAttaching to django-app_db_1, django-app_web_1\ndb_1   <span class=\"token operator\">|</span>\ndb_1   <span class=\"token operator\">|</span> PostgreSQL Database directory appears to contain a database<span class=\"token punctuation\">;</span> Skipping initialization\ndb_1   <span class=\"token operator\">|</span>\ndb_1   <span class=\"token operator\">|</span> <span class=\"token number\">2020</span>-05-14 02:15:02.745 UTC <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> LOG:  starting PostgreSQL <span class=\"token number\">12.2</span> <span class=\"token punctuation\">(</span>Debian <span class=\"token number\">12.2</span>-2.pgdg100+1<span class=\"token punctuation\">)</span> on x86_64-pc-linux-gnu, compiled by gcc <span class=\"token punctuation\">(</span>Debian <span class=\"token number\">8.3</span>.0-6<span class=\"token punctuation\">)</span> <span class=\"token number\">8.3</span>.0, <span class=\"token number\">64</span>-bit\ndb_1   <span class=\"token operator\">|</span> <span class=\"token number\">2020</span>-05-14 02:15:02.745 UTC <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> LOG:  listening on IPv4 address <span class=\"token string\">\"0.0.0.0\"</span>, port <span class=\"token number\">5432</span>\ndb_1   <span class=\"token operator\">|</span> <span class=\"token number\">2020</span>-05-14 02:15:02.745 UTC <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> LOG:  listening on IPv6 address <span class=\"token string\">\"::\"</span>, port <span class=\"token number\">5432</span>\ndb_1   <span class=\"token operator\">|</span> <span class=\"token number\">2020</span>-05-14 02:15:02.748 UTC <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> LOG:  listening on Unix socket <span class=\"token string\">\"/var/run/postgresql/.s.PGSQL.5432\"</span>\ndb_1   <span class=\"token operator\">|</span> <span class=\"token number\">2020</span>-05-14 02:15:02.764 UTC <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> LOG:  database system was shut down at <span class=\"token number\">2020</span>-05-14 02:12:56 UTC\ndb_1   <span class=\"token operator\">|</span> <span class=\"token number\">2020</span>-05-14 02:15:02.769 UTC <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> LOG:  database system is ready to accept connections\nweb_1  <span class=\"token operator\">|</span> Watching <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes with StatReloader\nweb_1  <span class=\"token operator\">|</span> Performing system checks<span class=\"token punctuation\">..</span>.\nweb_1  <span class=\"token operator\">|</span>\nweb_1  <span class=\"token operator\">|</span> System check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span>.\nweb_1  <span class=\"token operator\">|</span>\nweb_1  <span class=\"token operator\">|</span> You have <span class=\"token number\">17</span> unapplied migration<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>. Your project may not work properly <span class=\"token keyword\">until</span> you apply the migrations <span class=\"token keyword\">for</span> app<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: admin, auth, contenttypes, sessions.\nweb_1  <span class=\"token operator\">|</span> Run <span class=\"token string\">'python manage.py migrate'</span> to apply them.\nweb_1  <span class=\"token operator\">|</span> May <span class=\"token number\">14</span>, <span class=\"token number\">2020</span> - 02:15:03\nweb_1  <span class=\"token operator\">|</span> Django version <span class=\"token number\">3.0</span>.6, using settings <span class=\"token string\">'our_project.settings'</span>\nweb_1  <span class=\"token operator\">|</span> Starting development server at http://0:8000/\nweb_1  <span class=\"token operator\">|</span> Quit the server with CONTROL-C.</code></pre></div>\n<p>이제 브라우저에서 <code>http://localhost:8000</code>를 열면, 로켓 모양이 올라가는 Django 초기 화면을 보실 수 있으실 겁니다. 🚀</p>\n<h2 id=\"django-프로젝트-설정\" style=\"position:relative;\"><a href=\"#django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%A4%EC%A0%95\" aria-label=\"django 프로젝트 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 프로젝트 설정</h2>\n<p>Django 애플리케이션과 PostgreSQL 데이터베이스가 모두 컨테이너로 실행은 되고 있지만 Django 애플리케이션은 디플트로 SQLite 데이터베이스를 사용하기 때문에 PostgreSQL 데이터베이스 사용하도록 설정이 필요합니다.</p>\n<p><code>our_project/settings.py</code>을 열고 <code>DATABASES</code> 부분을 아래와 같이 수정해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"ENGINE\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"django.db.backends.postgresql\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"USER\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"PASSWORD\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"HOST\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"db\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"PORT\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5432</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이번에는 터미널에서 <code>docker-compose up</code> 명령어를 <code>-d</code> 옵션으로 실행하여 백그라운드에서 두 개의 서비스가 돌아가도록 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose up -d\nStarting django-app_db_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStarting django-app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span></code></pre></div>\n<h2 id=\"db-마이그레이션\" style=\"position:relative;\"><a href=\"#db-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"db 마이그레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB 마이그레이션</h2>\n<p>Django 애플리케이션을 정상적으로 사용하려면 먼저 DB 마이그레이션(migration)을 실행하여 관련 테이블과 생성하고 필요한 데이터를 적재해줘야 합니다.</p>\n<p>다음과 같이 <code>python manage.py migrate</code> 명령어를 현재 백그라운에서 돌아가고 있는 <code>web</code> 서비스를 대상으로 날려줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose <span class=\"token builtin class-name\">exec</span> web python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0001_initial<span class=\"token punctuation\">..</span>. OK\n  Applying admin.0001_initial<span class=\"token punctuation\">..</span>. OK\n  Applying admin.0002_logentry_remove_auto_add<span class=\"token punctuation\">..</span>. OK\n  Applying admin.0003_logentry_add_action_flag_choices<span class=\"token punctuation\">..</span>. OK\n  Applying contenttypes.0002_remove_content_type_name<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0002_alter_permission_name_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0003_alter_user_email_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0004_alter_user_username_opts<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0005_alter_user_last_login_null<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0006_require_contenttypes_0002<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0007_alter_validators_add_error_messages<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0008_alter_user_username_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0009_alter_user_last_name_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0010_alter_group_name_max_length<span class=\"token punctuation\">..</span>. OK\n  Applying auth.0011_update_proxy_permissions<span class=\"token punctuation\">..</span>. OK\n  Applying sessions.0001_initial<span class=\"token punctuation\">..</span>. OK</code></pre></div>\n<h2 id=\"db-테이블-확인\" style=\"position:relative;\"><a href=\"#db-%ED%85%8C%EC%9D%B4%EB%B8%94-%ED%99%95%EC%9D%B8\" aria-label=\"db 테이블 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB 테이블 확인</h2>\n<p>DB 마이그레이션이 잘 되었는지 확인하려면, PostgreSQL 데이터베이스에 접속하여 테이블을 확인해봐야 합니다.\n<code>db</code> 서비스를 대상으로 <code>psql</code> 커맨드를 실행한 후 <code>\\z</code>를 입력해보면 다음과 같이 생성된 테이블들이 확인될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose <span class=\"token builtin class-name\">exec</span> db psql postgres postgres\npsql <span class=\"token punctuation\">(</span><span class=\"token number\">12.2</span> <span class=\"token punctuation\">(</span>Debian <span class=\"token number\">12.2</span>-2.pgdg100+1<span class=\"token punctuation\">))</span>\nType <span class=\"token string\">\"help\"</span> <span class=\"token keyword\">for</span> help.\n\n<span class=\"token assign-left variable\">postgres</span><span class=\"token operator\">=</span><span class=\"token comment\"># \\z</span>\n                                            Access privileges\n Schema <span class=\"token operator\">|</span>               Name                <span class=\"token operator\">|</span>   Type   <span class=\"token operator\">|</span> Access privileges <span class=\"token operator\">|</span> Column privileges <span class=\"token operator\">|</span> Policies\n--------+-----------------------------------+----------+-------------------+-------------------+----------\n public <span class=\"token operator\">|</span> auth_group                        <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_group_id_seq                 <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_group_permissions            <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_group_permissions_id_seq     <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_permission                   <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_permission_id_seq            <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_user                         <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_user_groups                  <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_user_groups_id_seq           <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_user_id_seq                  <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_user_user_permissions        <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> auth_user_user_permissions_id_seq <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> django_admin_log                  <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> django_admin_log_id_seq           <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> django_content_type               <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> django_content_type_id_seq        <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> django_migrations                 <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> django_migrations_id_seq          <span class=\"token operator\">|</span> sequence <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n public <span class=\"token operator\">|</span> django_session                    <span class=\"token operator\">|</span> table    <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">19</span> rows<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"django-프로젝트-종료\" style=\"position:relative;\"><a href=\"#django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A2%85%EB%A3%8C\" aria-label=\"django 프로젝트 종료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django 프로젝트 종료</h2>\n<p>마지막으로 Docker Compose를 이용해서 모든 서비스를 한 번에 종료하고 컨테이너와 네트워크를 삭제할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker-compose down\nStopping django-app_web_1 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nStopping django-app_db_1  <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving django-app_web_1                <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving django-app_db_1                 <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span>\nRemoving network django-app_default</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Docker Compose를 이용하여 Django 애플리케이션과 PostgreSQL 데이터베이스로 구성된 프로젝트를 셋업하는 방법을 매우 대략적으로 살펴보았습니다.\n본 포스트의 내용이 따라오기가 조금 버거우셨다면 제 블로그의 다른 포스트에서 Docker나 Django에 대한 기본 지식을 다루고 있으니 참고바랍니다.</p>\n<p>이렇게 개발 환경을 컨테이너화(containerization)해놓고 해당 프로젝트를 Github와 같은 코드 저장소에 올려두면 개발자들은 Docker만 설치하면 바로 해당 애플리케이션을 띄우고 개발을 시작할 수 있어서 매우 편리합니다.\n왜냐하면, 파이썬 런타임 설치부터 Django 패키지 설치, 데이터베이스 셋업 등이 모두 container 안에서 완료된 상태이기 때문입니다.\n또한 모든 개발자가 동일한 개발 환경에서 작업하는 것을 보장받을 수 있어서 개개인 간의 미묘한 세팅 차이로 인한 황당한 상황도 피할 수 있습니다.</p>","timeToRead":9,"fields":{"slug":"/docker-compose-django/","tags":["Docker","도커","Compose","container","컨테이너","image","이미지","mount","마운트","Dockerfile","Python","파이썬","Django","장고","PostgreSQL"]},"frontmatter":{"title":"Docker Compose로 Django 프로젝트 셋업","date":"May 9, 2020"}},"next":{"fields":{"slug":"/docker-volumes-bind-mounts/"},"frontmatter":{"title":"Docker 컨테이너에 데이터 저장 (볼륨/바인드 마운트)"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}