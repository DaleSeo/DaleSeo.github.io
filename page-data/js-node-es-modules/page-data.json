{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-node-es-modules/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/docker-compose-file/"},"frontmatter":{"title":"Docker Compose 설정 방법"}},"node":{"html":"<p>예전에는 Node.js에서는 <code>import</code>, <code>export</code>와 같은 ES Modules(ESM) 문법을 사용하려면 Babel과 같은 트랜스파일러(transpiler)러를 사용해서 코드 변환을 해줬어야 했는데요.\nNode.js 버전 13.2부터는 CommonJS 뿐만 아니라 ES Modules에 대한 정식 지원이 시작됨에 따라 굳이 트랜스파일링을 하지 않더라도 Node.js에서 ES 모듈을 사용할 수 있게 되었습니다. 🎉</p>\n<h2 id=\"nodejs의-es-모듈-지원\" style=\"position:relative;\"><a href=\"#nodejs%EC%9D%98-es-%EB%AA%A8%EB%93%88-%EC%A7%80%EC%9B%90\" aria-label=\"nodejs의 es 모듈 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js의 ES 모듈 지원</h2>\n<p>ES 모듈(ES Modules)은 ES6/ES2015의 일부로 도입되어 현재 자바스크립트의 표준 모듈 시스템으로 서서히 자리 잡아가고 있습니다.\nNode.js의 ES 모듈 지원은 백엔드(backend) 개발만 하시던 분들에게는 대수롭지 않을 수도 있지만, 자바스크립트 풀스택(fullstack) 개발자들에게는 상당히 의미있는 변화일 것입니다.\n왜냐하면 프론트엔드(frontend) 쪽에서는 빌드 도구의 발달로 이미 상당히 예전부터 ES 모듈 시스템이 주류로 사용되었기 때문입니다.\n따라서 개발하시는 자바스크립트 애플리케이션이 브라우저든지 Node.js든지 어느 플랫폼에서 돌아가든지 상관없이 하나의 모듈 시스템을 사용할 수 있는 길이 열린 것입니다.</p>\n<blockquote>\n<p>CommonJS와 ES 모듈에 대한 좀 더 자세한 설명은 아래 관련 포스팅를 참고바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/js-module-require\">자바스크립트 CommonJS 모듈 내보내기/불러오기 (require)</a></li>\n<li><a href=\"/js-module-import\">자바스크립트 ES6 모듈 내보내기/불러오기 (import)</a></li>\n<li><a href=\"/js-babel-node\">Node.js에서 Babel로 ES6 코드 실행하기</a></li>\n</ul>\n<h2 id=\"기존-commonjs-사용\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-commonjs-%EC%82%AC%EC%9A%A9\" aria-label=\"기존 commonjs 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 CommonJS 사용</h2>\n<p>먼저 기존의 CommonJS 방식을 이용해서 간단한 예제 모듈을 작성해보겠습니다.\n아래 <code>time</code> 모듈은 <code>moment</code> 패키지를 불러와서 현재 시간을 문자열로 리턴하는 <code>now()</code> 함수를 내보내고 있습니다.</p>\n<ul>\n<li>time.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> moment <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">now</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>같은 방식으로 테스트 모듈도 작성해보겠습니다.\n아래 <code>time.test</code> 모듈은 <code>time</code> 모듈을 불러와서 <code>now</code> 함수의 호출 결과를 출력하고 있습니다.</p>\n<ul>\n<li>time.test.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> now <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./time\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>test.test.js</code> 파일을 실행해보면 다음과 같이 예상대로 작동을 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> src/time.test.js\nNow: <span class=\"token number\">2020</span>-05-23T17:43:28-04:00</code></pre></div>\n<h2 id=\"방법-1-파일-단위로-es-모듈-적용\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EB%B2%95-1-%ED%8C%8C%EC%9D%BC-%EB%8B%A8%EC%9C%84%EB%A1%9C-es-%EB%AA%A8%EB%93%88-%EC%A0%81%EC%9A%A9\" aria-label=\"방법 1 파일 단위로 es 모듈 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방법 1: 파일 단위로 ES 모듈 적용</h2>\n<p>Node.js에서 ES 모듈을 사용하는 첫번째 방법은 파일의 확장자를 <code>js</code> 대신에 <code>mjs</code>를 사용하는 것입니다.\n프로젝트에서 부분적으로 ES 모듈을 사용할 때 가장 쉽고 빠르게 적용할 수 있는 방법입니다.</p>\n<p>위에서 작성한 <code>time.js</code>와 <code>time.test.js</code> 파일의 확장자를 <code>mjs</code> 바꾸고, ES 모듈의 <code>import</code>와 <code>export</code> 키워드를 사용하도록 코드를 수정합니다.</p>\n<ul>\n<li>time.mjs</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>time.test.mjs</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> now <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./time\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>time.test.mjs</code> 파일을 실행을 해보면 Node.js가 <code>time</code> 모듈을 찾지 못하는 현상을 보게 되실 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> src/time.test.mjs\ninternal/modules/run_main.js:54\n    internalBinding<span class=\"token punctuation\">(</span><span class=\"token string\">'errors'</span><span class=\"token punctuation\">)</span>.triggerUncaughtException<span class=\"token punctuation\">(</span>\n                              ^\n\nError <span class=\"token punctuation\">[</span>ERR_MODULE_NOT_FOUND<span class=\"token punctuation\">]</span>: Cannot <span class=\"token function\">find</span> module <span class=\"token string\">'/Users/dale/temp/es-modules/src/time'</span> imported from /Users/dale/temp/es-modules/src/time.test.mjs\n    at finalizeResolution <span class=\"token punctuation\">(</span>internal/modules/esm/resolve.js:284:11<span class=\"token punctuation\">)</span>\n    at moduleResolve <span class=\"token punctuation\">(</span>internal/modules/esm/resolve.js:662:10<span class=\"token punctuation\">)</span>\n    at Loader.defaultResolve <span class=\"token punctuation\">[</span>as _resolve<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>internal/modules/esm/resolve.js:752:11<span class=\"token punctuation\">)</span>\n    at Loader.resolve <span class=\"token punctuation\">(</span>internal/modules/esm/loader.js:97:40<span class=\"token punctuation\">)</span>\n    at Loader.getModuleJob <span class=\"token punctuation\">(</span>internal/modules/esm/loader.js:242:28<span class=\"token punctuation\">)</span>\n    at ModuleWrap.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>internal/modules/esm/module_job.js:50:40<span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">link</span> <span class=\"token punctuation\">(</span>internal/modules/esm/module_job.js:49:36<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  code: <span class=\"token string\">'ERR_MODULE_NOT_FOUND'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 부분이 Node.js에서 ES 모듈울 처음 사용할 때 가장 많이 실수를 하게되는 부분인데요.\nNode.js에서 <code>import</code> 키워드로 프로젝트 내부 모듈을 불러올 때는 반드시 확장자까지 포함해서 경로를 명시를 해줘야 합니다.\n이는 브라우저에서 <code>import</code>가 작동하는 방식과 맞추기 위해서 의도적으로 설계된 부분이라고 합니다.</p>\n<p>확장자를 포함해서 경로를 명시해주면 정상적으로 작동합니다.</p>\n<ul>\n<li>time.test.mjs</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> now <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./time.mjs\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> src/time.test.mjs\nNow: <span class=\"token number\">2020</span>-05-23T18:10:20-04:00</code></pre></div>\n<h2 id=\"방법-2-프로젝트-단위로-es-모듈-적용\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EB%B2%95-2-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%8B%A8%EC%9C%84%EB%A1%9C-es-%EB%AA%A8%EB%93%88-%EC%A0%81%EC%9A%A9\" aria-label=\"방법 2 프로젝트 단위로 es 모듈 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방법 2: 프로젝트 단위로 ES 모듈 적용</h2>\n<p>Node.js에서 ES 모듈을 사용하는 두번째 방법은 <code>package.json</code> 파일 설정을 통해 전체 파일에 적용하는 것입니다.\n모든 파일의 확장자를 일일이 바꾸지 않고, 프로젝트 전체에 ES 모듈을 적용하고 싶을 때 적합한 방법입니다.</p>\n<p>먼저 프로젝트의 <code>package.json</code> 파일을 열고, 최상위에 <code>type</code> 항목을 <code>module</code>로 설정합니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 생략</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 파일의 확장자를 <code>mjs</code>에서 <code>js</code>로 바꾸고, <code>time.test</code> 모듈 안의 확장자도 마찬가지로 업데이트 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> now <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./time.js\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now:\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다시 <code>time.test.js</code> 파일을 실행을 해보면 위와 동일하게 실행이 되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ src/time.test.js\nNow: <span class=\"token number\">2020</span>-05-23T18:21:20-04:00</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이번 포스팅에서는 Node.js 프로젝트에서 모듈 시스템으로 ES Modules을 사용하는 2가지 방법에 대해서 알아보았습니다.\n참고로 Node.js 버전 13.2 미만에서도 버전 12 이상에서는 Node.js를 실행할 때 <code>--experimental-module</code> 옵션을 넘기면 동일한 방법으로 ES 모듈을 사용할 수 있으니 참고바라겠습니다.</p>","timeToRead":4,"fields":{"slug":"/js-node-es-modules/","tags":["JavaScript","Node.js","ES6","ESM","import","export"]},"frontmatter":{"title":"Node.js에서 ES 모듈(import/export) 사용하기","date":"May 23, 2020"}},"next":{"fields":{"slug":"/python-decorators/"},"frontmatter":{"title":"파이썬 데코레이터 기본 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}