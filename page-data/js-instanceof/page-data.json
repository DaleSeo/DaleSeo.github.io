{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-instanceof/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/woowahan-typescript-with-react/"},"frontmatter":{"title":"도서 리뷰: 우아한 타입스크립트 with 리액트"}},"node":{"html":"<p>ES6에서 클래스 관련 문법이 지원되면서 자바스크립트도 어엿한 객체 지향 프로그래밍 언어로서 점점 자리를 잡아가고 있는 것 같습니다.\n그에 따라서 자바스크립트로 코딩을 할 때 어떤 객체가 어떤 클래스의 인스턴스인지를 알아내야 할 때가 자주 생기는데요.</p>\n<p>이번 포스팅에서는 이럴 때 <code>instanceof</code> 연산자를 사용하는 방법과 프로토타입 체인과 관련된 작동 원리에 대해서 알아보겠습니다.</p>\n<h2 id=\"instanceof-연산자\" style=\"position:relative;\"><a href=\"#instanceof-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"instanceof 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>instanceof 연산자</h2>\n<p><code>instanceof</code> 연산자는 객체가 어떤 클래스의 인스턴스인지를 알아내기 위해서 사용합니다.\n<code>객체 instanceof 클래스</code>의 형태로 사용하는데, 객체가 클래스의 인스턴스라면 결과로 참(true)이 나오고 아니라면 결과로 거짓(false)이 나옵니다.</p>\n<p>여기서 꼭 알아두어야 할 점은 객체 지향 패러다임에서는 객체 그 객체를 직접 만들어낸 생성자가 들어있는 클래스 뿐만 아니라 그 클래스가 상속하는 부모 클래스의 인스턴스이기도 하고, 그 부모 클래스가 상속하는 조부모 클래스이기도 하다는 것입니다.\n이 것은 자식 클래스의 생성자는 반드시 부모 클래스의 생성자를 (명시적으로든, 암묵적으로든) 호출하기 때문인데요.\n그러므로 우리는 해당 인스턴스는 자식 클래스의 생성자 뿐만 아니라 부모 클래스의 (또는, 그 부모의 부모 클래스의) 생성자에 의해서 만들어졌다고 볼 수 있는 것죠.</p>\n<p>예를 들어서, 다음과 같이 <code>Person</code> 클래스와 <code>Person</code> 클래스를 상속하는 <code>Student</code> 클래스를 가지고 <code>instanceof</code> 연산자를 테스트해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 <code>Person()</code> 생성자로 만들어낸 객체는 <code>Student</code> 클래스의 인스턴스는 아니지만, <code>Person</code> 클래스의 인스턴스입니다.\n그리고 자바스크립트에서 모든 클래스는 <code>Object</code> 클래스는 상속하기 때문에 <code>Object</code> 클래스의 인스턴스이기도 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nperson <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nperson <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nperson <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>반면에 <code>Student()</code> 생성자로 만들어낸 객체는 <code>Student</code> 클래스의 인스턴스이기도 하지만, <code>Student</code> 클래스의 부모인 <code>Person</code> 클래스의 인스턴스이기도 합니다.\n그리고 <code>Person</code> 클래스의 부모가 <code>Object</code> 클래스이므로 당연히 <code>Object</code> 클래스의 인스턴스이기도 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstudent <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nstudent <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nstudent <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>이렇게 <code>instanceof</code> 연산자가 해당 객체를 생성한 클래스 뿐만 아니라, 그 클래스가 상속하고 있는 부모 클래스를 상대로도 참을 반환하는 것은 자바스크립트에 내장된 클래스에서도 쉽게 찾아 볼 수 있죠.</p>\n<p>예를 들어, <code>Date</code> 클래스는 <code>Object</code> 클래스를 상속하기 때문에, <code>Date()</code> 생성자로 만든 객체는 두 클래스 모두의 인스턴스로 판별됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndate <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ndate <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"프로토타입-체인\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B8\" aria-label=\"프로토타입 체인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 체인</h2>\n<p>자바스크립트에서 객체 간의 상속 관계는 프로토타입 체인(prototype chain)이라는 독특한 내부 매커니즘을 통해 형성이 됩니다.\n그리고 이 부분은 <code>instanceof</code> 연산자의 작동 원리는 이해하는데 매우 중요한데요.\n왜냐하면 <code>instanceof</code> 연산자는 결국 객체의 프로토타입 체인 상에 주어진 클래스가 존재하는지를 확인하기 때문입니다.</p>\n<p>기본적으로 클래스의 인스턴스를 생성하면 해당 객체의 프로토타입은 클래스의 생성자의 <code>prototype</code> 속성이 되는데요.\n생성자의 <code>prototype</code> 속성에는 클래스의 메서드가 정의되어 있기 때문에 해당 객체는 프로토타입 체인을 통해서 정의된 메서드를 호출할 수 있게 됩니다.</p>\n<p>예를 들어, 위에서 작성한 <code>Student</code> 클래스의 인스턴스를 생성한 후, <code>Object.getPrototypeOf()</code> 메서드로 프로토타입을 확인해보면, <code>Student()</code> 생성자의 <code>prototype</code> 속성과 동일하다는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code>Student</code> 클래스의 인스턴스를 상대로 <code>Object.getPrototypeOf()</code> 메서드를 중첩 호출하면 프로토타입의 프로토타입을 확인해볼 수 있는데, <code>Person()</code> 생성자의 <code>prototype</code> 속성과 동일하다는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>마찬가지로 한 단계 더 거슬러 올라가면 <code>Object()</code> 생성자의 <code>prototype</code> 속성까지 도달할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span>\n  <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code>instanceof</code> 연산자는 객체의 프로토타입을 타고 올라가면서 주어진 클래스를 탐색합니다.\n만약에 클래스가 발견되면 결과로 참을 주고, 프로토타입의 끝에 도달하여 <code>null</code>을 만나면 거짓을 준다고 생각하시면 되겠습니다.</p>\n<blockquote>\n<p>객체의 프로토타입에 접근하기 위해서 사용한 Object.getPrototypeOf()에 대해서는 <a href=\"/js-object-prototype-of/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"클래스의-생성자로-만들지-않는-객체는\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B0%9D%EC%B2%B4%EB%8A%94\" aria-label=\"클래스의 생성자로 만들지 않는 객체는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스의 생성자로 만들지 않는 객체는?</h2>\n<p><code>Object.create()</code> 메서드를 사용해서 생성한 객체를 상대로도 <code>instanceof</code> 연산자를 사용할 수 있습니다.\n클래스의 생성자에 <code>new</code> 키워드를 붙여서 객체를 생성했을 때와 동일한 결과를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstudent <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nstudent <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nstudent <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>배열 리터럴(literal)이나 객체 리터럴의 경우에도, 각각 <code>Array</code> 클래스와 <code>Object</code> 클래스의 인스턴스이기 때문에 <code>instanceof</code> 연산자를 사용하는데 아무 문제가 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\narr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nstudent <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"객체를-직접-생성한-클래스만-알고-싶다면\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%A7%81%EC%A0%91-%EC%83%9D%EC%84%B1%ED%95%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A7%8C-%EC%95%8C%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EB%A9%B4\" aria-label=\"객체를 직접 생성한 클래스만 알고 싶다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체를 직접 생성한 클래스만 알고 싶다면?</h2>\n<p><code>instanceof</code> 연산자는 객체를 생성한 클래스 뿐만 아니라 그 클래스의 모든 조상 클래스를 상대로도 참을 반환한다고 배웠는데요.\n만약에 조상 클래스를 제외하고 해당 객체를 직접적으로 생성한 클래스인지를 판별하려면 어떻게 해야 할가요?</p>\n<p>이럴 때는 <code>Object.getPrototypeOf()</code> 메서드를 통해서 해당 객체의 프로토타입이 무엇인지를 확인해보면 됩니다.</p>\n<p>예를 들어서, 위에서 작성한 <code>Student</code> 클래스의 인스턴스를 상대로 테스트를 해보면,\n프로토타입이 <code>Student.prototype</code>과는 일치하지만, <code>Person.prototype</code>과는 일치하지 않는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h2 id=\"클래스의-인스턴스가-아닌지-확인할-때-주의사항\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EA%B0%80-%EC%95%84%EB%8B%8C%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%A0-%EB%95%8C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"클래스의 인스턴스가 아닌지 확인할 때 주의사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스의 인스턴스가 아닌지 확인할 때 주의사항</h2>\n<p>객체가 어떤 클래스의 인스턴스가 아닌지를 확인할 때 코딩하면서 실수하기가 쉬운 부분이 있는데요.</p>\n<p>객체 앞에 바로 <code>!</code>기호를 붙이면 <code>instanceof</code> 연산자의 결과는 항상 거짓이 됩니다.\n왜냐하면 <code>!객체</code> 부분이 먼저 실행되어 <code>false</code>가 되기 때문에 결국 <code>false instanceof 클래스</code>가 되기 때문입니다.\n<code>false</code>는 원시(primitive) 자료형이라서 어떤 클래스의 인스턴스도 아닙니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">!</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>따라서 반드시 <code>객체 instanceof 클래스</code> 부분을 먼저 괄호로 감싼 후에 그 앞에 <code>!</code> 기호를 붙여줘야겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 객체가 클래스의 인스턴스인지 알아내기 위해서 사용하는 <code>instanceof</code> 연산자에 대해서 살펴보고, <code>instanceof</code> 연산자의 동작 방식을 이해하기 위해서 자바스크립트의 프로토타입 체인에 대해서도 배웠습니다.</p>\n<p>자바스크립트를 공부하시는 많은 분들이 <code>instanceof</code> 연산자와 <code>typeof</code> 연산자를 혼동하십니다.\n<code>typeof</code> 연산자에 대해서는 <a href=\"/js-typeof/\">별도의 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>","timeToRead":5,"fields":{"slug":"/js-instanceof/","tags":["JavaScript","TypeScript","prototype","instanceof","ES6"]},"frontmatter":{"title":"자바스크립트의 프로토타입 체인과 instanceof 연산자","date":"Jan 16, 2024"}},"next":{"fields":{"slug":"/js-object-prototype-of/"},"frontmatter":{"title":"자바스크립트 객체의 프로토타입을 다루는 방법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}