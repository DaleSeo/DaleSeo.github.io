{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/css-where/","result":{"pageContext":{"previous":{"fields":{"slug":"/css-html-ul-ol-li/"},"frontmatter":{"title":"CSS 리스트 스타일링 가이드 (HTML <ul>, <ol>, <li> 요소)"}},"node":{"html":"<p>이번 포스팅에서는 CSS에 비교적 최근에 추가된 의사 클래스(pseudo class) 함수인 <code>:where()</code>에 대해서 알아보겠습니다.</p>\n<h2 id=\"기본-문법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95\" aria-label=\"기본 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 문법</h2>\n<p><code>:where()</code> 의사 클래스 함수는 인자로 여러 개의 선택자를 쉼표(<code>,</code>)로 구분하여 넘길 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:where(선택자1, 선택자2, 선택자3, ...)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 속성명1: 속성값1 */</span>\n  <span class=\"token comment\">/* 속성명2: 속성값2 */</span>\n  <span class=\"token comment\">/* 속성명3: 속성값3 */</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 CSS 규칙은 마치 아래와 같이 CSS 코드를 작성한 효과가 발생하게 되는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">선택자1,\n선택자2,\n선택자3,\n...</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 속성명1: 속성값1 */</span>\n  <span class=\"token comment\">/* 속성명2: 속성값2 */</span>\n  <span class=\"token comment\">/* 속성명3: 속성값3 */</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기까지만 보면 뭐하러 굳이 <code>:where()</code> 함수를 사용해야될까 싶죠? 😅</p>\n<p>지금부터 사례를 통해서 <code>:where()</code>를 사용하면 어떠한 이점이 있는지 살펴보겠습니다.</p>\n<h2 id=\"여러-상태-스타일링\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%EC%83%81%ED%83%9C-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81\" aria-label=\"여러 상태 스타일링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 상태 스타일링</h2>\n<p><code>:where()</code>를 활용할 수 있는 가장 간단한 사례로 여러 개의 상태에 동일한 스타일을 적용할 때를 들 수 있는데요.</p>\n<p>예를 들어, 버튼이 포커스를 받거나 버튼 위로 마우스 커서가 오거나 버튼을 누르고 있는 상태에서 배경을 파란색으로 바꾸고 싶다면 대개 다음과 같이 CSS 코드를 작성할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">button:focus,\nbutton:hover,\nbutton:active</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>동일한 CSS 규칙을 <code>:where()</code>를 이용하면 <code>button</code>을 3번 반복하지 않고 좀 더 간결하게 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">button:where(:focus, :hover, :active)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"css-where-1\" src=\"https://codepen.io/daleseo/embed/bGKbRzB?default-tab=css%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/daleseo/pen/bGKbRzB\">\n  css-where-1</a> by Dale Seo (<a href=\"https://codepen.io/daleseo\">@daleseo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h2 id=\"여러-요소-스타일링\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%EC%9A%94%EC%86%8C-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81\" aria-label=\"여러 요소 스타일링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 요소 스타일링</h2>\n<p>HTML에서 버튼은 다음과 같이 다양한 방식으로 마크업할 수가 있는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>버튼 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>버튼 2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reset<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>초기화<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>제출<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>이 4가지 버튼을 일관적으로 스타일하기 위해서는 다음과 같은 CSS 규칙이 필요하겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">button,\ninput[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.5em 1em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>:where()</code>는 이렇게 여러 요소에 동일한 스타일을 적용할 때도 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:where(button, input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"])</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.5em 1em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> royalblue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"css-where-2\" src=\"https://codepen.io/daleseo/embed/XWYrgeZ?default-tab=css%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/daleseo/pen/XWYrgeZ\">\n  css-where-2</a> by Dale Seo (<a href=\"https://codepen.io/daleseo\">@daleseo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<p><code>:where()</code>의 장점은 CSS 코드를 작성할 때 발생할 수 있는 실수에 대해 좀 더 너그럽다는 것인데요.</p>\n<p>예를 들어, 첫 번째 선택자에 오타를 내서 <code>button</code> 대신에 <code>:button</code>라고 썼다면 어땠을까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:button,\ninput[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 스타일 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이와 같이 여러 개의 선택자를 나열했을 때 그 중에서 하나라도 잘못되었다면 그 CSS 규칙이 몽땅 날라가게 되는데요.\n따라서 4가지 버튼 모두 전혀 스타일이 적용되지 않게 됩니다. 🙁</p>\n<p>하지만 다음과 같이 <code>:where()</code>를 쓰게 되면, 문제가 있는 첫 번째 선택자를 제외한 나머지 선택자에는 여전히 스타일이 적용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:where(:button, input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"])</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 스타일 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"여러-요소와-상태-스타일링\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%EC%9A%94%EC%86%8C%EC%99%80-%EC%83%81%ED%83%9C-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81\" aria-label=\"여러 요소와 상태 스타일링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 요소와 상태 스타일링</h2>\n<p>사실 <code>:where()</code>의 진정한 위력은 다른 선택자와 조합해서 사용할 때 극대화 됩니다.</p>\n<p>방금 살펴본 4가지 요소에, 처음 다뤘던 3가지 상태를 조합하면 무려 12가지 선택자가 필요한데요.\n이 모든 선택자를 대상으로 동일한 스타일을 적용해볼까요? 🤮</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">button:focus,\nbutton:hover,\nbutton:active,\ninput[type=\"button\"]:focus,\ninput[type=\"button\"]:hover,\ninput[type=\"button\"]:active,\ninput[type=\"reset\"]:focus,\ninput[type=\"reset\"]:hover,\ninput[type=\"reset\"]:active,\ninput[type=\"submit\"]:focus,\ninput[type=\"submit\"]:hover,\ninput[type=\"submit\"]:active</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>동일한 CSS 규칙을 이 번에는 <code>:where()</code>를 활용해서 작성해볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:where(button, input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"]):where(:focus, :hover, :active)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"css-where-3\" src=\"https://codepen.io/daleseo/embed/ExRYXJd?default-tab=css%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/daleseo/pen/ExRYXJd\">\n  css-where-3</a> by Dale Seo (<a href=\"https://codepen.io/daleseo\">@daleseo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<p><code>:where()</code>를 두 번 연속해서 사용했더니 필요한 선택자를 대폭 줄어 들었네요! 👍</p>\n<h2 id=\"css-명시도\" style=\"position:relative;\"><a href=\"#css-%EB%AA%85%EC%8B%9C%EB%8F%84\" aria-label=\"css 명시도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 명시도</h2>\n<p>CSS의 의사 클래스(pseudo class) 함수 중에서는 <code>:where()</code>와 형제 뻘인 <code>:is()</code>라는 녀석도 있는데요.\n지금까지 작성한 예제 코드에서 <code>:where()</code>를 <code>:is()</code>로 대체해보시면 아무런 차이가 발생하지 않을 것입니다.</p>\n<p>이 두 개의 함수 중에 무엇을 쓰든 무방한 경우가 많지만, 사실 CSS 명시도(specificity) 측면에서 큰 차이가 있는데요.\n<code>:where()</code> 함수는 CSS 명시도가 0이라서, <code>:where()</code>이 사용된 CSS 규칙은 다른 선택자를 통해서 덮어쓰기가 용이합니다.\n반면에 <code>:is()</code> 함수의 CSS 명시도는 인자로 넘어온 선택자 중에서 가장 명시도가 큰 것이 되기 때문에 다른 선택자로 덮어쓰기를 방지하고자 할 때 더 적합합니다.</p>\n<p>그래서 저는 개인적으로는 아직 이 두 함수에 익숙하지 않으시다면 <code>:where()</code>를 사용하는 것을 먼저 고려하시고, 꼭 필요한 경우에만 <code>:is()</code>를 사용하시라고 추천드리고 싶습니다.\n이 부분에 대해서는 추후 기회가 되면 <code>:is()</code>에 대해서 다룰 때 좀 더 자세히 살펴보도록 하겠습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 CSS에 추가된 매우 유용한 의사 클래스(pseudo class) 함수인 <code>:where()</code>을 간단한 실습을 통해서 살펴보았습니다.\n<code>:where()</code>를 잘 활용하셔서 좀 더 깔끔하고 읽기 편한 CSS 코드를 작성하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":4,"fields":{"slug":"/css-where/","tags":["CSS","selectors","pseudo classes"]},"frontmatter":{"title":"CSS의 :where() 의사 클래스 함수","date":"Oct 23, 2022"}},"next":{"fields":{"slug":"/css-normalize-reset/"},"frontmatter":{"title":"CSS Normalize와 CSS Reset"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}