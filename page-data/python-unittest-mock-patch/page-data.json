{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-unittest-mock-patch/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-apollo-server-subscriptions/"},"frontmatter":{"title":"[GraphQL] Apollo Server로 Subscription 구현"}},"node":{"html":"<p><a href=\"/python-unittest-mock\">지난 포스트</a>에서 <code>unittest.mock</code> 모듈의 <code>Mock</code> 또는 <code>MagicMock</code> 클래스를 사용하여 기본적인 mocking을 하는 방법에 대해서 알아보았습니다.\n이번 포스트에서는 실전에서 더 많이 쓰이는 <code>unittest.mock</code> 모듈의 <code>patch()</code> 데코레이터를 이용하여 단위 테스트를 좀 더 세련되게 작성하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"patching-mocking\" style=\"position:relative;\"><a href=\"#patching-mocking\" aria-label=\"patching mocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>patching? mocking?</h2>\n<p><code>unittest.mock</code> 모듈의 <code>patch()</code> 데코레이터를 이용하면 특정 모듈의 함수나 클래스를 가짜(mock) 객체, 좀 더 엄밀히 말하면, <code>MagicMock</code> 인스턴스로 대체할 수 있습니다.\n이 과정을 흔히 mocking또는 patching이라고 하는데, 단위 테스트를 작성할 때 외부 서비스에 의존하지 않고 독립적으로 실행이 가능한 단위 테스트를 작성하기 위해서 사용되는 테스팅 기법입니다.</p>\n<h2 id=\"patch-데코레이터\" style=\"position:relative;\"><a href=\"#patch-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"patch 데코레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>patch 데코레이터</h2>\n<p><code>unittest.mock</code> 모듈의 <code>patch()</code> 데코레이터는 특정 범위 내에서만 mocking이 가능하도록 해주는데요.\n일반적으로 다음과 같이 patching이 필요한 단위 테스트 메서드에 <code>patch()</code> 데코레이터를 선언해줌으로써 해당 메서드 내에서만 patching이 이뤄지게 합니다.</p>\n<ul>\n<li>test_us.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> unittest <span class=\"token keyword\">import</span> TestCase<span class=\"token punctuation\">,</span> main\n<span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> patch\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello!\"</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMe</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@patch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"__main__.hello\"</span><span class=\"token punctuation\">,</span> return_value<span class=\"token operator\">=</span><span class=\"token string\">\"Mock!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_hello</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mock_hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mock!\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertIs<span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span> mock_hello<span class=\"token punctuation\">)</span>\n        mock_hello<span class=\"token punctuation\">.</span>assert_called_once_with<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python test_me.py\n<span class=\"token builtin class-name\">.</span>\n----------------------------------------------------------------------\nRan <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.000s\n\nOK</code></pre></div>\n<p>위 예제를 보면, 원래 <code>\"Hello!\"</code>을 리턴하는 <code>hello()</code> 함수가 <code>\"Mock!\"</code>를 대신 리턴하도록 <code>@patch()</code> 데코레이터로 patching을 하고 있습니다.</p>\n<p><code>@patch()</code> 데코레이터는 첫번째 인자로 patching할 메서드를 <code>package.module.Class.method</code> 형태의 문자열로 받습니다.\n본 예제에서는 patching할 메서드가 같은 모듈에 있기 때문에 <code>__main__</code> 모듈명을 사용하고 있습니다.\n<code>@patch()</code> 데코레이터를 사용해서 patching을 하면 mock 객체를 테스트 메서드의 인자로 추가되는데, 바로 <code>mock_hello</code>이 이 mock 객체의 매개변수 명으로 쓰이고 있습니다.</p>\n<p>테스트 메서드에서 검증하는 내용을 보면 <code>hello()</code> 함수를 호출했을 때 원래 리턴 값인 <code>\"Hello!\"</code> 대신에 <code>\"Mock!\"</code>을 리턴하는지 검사합니다.\n그리고 정말로 <code>hello()</code> 함수가 <code>mock_hello()</code> 함수로 대체가 되었는지, 그리고 mock 객체에 함수 호출이 기억되었는지를 검증하고 있습니다.</p>\n<h2 id=\"실전-예제\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%84-%EC%98%88%EC%A0%9C\" aria-label=\"실전 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실전 예제</h2>\n<p><code>@patch()</code> 데코레이터는 외부 서비스에 의존하는 코드에 대한 테스트를 작성할 때 유용하게 쓰입니다.\n예를 들어, API를 호출하는 코드에 대한 테스트를 작성할 때, 실제로 네트워크 연동을 하면 테스트가 느려지고, 깨지기 쉬워집니다.</p>\n<p>지금부터 아래와 같이, <code>requests</code> 패키지를 사용하여 외부 API와 연동하여 사용자를 조회하거나 생성해주는 간단한 모듈에 대한 단위 테스트를 작성해보겠습니다.</p>\n<ul>\n<li>user_manage.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> requests\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_user</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"https://jsonplaceholder.typicode.com/users/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to get a user.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_user</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"https://jsonplaceholder.typicode.com/users\"</span></span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>user<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">!=</span> <span class=\"token number\">201</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to create a user.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>먼저 사용자 ID를 받아서, 사용자를 조회해주는 <code>get_user()</code> 함수에 대한 테스트를 작성해보겠습니다.\n<code>get_user()</code> 함수는 인자로 넘어온 사용자 ID를 이용해서 URL을 만든 후, 이 URL을 인자로 넘겨 <code>requests</code> 패키지의 <code>get()</code> 함수를 호출합니다.\n그리고 <code>requests</code> 패키지의 <code>get()</code> 함수의 리턴 객체의 <code>json()</code> 함수를 호출한 결과를 리턴합니다.</p>\n<p>실제 네트워크 연동이 발생하지 않는 단위 테스트를 작성하려면 <code>requests</code> 패키지의 <code>get()</code> 함수를 patching해줘야 합니다.\n즉, <code>requests.get()</code> 함수를 mock 객체로 교체하고, 그 mock 객체가 어떻게 작동할지 설정한 다음, 실제로 mock 객체 대상으로 예상했던 작업이 일어났는지 검증해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> unittest <span class=\"token keyword\">import</span> TestCase\n<span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> patch\n\n<span class=\"token keyword\">import</span> user_manager\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestUserManger</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@patch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"requests.get\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_get_user</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mock_get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> mock_get<span class=\"token punctuation\">.</span>return_value\n        response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n        response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>return_value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Test User\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n\n        user <span class=\"token operator\">=</span> user_manager<span class=\"token punctuation\">.</span>get_user<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Test User\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">[</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">)</span>\n        mock_get<span class=\"token punctuation\">.</span>assert_called_once_with<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://jsonplaceholder.typicode.com/users/1\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>테스트 함수에 <code>@patch(\"requests.get\")</code> 데코레이터를 선언하면, <code>mock_get</code> 매개 변수에 교체된 mock 객체가 할당됩니다.\n이제 <code>mock_get</code>에 할당되어 있는 mock 객체가 리턴할 객체의 <code>status_code</code> 속성을 <code>200</code>으로 지정하고, <code>json</code> 메서드의 리턴 객체를 임의의 사용자 사전을 지정합니다.</p>\n<p>다음으로, <code>user_manager</code> 모듈의 <code>get_user()</code> 함수를 호출하여, 내부적으로 <code>requests</code> 모듈의 <code>get()</code> 함수가 호출되게 합니다.</p>\n<p>그 다음, <code>get_user()</code> 함수를 호출 결과가 임의의 사용자 사전에 담긴 내용과 일치하는 확인합니다.\n마지막으로 mock 객체가 <code>get_user()</code> 함수에 인자로 넘어간 사용자 ID를 포함하는 정확한 URL로 호출이 되었는지 검증합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> unittest <span class=\"token keyword\">import</span> TestCase\n<span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> patch\n\n<span class=\"token keyword\">import</span> user_manager\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestUserManger</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@patch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"requests.post\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_create_user</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mock_post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> mock_post<span class=\"token punctuation\">.</span>return_value\n        response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">=</span> <span class=\"token number\">201</span>\n        response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>return_value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">}</span>\n\n        user <span class=\"token operator\">=</span> user_manager<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Test User\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span>\n        mock_post<span class=\"token punctuation\">.</span>assert_called_once_with<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"https://jsonplaceholder.typicode.com/users\"</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Test User\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>create_user()</code> 함수도 위와 같이 비슷한 방식으로 단위 테스트를 작성할 수 있습니다.\n<code>requests</code> 패키지의 <code>post()</code> 함수를 patching하고 mock 객체가 할당된 <code>mock_post</code>를 같은 방식으로 활용하면 됩니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 <code>unittest.mock</code> 모듈의 <code>@patch()</code> 데코레이터를 이용하여 실전에서 단위 테스트가 이뤄지는 살펴보았습니다.</p>","timeToRead":4,"fields":{"slug":"/python-unittest-mock-patch/","tags":["Python","파이썬","Testing","mocking","unittest","patch","requests"]},"frontmatter":{"title":"[파이썬] 테스트 모킹 - patch","date":"Feb 15, 2020"}},"next":{"fields":{"slug":"/python-float-decimal/"},"frontmatter":{"title":"파이썬 소수 연산 - float 타입과 decimal 모듈"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}