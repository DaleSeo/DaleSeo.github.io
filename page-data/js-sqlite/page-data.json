{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-sqlite/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>이번 포스팅에서는 자바스크립트에서 경령화 데이터베이스 SQLite를 사용하는 기본적인 방법에 대해서 알아보겠습니다.</p>\n<blockquote>\n<p>파이썬에서 SQLite 데이터베이스를 사용하는 방법에 대해서는 <a href=\"/python-sqlite3/\">관련 게시물</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"sqlite란\" style=\"position:relative;\"><a href=\"#sqlite%EB%9E%80\" aria-label=\"sqlite란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQLite란?</h2>\n<p>SQLite는 전 세계에서 가장 많이 사용되는 경령화 데이터베이스입니다.\n알게 모르게 우리가 쓰고 있는 대부분의 전자기기에서 SQLite가 사용되고 있기 때문이죠.</p>\n<p>SQLite는 다른 데이터베이스와는 달리 클라이언트와 서버 간에 데이터를 송수신하지 않고, 모든 데이터를 로컬 컴퓨터에 저장하는데요.\nSQLite는 매우 가벼워서 하드웨어 리소스가 제한되고 특히 네트워크 통신이 어려운 환경에서 유용하게 활용됩니다.\n뿐만 아니라, SQLite는 왠만한 중소규모 애플리케이션을 개발하기에도 부족하지 않는 놀라운 성능을 자랑합니다.</p>\n<p>SQLite는 모든 데이터를 하나의 파일에 저장하며 이 파일만 복제하면 쉽게 데이터를 이전(migration)할 수 있습니다.\n이러한 띄어난 이식성(portability)도 다른 데이터베이스에서는 찾기 힘든 SQLite의 특징입니다.</p>\n<h2 id=\"자바스크립트-라이브러리\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"자바스크립트 라이브러리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 라이브러리</h2>\n<p>자바스크립트에서 SQLite를 사용할 수 있도록 npm 저장소에는 여러 종류의 라이브러리가 올라와 있습니다.</p>\n<p>예전에는 <a href=\"https://www.npmjs.com/package/sqlite3\">sqlite3</a>와 <a href=\"https://www.npmjs.com/package/sqlite\">sqlite</a>, 이 2개의 라이브러리를 조합해서 사용하는 경우가 많았는데요.\n최근에는 사용성을 개선한 <a href=\"https://www.npmjs.com/package/better-sqlite3\">better-sqlite3</a>라는 라이브러리가 더 많이 사용되는 추세입니다.</p>\n<p>본 포스팅에서는 better-sqlite3를 사용하여 SQLite 데이터에비스에 접속하고 다양한 쿼리를 실행해보겠습니다.</p>\n<p>우선 <code>better-sqlite3</code> 패키지를 설치해야하고 라이브러리를 불러와야하는데요.</p>\n<p>패키지 매니저로 npm을 사용하는 프로젝트에서는 터미널에서 <code>npm add</code> 명령어로 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">add</span> better-sqlite3</code></pre></div>\n<p>Bun을 사용하는 프로젝트에서는 <code>bun add</code> 명령어로 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun <span class=\"token function\">add</span> better-sqlite3</code></pre></div>\n<p>모듈 시스템으로 ES Modules를 사용하는 프로젝트에서는 <code>import</code> 문으로 라이브러리를 불러옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ESM</span>\n<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">\"better-sqlite3\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>CommonJS를 사용하는 프로젝트에서는 <code>require</code> 문으로 라이브러리를 불러옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CJS</span>\n<span class=\"token keyword\">const</span> Database <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"better-sqlite3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"데이터베이스-접속\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A0%91%EC%86%8D\" aria-label=\"데이터베이스 접속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스 접속</h2>\n<p>데이터베이스 접속은 <code>better-sqlite3</code> 패키지로 부터 불러온 <code>Database()</code> 생성자를 호출하는 과정을 통해 이루어집니다.</p>\n<p>SQLite는 기본적으로 데이터를 파일에 저장하기 때문에 데이터베이스에 접속할 때 데이터를 저장할 파일의 경로를 명시해야 합니다.\n예를 들어, 현재 경로에 있는 <code>file.db</code> 파일에 데이터를 저장하고 싶다면, <code>Database()</code> 생성자의 첫 번째 인자로 파일 경로를 넘기면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./file.db\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>SQLite를 데이터를 영속적으로 저장하지 않는 인메모리(in-memory) 데이터베이스로 사용하고 싶다면 <code>Database()</code> 생성자의 인자로 파일 경로 대신에 <code>:memory:</code>를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":memory:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>Database()</code> 생성자는 두 번째 인자로 다양한 옵션을 받습니다.\n자주 쓰이는 옵션으로 <code>verbose</code>를 들 수 있는데요.\nSQL 구문이 실행될 때 마다 호출 될 함수를 <code>verbose</code> 옵션을 통해 지정해줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":memory:\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">verbose</span><span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span>log <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>참고로 다음과 같이 WAL 프라그마(pragma)도 활성화해주는 것이 성능 측면에서 강력하게 권장되고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token function\">pragma</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"journal_mode = WAL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"테이블-생성\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1\" aria-label=\"테이블 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테이블 생성</h2>\n<p>SQLite는 관계형 데이터베이스이므로 테이블(table)에 데이터를 저장합니다.\n새로운 테이블을 생성하려면 DDL(Data Definition Language)인 <code>CREATE TABLE</code> 쿼리을 실행해야하는데요.\n위에서 데이터베이스 접속할 때 만든 <code>Database</code> 객체의 <code>exec()</code> 함수에 SQL 구문을 인자로 넘기면 됩니다.</p>\n<p>예를 들어, <code>id</code>와 <code>code</code>, <code>name</code> 칼럼(column)으로 이루어진 <code>countries</code> 테이블을 생성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"CREATE TABLE countries (id INTEGER PRIMARY KEY, code TEXT, name TEXT)\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아래에서 <code>code</code> 칼럼을 기준으로 데이터 조회하거나 정렬 할 것이기 때문에 <code>code</code> 칼럼에 인덱스도 추가해주는 것이 성능 측면에서 좋겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CREATE INDEX idx_code ON countries (code)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"데이터-삽입\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%BD%EC%9E%85\" aria-label=\"데이터 삽입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 삽입</h2>\n<p><code>INSERT</code> 쿼리와 같은 DML(Data Manipulation Language)은 <code>exec()</code> 함수를 호출하여 바로 실행하는 것보다는 Prepared Statement를 통해서 실행하는 것이 권장됩니다.\nPrepared Statement를 사용하면 SQL 구문으로 부터 사용자 입력값을 분리할 수 있기 때문에 SQL Injection 공격으로 부터 애플리케이션을 보호할 수 있기 때문입니다.</p>\n<p>다음과 같은 5개의 국가 데이터를 담은 자바스크립트 배열을 <code>countries</code> 테이블에 삽입하려고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> countries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">\"KR\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Korea\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CA\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Canada\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">\"US\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"United States\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GB\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"United Kingdom\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CN\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"China\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Prepared Statement는 Database 객체의 <code>prepare()</code> 함수에 파라미터화(parameterized)된 SQL 구문을 넘기면 만들어집니다.\n예를 들어, <code>INSERT</code> 쿼리 내에 <code>$code</code>와 <code>$name</code>을 파라미터화(parameterized) 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> insert <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"INSERT INTO countries (code, name) VALUES ($code, $name)\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로 국가 배열을 루프 돌면서 Statement 객체의 <code>run()</code> 함수를 호출하면 쿼리가 실행이 됩니다.\n각 국가 객체가 <code>code</code>와 <code>name</code> 속성으로 이루어져 있기 때문에, 파라미터화 되어 있는 <code>INSERT</code> 쿼리문에 바인딩(binding)될 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> country <span class=\"token keyword\">of</span> countries<span class=\"token punctuation\">)</span> insert<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"데이터-갱신\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B0%B1%EC%8B%A0\" aria-label=\"데이터 갱신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 갱신</h2>\n<p>데이트를 갱신하거나 삭제할 때는 <code>UPDATE</code> 쿼리를 인자로 넘겨 Statement 객체를 생성합니다.\n그 다음, 생성한 Statement 객체의 <code>run()</code> 함수를 호출하는데요.\n마찬가지로 <code>UPDATE</code> 구문에 바인딩할 파라미터를 담을 객체를 인자로 넘겨야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> update <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"UPDATE countries SET name = $name WHERE code = $code\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nupdate<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">\"US\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"미국\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"데이터-삭제\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C\" aria-label=\"데이터 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 삭제</h2>\n<p>데이트를 갱신하거나 삭제할 때는 <code>DELETE</code> 쿼리를 인자로 넘겨 생성한 Statement 객체의 <code>run()</code> 함수를 호출합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> remove <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DELETE FROM countries WHERE code = ?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nremove<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이처럼 파라미터의 개수가 적은 경우 <code>?</code> 기호를 이용하여 SQL 구문 내의 파라미터 자리를 표시할 수 있습니다.\n이 경우, <code>run()</code> 함수에 바인딩 파라미터를 넘길 때도 그냥 문자열이나 문자열을 담은 배열을 넘기면 됩니다.</p>\n<h2 id=\"데이터-조회\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C\" aria-label=\"데이터 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 조회</h2>\n<p>데이터를 조회할 때는 <code>SELECT</code> 쿼리를 인자로 넘겨서 Statement 객체를 생성해야 합니다.\n<code>SELECT</code> 쿼리는 조회된 데이터가 결과로 나오므로 <code>run()</code> 함수 대신에 <code>get()</code>이나 <code>all()</code>, <code>iterate()</code> 함수를 호출해야 합니다.</p>\n<p>결과 데이터가 단 건인 경우, <code>get()</code> 함수에 <code>SELECT</code> 쿼리문에 바인딩할 파라미터를 넘깁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> selectOne <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM countries WHERE code = ?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> oneCountry <span class=\"token operator\">=</span> selectOne<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oneCountry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> index.js\n<span class=\"token punctuation\">{</span> id: <span class=\"token number\">1</span>, code: <span class=\"token string\">'KR'</span>, name: <span class=\"token string\">'Korea'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>SELECT</code> 구문의 실행 결과로 여러 건의 데이터가 나오는 경우에는 <code>all()</code> 함수나 <code>iterate()</code> 함수를 사용해야 합니다.</p>\n<p><code>all()</code> 함수는 쿼리 결과를 배열에 담아 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> selectMany <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM countries ORDER BY code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> manyCountries <span class=\"token operator\">=</span> selectMany<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>manyCountries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> index.js\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> id: <span class=\"token number\">2</span>, code: <span class=\"token string\">'CA'</span>, name: <span class=\"token string\">'Canada'</span> <span class=\"token punctuation\">}</span>,\n  <span class=\"token punctuation\">{</span> id: <span class=\"token number\">5</span>, code: <span class=\"token string\">'CN'</span>, name: <span class=\"token string\">'China'</span> <span class=\"token punctuation\">}</span>,\n  <span class=\"token punctuation\">{</span> id: <span class=\"token number\">4</span>, code: <span class=\"token string\">'GB'</span>, name: <span class=\"token string\">'United Kingdom'</span> <span class=\"token punctuation\">}</span>,\n  <span class=\"token punctuation\">{</span> id: <span class=\"token number\">1</span>, code: <span class=\"token string\">'KR'</span>, name: <span class=\"token string\">'Korea'</span> <span class=\"token punctuation\">}</span>,\n  <span class=\"token punctuation\">{</span> id: <span class=\"token number\">3</span>, code: <span class=\"token string\">'US'</span>, name: <span class=\"token string\">'United States'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>반면에 <code>iterate()</code> 함수는 루프를 돌리기 용이하도록 열거자(iterator) 객체를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> selectMany <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM countries ORDER BY code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> country <span class=\"token keyword\">of</span> selectMany<span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ node index<span class=\"token punctuation\">.</span>js\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">'CA'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Canada'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">'CN'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'China'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">'GB'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'United Kingdom'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">'KR'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Korea'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token string\">'US'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'United States'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"데이터베이스-닫기\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%8B%AB%EA%B8%B0\" aria-label=\"데이터베이스 닫기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스 닫기</h2>\n<p>SQLite 데이터베이스와 연결을 종료하려면 <code>Database</code> 객체의 <code>close()</code> 함수를 호출합니다.\n<code>close()</code> 함수가 호출되면 <code>Statement</code> 객체를 생성하거나 실행할 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 예제를 통해서 자바스크립트에서 SQLite 데이터베이스를 어떻게 접속하고 쿼리를 실행하는지 알아보았습니다.\n실제 애플리케이션을 개발할 때는 여러 테이블을 조인(join)하기도 하고, 여러 쿼리를 하나의 트랜잭션(transaction)으로 처리하는 등 SQLite 데이터베이스를 상대로 좀 더 복잡한 작업을 수행하게 될 텐데요.\nbetter-sqlite3의 <a href=\"https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md\">공식 API 문서</a>를 통해서 이러한 고급 사용법을 추가로 학습하실 수 있으니 참고 바랍니다.</p>","timeToRead":6,"fields":{"slug":"/js-sqlite/","tags":["JavaScript","NodeJS","Bun","SQLite"]},"frontmatter":{"title":"자바스크립트에서 SQLite 데이터베이스 사용하기","date":"Dec 16, 2023"}},"next":{"fields":{"slug":"/js-uuid/"},"frontmatter":{"title":"자바스크립트로 UUID 생성하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}