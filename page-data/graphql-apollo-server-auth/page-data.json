{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-apollo-server-auth/","result":{"pageContext":{"previous":{"fields":{"slug":"/jest-mock-modules/"},"frontmatter":{"title":"[Jest] jest.mock() 모듈 모킹"}},"node":{"html":"<p>서버 애플리케이션을 개발할 때 사용자 사용자 인증(authentication)과 인가(Authorization)는 데이터 보안을 위해서 매우 핵심적인 기능입니다.\n따라서 GraphQL API를 설계하거나, GraphQL 서버를 개발할 때도 사용자 인증/인가 부분에 대해서 여러가지 고려가 필요합니다.\n이번 포스트에서는 Apllo Server를 이용하여 GraphQL 서버의 사용자 인증과 인가를 구현해보도록 하겠습니다.</p>\n<h2 id=\"http-인증-방식\" style=\"position:relative;\"><a href=\"#http-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EC%8B%9D\" aria-label=\"http 인증 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 인증 방식</h2>\n<p>HTTP 인증 방법에는 여러가지가 있는데, GraphQL 스팩에서는 어떤 특별한 인증 방법을 쓰라고 별도로 가이드를 하고 있지는 않고 있습니다.\n본 포스트에서는 최대한 간결한 예제를 위해서 단순한 API 인증에 많이 쓰이는 Bearer 인증 방식을 사용하도록 하겠습니다.</p>\n<p>Bearer 인증 방식은 클라이언트에서 서버로 요청을 보낼 때 마다 HTTP <code>Authorization</code> 헤더를 <code>Bearer &#x3C;인증 토큰></code>으로 설정합니다.\n그러면 서버에서는 클라이언트에서 보낸 인증 토큰이 유효한지, 어떤 사용자의 토큰인지를 파악해서 사용자 인증 처리를 해줍니다.</p>\n<h2 id=\"실습-서버-프로젝트\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%EC%84%9C%EB%B2%84-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"실습 서버 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 서버 프로젝트</h2>\n<p>실습 용으로 Apollo Server를 이용해서 간단한 GraphQL 서버를 작성해보도록 하겠습니다.</p>\n<blockquote>\n<p>Apollo Server를 이용해서 GraphQL 서버를 개발해보지 않으신 분들은 아래 포스트를 먼저 보시고 기본 프로젝트 세팅을 하시고 돌아오시기 바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/graphql-apollo-server\">Apollo Server를 이용한 초간단 GraphQL 서버 개발</a></li>\n</ul>\n<p>먼저 Apollo Server의 내장 에러 클래스인 <code>AuthenticationError</code>와 <code>ForbiddenError</code>를 임포트해서 각각 인증 실패와 인가 실패 시 사용하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  ApolloServer<span class=\"token punctuation\">,</span>\n  gql<span class=\"token punctuation\">,</span>\n  AuthenticationError<span class=\"token punctuation\">,</span>\n  ForbiddenError<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apollo-server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>GraphQL 서버의 오류 처리에 대한 자세한 내용은 아래 관련 포스트를 참고 바라겠습니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/graphql-apollo-server-errors\">GraphQL 서버의 오류 처리 (Apollo Server Error handling)</a></li>\n</ul>\n<p>그리고 아래와 같이 아무런 인증/인가 처리를 하지 않는 매우 간단한 서버 코드에서 부터 시작을 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    ping: String\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">ping</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"pong\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Listening at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"컨텍스트-레벨-인증\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%A0%88%EB%B2%A8-%EC%9D%B8%EC%A6%9D\" aria-label=\"컨텍스트 레벨 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨텍스트 레벨 인증</h2>\n<p>GraphQL 서버에서 구현할 수 있는 가장 단순하지만 가장 안전한 인증부터 적용해보도록 하겠습니다.\n클라이언트에서 인증 토큰이 넘어오지 않거나, 넘어온 토큰이 유효하지 않는 경우에는 요청을 무조건 차단하는 것입니다.</p>\n<p>컨텍스트 레벨 인증을 할 때는 <code>ApolloServer</code> 생성자의 <code>context</code> 옵션에 함수를 할당해줘야 하는데요.\n<code>context</code> 옵션에 할당된 함수는 모든 요청에 대해 호출이 되고 요청 정보를 인자로 받기 때문에 인증 토큰을 검증하는 장소로 적합합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mssing token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>token <span class=\"token operator\">===</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Bearer 인증 방식에서는 <code>Authorization</code> HTTP 헤더로 인증 토큰이 넘어오기 때문에 먼저 <code>req.headers.authorization</code>를 통해 토큰 존재 여부를 체크합니다.\n<code>Authorization</code> HTTP 헤더값이 없는 경우에는 인증 실패 처리를 위해서 <code>AuthenticationError</code> 에러를 던짐니다.\n<code>Authorization</code> HTTP 헤더값이 있다면 맨 앞의 <code>Bearer</code> 부분을 제외한 뒷 부분만을 인증 토큰 문자열로 취합니다.</p>\n<p>다음으로 이 인증 토큰에 매칭되는 사용자가 있는지 <code>users</code> 배열을 검색합니다.\n사용자가 없다면 역시 인증 실패 상황이므로 <code>AuthenticationError</code> 에러를 던짐니다.\n사용자가 있다면 해당 사용자 정보를 컨텍스트에 세팅하여, 추후 리졸버(resover)에서 접근할 수 있도록 해줍니다.</p>\n<p>인증 토큰에 매칭되는 사용자를 검색하는 부분은 아래와 같이 <code>users</code> 변수에 임의의 사용자 데이터를 배열에 저장하였습니다.\n실제 프로젝트였다면 데이터베이스나 회원 관리 시스템을 이용되었을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    token<span class=\"token operator\">:</span> <span class=\"token string\">\"a1b2c3\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@email.com\"</span><span class=\"token punctuation\">,</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    token<span class=\"token operator\">:</span> <span class=\"token string\">\"e4f5g6\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"admin@email.com\"</span><span class=\"token punctuation\">,</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">\"456\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h3>\n<p>GraphQL Playground에서 <code>Authorization</code> 헤더없이 <code>ping</code> 쿼리를 요청해보면 인증 토큰이 없다는 오류 메세지가 응답됩니다.</p>\n<ul>\n<li>요청 쿼리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  ping\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>응답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Context creation failed: empty token\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"UNAUTHENTICATED\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>반면에 유효한 인증 토큰 <code>a1b2c3</code>을 <code>Authorization</code> 헤더에 세팅하여 <code>ping</code> 쿼리를 요청하면 정상적인 데이터가 응답됩니다.</p>\n<ul>\n<li>요청 쿼리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  me <span class=\"token punctuation\">{</span>\n    username\n    email\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>요청 헤더</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"Authorization\": \"Bearer a1b2c3\"\n}</code></pre></div>\n<ul>\n<li>응답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ping\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pong\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이번에는 유효하지 않은 토큰인 <code>xyz789</code>를 <code>Authorization</code> 헤더에 세팅하여 <code>ping</code> 쿼리를 요청하면 토큰이 유효하지 않다는 오류 메세지가 응답됩니다.</p>\n<ul>\n<li>요청 쿼리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  me <span class=\"token punctuation\">{</span>\n    username\n    email\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>요청 헤더</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"Authorization\": \"Bearer xyz789\"\n}</code></pre></div>\n<ul>\n<li>응답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Context creation failed: invalid token\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"UNAUTHENTICATED\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"리졸버-레벨-인증\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%A1%B8%EB%B2%84-%EB%A0%88%EB%B2%A8-%EC%9D%B8%EC%A6%9D\" aria-label=\"리졸버 레벨 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리졸버 레벨 인증</h2>\n<p>컨텍스트 레벨 인증이 보안적으로 매우 강력하기는 하지만 현실 속의 실제 GraphQL API는 이렇게 단순하지 않을 수 있는데요.\nGraphQL API가 제공하는 쿼리(query) 중 일부가 인증없이도 실행이 가능하다면 위와 같이 일괄적으로 차단을 한다면 곤란할 것입니다.</p>\n<p>좋은 예로, 클라이언트가 최초에 인증 토큰을 얻기 위해서 호출하는 쿼리를 들 수 있습니다.\n클라이언트가 아직 인증 토큰을 가지고 있지도 않는데 인증 토큰을 요구한다면 모순적인 상황이 될 것입니다.\n따라서 이렇게 인증 이전에 호출이 필요한 쿼리들은 인증 처리에서 예외가 되야 합니다.</p>\n<p>이를 시뮬레이션 하기 위해서 실습 프로젝트의 GraphQL 스키마(typeDefs)에 사용자와 관련된 쿼리 몇 개와 타입 한 개를 정의해보겠습니다.\n<code>authenticate</code> 쿼리는 <code>username</code>과 <code>password</code>를 입력받아 인증 토큰을 응답합니다.\n<code>me</code> 쿼리는 현재 인증된 사용자의 정보를 응답하고, <code>users</code> 쿼리는 전체 사용자 데이터를 응답합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    authenticate(username: String, password: String): String\n    me: User\n    users: [User]\n  }\n\n  type User {\n    username: String!\n    email: String!\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음으로 위에서 정의한 쿼리를 구현하는 리졸버(resolvers)를 추가합니다.\n<code>me</code> 쿼리와 <code>users</code> 쿼리는 인증이 필요하므로 리졸버 레벨에서 컨텍스트에 검증 로직을 넣어, 컨텍스트 내에 사용자 정보가 없다면 에러를 던지게 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">authenticate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> found <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> username <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> password\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> found <span class=\"token operator\">&amp;&amp;</span> found<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">me</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not authenticated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not authenticated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>컨텍스트 레벨 인증에서 리졸버 레벨 인증으로 변경하려면 컨텍스트 함수에도 약간의 변경이 필요합니다.\n기존처럼 인증 토큰이 넘어오지 않았을 때 무조건 에러를 던지는 대신에, 사용자 정보를 <code>undefined</code>로 세팅을 해줍니다.</p>\n<p>이렇게 설정을 해주면 인증 토큰이 넘어오지 않았거나, 넘어온 인증 토큰이 유효하지 않더라도, 해당 쿼리에 대한 리졸버 함수까지는 호출이 될 것입니다.\n따라서 각 리졸버 함수는 인자로 넘어온 컨텍스트 내의 사용자 정보를 읽어서 차단을 할지 허용을 할지 직접 결정을 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">context</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if (!req.headers.authorization)</span>\n    <span class=\"token comment\">//   throw new AuthenticationError(\"empty token\");</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>authorization<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>token <span class=\"token operator\">===</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// if (!user) throw new AuthenticationError('invalid token');</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"테스트-1\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-1\" aria-label=\"테스트 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h3>\n<p>먼저 GraphQL Playground에서 <code>authenticate</code> 쿼리에 <code>username</code>과 <code>password</code> 변수를 던져 인증 토큰을 얻습니다.</p>\n<ul>\n<li>요청 쿼리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">query</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$username<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> $password<span class=\"token operator\">:</span> String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> $username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> $password<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>요청 변수</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"username\": \"user\",\n  \"password\": \"123\"\n}</code></pre></div>\n<ul>\n<li>응답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"authenticate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a1b2c3\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 쿼리 결과로 얻은 인증 토큰 <code>a1b2c3</code>을 <code>Authorization</code> 헤더로 넘겨서 인증된 사용자의 정보를 얻습니다.</p>\n<ul>\n<li>요청 쿼리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  me <span class=\"token punctuation\">{</span>\n    username\n    email\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>요청 헤더</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"Authorization\": \"Bearer a1b2c3\"\n}</code></pre></div>\n<ul>\n<li>응답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"me\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user@email.com\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"리졸버-레벨-인가\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%A1%B8%EB%B2%84-%EB%A0%88%EB%B2%A8-%EC%9D%B8%EA%B0%80\" aria-label=\"리졸버 레벨 인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리졸버 레벨 인가</h2>\n<p>지금까지 사용자를 인증하는 방법에 대해서 살펴봤으니, 지금부터 인증된 사용자가 어떤 데이터에 접근할 또는 어떤 작업을 수행할 권한이 있는지를 체크하는 인가(authorization)에 대해서 알아보겠습니다.\n모든 사용자의 데이터를 제공하는 <code>users</code> 쿼리는 관리자 권한이 없는 사용자에 의해서 열람이 될 경우 큰 보안 이슈가 발생할 수 있습니다.\n따라서 인증된 사용자가 관리자 권한이 있는지 체크하고, 관리자 권한이 없다면 데이터의 접근을 차단해야 합니다.</p>\n<p>먼저 <code>users</code> 배열에 저장되어 있는 사용자 데이터에 <code>roles</code> 속성을 추가하고, 각 사용자가 가지고 있는 권한 정보를 담고 있는 임의의 배열을 할당합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    token<span class=\"token operator\">:</span> <span class=\"token string\">\"a1b2c3\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@email.com\"</span><span class=\"token punctuation\">,</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n    roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    token<span class=\"token operator\">:</span> <span class=\"token string\">\"e4f5g6\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">\"admin@email.com\"</span><span class=\"token punctuation\">,</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">\"456\"</span><span class=\"token punctuation\">,</span>\n    roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음으로 <code>users</code> 쿼리에 대한 리졸버 함수를 수정합니다.\n컨텍스트에 세팅되어 있는 사용자의 정보가 없으면 인증 오류를 발생시킬 뿐만 아니라, 사용자 정보가 있더라도 관리자 권한을 가지고 있지 않다면 인가 오류를 발생시킵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 생략</span>\n    <span class=\"token function-variable function\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not authenticated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span>roles<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ForbiddenError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not authorized\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"테스트-2\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-2\" aria-label=\"테스트 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h3>\n<p>GraphQL Playground에서 관리자 계정의 토큰인 <code>e4f5g6</code>을 <code>Authorization</code> 헤더에 넘겨 <code>users</code> 쿼리를 요청하면 정상적으로 모든 사용자 데이터가 응답됩니다.</p>\n<ul>\n<li>요청 쿼리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  users <span class=\"token punctuation\">{</span>\n    email\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>요청 헤더</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"Authorization\": \"Bearer e4f5g6\"\n}</code></pre></div>\n<ul>\n<li>응답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"users\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user@email.com\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"admin@email.com\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 일반 사용자 계정의 토큰인 <code>a1b2c3</code>을 <code>Authorization</code> 헤더에 넘겨 <code>users</code> 쿼리를 요청하면 인가 실패 오류가 응답됩니다.</p>\n<ul>\n<li>요청 쿼리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  users <span class=\"token punctuation\">{</span>\n    email\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>요청 헤더</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"Authorization\": \"Bearer a1b2c3\"\n}</code></pre></div>\n<ul>\n<li>응답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"not authorized\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"locations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"column\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"FORBIDDEN\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<iframe src=\"https://codesandbox.io/embed/graphql-apollo-auth-mqrue?fontsize=14\" title=\"graphql-apollo-auth\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"관련-포스트\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EB%A0%A8-%ED%8F%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"관련 포스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 포스트</h2>\n<ul>\n<li><a href=\"/graphql-apollo-server\">Apollo Server를 이용한 초간단 GraphQL 서버 개발</a></li>\n<li><a href=\"/graphql-apollo-server-testing\">GraphQL 서버 테스트 방법 (Apollo Server Testing)</a></li>\n<li><a href=\"/graphql-apollo-server-errors\">GraphQL 서버의 오류 처리 (Apollo Server Error handling)</a></li>\n</ul>","timeToRead":8,"fields":{"slug":"/graphql-apollo-server-auth/","tags":["자바스크립트","JavaScript","GraphQL","Apollo","ApolloServer","authentication","인증","authorization","인가"]},"frontmatter":{"title":"GraphQL 서버의 사용자 인증/인가 (Apollo Server Authentication/Authorization)","date":"Oct 14, 2019"}},"next":{"fields":{"slug":"/graphql-apollo-server-errors/"},"frontmatter":{"title":"GraphQL 서버의 오류 처리 (Apollo Server Error handling)"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}