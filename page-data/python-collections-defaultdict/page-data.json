{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/python-collections-defaultdict/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/react-context/"},"frontmatter":{"title":"React Context 사용법"}},"node":{"html":"<p>파이썬의 내장 자료구조인 사전(dictionary)를 사용하다 보면 어떤 키(key)에 대한 값(value)이 없는 경우에 대한 처리를 해야하는 경우가 자주 발생합니다.\n이번 포스팅에서는 이러한 경우 일반적으로 어떻게 처리를 하는지 살펴보고, 관련해서 파이썬에서 제공하는 몇가지 방법을 알아보도록 하겠습니다.</p>\n<h2 id=\"일반적인-사전-기본값-처리\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EC%82%AC%EC%A0%84-%EA%B8%B0%EB%B3%B8%EA%B0%92-%EC%B2%98%EB%A6%AC\" aria-label=\"일반적인 사전 기본값 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적인 사전 기본값 처리</h2>\n<p>아래 코드는 주어진 단어에 들어있는 각 알파벳 글자의 수를 세어서 사전에 저장해주는 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">count_letters</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> letter <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> counter<span class=\"token punctuation\">:</span>\n            counter<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        counter<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> counter</code></pre></div>\n<p>아래와 같이 호출할 수 있을텐데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">count_letters<span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># {'b': 1, 'a': 3, 'n': 2}</span></code></pre></div>\n<p><code>for</code> 루프 안에 <code>if</code> 조건절을 통해서 <code>counter</code> 사전에 어떤 글자가 키(key)로 존재하지 않는 경우, 해당 키에 대한 기본값을 <code>0</code>으로 세팅해주고 있는데요.\n이러한 코딩 패턴은 파이썬에서 사전을 사용할 때 상당히 자주 접할 수 있는데, 코드 가독성 측면에서는 이렇게 사소한 처리가 주요 흐름을 파악을 하는데 방해가 되기도 합니다.</p>\n<h2 id=\"나은-방법-dictsetdefault\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%80-%EB%B0%A9%EB%B2%95-dictsetdefault\" aria-label=\"나은 방법 dictsetdefault permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나은 방법: dict.setdefault</h2>\n<p>위와 같은 <code>if</code> 조건절을 피할 수 있도록 파이썬의 사전(dictionary) 자료구조는 <code>setdefault</code> 함수를 제공합니다.\n첫번째 인자로 키(key)값, 두번째 인자로 기본값(default value)를 넘기면 되는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">count_letters</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n        counter<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        counter<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> counter</code></pre></div>\n<p>호출하면 동일한 결과를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">count_letters<span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># {'b': 1, 'a': 3, 'n': 2}</span></code></pre></div>\n<p>다만 코드가 깔끔해져서 좋기는데, <code>for</code> 루프 내에서 <code>setdefault</code> 함수가 무조건적으로 항상 호출되는 부분이 좀 마음에 들지 않습니다.</p>\n<h2 id=\"더-나은-방법-collectionsdefaultdict\" style=\"position:relative;\"><a href=\"#%EB%8D%94-%EB%82%98%EC%9D%80-%EB%B0%A9%EB%B2%95-collectionsdefaultdict\" aria-label=\"더 나은 방법 collectionsdefaultdict permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>더 나은 방법: collections.defaultdict</h2>\n<p>파이썬의 내장 모듈인 <code>collections</code>의 <code>defaultdict</code> 클래스는 이러한 경우 사용하면 딱 인데요.\n<code>defaultdict</code> 클래스의 생성자로 기본값을 생성해주는 함수를 넘기면, 모든 키에 대해서 값이 없는 경우 자동으로 생성자의 인자로 넘어온 함수를 호출하여 그 결과값으로 설정해줍니다.</p>\n<p>먼저, <code>collections</code> 모듈의 <code>defaultdict</code> 클래스는 다음과 같이 임포트해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict</code></pre></div>\n<p>이제, 위에서 작성한 코드를 임포트한 <code>defaultdict</code>를 이용해서 개선하면, <code>for</code> 루프로 부터 사전의 기본값 처리 코드를 완전히 제거할 수가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">count_letters</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    counter <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n        counter<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> counter</code></pre></div>\n<p><code>defaultdict</code>로 생성한 사전은 문자열로 출력했을 때 살짝 다르게 나오지만 키를 통해 값을 접근해보면 동일하게 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">count_letters<span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># defaultdict(int, {'b': 1, 'a': 3, 'n': 2})</span>\ncount_letters<span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 3</span></code></pre></div>\n<p>여기서 <code>defaultdict</code> 클래스의 생성자로 <code>int</code> 함수를 넘긴 이유는 <code>int()</code>는 <code>0</code>을 리턴하기 때문입니다.\n람다 함수를 활용해서 다음과 같이 <code>int</code> 함수 대신에 <code>lambda: 0</code>를 넘겨도 동일하게 작동을 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">count_letters</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    counter <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n        counter<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> counter</code></pre></div>\n<h2 id=\"사전-기본값으로-빈-리스트-세팅하기\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84-%EA%B8%B0%EB%B3%B8%EA%B0%92%EC%9C%BC%EB%A1%9C-%EB%B9%88-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\" aria-label=\"사전 기본값으로 빈 리스트 세팅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전 기본값으로 빈 리스트 세팅하기</h2>\n<p><code>collections.defaultdict</code>를 활용할 수 있는 다른 사례로 데이터를 특정 기준에 의해 카테고리로 묶는 경우를 들 수 있습니다.</p>\n<p>예를 들어, 주어진 단어들을 길이에 따라 분류해주는 코드는 다음과 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">group_words</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    grouper <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n        length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n        grouper<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> grouper</code></pre></div>\n<p>이번에는 <code>defaultdict</code> 생성자에 <code>list</code> 함수를 넘겼기 때문에, <code>grouper</code> 사전에 어떤 글자가 키(key)로 존재하지 않는 경우, 해당 키에 대한 기본값을 비어있는 리스트(empty list)로 세팅해줍니다.</p>\n<p>여러 개의 단어를 인자로 넘겨서 함수를 호출해보면 다음과 같이 단어 길이에 따라 단어가 분류됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">group_words<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mango\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pineapple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watermelon\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blueberry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kiwi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"grapefruit\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\ndefaultdict(list,\n            {6: ['banana'],\n             10: ['strawberry', 'watermelon', 'grapefruit'],\n             5: ['mango'],\n             9: ['pineapple', 'blueberry'],\n             4: ['kiwi']})\n\"\"\"</span></code></pre></div>\n<p>만약에 <code>collections.defaultdict</code> 클래스 없이 위 코드를 작성해야했다면 다음과 같이 다소 지저분하게 작성했었을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">group_words</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    grouper <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n        length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> length <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> grouper<span class=\"token punctuation\">:</span>\n            grouper<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        grouper<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> grouper</code></pre></div>\n<h2 id=\"보너스-사전-기본값으로-빈-세트-세팅하기\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EB%84%88%EC%8A%A4-%EC%82%AC%EC%A0%84-%EA%B8%B0%EB%B3%B8%EA%B0%92%EC%9C%BC%EB%A1%9C-%EB%B9%88-%EC%84%B8%ED%8A%B8-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\" aria-label=\"보너스 사전 기본값으로 빈 세트 세팅하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[보너스] 사전 기본값으로 빈 세트 세팅하기</h2>\n<p>한 번 응용을 해볼까요?\n위에서 작성한 코드에서 단어들을 길이에 따라 분류할 때 중복되지 않은 단어만 필요하다면 어떻게 해야할까요?\n<code>defaultdict</code> 생성자에 <code>list</code> 함수 대신에 <code>set</code> 함수를 넘기고, <code>append</code> 함수 대신에 <code>add</code> 함수를 이용해서 단어를 넘기면 됩니다. :)</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">group_words</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    grouper <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">:</span>\n        length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n        grouper<span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> grouper</code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 제가 작성한 전체 코드는 아래에서 직접 확인하고 실행해보실 수 있습니다.</p>\n<p><a href=\"https://dales.link/1bx\">https://dales.link/1bx</a></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬에서 제공하는 <code>dict.setdefault</code> 함수와 <code>collections.defaultdict</code> 클래스를 이용해서 사전에 기본값을 세팅하는 방법에 대해서 알아보았습니다.\n본 포스팅에서 소개한 요령들을 잘 활용해셔서 사전을 사용하실 때 좀 더 읽기쉬운 코드를 작성하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":4,"fields":{"slug":"/python-collections-defaultdict/","tags":["Python","dict","사전","dictionary","setdefault","collections","defaultdict"]},"frontmatter":{"title":"파이썬 사전의 기본값 처리 (dict.setdefault / collections.defaultdict)","date":"Feb 10, 2019"}},"next":{"fields":{"slug":"/graphql-apollo-server/"},"frontmatter":{"title":"Apollo Server를 이용한 초간단 GraphQL 서버 개발"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}