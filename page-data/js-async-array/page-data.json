{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-async-array/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>자바스크립트의 배열은 <code>forEach()</code>, <code>filter()</code>,<code>map()</code>, <code>reduce</code>, <code>every()</code>, <code>some()</code> 등과 같이 콜백 함수를 인자로 받아 배열에 저장되어 있는 모든 원소로 상대로 호출해주는 함수들을 제공합니다.\n이 함수들을 잘 활용하면 소위 함수형 프로그래밍(Functional Programming) 스타일로 코딩을 할 수 있게 되죠.</p>\n<p>그런데 혹시 이러한 자바스크립트의 배열에 제공하는 함수에 비동기 함수를 인자로 넘기면 낭패를 볼 수 있다는 것을 아시나요?\n이번 포스팅에서는 자바스크립트 배열 함수를 통해서 비동기 함수를 호출할 때 조심해야 할 점에서 알아보겠습니다.</p>\n<h2 id=\"논란의-코드\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%9E%80%EC%9D%98-%EC%BD%94%EB%93%9C\" aria-label=\"논란의 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논란의 코드</h2>\n<p>간단한 실습을 위해서 먼저 비동기 함수를 하나 작성해볼까요?\n아래 <code>isSweet()</code> 함수는 인자로 넘어온 이모자가 과일을 나타내면 참을 반환하고 아니면 거짓을 반환합니다.\n좀 억지스럽지만 비동기 함수로 만들기 위해서 일부로 1초의 지연을 주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isSweet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">emoji</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1_000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일부로 1초의 지연을 줌</span>\n  <span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"🍎\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍐\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍊\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍌\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍉\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍇\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍓\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍈\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>emoji<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 자바스크립트 배열의 <code>filter()</code> 함수를 사용하여 과일 이모지의 개수를 세볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> emojis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"👨‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍉\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"👩‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍓\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🧑‍\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> emojis<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isSweet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"과일의 개수: \"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>잉? <code>emojis</code> 배열에는 분명히 과일이 2개 밖에 안 들어있는데, 왜 5개수가 나올까요? 😳</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">과일의 개수:  <span class=\"token number\">5</span></code></pre></div>\n<p>왜 이런 뜻밖의 결과가 발생하는 걸까요? 🤔</p>\n<h2 id=\"디버깅-\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%B2%84%EA%B9%85-\" aria-label=\"디버깅  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디버깅 🪲</h2>\n<p>그럼 <code>async</code>와 <code>await</code> 키워드를 사용해서 같이 디버깅을 좀 해볼까요?</p>\n<blockquote>\n<p><code>async/await</code> 키워드에 대한 자세한 설명은 <a href=\"/js-async-async-await/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<p>콜백 함수 앞에 <code>async</code>를 붙여서 비동기로 선언해주고, <code>await</code> 키워드로 <code>isSweet()</code> 함수의 실행이 끝나기를 명시적으로 기다려보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> emojis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"👨‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍉\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"👩‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍓\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🧑‍\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> emojis<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">emoji</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">await</span> <span class=\"token function\">isSweet</span><span class=\"token punctuation\">(</span>emoji<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"과일의 개수: \"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아쉽게도 결과는 여전히 바뀌지 않을 거에요…</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">과일의 개수:  <span class=\"token number\">5</span></code></pre></div>\n<p>이 번에는 <code>isSweet()</code> 함수의 호출 결과를 <code>sweet</code> 변수에 저장한 다음에 <code>emoji</code>와 함께 로그를 찍어볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> emojis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"👨‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍉\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"👩‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍓\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🧑‍\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> emojis<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">emoji</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sweet <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">isSweet</span><span class=\"token punctuation\">(</span>emoji<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> emoji<span class=\"token punctuation\">,</span> sweet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> sweet<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"과일의 개수: \"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아니, 콜백 함수 내에서는 <code>sweet</code> 값이 예상대로 찍히고 있잖아요? 😮</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">과일의 개수:  <span class=\"token number\">5</span>\n<span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"👨‍\"</span>,\n  sweet: false,\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"🍉\"</span>,\n  sweet: true,\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"👩‍\"</span>,\n  sweet: false,\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"🍓\"</span>,\n  sweet: true,\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"🧑‍\"</span>,\n  sweet: false,\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>도대체 무슨 일이 일어나고 있는거죠? 😱</p>\n<p>앗, 그런데 여기서 말이에요… 로그가 찍힌 순서를 한 번 유심히 살펴보세요.\n과일의 개수가 먼저 찍이고, 그 아래 콜백 함수 내에서 출력하는 내용이 연달아 나오죠?</p>\n<p>이 것을 통해 우리는 <code>filter()</code> 함수가 인자로 넘어온 콜백 함수의 실행이 완전히 종료될 때까지 기다리지 않는다는 것을 알 수 있습니다.\n왜 그럴까요? 🤷‍♀️</p>\n<h2 id=\"자바스크립트의-배열-함수\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%B0%B0%EC%97%B4-%ED%95%A8%EC%88%98\" aria-label=\"자바스크립트의 배열 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 배열 함수</h2>\n<p>자바스크립트에서 비동기 함수는 결국 프라미스(promise)를 반환한다는 사실을 알고 계시죠?</p>\n<blockquote>\n<p>Promise에 대한 자세한 설명은 <a href=\"/js-async-promise/\">별도 포스팅</a>에서 자세히 다루고 있습니다.</p>\n</blockquote>\n<p><code>async</code>와 <code>await</code> 문법은 ES6(ES2015)에 추가되었고, 자바스크립트의 배열 함수는 아주 오래 전부터 사용되었습니다.\n그래서 슬프게도, 자바스크립트의 배열 함수는 비동기 함수가 인자로 넘어왔을 때 대부분의 개발자가 예상하는 대로 작동하지 않습니다.</p>\n<p>자바스크립트의 배열 함수는 비동기 함수가 프라미스를 반환한다는 사실만을 고려합니다.\n그리고 모든 프라미스는 객체이기 때문에 불리언(boolean)으로 형 변환을 하면 참(true)이 됩니다.</p>\n<p>즉, 다음과 같은 과정을 거쳐서 <code>emojis</code> 배열의 모든 원소가 필터링에서 무조건 살아 남는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">emojis<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isSweet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 비동기 함수를 인자로 넘어옴</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">emojis<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">emoji</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">emojis<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">emoji</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"forof\" style=\"position:relative;\"><a href=\"#forof\" aria-label=\"forof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for…of</h2>\n<p>이 문제를 해결하는 가장 간단한 방법은 <code>for...of</code> 문법을 사용해서 배열을 상대로 루프를 도는 것입니다.\n변수에 <code>0</code>을 저장해두고 과일을 나타내는 이모지가 나올 때 마다 하나씩 더하는 거죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> emojis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"👨‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍉\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"👩‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍓\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🧑‍\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> emoji <span class=\"token keyword\">of</span> emojis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sweet <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">isSweet</span><span class=\"token punctuation\">(</span>emoji<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sweet<span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"과일의 개수: \"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드를 실행해보면 의도했던 바와 같이 과일의 개수가 2가 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">과일의 개수:  <span class=\"token number\">2</span></code></pre></div>\n<p>반복문 안에서 각 <code>emoji</code>와 <code>sweet</code> 변수 값도 한 번 찍어보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> emojis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"👨‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍉\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"👩‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍓\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🧑‍\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> emoji <span class=\"token keyword\">of</span> emojis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sweet <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">isSweet</span><span class=\"token punctuation\">(</span>emoji<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> emoji<span class=\"token punctuation\">,</span> sweet <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sweet<span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"과일의 개수: \"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 반복문 내에서 출력하는 내용이 먼저 찍이고, 마지막에 과일의 개수가 찍히는 것을 볼 수 있습니다.\n코드가 원하는 순서대로 실행된다는 증거죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"👨‍\"</span>,\n  sweet: false,\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"🍉\"</span>,\n  sweet: true,\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"👩‍\"</span>,\n  sweet: false,\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"🍓\"</span>,\n  sweet: true,\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  emoji: <span class=\"token string\">\"🧑‍\"</span>,\n  sweet: false,\n<span class=\"token punctuation\">}</span>\n과일의 개수:  <span class=\"token number\">2</span></code></pre></div>\n<p>하지만 전체 코드가 수행되는데 약 5초가 걸리는 것을 알 수 있습니다.\n1초가 걸리는 <code>isSweet()</code> 함수가 순차적으로 5번 수행되기 때문에 당연한 결과죠.</p>\n<p>너무 비효율적인 것 같은데, 좀 더 빨리 실행할 수 있는 방법은 없을까요? 🤔</p>\n<h2 id=\"promiseall\" style=\"position:relative;\"><a href=\"#promiseall\" aria-label=\"promiseall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.all()</h2>\n<p><code>Promise.all()</code> 함수를 사용하면 여러 개의 비동기 함수를 병렬로 실행할 수 있습니다.</p>\n<p>함수의 연쇄 호출을 단계별로 설명해 드리면,</p>\n<ul>\n<li>자바스크립트 배열의 <code>map()</code> 함수를 통해서 각 이모지를 인자로 넘겨서 <code>isSweet()</code> 함수를 호출한 결과로 변환합니다.</li>\n<li>위 결과로 나온 프라미스 배열을 <code>Promise.all()</code> 함수의 인자로 넘겨서 병렬로 비동기 함수를 실행합니다.</li>\n<li>위 결과로 나온 <code>true</code> 또는 <code>false</code>를 담고 있는 배열을 상대로 <code>filter(Boolean)</code> 함수를 호출합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> emojis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"👨‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍉\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"👩‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍓\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🧑‍\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>emojis<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>isSweet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"과일의 개수: \"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드를 실행해보면 역시 의도했던 결과가 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">과일의 개수:  <span class=\"token number\">2</span></code></pre></div>\n<p>전체 코드가 수행되는데는 1초 남짓이 시간이 걸릴 것입니다.\n무려 500%의 성능 향상이죠? 🚀</p>\n<h2 id=\"for-awaitof\" style=\"position:relative;\"><a href=\"#for-awaitof\" aria-label=\"for awaitof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for await…of</h2>\n<p>자바스크립트에 비교적 최근에 추가된 <code>for await...of</code> 문법을 사용해서 동일한 효과를 얻을 수 있습니다.\n위에서 살펴본 <code>for...of</code>와 달리 반복문 내에서 <code>isSweet()</code>의 실행이 끝나기를 기다리자 않기 때문에 <code>Promise.all()</code> 함수를 사용한 것과 비슷한 성능을 기대할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> emojis <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"👨‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍉\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"👩‍\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🍓\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"🧑‍\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sweet <span class=\"token keyword\">of</span> emojis<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>isSweet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sweet<span class=\"token punctuation\">)</span> count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"과일의 개수: \"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">과일의 개수:  <span class=\"token number\">2</span></code></pre></div>\n<p><code>for await...of</code>에 대해서는 추후 별도의 게시물에 자세히 다뤄보도록 하겠습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 자바스크립트의 배열 함수에 비동기 함수를 인자로 넘기면 안 되는 이유와 어떻게 다른 방법으로 안전하게 코드를 짤 수 있는지 살펴보았습니다.</p>\n<p>이 문제는 비단 <code>filter()</code> 함수 뿐만 아니라 <code>forEach()</code>, <code>map()</code>, <code>reduce</code>, <code>every()</code>, <code>some()</code> 등과 같이 콜백 함수를 인자로 받아 배열에 저장되어 있는 모든 원소로 상대로 호출해주는 다른 함수에서도 발생할 수 있어요.\n신경을 쓰지 않으면 실수하기 쉬운 부분이니 각별한 주의가 필요하겠습니다.</p>","timeToRead":5,"fields":{"slug":"/js-async-array/","tags":["JavaScript","async","Promise","ES6","array"]},"frontmatter":{"title":"자바스크립트의 배열 함수에 비동기 함수를 인자로 넘기면 안 되는 이유","date":"Jun 2, 2024"}},"next":{"fields":{"slug":"/definitely-typed/"},"frontmatter":{"title":"Definitely Typed: TypeScript의 타입 정의 저장소"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}