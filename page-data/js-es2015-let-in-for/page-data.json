{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-es2015-let-in-for/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-es2015-const/"},"frontmatter":{"title":"[ES2015] const로 상수 선언하기"}},"node":{"html":"<p><a href=\"/js-es2015-let\">이전 포스트</a>에서 ES2015의 <code>let</code> 키워드에서 대해서 알아보았습니다.<br>\n이번 포스트에서는 for 문에서 <code>let</code>이 어떻게 사용될 수 있는지 살펴보겠습니다.</p>\n<h2 id=\"예제-코드\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C\" aria-label=\"예제 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 코드</h2>\n<p>다음 코드는 사용자 아이디를 받아 가짜 사용자를 담든 후 콜백 함수를 호출하는 비동기 함수입니다.<br>\n마치 DB 연동처럼 <code>setTimeout</code> 함수를 이용하여 1초의 지연을 주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"사용자 #\"</span> <span class=\"token operator\">+</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 아래 코드는 사용자 아이디의 배열을 받아 여러 사용자의 정보를 출력해주는 함수입니다.<br>\n<code>findUsers</code> 함수는 배열의 모든 인덱스에 대해서 루프를 돌면서 <code>findUser</code> 함수를 호출하는데요.<br>\n첫번째 인자로는 사용자 아이디, 두번째 인자로는 콜백 함수를 넘겨주고 있습니다.<br>\n그리고 콜백 함수 내에서는 해당 사용자가 배열의 몇 번째 원소인지와 사용자 정보를 출력하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ids</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> ids<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"번째 사용자를 출력합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"코드-실행\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%8B%A4%ED%96%89\" aria-label=\"코드 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 실행</h2>\n<p>그런데 다음과 같이 인자를 넘겨서 위 함수를 실행을 해보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같이 다소 황당한 출력 결과를 얻게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">3</span> 번째 사용자를 출력합니다.\n<span class=\"token punctuation\">{</span> id: <span class=\"token number\">3</span>, name: <span class=\"token string\">'사용자 #3'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token number\">3</span> 번째 사용자를 출력합니다.\n<span class=\"token punctuation\">{</span> id: <span class=\"token number\">7</span>, name: <span class=\"token string\">'사용자 #7'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token number\">3</span> 번째 사용자를 출력합니다.\n<span class=\"token punctuation\">{</span> id: <span class=\"token number\">29</span>, name: <span class=\"token string\">'사용자 #29'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token number\">3</span> 번째 사용자를 출력합니다.\n<span class=\"token punctuation\">{</span> id: <span class=\"token number\">105</span>, name: <span class=\"token string\">'사용자 #105'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 사용자에 대해서 동일한 <code>3 번째 사용자를 출력합니다.</code>가 출력되었습니다.<br>\n제가 기대했던 결과는 <code>0 번째</code> 부터 <code>3 번째</code>가 차례로 출력되는 것이었는데 말이죠.</p>\n<h2 id=\"심층-분석\" style=\"position:relative;\"><a href=\"#%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D\" aria-label=\"심층 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>심층 분석</h2>\n<p>원인을 알아내기 위해 위 코드를 좀 더 심도있게 분석을 해보겠습니다.<br>\n일단, <code>i</code>를 <code>var</code>를 이용하여 선언하고 있습니다.<br>\n<a href=\"/js-es2015-let\">이전 포스트</a>에서 살펴봤던 것 처럼, <code>var</code>로 변수 선언을 할 경우,<br>\n해당 변수는 자바스크립트 엔진이 해석할 때 함수 최상단으로 hoisting 해버립니다.</p>\n<p>따라서 위 코드는 다음과 같이 해석되어 집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ids</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> ids<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"번째 사용자를 출력합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 코드를 바꿔놓고 보면 원인이 좀 보이시나요?<br>\n동일한 변수 <code>i</code>가 루프를 도는 내내 계속 공유된다는 것을 알 수 있습니다.<br>\n<code>for</code> 문에서 각 콜백 함수를 넘길 시점에는 <code>i</code> 값이 달랐겠지만, 각 콜백 함수가 실행될 시점에는 <code>for</code> 루프가 이미 끝나서 <code>i</code>가 배열의 마지막 원소의 인덱스로 변경된 이후입니다.</p>\n<p>즉, <code>var</code>의 변수 hosting과 콜백 함수의 <code>non blocking</code> 성질이 만나 위와 같은 결과를 만들어냈던 것 입니다.</p>\n<h2 id=\"해결-방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결 방법</h2>\n<p>위 문제는 다음과 같이 <code>var</code> 대신에 <code>let</code>을 이용하여 변수를 선언하면 간단하게 해결이 됩니다.<br>\n<code>let</code>은 변수를 hosting을 하지 않고, block scope을 가지기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ids</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> ids<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"번째 사용자를 출력합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 실행해보면, 다음과 같이 우리가 기대했던 결과가 나오게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0 번째 사용자를 출력합니다.\n{ id: 3, name: &#39;사용자 #3&#39; }\n1 번째 사용자를 출력합니다.\n{ id: 7, name: &#39;사용자 #7&#39; }\n2 번째 사용자를 출력합니다.\n{ id: 29, name: &#39;사용자 #29&#39; }\n3 번째 사용자를 출력합니다.\n{ id: 105, name: &#39;사용자 #105&#39; }</code></pre></div>\n<p>이번에는 <code>for</code> 루프의 매 패스마다 새롭고 <code>i</code>가 선언되어 <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code> 차례로 할당됩니다.<br>\n이렇게 매 패스마다 <code>i</code>는 <code>let</code>으로 선언되었기 때문에 서로 독립된 block scope을 가지게 되며,<br>\n따라서 각 콜백 함수는 서로 다른 <code>i</code> 값을 인자로 받을 수 있게 되었습니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서…</h2>\n<p>이상으로 <code>for</code> 문에서 <code>var</code>를 사용했을 때 발생하는 문제점과 <code>let</code>을 사용하여 해결하는 방법을 알아보았습니다.<br>\n<a href=\"/js-es2015-const\">다음 포스트</a>에서는 ES2015에서 <code>let</code>과 함께 추가된 <code>const</code> 사용법에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let</a><br>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for...in\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for…in</a></p>","timeToRead":3,"fields":{"slug":"/js-es2015-let-in-for/","tags":["JavaScript","자바스크립트","ES2015","ES6"]},"frontmatter":{"title":"[ES2015] let으로 변수 선언하기 2","date":"Feb 19, 2017"}},"next":{"fields":{"slug":"/js-es2015-let/"},"frontmatter":{"title":"[ES2015] let으로 변수 선언하기 1"}}}}}