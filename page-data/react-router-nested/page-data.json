{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/react-router-nested/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-apollo-client/"},"frontmatter":{"title":"[GraphQL] Apollo Client 사용법"}},"node":{"html":"<p><a href=\"/react-router-basic\">지난 포스팅</a>에서 React Router로 기본적인 라우팅 방법을 다루었습니다.\n이번 포스팅에서는 React Router로 중첩 라우팅을 구현하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"중첩-라우팅이란\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A9-%EB%9D%BC%EC%9A%B0%ED%8C%85%EC%9D%B4%EB%9E%80\" aria-label=\"중첩 라우팅이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩 라우팅이란?</h2>\n<p>중첩 라우팅(Nested Routing)이란 라우팅 맵핑을 최상위 컴포넌트 뿐만 아니라 여러 개의 컴포넌트에 걸쳐서 단계별로 정의하는 라우팅 기법입니다.</p>\n<p>예를 들어, 브라우저의 주소 창에 <code>https://www.your-site.com/users</code>라고 입력되었을 때, 유저 목록 페이지가 표시되고, <code>https://www.your-site.com/articles</code>라고 입력되었을 때, 기사 목록 페이지가 표시되는 라우팅은 다음과 같이 React Router를 이용하여 단순하게 구현할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Home<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/users\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Users<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/articles\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Articles<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span></code></pre></div>\n<p>그런데, 만약 기사 목록 페이지 내에서 <code>https://www.your-site.com/articles/1</code>라고 입력되었을 때, 첫 번째 기사에 대한 상세 페이지가 표시되야 하고, <code>https://www.your-site.com/articles/1/comments</code>라고 입력되었을 때, 그 기사에 대한 댓글 목록이 표시되어야 한다면 어떨까요?</p>\n<p>이렇게 앱에서 필요한 모든 경로와 컴포넌트 간의 맵핑을 위와 같이 최상위 컴포넌트에서 이뤄진다면, 앱의 규모가 커짐에 따라 유지 보수가 어려워질 것입니다.\n하지만 각 하위 컴포넌트 레벨에서도 더 하위 경로에 대한 라우팅을 모듈화할 수 있다면, 유지 보수가 쉬워질 뿐만 아니라 전반적으로 좀 더 유연한 라우팅 구현이 가능할 것입니다.</p>\n<h2 id=\"route-props\" style=\"position:relative;\"><a href=\"#route-props\" aria-label=\"route props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Route props</h2>\n<p>중첩 라우팅을 구현하려면 먼저 ReactRouter의 <code>&#x3C;Route></code> 컴포넌트의 <code>component</code> prop으로 넘어온 컴포넌트에 prop으로 어떤 값들이 넘어오는지에 대해서 알아야 합니다.</p>\n<p>예를 들어, 다음과 같이 <code>&#x3C;Route></code> 컴포넌트를 이용해서 <code>/about</code> 경로에 대해서 <code>&#x3C;About></code> 컴포넌트를 맵핑시키게 되면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>About<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span></code></pre></div>\n<p>React Router는 <code>match</code>, <code>location</code>, <code>history</code>라는 3개의 prop을 <code>&#x3C;About></code> 컴포넌트에 넘겨줍니다.\n따라서, 다음과 같이 <code>&#x3C;About></code> 컴포넌트에서는 이 3개의 prop을 읽어서 각 객체가 어떤 데이터를 담고 있는지 렌더링해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">About</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> history <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>pre<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>pre<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>pre<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>history<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> About<span class=\"token punctuation\">;</span></code></pre></div>\n<p>중첩 라우팅을 구현에는 이 중에서도 특히 매칭 정보를 담고 있는 <code>match</code> prop이 사용되는데, <code>match.url</code>은 <code>&#x3C;Link></code> 컴포넌트를 위해 사용되고 <code>match.path</code>는 <code>&#x3C;Route></code> 컴포넌트를 위해 사용됩니다.\n<code>match.url</code>과 <code>match.path</code>의 차이는 <code>match.url</code>는 실제로 매칭된 URL 문자열(ex. <code>/articles/1</code>)을 담고 있는 반면에, <code>match.path</code>은 매칭에 사용된 경로의 패턴(ex. <code>/articles/:id</code>)을 담고 있습니다.</p>\n<h2 id=\"중첩-라우팅-구현\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A9-%EB%9D%BC%EC%9A%B0%ED%8C%85-%EA%B5%AC%ED%98%84\" aria-label=\"중첩 라우팅 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩 라우팅 구현</h2>\n<p>그럼, React Router를 이용해서 직접 중첩 라우팅을 구현해보도록 하겠습니다.\n<code>/users</code> 경로에 대해서는 유저 목록 페이지를 보여주고, <code>/users/&#x3C;유저 아이디></code> 경로에 대해서는 유저 상세 페이지를 보여주려고 합니다.\n<code>&#x3C;App></code> 컴포넌트를 통해 <code>/users</code> 경로에 대해서 <code>&#x3C;Users></code> 컴포넌트로 1차 라우팅하고, <code>&#x3C;Users></code> 컴포넌트를 통해 2차 라우팅을 하도록 하겠습니다.</p>\n<h3 id=\"app-컴포넌트\" style=\"position:relative;\"><a href=\"#app-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"app 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App 컴포넌트</h3>\n<p>먼저 최상위 컴포넌트인 <code>&#x3C;App></code>에서 각 메뉴의 경로에 대응되는 컴포넌트를 맵핑해주는 기본 라우팅을 구현합니다.</p>\n<blockquote>\n<p>React Router의 기본적인 사용 방법은 <a href=\"/react-router-basic\">관련 포스팅</a>를 참고바랍니다.</p>\n</blockquote>\n<p>여기서 <code>/users</code> 경로에는 <code>&#x3C;Users></code> 컴포넌트를 맵핑해주었으며, 이 <code>&#x3C;Users></code> 컴포넌트 내부에서 <code>/users</code>의 하위 경로에 대한 라우팅을 해줄 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> Switch<span class=\"token punctuation\">,</span> BrowserRouter <span class=\"token keyword\">as</span> Router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Home\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> About <span class=\"token keyword\">from</span> <span class=\"token string\">\"./About\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Users <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Users\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> NotFound <span class=\"token keyword\">from</span> <span class=\"token string\">\"./NotFound\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>header<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/users\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>Users<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>main<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Home<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>About<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/users\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Users<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>NotFound<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"users-컴포넌트\" style=\"position:relative;\"><a href=\"#users-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"users 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Users 컴포넌트</h3>\n<p><code>Users</code> 디렉터리를 생성하고, 그 안에 <code>index.js</code> 파일을 생성하고, 다음과 같이 <code>&#x3C;Users></code> 컴포넌트를 작성합니다.\n<code>&#x3C;Users></code> 컴포넌트는 <code>&#x3C;Route></code> 컴포넌트의 <code>component</code> prop의 인자로 넘어갔기 때문에 위에서 설명드린 3개의 props를 가지고 있습니다.\n이 중에서 <code>match</code> prop를 읽어, <code>match.path</code> 값을 2개의 내부 <code>&#x3C;Route></code> 컴포넌트를 추가할 때 사용합니다.</p>\n<p>첫 번째 <code>&#x3C;Route></code> 컴포넌트는 <code>/users</code> 경로에 유저 목록 페이지를 위한 <code>&#x3C;UserList></code> 컴포넌트를 맵핑하며,\n두 번째 <code>&#x3C;Route></code> 컴포넌트는 <code>/users/:id</code> 경로에 유저 상세 페이지를 위한 <code>&#x3C;UserDetail></code> 컴포넌트를 맵핑합니다.</p>\n<p>여기서 첫 번째 <code>&#x3C;Route></code> 컴포넌트에 <code>exact</code> prop을 사용한 이유는 <code>/users</code> 경로를 정확히 매칭하고 위함입니다.\n<code>exact</code> prop 없을 경우, <code>/users</code>로 시작하는 모든 경로가 매칭되어, 유저 상세 페이지가 표시될 때, 유저 목록 페이지도 항상 같이 표시되게 됩니다. (이런 UI를 원할 때는 <code>exact</code>prop을 사용하지 않으면 되겠죠?)</p>\n<p><code>/users/:id</code> 경로에서 <code>:id</code> 부분은 URL 파라미터를 정의할 때 사용하는 React Router의 문법입니다.\n경로에 이와 같이 URL 파라미터가 포함된 경우, 패턴 매칭이 되어 <code>/users/1</code>, <code>/users/a</code> 등이 모두 매칭이 되며, 해당 파라미터는 변수화되어 맵핑된 컴포넌트에서 <code>match.params.id</code>와 같이 읽어올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> UserList <span class=\"token keyword\">from</span> <span class=\"token string\">\"./UserList\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> UserDetail <span class=\"token keyword\">from</span> <span class=\"token string\">\"./UserDetail\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Users</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Users<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>match<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">}</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>UserList<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/:id</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>UserDetail<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Users<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"userlist-컴포넌트\" style=\"position:relative;\"><a href=\"#userlist-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"userlist 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UserList 컴포넌트</h3>\n<p><code>Users</code> 디렉터리 안에 <code>&#x3C;UserList></code> 컴포넌트를 작성합니다.\n유저 목록 페이지를 렌더링하는 <code>&#x3C;UserList></code> 컴포넌트도 역시 <code>&#x3C;Route></code> 컴포넌트의 <code>component</code> prop의 인자로 넘어갔기 때문에 <code>match</code> prop을 가집니다.\n여기서는 React Router의 <code>&#x3C;Link></code> 컴포넌트를 이용해서, 각 유저의 상세 페이지로 이동하는 링크를 만듭니다.</p>\n<p>이동할 경로는 <code>match.url</code> 뒤에 각 유저의 <code>id</code>를 붙여서 <code>&#x3C;Link></code> 컴포넌트의 <code>to</code> prop에 넘겨줍니다.\n<code>match.path</code> 대신에 <code>match.url</code>을 사용해야하는 이유는 링크를 걸 때 경로 문자열이 아닌 경로 패턴을 사용하면 URL 파라미터가 포함될 수 있기 때문입니다.\n<code>&#x3C;UserList></code> 컴포넌트의 경우에는 <code>match.path</code>와 <code>match.url</code>이 모두 <code>/users</code>이기 때문에 문제가 되지는 않지만, 더 하위 컴포넌트에서는 문제가 될 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./data.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">UserList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>User List<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> UserList<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"userdetail-컴포넌트\" style=\"position:relative;\"><a href=\"#userdetail-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"userdetail 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UserDetail 컴포넌트</h3>\n<p><code>Users</code> 디렉터리 안에 <code>&#x3C;UserDetail></code> 컴포넌트를 작성합니다.\n유저 상세 페이지를 렌더링하는 <code>&#x3C;UserDetail></code> 컴포넌트에서는 <code>match</code> prop 뿐 만 아니라 <code>history</code> prop도 사용합니다.\n먼저 <code>match.params</code>를 통해 경로에 포함되어 있는 URL 파라미터를 읽어 오는데, 경로가 <code>/users/1</code>일 경우, <code>match.params</code>에 <code>{id: \"1\"}</code>이 할당됩니다.\n따라서 <code>match.params.id</code> 값은 <code>1</code>이 되며, 이 값으로 유저를 조회하여 상세 정보를 렌더링합니다.</p>\n<p>유저 목록 페이지로 다시 돌아가기 위한 버튼에는 <code>history</code> prop의 <code>goBack()</code> 함수를 사용하였습니다.\n참고로, <code>history</code> prop은 브라우저의 이력 정보와 관련 유틸리티 함수를 가지고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./data.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">UserDetail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match<span class=\"token punctuation\">,</span> history <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> match<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>User Detail<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dt<span class=\"token operator\">></span>id<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dt<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dd<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dd<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dt<span class=\"token operator\">></span>name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dt<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dd<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dd<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> history<span class=\"token punctuation\">.</span><span class=\"token function\">goBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Back<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> UserDetail<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h3>\n<p>이상으로 React Router로 중첩 라우팅을 구현하는 방법에 대해서 자세히 알아보았습니다.\n전체 코드는 아래에서 올려두었으니 참고 부탁드립니다.</p>\n<iframe src=\"https://stackblitz.com/edit/react-router-nested?embed=1&file=Users/index.js\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h3 id=\"관련-포스팅\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EB%A0%A8-%ED%8F%AC%EC%8A%A4%ED%8C%85\" aria-label=\"관련 포스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 포스팅</h3>\n<ul>\n<li><a href=\"/react-router-authentication\">React Router로 사용자 인증하기 (로그인/로그아웃)</a></li>\n</ul>","timeToRead":7,"fields":{"slug":"/react-router-nested/","tags":["JavaScript","자바스크립트","React","리액트","ReactRouter","match","location","history"]},"frontmatter":{"title":"React Router로 중첩 라우팅 하기","date":"Aug 10, 2019"}},"next":{"fields":{"slug":"/graphql-react-apollo-testing/"},"frontmatter":{"title":"[GraphQL] Apollo Client를 사용하는 React 컴포넌트 테스트하기 (MockedProvider)"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}