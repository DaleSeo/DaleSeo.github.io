{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-passport-bearer/","result":{"pageContext":{"previous":null,"node":{"html":"<p>이번 포스팅에서는 Passport.js라는 자바스크립트 프레임워크를 사용하여 Bearer 토큰 기반 API 인증을 구현해보겠습니다..</p>\n<blockquote>\n<p>본 포스팅의 예제 코드는 ES 모듈 문법을 사용하여 작성되었습니다. Node.js에서 ES 모듈을 사용하는 방법은 <a href=\"/js-node-es-modules/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"bearer-토큰이란\" style=\"position:relative;\"><a href=\"#bearer-%ED%86%A0%ED%81%B0%EC%9D%B4%EB%9E%80\" aria-label=\"bearer 토큰이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bearer 토큰이란?</h2>\n<p>Bearer 토큰은 HTTP 요청에서 인증 정보를 전달하는 방법으로 클라이언트가 서버에 접근할 때 인증을 위해 널리 사용됩니다.\n일반적으로 클라이언트가 서버에 요청을 보낼 때 HTTP 요청의 <code>Authorization</code> 헤더에 <code>Bearer &#x3C;인증 토큰></code>의 형태로 담아서 전송합니다.\n서버는 이 인증 토큰 값을 읽고 유효성을 검증한 결과에 따라서 요청을 처리할지 거부할지 판단하게 됩니다.</p>\n<p>Bearer 토큰은 OAuth 인증 프로토콜에서 뿐만 아니라 JWT(Json Web Token) 기반 인증에서도 사용되고 있습니다.</p>\n<blockquote>\n<p>OAuth나 JWT에 대한 내용은 <a href=\"/?tag=OAuth\">OAuth 태그</a>와 <a href=\"/?tag=JWT\">JWT 태그</a>를 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"expressjs-패키지-설치\" style=\"position:relative;\"><a href=\"#expressjs-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"expressjs 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express.js 패키지 설치</h2>\n<p>자바스크립트로 서버 애플리케이션을 개발할 때 가장 대중적으로 사용되는 Express.js 프레임워크를 사용하여 예제 코드를 작성하려고 합니다.</p>\n<p>따라서 먼저 Express.js를 패키지를 npm을 이용하여 설치해야겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i express</code></pre></div>\n<h2 id=\"expressjs-서버-앱-작성\" style=\"position:relative;\"><a href=\"#expressjs-%EC%84%9C%EB%B2%84-%EC%95%B1-%EC%9E%91%EC%84%B1\" aria-label=\"expressjs 서버 앱 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express.js 서버 앱 작성</h2>\n<p>Express.js를 이용하여 <code>GET http://localhost:3000/</code>를 요청하면 <code>Hello, World!</code>를 응답하는 초간단 앱을 작성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server is listening on port 3000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"passportjs-패키지-설치\" style=\"position:relative;\"><a href=\"#passportjs-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"passportjs 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Passport.js 패키지 설치</h2>\n<p>Passport.js로 Bearer 토큰 기반 인증을 구현하려면 <code>passport</code>와 <code>passport-http-bearer</code> 이렇게 2개의 패키지가 필요한데요.\nPassport.js는 사용자가 설치해야하는 코드를 최소화시킬 수 있도록 모듈화되어 설계되어 있기 때문에 프레임워크 자체에 대한 패키지와 더불어 인증 전략(strategy) 패키지를 별도로 설치해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i passport passport-http-bearer</code></pre></div>\n<h2 id=\"passportjs-인증-전략-설정\" style=\"position:relative;\"><a href=\"#passportjs-%EC%9D%B8%EC%A6%9D-%EC%A0%84%EB%9E%B5-%EC%84%A4%EC%A0%95\" aria-label=\"passportjs 인증 전략 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Passport.js 인증 전략 설정</h2>\n<p>이제 위에서 설치한 HTTP Bearer 인증 전략을 Passport.js 프레임워크가 사용할 수 있도록 설정해야하는데요.\n이를 위해서는 <code>passport.use()</code> 함수에 어떻게 인증을 할지를 구현하여 전달해줘야 합니다.</p>\n<p><code>passport-http-bearer</code> 패키지의 <code>BearerStrategy</code> 클래스의 생성자는 콜백(callback) 함수를 인자로 받는데요.\n첫 번째 인자로 HTTP 요청의 <code>Authorization</code> 헤더에 담겨있는 Bearer 토큰을 읽어서 전달해줍니다.\n(우리가 이 부분을 직접 구현하지 않아도 되니 엄청 편하죠?)</p>\n<p>이 콜백 함수의 두 번째 인자인 <code>done()</code> 함수를 이용하여 우리는 토큰이 유효한지 검증하는 코드를 작성할 수 있습니다.\n토큰이 유효한 경우에는 <code>done(null, 인증된 사용자 정보)</code>를 호출하고, 토큰이 유효하지 않은 경우에는 <code>done(null, false)</code>를 호출하면 되지요.\n뿐만 아니라 토큰 검증 과정에서 예외적인 상황이 발생하면 <code>done()</code> 함수의 첫 번째 인자로 에러 객체를 넘길 수도 있습니다.</p>\n<p>Passport.js가 인증 성공 시 <code>done(null, 인증된 사용자 정보)</code>를 통해 전달받은 사용자 정보는 최종적으로 HTTP 요청의 <code>user</code> 속성으로 추가해주게 되어 있습니다.\n그러므로 요청 핸들러(handler)에서는 필요하다면 이 사용자 정보를 읽어서 활용할 수 있는 것이지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> passport <span class=\"token keyword\">from</span> <span class=\"token string\">\"passport\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> BearerStrategy <span class=\"token keyword\">from</span> <span class=\"token string\">\"passport-http-bearer\"</span><span class=\"token punctuation\">;</span>\n\npassport<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">BearerStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token<span class=\"token punctuation\">,</span> done</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">===</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>최대한 간단한 예제를 위해서 Bearer 토큰이 <code>1234</code>일 때만 토큰이 유효하다고 판단되도록 구현해보았습니다. (말도 안되죠? 😅)</p>\n<p>실제 애플리케이션에션에서는 사용하시는 인증 매커니즘에 따라 다양한 방식으로 구현이 될 것입니다.\n예를 들어, Bearer 토큰으로 DB를 조회할 수도 있고, OAuth를 사용하고 있다면 원격 전송할 수도 있고, JWT 토큰이라면 디코딩한 후 서명을 검증해야할 것입니다.</p>\n<h2 id=\"passportjs-미들웨어-사용\" style=\"position:relative;\"><a href=\"#passportjs-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4-%EC%82%AC%EC%9A%A9\" aria-label=\"passportjs 미들웨어 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Passport.js 미들웨어 사용</h2>\n<p>다음으로 유효한 Bearer 토큰과 함께 들어온 요청만 처리하도록 Express.js 앱을 수정해줘야 하는데요.\n이 작업은 <code>passport.authenticate()</code> 함수를 통해서 얻은 미들웨어(middleware)로 이루어집니다.</p>\n<p><code>passport.authenticate()</code> 함수의 첫 번째 인자로 HTTP Bearer 인증 전략의 이름인 <code>bearer</code>를 넘기고, 두 번째 인자의 <code>session</code> 옵션을 <code>false</code>로 줘서 Passport.js가 사용자 세션을 만들지 않도록 해줍니다.\n웹사이트 인증과 달리 API 인증은 일반적으로 클라이언트가 HTTP 요청을 할 때마다 Bearer 토큰을 보내기 때문입니다.</p>\n<p>이렇게 <code>passport.authenticate()</code> 함수가 반환한 미들웨어는 Express.js에서 다른 미들웨어를 사용하는 방식과 동일하게 사용할 수 있는데요.\n즉, <code>app.use()</code>를 사용하여 여러 라우트(route)에 일괄 적용할 수도 있고, <code>app.get()</code>이나 <code>app.post()</code> 등을 사용하여 특정 라우트에만 적용할 수도 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span>\n  passport<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> session<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>저는 예제에서 <code>GET /api</code> 라우트만 인증이 되도록 코드를 작성해보았습니다.\n이제 <code>/api</code> 경로로 <code>GET</code> 요청이 들어오면 <code>passport.authenticate()</code> 메소드를 통해 Bearer 인증이 시도될 것입니다.\n인증에 성공하면 (위에서 <code>done</code> 함수의 두 번째 인자로 반환했었던) 사용자 정보가 응답되고, 인증에 실패하면 <code>Unauthorized</code>가 응답되야 합니다.</p>\n<h2 id=\"api-인증-테스트\" style=\"position:relative;\"><a href=\"#api-%EC%9D%B8%EC%A6%9D-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"api 인증 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API 인증 테스트</h2>\n<p>터미널에서 <code>curl</code> 커맨드를 사용해서 API 인증이 정상적으로 되는지 간단한 테스트를 진행해보도록 하겠습니다.</p>\n<blockquote>\n<p>터미널 상에서 간편하게 사용할 수 있는 HTTP 클라이언트인 <code>curl</code> 커맨드에 대해서는 <a href=\"/curl/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<p>먼저 그냥 API를 호출해보면 인증이 실패하여 <code>401 Unauthorized</code>가 응답되네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -i http://localhost:3000/api\nHTTP/1.1 <span class=\"token number\">401</span> Unauthorized\nX-Powered-By: Express\nWWW-Authenticate: Bearer <span class=\"token assign-left variable\">realm</span><span class=\"token operator\">=</span><span class=\"token string\">\"Users\"</span>\nDate: Wed, 05 Apr <span class=\"token number\">2023</span> 02:06:37 GMT\nConnection: keep-alive\nKeep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\nContent-Length: <span class=\"token number\">12</span>\n\nUnauthorized%</code></pre></div>\n<p>이번에는 Bearer 토큰으로 빈 문자열을 넘기면 잘못된 요청으로 <code>400 Bad Request</code>가 응답됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Authorization: Bearer\"</span> -i http://localhost:3000/api\nHTTP/1.1 <span class=\"token number\">400</span> Bad Request\nX-Powered-By: Express\nDate: Wed, 05 Apr <span class=\"token number\">2023</span> 02:08:00 GMT\nConnection: keep-alive\nKeep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\nContent-Length: <span class=\"token number\">11</span>\n\nBad Request%</code></pre></div>\n<p>이번에는 bearer 토큰으로 <code>1234</code>를 넘겨보니 인증에 성공하여 사용자 정보와 함께 <code>200 OK</code>가 응답됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Authorization: Bearer 1234\"</span> -i http://localhost:3000/api\nHTTP/1.1 <span class=\"token number\">200</span> OK\nX-Powered-By: Express\nContent-Type: application/json<span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>utf-8\nContent-Length: <span class=\"token number\">25</span>\nETag: W/<span class=\"token string\">\"19-SnBOKjxk++SjUaaeE9z3p1zVT/o\"</span>\nDate: Wed, 05 Apr <span class=\"token number\">2023</span> 02:09:21 GMT\nConnection: keep-alive\nKeep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"email\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">}</span>%</code></pre></div>\n<p>마지막으로 bearer 토큰으로 <code>5678</code>를 넘겨보니 인증에 실패하여 <code>401 Unauthorized</code>가 응답되네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -H <span class=\"token string\">\"Authorization: Bearer 5678\"</span> -i http://localhost:3000/api\nHTTP/1.1 <span class=\"token number\">401</span> Unauthorized\nX-Powered-By: Express\nWWW-Authenticate: Bearer <span class=\"token assign-left variable\">realm</span><span class=\"token operator\">=</span><span class=\"token string\">\"Users\"</span>, <span class=\"token assign-left variable\">error</span><span class=\"token operator\">=</span><span class=\"token string\">\"invalid_token\"</span>\nDate: Wed, 05 Apr <span class=\"token number\">2023</span> 02:10:19 GMT\nConnection: keep-alive\nKeep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\nContent-Length: <span class=\"token number\">12</span>\n\nUnauthorized%</code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>실습 프로젝트의 코드는 아래에서 직접 확인하고 실행해볼 수 있습니다.</p>\n<iframe src=\"https://stackblitz.com/edit/js-passport-bearer?ctl=1&embed=1&file=src/app.service.ts\"\nstyle=\"width:100%; height:800px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Passport.js 프레임워크를 이용하여 Express.js 앱에 Bearer 토큰 기반 API 인증을 적용해보았습니다.\n직접 구현하기는 부담스러울 수 있는 API 인증을 Passport.js를 활용하셔서 간단한 코드로 안전하게 구현하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/js-passport-bearer/","tags":["JavaScript","authentication","security"]},"frontmatter":{"title":"Passport.js로 Bearer 토큰 기반 API 인증 구현하기","date":"Apr 5, 2023"}},"next":{"fields":{"slug":"/creativecommons/"},"frontmatter":{"title":"저작권 보호와 크리에이티브 커먼즈 라이선스"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}