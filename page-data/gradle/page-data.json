{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/gradle/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-innerhtml-innertext-textcontent/"},"frontmatter":{"title":"innerHTML, innerText, textContent"}},"node":{"html":"<p>Gradle은 Java와 Kotlin과 같이 JVM에서 돌아가는 프로그래밍 언어에서 거의 표준으로 자리집은 빌드 도구입니다.\n이번 포스팅에서는 Kotlin 개발자 분들을 위해서 Gradle에 대해 간단히 소개해드리도록 하겠습니다.</p>\n<p><img src=\"https://res.cloudinary.com/daleseo/image/upload/v1739152844/gradle-basic.png\" alt=\"Gradle Basic\"></p>\n<p>(출처: <a href=\"https://docs.gradle.org/current/userguide/gradle_basics.html\">https://docs.gradle.org/current/userguide/gradle_basics.html</a>)</p>\n<h2 id=\"기존-프로젝트\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"기존 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 프로젝트</h2>\n<p>기존 Kotlin 프로젝트에 합류하시는 개발자이시라면 이미 Gradle로 빌드를 하고 있을 확률이 매우 높은데요.\n이미 Gradle가 빌드 도구로 설정되어 있는 프로젝트에서는 Gradle을 설치에 대해서 따로 신경쓰실 필요가 없습니다.</p>\n<p>다음과 같이 프로젝트의 최상위 경로에 <code>gradle</code> 폴더와 <code>gradlew</code> 파일과 <code>gradlew.bat</code> 파일이 존재한다면 해당 프로젝트는 이미 Gradle을 쓰고 있다고 보시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">├── gradle\n│   ├── libs.versions.toml\n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradlew\n├── gradlew.bat</code></pre></div>\n<p>그래도 한 번 더 확인을 해보시려면 간단하게 버전을 확인해보세요.\nMacOS와 같은 리눅스 계열 운영 체제에서는 쉘(shell) 스크립트를 담고 있는 <code>gradlew</code> 파일을 실행하고, 윈도우즈 운영 체제에서는 배치(batch) 스크립트를 담고 있는 <code>gradlew.bat</code> 파일을 실행하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./gradlew <span class=\"token parameter variable\">-v</span>\n\n------------------------------------------------------------\nGradle <span class=\"token number\">8.12</span>.1\n------------------------------------------------------------\n\nBuild time:    <span class=\"token number\">2025</span>-01-24 <span class=\"token number\">12</span>:55:12 UTC\nRevision:      0b1ee1ff81d1f4a26574ff4a362ac9180852b140\n\nKotlin:        <span class=\"token number\">2.0</span>.21\nGroovy:        <span class=\"token number\">3.0</span>.22\nAnt:           Apache Ant<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> version <span class=\"token number\">1.10</span>.15 compiled on August <span class=\"token number\">25</span> <span class=\"token number\">2024</span>\nLauncher JVM:  <span class=\"token number\">23.0</span>.2 <span class=\"token punctuation\">(</span>Homebrew <span class=\"token number\">23.0</span>.2<span class=\"token punctuation\">)</span>\nDaemon JVM:    /opt/homebrew/Cellar/openjdk/23.0.2/libexec/openjdk.jdk/Contents/Home <span class=\"token punctuation\">(</span>no JDK specified, using current Java home<span class=\"token punctuation\">)</span>\nOS:            Mac OS X <span class=\"token number\">15.3</span> aarch64</code></pre></div>\n<p>여기서 <code>gradle</code> 명령어를 바로 실행하지 않고, 프로젝트의 최상위 경로에 있는 <code>gradlew</code> 파일이나 <code>gradlew.bat</code> 파일을 실행하는 이유는 Gradle Wrapper를 쓰기 위함인데요.\n이 부분에 대해서는 아래에서 좀 더 자세히 설명드리도록 하겠습니다.</p>\n<h2 id=\"gradle-설치\" style=\"position:relative;\"><a href=\"#gradle-%EC%84%A4%EC%B9%98\" aria-label=\"gradle 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gradle 설치</h2>\n<p>새로운 프로젝트를 시작하시거나, 기존 프로젝트의 빌드 도구를 Ant나 Maven에서 Gradle로 바꿔야 하는 경우에는 컴퓨터에 Gradle을 설치해줘야 합니다.</p>\n<p>MacOS에서는 Homebrew를 통해서 손쉽게 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> gradle</code></pre></div>\n<p>그 밖에 운영체제에서는 <a href=\"https://gradle.org/releases/\">여기</a>에서 설치 파일을 다운로드 받은 후에 설치할 수 있습니다.</p>\n<h2 id=\"프로젝트-생성\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 생성</h2>\n<p>Gradle은 손쉽게 JVM 언어로 프로젝트를 생성할 수 있도록 CLI 명령어를 제공합니다.\n터미널에서 <code>gradle init</code> 실행하면 나오는 몇 가지 질문에만 답변하면 뚝딱 프로젝트가 만들어집니다.</p>\n<p>예를 들어, <code>our-gradle</code>이라는 빈 디렉토리를 만들고, 그 안 Kotlin 프로젝트를 만들어볼까요?\n언어를 선택하는 질문에만 Kotlin으로 답변하고 나머지 질문에서는 모두 그냥 엔터 키를 눌러서 기본 값을 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> our-gradle <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> our-gradle\n$ gradle init\nStarting a Gradle Daemon <span class=\"token punctuation\">(</span>subsequent builds will be faster<span class=\"token punctuation\">)</span>\n\nSelect <span class=\"token builtin class-name\">type</span> of build to generate:\n  <span class=\"token number\">1</span>: Application\n  <span class=\"token number\">2</span>: Library\n  <span class=\"token number\">3</span>: Gradle plugin\n  <span class=\"token number\">4</span>: Basic <span class=\"token punctuation\">(</span>build structure only<span class=\"token punctuation\">)</span>\nEnter selection <span class=\"token punctuation\">(</span>default: Application<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\nSelect implementation language:\n  <span class=\"token number\">1</span>: Java\n  <span class=\"token number\">2</span>: Kotlin\n  <span class=\"token number\">3</span>: Groovy\n  <span class=\"token number\">4</span>: Scala\n  <span class=\"token number\">5</span>: C++\n  <span class=\"token number\">6</span>: Swift\nEnter selection <span class=\"token punctuation\">(</span>default: Java<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token number\">2</span>\n\nEnter target Java version <span class=\"token punctuation\">(</span>min: <span class=\"token number\">7</span>, default: <span class=\"token number\">21</span><span class=\"token punctuation\">)</span>:\n\nProject name <span class=\"token punctuation\">(</span>default: our-gradle<span class=\"token punctuation\">)</span>:\n\nSelect application structure:\n  <span class=\"token number\">1</span>: Single application project\n  <span class=\"token number\">2</span>: Application and library project\nEnter selection <span class=\"token punctuation\">(</span>default: Single application project<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\nSelect build script DSL:\n  <span class=\"token number\">1</span>: Kotlin\n  <span class=\"token number\">2</span>: Groovy\nEnter selection <span class=\"token punctuation\">(</span>default: Kotlin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\nSelect <span class=\"token builtin class-name\">test</span> framework:\n  <span class=\"token number\">1</span>: kotlin.test\n  <span class=\"token number\">2</span>: JUnit Jupiter\nEnter selection <span class=\"token punctuation\">(</span>default: kotlin.test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\nGenerate build using new APIs and behavior <span class=\"token punctuation\">(</span>some features may change <span class=\"token keyword\">in</span> the next minor release<span class=\"token punctuation\">)</span>? <span class=\"token punctuation\">(</span>default: no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>yes, no<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token operator\">></span> Task :init\nLearn <span class=\"token function\">more</span> about Gradle by exploring our Samples at https://docs.gradle.org/8.12.1/samples/sample_building_kotlin_applications.html\n\nBUILD SUCCESSFUL <span class=\"token keyword\">in</span> 47s\n<span class=\"token number\">1</span> actionable task: <span class=\"token number\">1</span> executed</code></pre></div>\n<p>명령어 실행이 끝나면 프로젝트 디렉토리 구조가 다음과 같은 모습이 될 것입니다.\n바로 애플리케이션 코드와 테스트 코드를 작성할 수 있도록 전형적인 Kotlin 프로젝트의 구조가 잡히게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ tree\n<span class=\"token builtin class-name\">.</span>\n├── app\n│   ├── build.gradle.kts\n│   └── src\n│       ├── main\n│       │   ├── kotlin\n│       │   │   └── org\n│       │   │       └── example\n│       │   │           └── App.kt\n│       │   └── resources\n│       └── <span class=\"token builtin class-name\">test</span>\n│           ├── kotlin\n│           │   └── org\n│           │       └── example\n│           │           └── AppTest.kt\n│           └── resources\n├── gradle\n│   ├── libs.versions.toml\n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradle.properties\n├── gradlew\n├── gradlew.bat\n└── settings.gradle.kts\n\n<span class=\"token number\">15</span> directories, <span class=\"token number\">10</span> files</code></pre></div>\n<h2 id=\"gradle-실행\" style=\"position:relative;\"><a href=\"#gradle-%EC%8B%A4%ED%96%89\" aria-label=\"gradle 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gradle 실행</h2>\n<p>위에서 Gradle이 이미 사용하고 있는 프로젝트에서 별다른 설치 작업 없이 그냥 바로 Gradle을 사용할 수 있었는데요.\n그 이유는 바로 프로젝트에 이미 설정되어 있는 Gradle Wrapper를 통해서 Gradle을 실행했기 때문입니다.</p>\n<p>Gradle은 프로젝트를 생성할 때를 제외하고는 Gradle Wrapper를 통해서 사용하는 것이 권장되는데요.\n그래야 프로젝트에서 협업하는 모든 개발자가 동일한 버전의 Gradle을 사용하는 것이 보장되기 때문입니다.</p>\n<ul>\n<li>권장되지 않음 🙅‍♂️🙅‍♀️</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gradle build</code></pre></div>\n<ul>\n<li>권장 됨 (리눅스 계열) 🙆‍♂️</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./gradlew build</code></pre></div>\n<ul>\n<li>권장 됨 (윈도우즈) 🙆‍♀️</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ .<span class=\"token punctuation\">\\</span>gradlew.bat build</code></pre></div>\n<p>IntelliJ나 Android Studio와 같이 Gradle과 통합이 잘 되어 있는 코드 편집기를 사용하신다면 Gradle을 실행하기 위한 자체적인 UI를 제공합니다.\n그래서 터미널을 통해서 Gradle을 실행하기보다는 이러한 자체 UI를 활용하는 경우도 많습니다.</p>\n<h2 id=\"gradle-설정\" style=\"position:relative;\"><a href=\"#gradle-%EC%84%A4%EC%A0%95\" aria-label=\"gradle 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gradle 설정</h2>\n<p>일반적으로 Gradle 프로젝트는 하나의 상위(root) 프로젝트와 하나 이상의 하위(sub) 프로젝트로 구성되는데요.\n프로젝트 최상위 경로의 <code>settings.gradle.kts</code> 파일을 통해서 상위 프로젝트의 이름과 하위 프로젝트의 목록을 명시할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">plugins <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.gradle.toolchains.foojay-resolver-convention\"</span></span><span class=\"token punctuation\">)</span> version <span class=\"token string-literal singleline\"><span class=\"token string\">\"0.8.0\"</span></span>\n<span class=\"token punctuation\">}</span>\n\nrootProject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"gradle-temp\"</span></span>\n<span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"app\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>예를 들어, 우리가 방금 생성한 프로젝트의 <code>settings.gradle.kts</code> 파일을 보면 위와 같이 설정이 되어 있을텐데요.\n상위 프로젝트 이름이 <code>gradle-temp</code>이고, 하위 프로젝트로 <code>app</code> 하나가 있다는 것을 알 수 있습니다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 Gradle을 처음 접하시는 분들을 위해서 Gradle를 사용하는 아주 기초적인 방법에 대해서 살펴보았습니다.\n다음 포스팅에서는 Gradle로 어떻게 프로젝트의 빌드를 설정하고 작업으로 실행할 수 있는지 알아보겠습니다.</p>","timeToRead":4,"fields":{"slug":"/gradle/","tags":["Kotlin","Gradle"]},"frontmatter":{"title":"Gradle 시작하기","date":"Feb 9, 2025"}},"next":{"fields":{"slug":"/open-source-licenses/"},"frontmatter":{"title":"오픈 소스 라이선스 가이드"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}