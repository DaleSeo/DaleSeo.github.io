{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/rust-serde/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>Rust는 시스템 프로그래밍 언어이기 때문에 데이터를 외부로 안전하게 내보내거나 받아오는 일이 많은데요.\n이러한 데이터 직렬화/역직렬화를 위해서 사실상 표준처럼 사용되는 라이브러리가 Serde입니다.\n거의 모든 Rust 프로젝트가 사용되는 크레이트(Crate)라고 봐도 과언이 아니죠.</p>\n<p>이 글에서는 왜 Serde 라이브러를 어떻게 사용하는지 예제와 함께 살펴보겠습니다.</p>\n<h2 id=\"serde란\" style=\"position:relative;\"><a href=\"#serde%EB%9E%80\" aria-label=\"serde란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serde란?</h2>\n<p>직렬화는 데이터를 Rust 자료형에서 JSON이나 YAML, TOML 등의 형식으로 변화하는 과정을 의미하고,\n역직렬화는 변환된 데이터를 다시 원래대로 Rust 자료형으로 돌려놓는 과정을 의미합니다.</p>\n<p>그래서 Serde의 크레이트 이름은 Serialize(직렬화)의 첫 3글자와 Deserialize(역직렬화)의 첫 2글자가 들어있습니다.</p>\n<p>Rust 생태계에는 다른 크레이트도 있지만, 직렬화와 역직렬화 부문에서는 Serde가 압도적으로 많이 사용되고 있습니다.\nSerde는 다양한 데이터 포맷을 지원하며, 컴파일 시점에 많은 오류를 잡아주는 안전성이 탁월합니다.\n뿐만 아니라 사용자 정의 자료형에 쉽게 적용할 수 있고 최적화가 잘 되어 있어서 매우 빠른 성능을 자랑합니다.</p>\n<h2 id=\"설치하기\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치하기</h2>\n<p>Serde 라이브러리를 사용하려면 보통 <code>serde</code> 크레이트와 특정 형식에 대한 <code>serde_xxx</code> 크레이트를 함께 설치해야합니다.</p>\n<p>예를 들어, JSON으로 변환을 해야 한다면 <code>Cargo.toml</code> 파일에 <code>serde</code>와 <code>serde_json</code> 크레이트를 의존성으로 등록해줍니다.</p>\n<div class=\"gatsby-code-title\">Cargo.toml</div>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">serde</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">features</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"derive\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token key property\">serde_json</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0\"</span></code></pre></div>\n<p>다른 형식에 대한 크레이트는 아래 표를 참조 바랍니다.</p>\n<table>\n<thead>\n<tr>\n<th>포맷</th>\n<th>Crate</th>\n<th>특징</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JSON</td>\n<td><code>serde_json</code></td>\n<td>가장 많이 사용, 웹 API와 호환성 좋음</td>\n</tr>\n<tr>\n<td>YAML</td>\n<td><code>serde_yaml</code></td>\n<td>사람이 읽기 좋음, 설정 파일에 적합</td>\n</tr>\n<tr>\n<td>TOML</td>\n<td><code>toml</code></td>\n<td>Rust의 기본 설정 포맷</td>\n</tr>\n<tr>\n<td>MessagePack</td>\n<td><code>rmp-serde</code></td>\n<td>이진 포맷, 빠르고 용량 작음</td>\n</tr>\n<tr>\n<td>CBOR</td>\n<td><code>serde_cbor</code></td>\n<td>IoT, 임베디드 등에서 사용</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"구조체-선언\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EC%84%A0%EC%96%B8\" aria-label=\"구조체 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체 선언</h2>\n<p>Serde는 기본적으로 Rust의 <a href=\"/rust-primitives/\">원시 자료형</a>의 데이터는 바로 변환이 가능하며, Vector와 HashMap도 지원합니다.\n하지만 우리는 보통 비지니스 로직을 구현할 때 복잡한 구조의 데이터를 <a href=\"/rust-struct/\">구조체</a>나 <a href=\"/rust-enum/\">열거형</a>으로 추상화하죠.</p>\n<p><code>serde</code> 크레이트는 좀 더 쉽게 사용자 정의 데이터를 직렬화할 수 있도록 <code>Serialize</code>와 <code>Deserialize</code> 트레잇(trait)을 제공합니다.\n이 두 개의 트레잇을 구조체에 파생 매크로를 애트리뷰트로 붙여주기만 하면, 컴파일 시점에 대상 구조체를 위한 트레잇이 자동으로 구현됩니다.\n띠라서 아무런 코드 작성없이 이 구조체의 인스턴스를 상대로 직렬화와 역직렬화를 할 수 있게 됩니다.</p>\n<p>우선 3개의 필드로 이루어진 <code>Fruit</code>라는 간단한 구조체로 선언하고 Serde로 변환 가능하도록 설정해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">serde<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Deserialize</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Serialize, Deserialize, Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span>\n    is_fresh<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"데이터-직렬화\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A7%81%EB%A0%AC%ED%99%94\" aria-label=\"데이터 직렬화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 직렬화</h2>\n<p>이제 <code>Fruit</code> 구조체의 인스턴스를 생성한 후 JSON 형식으로 직렬화한 후 다시 <code>Fruit</code> 구조체의 인스턴스 역직렬화해보겠습니다.</p>\n<p>JSON 형식으로 직렬화를 하려면 <code>serde_json</code> 크레이트에서 제공하는 <code>to_string</code> 함수를 사용하고,\n반대로 역직렬화를 할 때는 <code>from_str</code> 함수를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> serde_json<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> fruit <span class=\"token operator\">=</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        is_fresh<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 직렬화: 구조체 인스턴스 → JSON 문자열</span>\n    <span class=\"token keyword\">let</span> serialized <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized: JSON {serialized}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 역직렬화: JSON 문자열 → 구조체 인스턴스</span>\n    <span class=\"token keyword\">let</span> deserialized<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Fruit</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>serialized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deserialized: {deserialized:?}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Serialized: JSON <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Apple\"</span>,<span class=\"token string\">\"count\"</span>:10,<span class=\"token string\">\"is_fresh\"</span>:true<span class=\"token punctuation\">}</span>\nDeserialized: Fruit <span class=\"token punctuation\">{</span> name: <span class=\"token string\">\"Apple\"</span>, count: <span class=\"token number\">10</span>, is_fresh: <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"케이스-표기법-변경\" style=\"position:relative;\"><a href=\"#%EC%BC%80%EC%9D%B4%EC%8A%A4-%ED%91%9C%EA%B8%B0%EB%B2%95-%EB%B3%80%EA%B2%BD\" aria-label=\"케이스 표기법 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>케이스 표기법 변경</h2>\n<p>직렬화되는 JSON의 케이스 표기법을 일괄적으로 변경하고 싶다면 구조체 위에 <code>#[serde(rename_all = \"...\")]</code> 애트리뷰트를 붙여주면 됩니다.</p>\n<p>Rust에서는 필드명을 snail_case로 하는 관행이 있고, JSON에서는 필드명을 camelCase로 하는 관행이 있기 때문에,\n두 단어 이상으로 이루어진 필드명을 처리할 때 매우 유용한 기능입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">serde<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Deserialize</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Serialize, Deserialize, Debug)]</span>\n<span class=\"token attribute attr-name\">#[serde(rename_all = <span class=\"token string\">\"camelCase\"</span>)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span>\n    is_fresh<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 JSON 형식으로 직려화해보면 <code>is_fresh</code> 필드가 <code>isFresh</code>로 변환되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> serde_json<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> fruit <span class=\"token operator\">=</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        is_fresh<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> serialized <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized: JSON {serialized}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Serialized: JSON <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Apple\"</span>,<span class=\"token string\">\"count\"</span>:10,<span class=\"token string\">\"isFresh\"</span>:true<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"필드-애트리뷰트\" style=\"position:relative;\"><a href=\"#%ED%95%84%EB%93%9C-%EC%95%A0%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%8A%B8\" aria-label=\"필드 애트리뷰트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필드 애트리뷰트</h2>\n<p>Serde는 이 밖에도 다양한 필드 애트리뷰트를 통해 기본 직렬화 또는 역직렬화 동작을 바꿀 수 있도록 해줍니다.</p>\n<p>예를 들어, 직렬화 시 제외시키고 싶은 필드에는 <code>#[serde(skip)]</code> 애트리뷰트를 붙여줍니다.\n역직렬화 시 누락된 필드에 기본값을 할당하고 싶을 때는 <code>#[serde(default)]</code> 애트리뷰트를 붙여줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">serde<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Deserialize</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> serde_json<span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Serialize, Deserialize, Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[serde(default)]</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(skip)]</span>\n    count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"isFresh\"</span>)]</span>\n    is_fresh<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> fruit <span class=\"token operator\">=</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        count<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        is_fresh<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> serialized <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized: JSON {serialized}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token string\">r#\"{\"isFresh\":true}\"#</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> deserialized<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Fruit</span> <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deserialized: {deserialized:?}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Serialized: JSON <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Apple\"</span>,<span class=\"token string\">\"isFresh\"</span>:true<span class=\"token punctuation\">}</span>\nDeserialized: Fruit <span class=\"token punctuation\">{</span> name: <span class=\"token string\">\"\"</span>, count: <span class=\"token number\">0</span>, is_fresh: <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 실습 코드는 <a href=\"https://play.rust-lang.org/?version=stable&#x26;mode=debug&#x26;edition=2024&#x26;code=use+serde%3A%3A%7BDeserialize%2C+Serialize%7D%3B%0Ause+serde_json%3B%0A%0A%23%5Bderive%28Serialize%2C+Deserialize%2C+Debug%29%5D%0A%23%5Bserde%28rename_all+%3D+%22camelCase%22%29%5D%0Astruct+Fruit+%7B%0A++++%23%5Bserde%28default%29%5D%0A++++name%3A+String%2C%0A++++%23%5Bserde%28skip%29%5D%0A++++count%3A+u8%2C%0A++++is_fresh%3A+bool%2C%0A%7D%0A%0Afn+main%28%29+%7B%0A++++let+fruit+%3D+Fruit+%7B%0A++++++++name%3A+String%3A%3Afrom%28%22Apple%22%29%2C%0A++++++++count%3A+10%2C%0A++++++++is_fresh%3A+true%2C%0A++++%7D%3B%0A%0A++++let+serialized+%3D+serde_json%3A%3Ato_string%28%26fruit%29.unwrap%28%29%3B%0A++++println%21%28%22Serialized%3A+JSON+%7Bserialized%7D%22%29%3B%0A%0A++++let+json+%3D+r%23%22%7B%22isFresh%22%3Atrue%7D%22%23%3B%0A%0A++++let+deserialized%3A+Fruit+%3D+serde_json%3A%3Afrom_str%28%26json%29.unwrap%28%29%3B%0A++++println%21%28%22Deserialized%3A+%7Bdeserialized%3A%3F%7D%22%29%3B%0A%7D%0A\">Rust Playgrond</a> 확인하시고 직접 실행해보실 수 있습니다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>지금까지 다양한 예제를 통해서 Serde 라이브러를 어떻게 사용하는지 알아보았습니다.\nRust에서 거의 필수로 쓰이는 라이브러리인 만큼 API를 숙지하셔서 프로젝트에서 잘 활용하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/rust-serde/","tags":["Rust"]},"frontmatter":{"title":"Rust 데이터 직렬화: Serde 라이브러리 사용법","date":"Jul 5, 2025"}},"next":{"fields":{"slug":"/rust-enum/"},"frontmatter":{"title":"Rust 기초 – 열거형(Enum) 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}