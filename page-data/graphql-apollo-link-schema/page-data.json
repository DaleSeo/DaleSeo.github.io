{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-apollo-link-schema/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-apollo-remote-schemas/"},"frontmatter":{"title":"[GraphQL] 원격 서버로 부터 스키마 가져오기"}},"node":{"html":"<p>GraphQL 서버 없이도 클라이언트에서 GraphQL API를 호출할 수 있도록 도와주는 Aollo Client의 <code>SchemaLink</code>에 대해서 알아보겠습니다.</p>\n<h2 id=\"일반적인-apollo-client-생성\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-apollo-client-%EC%83%9D%EC%84%B1\" aria-label=\"일반적인 apollo client 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적인 Apollo Client 생성</h2>\n<p>일반적으로 Apollo Client를 사용할 때는 다음과 같이 GraphQL 서버로 HTTP 요청을 보내기 위해서 <code>HttpLink</code>를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-client\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HttpLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-http\"</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  link<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.my-server.com/graphql\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 다른 옵션</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*...생략... */</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 <code>HttpLink</code>를 사용할 때는 반드시 연동할 GraphQL API의 endpoint를 가진 GraphQL Server가 어딘가에 떠 있어야 합니다.</p>\n<blockquote>\n<p>Apollo Client를 이용해서 GraphQL API 호출하는 기본적인 방법은 아래 포스트를 참고 바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/graphql-apollo-client\">Apollo Client로 GraphQL API 호출 방법</a></li>\n</ul>\n<h2 id=\"apollo-link\" style=\"position:relative;\"><a href=\"#apollo-link\" aria-label=\"apollo link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apollo Link</h2>\n<p>Apollo Client에는 Network Layer를 담당하는 Apollo Link라고 불리는 중요한 개념이 있습니다.\n이 Apollo Link를 통해 Apollo Client는 GraphQL 요청을 어떤 과정을 거처 어떤 방식으로 처리할지에 대해서 유연하게 제어가 가능하도록 설계되어 있습니다.\n이 것이 <code>ApolloClient</code> 생성자가 <code>link</code> 옵션을 통해 다른 Apollo Link 객체를 받을 수 있는 이유입니다.</p>\n<p>예를 들어, 방금 살펴본 <code>HttpLink</code>는 원격 GraphQL Server와 HTTP 프로토콜을 통해 데이터를 송수신하도록 구현된 Apollo Link입니다.\nApollo Client는 HTTP 프로토콜이 아닌 WebSocket을 통해서 GraphQL Server와 연동할 수 있도록 <code>WebSocketLink</code>도 제공합니다.\n또한, 이제부터 자세히 살펴볼 <code>SchemaLink</code>는 GraphQL Server 없이도 GraphQL API를 호출이 가능하도록 구현되어 있습니다.</p>\n<h2 id=\"schema-link\" style=\"position:relative;\"><a href=\"#schema-link\" aria-label=\"schema link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schema Link</h2>\n<p><code>SchemaLink</code>는 원격 서버를 필요로 하는 <code>HttpLink</code>나 <code>WebSocketLink</code>와 달리 단지 GraphQL 스키마만 있으면 GraphQL API를 사용할 수 있게 해줍니다.\n즉, 서버 단에 두었던 GraphQL 스키마를 클라이언트 단에 옮겨놓을 수만 있다면 굳이 서버가 없이도 클라이언트 앱 개발이 가능하다는 말입니다.\n이러한 <code>SchemaLink</code>의 특징은 클라이언트 단에서 서버를 모킹하거나 Server-sdie rendering을 구현하는데 유용하게 쓰입니다.</p>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<p>프로젝트에 GraphQL과 Apollo Client 관련 패키지를 설치합니다.\n이 중, <code>apollo-link-link</code> 패키지가 <code>SchemaLink</code>를 제공하며, <code>graphql-tools</code>는 스키마 생성을 위해 쓰이는 유틸리티 함수인 <code>makeExecutableSchema()</code>를 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i apollo-client apollo-cache-inmemory apollo-link-schema graphql graphql-tag graphql-tools</code></pre></div>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &quot;dependencies&quot;: {\n    &quot;apollo-cache-inmemory&quot;: &quot;1.6.3&quot;,\n    &quot;apollo-client&quot;: &quot;2.6.4&quot;,\n    &quot;apollo-link-schema&quot;: &quot;1.2.3&quot;,\n    &quot;graphql&quot;: &quot;14.4.2&quot;,\n    &quot;graphql-tag&quot;: &quot;2.10.1&quot;,\n    &quot;graphql-tools&quot;: &quot;4.0.5&quot;\n  }</code></pre></div>\n<h2 id=\"패키지-임포트\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%9E%84%ED%8F%AC%ED%8A%B8\" aria-label=\"패키지 임포트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 임포트</h2>\n<p>Apollo Client를 사용하기 위해 기본적으로 필요한 <code>ApolloClient</code>, <code>InMemoryCache</code>, <code>gql</code>을 임포트 합니다.\n추가적으로 <code>SchemaLink</code>를 사용하기 위해 <code>SchemaLink</code>와 <code>makeExecutableSchema</code>을 임포트해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-client\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InMemoryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-cache-inmemory\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SchemaLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-schema\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> makeExecutableSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tools\"</span>\n<span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span></code></pre></div>\n<h3 id=\"스키마-생성\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%83%9D%EC%84%B1\" aria-label=\"스키마 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스키마 생성</h3>\n<p>GraphQL 스키마는 타입에 대한 정의(typeDefs)와 리졸버(resolvers)로 이루어집니다.\n타입 정의는 GraphQL 쿼리 언어(GQL)을 통해 데이터의 형태를 나타내며, 리졸버는 그 데이터가 어떻게 만들어져야 하는지 함수로 구현합니다.</p>\n<p>예를 들어, 간단하게 항상 <code>\"pong\"</code>이라는 문자열 타입의 데이터를 리턴하는 <code>ping</code> 쿼리에 대한 스키마는 다음과 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type Query {\n    ping: String!\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">ping</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"pong\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">makeExecutableSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs<span class=\"token punctuation\">,</span> resolvers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서, <code>graphql-tools</code> 패키지에서 임포트한 <code>makeExecutableSchema()</code> 함수에 타입 정의와 리졸버를 넘기면 스키마가 만들어집니다.</p>\n<h3 id=\"클라이언트-생성\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"클라이언트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트 생성</h3>\n<p>이제 <code>SchemaLink</code>를 사용해서 <code>ApolloClient</code>를 생성할 차례입니다.\n위에서 생성한 스키마를 <code>SchemaLink()</code> 생성자의 인자로 넘긴 후에, 생성된 <code>SchemaLink</code> 객체를 다시 <code>ApolloClient()</code> 생성자에 넘겨주면 됩니다.\n캐시는 가장 범용적으로 쓰이는 <code>InMemoryCache</code>를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  link<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SchemaLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"graphql-api-호출\" style=\"position:relative;\"><a href=\"#graphql-api-%ED%98%B8%EC%B6%9C\" aria-label=\"graphql api 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL API 호출</h3>\n<p><code>ApolloClient</code>의 <code>query()</code> 함수를 사용해서 위에서 정의한 <code>ping</code> 쿼리를 호출하면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    query<span class=\"token operator\">:</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      query {\n        ping\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loading:\"</span><span class=\"token punctuation\">,</span> loading<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음과 같이 원하는 문자열 타입의 <code>\"pong\"</code> 이라는 데이터가 리턴되는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">loadig: <span class=\"token boolean\">false</span>\nerror: undefined\ndata: <span class=\"token punctuation\">{</span>ping: <span class=\"token string\">\"pong\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code>async/await</code> 키워드에 대한 자세한 설명은 <a href=\"/js-async-async-await\">관련 포스트</a>을 참고 바랍니다.</p>\n</blockquote>\n<h3 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h3>\n<iframe src=\"https://stackblitz.com/edit/graphql-apollo-link-schema?embed=1&file=index.js&view=editor\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 <code>SchemaLink</code>를 사용해서 서버없이 클라이언트 단에서 직접 GraphQL 스키마를 만든 후 GraphQL API를 호출하는 방법에 대해서 알아보았습니다.\n<code>SchemaLink</code>에 넘길 스키마를 만들 때, 클라이언트 단에서 직접 스키마 생성하지 않고, 원격 서버에서 스키마 정보만 얻어오거나 로컬에 저장해놓은 스키마 파일을 읽어올 수도 있습니다.\n이렇게 <code>SchemaLink</code>를 다양하게 생성하고 여기에 mock 데이터까지 추가할 수 있는데 이러한 방법에 대해서는 추후 포스팅하도록 하겠습니다.</p>\n<h2 id=\"관련-포스트\" style=\"position:relative;\"><a href=\"#%EA%B4%80%EB%A0%A8-%ED%8F%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"관련 포스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 포스트</h2>\n<ul>\n<li><a href=\"/graphql-apollo-remote-schemas\">[GraphQL] 원격 서버로 부터 스키마 가져오기</a></li>\n</ul>","timeToRead":4,"fields":{"slug":"/graphql-apollo-link-schema/","tags":["JavaScript","자바스크립트","GraphQL","Apollo","ApolloClient","apollo-link-schema"]},"frontmatter":{"title":"[GraphQL] SchemaLink 사용법 - 서버없는 클라이언트","date":"Aug 24, 2019"}},"next":{"fields":{"slug":"/graphql-apollo-client/"},"frontmatter":{"title":"[GraphQL] Apollo Client 사용법"}}}}}