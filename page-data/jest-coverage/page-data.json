{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/jest-coverage/","result":{"pageContext":{"previous":{"fields":{"slug":"/css-toggle-switch/"},"frontmatter":{"title":"HTML과 CSS로 토글 스위치 UI 만들기"}},"node":{"html":"<p>이번 포스팅에서는 테스트 커버리지(coverage)가 무엇인지 알아보고 Jest를 이용해서 테스트 커버리지를 수집하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"테스트-커버리지test-coverage란\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80test-coverage%EB%9E%80\" aria-label=\"테스트 커버리지test coverage란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 커버리지(Test Coverage)란?</h2>\n<p>테스트 커버리지(test coverage)는 코드 커버리지(code coverage)라고도 하는데요.\n쉽게 말해 코드가 얼만큼 테스트되고 있는지를 나타내는 소프트웨어의 품질 지표입니다.\n테스트 커버리지가 높은 소프트웨어는 버그가 발생할 확률이 적기 때문에 사용자가 좀 더 신뢰하고 사용할 수 있습니다.\n당연히 반대로 테스트 커버리지가 낮은 소프트웨어는 믿고 사용하기가 좀 어렵겠죠?</p>\n<h2 id=\"jest-명령어의-coverage-옵션\" style=\"position:relative;\"><a href=\"#jest-%EB%AA%85%EB%A0%B9%EC%96%B4%EC%9D%98-coverage-%EC%98%B5%EC%85%98\" aria-label=\"jest 명령어의 coverage 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jest 명령어의 —coverage 옵션</h2>\n<p>Jest가 설치되어 있는 프로젝트라면 Jest로 테스트를 실행하면서 커버리지 데이터를 수집해볼 수 있는데요.\n다음과 같이 <code>jest</code> 명령어를 실행할 때, <code>--coverage</code> 옵션만 붙여주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx jest --coverage</code></pre></div>\n<blockquote>\n<p>테스팅 프레임워크인 Jest에 생소하신 분들은 먼저 <a href=\"/jest-basic/\">Jest로 기본적인 테스트 작성하기</a>를 읽어 보시고 돌아오시기를 추천드립니다.</p>\n</blockquote>\n<p>이렇게 <code>jest</code> 명령어를 실행하게 되면 평소와 다르게 터미널에 Coverage summary가 함께 나오는데요.\n구문(Statements), 분기(Branches), 함수(Functions), 줄(Lines) 기준으로 코드가 얼마나 테스트되고 있는지가 퍼센트로 표시됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> Coverage summary <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\nStatements   <span class=\"token builtin class-name\">:</span> <span class=\"token number\">95.74</span>% <span class=\"token punctuation\">(</span> <span class=\"token number\">494</span>/516 <span class=\"token punctuation\">)</span>\nBranches     <span class=\"token builtin class-name\">:</span> <span class=\"token number\">78.25</span>% <span class=\"token punctuation\">(</span> <span class=\"token number\">403</span>/515 <span class=\"token punctuation\">)</span>\nFunctions    <span class=\"token builtin class-name\">:</span> <span class=\"token number\">93.44</span>% <span class=\"token punctuation\">(</span> <span class=\"token number\">114</span>/122 <span class=\"token punctuation\">)</span>\nLines        <span class=\"token builtin class-name\">:</span> <span class=\"token number\">95.67</span>% <span class=\"token punctuation\">(</span> <span class=\"token number\">486</span>/508 <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n\nTest Suites: <span class=\"token number\">29</span> passed, <span class=\"token number\">29</span> total\nTests:       <span class=\"token number\">217</span> passed, <span class=\"token number\">217</span> total\nSnapshots:   <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTime:        <span class=\"token number\">26.702</span> s</code></pre></div>\n<p>뿐만 아니라 프로젝트 최상위 경로에 <code>coverage</code>라는 디렉토리가 생성된 것도 볼 수 있을텐데요.\n그 폴더에 들어가면 수집된 커버리지 데이터에 대한 다양한 형식의 리포트(report)를 확인해볼 수 있습니다.</p>\n<p>예를 들어, 커버리지를 리포트를 웹페이지 형태로 보고 싶다면 브라우저에서 <code>coverage/lcov-report/index.html</code> 파일을 열어보면 됩니다.</p>\n<h2 id=\"커버리지-수집-범위-설정\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%EC%88%98%EC%A7%91-%EB%B2%94%EC%9C%84-%EC%84%A4%EC%A0%95\" aria-label=\"커버리지 수집 범위 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커버리지 수집 범위 설정</h2>\n<p>위와 같이 별도의 추가 설정없이 Jest로 커버리지 데이터를 수집하면 예상했던 것보다 커버리지 결과가 높게 나와서 놀라는 경우가 있는데요.\n이것은 Jest가 기본적으로 프로젝트의 전체 코드를 대상으로 커버리지를 수집하는 것이 아니라, 이미 테스트가 있는 코드만을 대상으로 커버리지를 수집하기 때문입니다.</p>\n<p>따라서 좀 더 정확한 커버리지 분석 결과를 얻으려면 <code>collectCoverageFrom</code> 옵션을 사용하여 커버리지 수집 범위를 설정해줘야 합니다.</p>\n<div class=\"gatsby-code-title\">jest.config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">module.exports = <span class=\"token punctuation\">{</span>\n  collectCoverageFrom<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>'**<span class=\"token comment\">/*.[jt]s?(x)', '!**/</span>*.stories.<span class=\"token punctuation\">[</span>jt<span class=\"token punctuation\">]</span>s?(x)'<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>;</code></pre></div>\n<p>위와 같이 설정하면, 파일 이름에 <code>stories</code>가 들어간 파일을 제외한 프로젝트 내의 모든 자바스크립트와 타입스크립트 파일에 대해서 커버리지 데이터가 수집될 것입니다.</p>\n<h2 id=\"커버리지-최소-기준-설정\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%EC%B5%9C%EC%86%8C-%EA%B8%B0%EC%A4%80-%EC%84%A4%EC%A0%95\" aria-label=\"커버리지 최소 기준 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커버리지 최소 기준 설정</h2>\n<p>테스트 커버리지를 중요시하는 프로젝트에서는 새롭게 작성한 코드가 프로젝트에서 약속한 커버리지 기준에 만족하는지 체크하는 경우가 많은데요.\n<code>coverageThreshold</code> 옵션을 통해서, 구문(Statements), 분기(Branches), 함수(Functions), 줄(Lines) 기준으로 최소 커버리지를 지정해줄 수 있습니다.</p>\n<p>예를 들어, <code>src</code> 디렉토리에 대해서 최소 커버리지를 상당히 높게 잡아보겠습니다.</p>\n<div class=\"gatsby-code-title\">jest.config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">module.exports = <span class=\"token punctuation\">{</span>\n  coverageThreshold<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    './src/'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      statements<span class=\"token operator\">:</span> <span class=\"token number\">95</span><span class=\"token punctuation\">,</span>\n      branches<span class=\"token operator\">:</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span>\n      functions<span class=\"token operator\">:</span> <span class=\"token number\">95</span><span class=\"token punctuation\">,</span>\n      lines<span class=\"token operator\">:</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>;</code></pre></div>\n<p>동일한 프로젝트를 대상으로 <code>jest</code> 명령어를 <code>--coverage</code> 옵션과 함께 실행하면 다음과 같이 커버리지 기준을 맞추지 못했다는 에러가 발생하게 됩니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span>.생략<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> Coverage summary <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\nStatements   <span class=\"token builtin class-name\">:</span> <span class=\"token number\">95.74</span>% <span class=\"token punctuation\">(</span> <span class=\"token number\">494</span>/516 <span class=\"token punctuation\">)</span>\nBranches     <span class=\"token builtin class-name\">:</span> <span class=\"token number\">78.25</span>% <span class=\"token punctuation\">(</span> <span class=\"token number\">403</span>/515 <span class=\"token punctuation\">)</span>\nFunctions    <span class=\"token builtin class-name\">:</span> <span class=\"token number\">93.44</span>% <span class=\"token punctuation\">(</span> <span class=\"token number\">114</span>/122 <span class=\"token punctuation\">)</span>\nLines        <span class=\"token builtin class-name\">:</span> <span class=\"token number\">95.67</span>% <span class=\"token punctuation\">(</span> <span class=\"token number\">486</span>/508 <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n<span class=\"gatsby-highlight-code-line\">Jest: <span class=\"token string\">\"./src/\"</span> coverage threshold <span class=\"token keyword\">for</span> branches <span class=\"token punctuation\">(</span><span class=\"token number\">90</span>%<span class=\"token punctuation\">)</span> not met: <span class=\"token number\">78.25</span>%</span><span class=\"gatsby-highlight-code-line\">Jest: <span class=\"token string\">\"./src/\"</span> coverage threshold <span class=\"token keyword\">for</span> functions <span class=\"token punctuation\">(</span><span class=\"token number\">95</span>%<span class=\"token punctuation\">)</span> not met: <span class=\"token number\">93.44</span>%</span>\nTest Suites: <span class=\"token number\">29</span> passed, <span class=\"token number\">29</span> total\nTests:       <span class=\"token number\">217</span> passed, <span class=\"token number\">217</span> total\nSnapshots:   <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTime:        <span class=\"token number\">22.275</span> s</code></pre></div>\n<p>이 명령어를 CI(Continuos Integration)나 CD(Continuos Delivery)를 통해 실행해준다면 커버리지 기준에 미달하는 코드가 코드 저장소에 유입되는 것을 방지할 수 있을 것입니다.</p>\n<h2 id=\"커버리지-보고-형식-설정\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%EB%B3%B4%EA%B3%A0-%ED%98%95%EC%8B%9D-%EC%84%A4%EC%A0%95\" aria-label=\"커버리지 보고 형식 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커버리지 보고 형식 설정</h2>\n<p>테스트 커버리지 분석 결과는 다양한 형식으로 보고서를 만들어 낼 수 있는데요.\nJest는 기본적으로는 4가지 형식으로 보고서를 만들어주지만, <code>coverageReporters</code> 옵션을 통해 특정 파일 형식으로만 보고서를 만들어 낼 수 있습니다.</p>\n<div class=\"gatsby-code-title\">jest.config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">module.exports = <span class=\"token punctuation\">{</span>\n  coverageReporters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>'lcov'<span class=\"token punctuation\">,</span> 'text'<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>;</code></pre></div>\n<p>대규모의 프로젝트에서는 이 방법을 통해 불필요한 보고서를 줄이고 Jest 명령어 수행 시간을 단축할 수 있습니다.</p>\n<h2 id=\"커버리지-명령어-npm-스크립트-등록\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-%EB%AA%85%EB%A0%B9%EC%96%B4-npm-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%93%B1%EB%A1%9D\" aria-label=\"커버리지 명령어 npm 스크립트 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커버리지 명령어 npm 스크립트 등록</h2>\n<p>참고로 협업 프로젝트에서는 커버리지를 수집하는 명령어를 npm 스크립트로 등록해두는 것을 추천드립니다.</p>\n<div class=\"gatsby-code-title\">package.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"coverage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest --coverage\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러면 Jest에 생소한 팀원들도 큰 어려움없이 해당 명령어를 실행할 수 있겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run coverage</code></pre></div>\n<blockquote>\n<p>자바스크립트 프로젝트에서 자주 사용되는 명령어인 <code>npm run</code>에 대한 자세한 설명은 <a href=\"/js-npm-run-script/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Jest를 이용하여 어떻게 테스트 커버리지 데이터를 수집하고, 관련해서 어떤 설정을 해줄 수 있는지에 대해서 알아보았습니다.\n테스트 커버리지를 잘 관리하셔서 많은 사람들이 믿고 쓸 수 있는 소프트웨어를 개발하실 수 있으셨으면 좋겠습니다.</p>","timeToRead":4,"fields":{"slug":"/jest-coverage/","tags":["JavaScript","Jest","coverage","testing","TDD"]},"frontmatter":{"title":"Jest로 테스트 커버리지 수집하기","date":"Oct 1, 2022"}},"next":{"fields":{"slug":"/react-radio-buttons/"},"frontmatter":{"title":"React에서 라디오 버튼 사용하기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}