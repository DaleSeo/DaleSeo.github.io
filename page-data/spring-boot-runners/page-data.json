{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/spring-boot-runners/","result":{"pageContext":{"previous":{"fields":{"slug":"/shell-command-ls/"},"frontmatter":{"title":"ls 쉘 커맨드 사용법"}},"node":{"html":"<p>스프링 부트 애플리케이션 구동 시점에 특정 코드 실행 시키기기 위해서 2가지 인터페이스를 제공하고 있습니다.</p>\n<h2 id=\"commandlinerunner\" style=\"position:relative;\"><a href=\"#commandlinerunner\" aria-label=\"commandlinerunner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommandLineRunner</h2>\n<p><code>CommandLineRunner</code> 인터페이스는 구동 시점에 실행되는 코드가 자바 문자열 아규먼트 배열에 접근해야할 필요가 있는 경우에 사용합니다.\n다음과 같이 <code>CommandLineRunner</code> 인터페이스를 구현한 클래스에 <code>@Component</code> 어노테이션을 선언해두면 컴포넌트 스캔이되고 구동 시점에 <code>run</code> 메소드의 코드가 실행됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">CommandLineRunner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoCommandLineRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CommandLineRunner</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CommandLineRunner Args: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"테스트\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h3>\n<p>jar 파일로 패키징된 애플리케이션을 실행시킬 때 <code>abc</code>와 <code>123</code>을 인자로 넘깁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ java -jar target/demo-0.0.1-SNAPSHOT.jar abc <span class=\"token number\">123</span></code></pre></div>\n<p><code>DemoCommandLineRunner</code> 클래스의 <code>run()</code> 메소드의 인자로 넘어와서 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">2017</span>-08-27 <span class=\"token number\">15</span>:52:12.054  INFO <span class=\"token number\">96622</span> --- <span class=\"token punctuation\">[</span>           main<span class=\"token punctuation\">]</span> s.b.c.e.t.TomcatEmbeddedServletContainer <span class=\"token builtin class-name\">:</span> Tomcat started on port<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: <span class=\"token number\">8080</span> <span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">)</span>\nCommandLineRunner Args: <span class=\"token punctuation\">[</span>abc, <span class=\"token number\">123</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"applicationrunner\" style=\"position:relative;\"><a href=\"#applicationrunner\" aria-label=\"applicationrunner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ApplicationRunner</h2>\n<p><code>ApplicationRunner</code> 인터페이스도 <code>CommandLineRunner</code> 인터페이스와 마찬가지로 구동 시점에 <code>run()</code> 메소드를 실행시키지만 다른 타입의 인자를 받습니다.\n단순 인자의 스트링 배열을 포함한 추상화한 <code>ApplicationArguments</code> 타입의 객체가 대신 <code>run()</code> 메소드의 인자로 넘어옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ApplicationArguments</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ApplicationRunner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApplicationRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationRunner</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationArguments</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApplicationRunner Args: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"테스트-1\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-1\" aria-label=\"테스트 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트</h3>\n<p>jar 파일로 패키징된 애플리케이션을 실행시킬 때 <code>abc</code>와 <code>123</code>을 인자로 넘깁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ java -jar target/demo-0.0.1-SNAPSHOT.jar abc <span class=\"token number\">123</span></code></pre></div>\n<p><code>ApplicationRunner</code> 클래스의 <code>run()</code> 메소드의 인자로 넘어와서 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">2017</span>-08-27 <span class=\"token number\">15</span>:54:52.310  INFO <span class=\"token number\">5156</span> --- <span class=\"token punctuation\">[</span>           main<span class=\"token punctuation\">]</span> s.b.c.e.t.TomcatEmbeddedServletContainer <span class=\"token builtin class-name\">:</span> Tomcat started on port<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: <span class=\"token number\">8080</span> <span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">)</span>\nApplicationRunner Args: <span class=\"token punctuation\">[</span>abc, <span class=\"token number\">123</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"실행-순서\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%88%9C%EC%84%9C\" aria-label=\"실행 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 순서</h2>\n<p>하나의 스프링 부트 애플리케이션에 여러 개의 <code>CommandLineRunner</code> 또는 <code>ApplicationRunner</code> 빈을 등록할 수 있습니다.\n러너 간의 실행 순서가 문제가 되는 경우에는 러너 클래스에 <code>@Order</code> 어노테이션으로 실행 순서를 명시해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoCommandLineRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CommandLineRunner</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApplicationRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationRunner</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>이상으로 <code>CommandLineRunner</code>와 <code>ApplicationRunner</code> 인터페이스 사용 방법에 대해서 알아보았습니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/CommandLineRunner.html\">https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/CommandLineRunner.html</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/ApplicationRunner.html\">https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/ApplicationRunner.html</a></li>\n</ul>","timeToRead":2,"fields":{"slug":"/spring-boot-runners/","tags":["Java","Spring","스프링","SpringBoot","스프링부트","ApplicationRunner","CommandLineRunner"]},"frontmatter":{"title":"스프링 부트 구동 시점에 특정 코드 실행 시키기 (CommandLineRunner & ApplicationRunner)","date":"Aug 27, 2017"}},"next":{"fields":{"slug":"/spring-boot-embedded-server-config/"},"frontmatter":{"title":"스프링 부트 내장 서버 설정 (포트, 컨텍스트 패스)"}}}}}