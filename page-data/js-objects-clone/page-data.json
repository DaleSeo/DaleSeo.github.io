{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-objects-clone/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/css-position-fixed-navigation/"},"frontmatter":{"title":"CSS의 fixed position으로 메뉴바 상단 고정"}},"node":{"html":"<p>자바스크립트로 코딩을 하시다가 객체가 의도하신 대로 복제되지 않아서 고생하신 적이 한 번 쯤은 있으실텐데요.</p>\n<p>예를 들어, 다음과 같은 객체가 있다고 가정해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bool</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">str</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">func</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여러분은 위 객체를 어떻게 복제하여 새로운 변수에 복제본을 할당하실 건가요?\n원본에 영향이 없도록 안전하게 복제하실 자신이 있으신가요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> <span class=\"token comment\">/* original의 복제본 */</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번 포스팅에서는 자바스크립트에서 객체를 복제하는 다양한 방법에 대해서 실습을 통해서 한 번 정리해보도록 할께요.\n우선 객체를 복제하다가 쉽게 범할 수 있는 실수에 대해서 살펴보고, 얇은 복제와 깊은 복제에 대한 개념을 잡아보겠습니다.\n마지막으로 Lodash 라이브러리와 웹 표준 API인 <code>structuredClone()</code> 함수를 활용해서 객체 복제를 해보겠습니다.</p>\n<h2 id=\"참조-할당\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0-%ED%95%A0%EB%8B%B9\" aria-label=\"참조 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조 할당</h2>\n<p>객체를 복제할 때 초보자들이 가장 많이 하는 실수는 다음과 같이 <code>=</code> 연산자를 통해 새로운 변수에 복제할 객체를 할당하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> clone1 <span class=\"token operator\">=</span> original<span class=\"token punctuation\">;</span>\n\noriginal<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone1<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2000</span>\n\nclone1<span class=\"token punctuation\">.</span>bool <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original <span class=\"token operator\">===</span> clone1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>위 코드는 동일한 객체를 가리키는 변수를 하나 더 만드는 것 뿐 입니다. 즉, <code>original</code>이 가리키던 객체를 <code>clone1</code>도 가리키게 된 것 이죠. 다시 말해, 이 하나의 객체는 2개의 변수에 의해서 공유되고 있습니다. 더 쉽게 설명하면, 해당 객체에 접근하는 통로가 2개가 된 것입니다. 따라서 어느 변수를 통해 값을 바꾸던 나머지 변수에 영향을 주게 됩니다.</p>\n<p>이렇게 하나의 객체를 가리키는 변수가 2개가 생기면 어디서 어떻게 해당 객체의 속성이 변경될지 예측이 어려워지고 자연스럽게 버그가 생기기 쉬워집니다.\n또한 소위 Immutable, 즉 불변하는 코드를 선호하는 최근 경향과도 거리가 멀어지게 됩니다.</p>\n<h2 id=\"복제의-깊이\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%EC%A0%9C%EC%9D%98-%EA%B9%8A%EC%9D%B4\" aria-label=\"복제의 깊이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복제의 깊이</h2>\n<p>자바스크립트로 복제를 하는 방법에 대해서 본격적으로 배우기 전에 얕은 복제(Shallow Clone)와 깊은 복제(Deep Clone)라는 이해하는 것이 중요합니다.\n얇은 복제로 충분한 상황에서 깊은 복제를 하게 되면 성능 문제로 이어질 수 있고, 깊은 복제를 해야 하는 상황에서 얇은 복제를 하게 되면 데이터 문제를 일으킬 수 있기 때문입니다.</p>\n<p>우리는 객체를 하나의 트리로 생각할 수 있습니다.\n객체는 여러 개의 속성을 가질 수 있고, 각 속성이 숫자, 문자열과 같은 일반 값일 수도 있지만 또 다른 객체일 수도 있습니다.</p>\n<p>얇은 복제에서는 <strong>최상위 레벨의 속성만</strong> 복제되는 반면에, 깊은 복제에서는 객체 트리의 <strong>최말단 노드의 속성까지 연쇄적으로</strong> 복제가 일어납니다.</p>\n<p>말로만 설명드리는 것보다 맨 처음 사용했던 예제 객체를 통해서 설명드리는 것이 더 이해가 쉬우실 것 같은데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bool</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">str</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">func</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 <code>original</code> 객체의 <code>obj</code> 속성에는 <code>x</code> 속성과 <code>y</code> 속성으로 이루어진 <strong>객체</strong>가 할당되어 있습니다.</p>\n<p>얇은 복제에서는 원본 객체의 속성에 객체가 할당되어 있다면 그 속성에 대한 참조를 그대로 복제본 객체의 속성이 가리키게 합니다.\n즉, 이름이 다른 두 개의 변수가 동일한 객체를 참조있는 형국이 되죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">original<span class=\"token punctuation\">.</span>obj 👉 <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> 👈 clone<span class=\"token punctuation\">.</span>obj</code></pre></div>\n<p>반면에 깊은 복제에서는 원본 객체의 속성에 객체가 할당되어 있을 때 그 속성과 동일한 구조의 객체가 생성되어 복제본 객체의 속성에 할당됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">original<span class=\"token punctuation\">.</span>obj 👉 <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nclone<span class=\"token punctuation\">.</span>obj 👉 <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>깊은 복제를 하게 되면 원본 객체를 변경했을 때 복제본 객체에 영향을 주지 않으며, 복제본 객체를 변경했을 때도 원본 객체가 아무런 영향을 받지 않습니다.\n따라서 의도치 않는 데이터 변경으로 부터 좀 더 안전한 프로그램을 작성할 수 있다는 장점이 있습니다.\n하지만 그만큼 깊은 복제는 메모리를 많이 소모하게 됩니다.</p>\n<p>깊은 복제의 단점은 곧 얇은 복제의 장점이 되는데요.\n얇은 복제를 하게 되면 메모리를 효율적으로 쓸 수 있고, 데이터를 한 곳에서 바꿔도 쉽게 여러 곳으로 전파할 수 있다는 장점이 있습니다.\n그래서 의도적으로 얇은 복제를 하는 경우도 있지만, 상대적으로 데이터 버그 발생의 위험 때문에 각별한 주의가 필요합니다.</p>\n<h2 id=\"objectassign-함수\" style=\"position:relative;\"><a href=\"#objectassign-%ED%95%A8%EC%88%98\" aria-label=\"objectassign 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object.assign() 함수</h2>\n<p>자바스크립트에서 얇은 복제를 위해서 예전부터 <code>Object.assign()</code> 함수를 많이 사용했었습니다.</p>\n<p><code>Object.assign()</code> 함수는 첫 번쩨 인자로 넘어온 객체에 두 번째 인자의 속성들을 추가하여 반환하기 때문에,\n첫 번째 인자로 빈 객체를 넘기고, 두 번째 인자로 원본 객체를 넘기면 얇게 복제된 객체를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> clone2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>얇게 복제된 객체이기 때문에 객체가 아닌 속성을 변경할 때는 원본과 복제본이 서로 영향을 주지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">original<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone2<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2000</span>\n\nclone2<span class=\"token punctuation\">.</span>bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original <span class=\"token operator\">===</span> clone2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>하지만 객체나 배열로 된 속성을 변경해보면 서로 영향을 주는 것을 볼 수 있습니다.\n(배열도 자바스크립트에서는 객체로 취급되죠?)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">original<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone2<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\nclone2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"A\", \"B\", \"C\", \"D\"]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">===</span> clone2<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>arr <span class=\"token operator\">===</span> clone2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"전개-연산자\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EA%B0%9C-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"전개 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>…(전개 연산자)</h2>\n<p>ES6 부터는 얇은 복제를 할 때 <code>...</code>(Spread Operator, 전개 연산자)를 사용하는 개발자들이 많아지고 있습니다.\n코드가 상대적으로 좀 더 간결해지고 읽기 쉬워지기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> clone3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>original <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\noriginal<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone3<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3000</span>\n\nclone3<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"A\", \"B\", \"C\", \"D\", \"E\"]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone3<span class=\"token punctuation\">.</span>arr <span class=\"token operator\">===</span> original<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"jsonparsejsonstringify\" style=\"position:relative;\"><a href=\"#jsonparsejsonstringify\" aria-label=\"jsonparsejsonstringify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON.parse(JSON.stringify())</h2>\n<p>자, 그럼 객체 트리의 최말단 노드까지 복제, 즉 깊은 복제를 해야할 때는 어떻게 해야할까요?</p>\n<p>예전부터 널리 사용되던 편법은 <code>JSON</code> 내장 객체를 사용하는 것입니다. 아래와 같이 <code>JSON</code>의 <code>parse()</code> 메서드와 <code>stringify()</code> 메서드를 연달아 호출하면 동일한 객체 트리를 가지는 새로운 객체가 복제됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> clone4 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noriginal<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone4<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\nclone4<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"A\", \"B\", \"C\", \"D\", \"E\"]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">===</span> clone4<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>arr <span class=\"token operator\">===</span> clone4<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>엄밀히 말하면 이 방법에도 약간의 주의해야될 부분이 있는데요. 첫 번째는 json에는 함수 데이터 타입이 없기 때문에 함수 속성들은 누락된다는 점입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function func()</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone4<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>이 밖에도 객체 트리 내에 순환 참조가 있는 경우, <code>stringify()</code> 메서드에서 <code>TypeError: Converting circular structure to JSON</code>이라는 오류가 발생한다는 문제도 있습니다.</p>\n<blockquote>\n<p>자바스크립트에서 JSON 데이터를 다룰 때 사용되는 <code>JSON</code> 내장 객체에 대해서는 <a href=\"/js-json/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"직접-구현\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84\" aria-label=\"직접 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>직접 구현</h2>\n<p>이렇게 자바스크립트 객체를 완벽하게 깊은 복제하는 것은 생각했던 것보다 쉽지 않다는 것을 알게 되었습니다.\n결국은 깊은 복제를 하려면 재귀적으로 객체 트리를 따라서 말단 노드까지 모조리 복제를 해주는 함수가 필요합니다.\n직접 코드를 짜보면 대략 다음과 비슷하게 나올 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// recursion</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> clone5 <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function func()</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone5<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function func()</span></code></pre></div>\n<h2 id=\"_clonedeep-활용\" style=\"position:relative;\"><a href=\"#_clonedeep-%ED%99%9C%EC%9A%A9\" aria-label=\"_clonedeep 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>_.cloneDeep() 활용</h2>\n<p>사실 위에 작성한 코드가 수많은 경우의 수의 입력에 대해서 100% 작동할지 자신이 없습니다.\n그래서 많은 개발자들이 그냥 속편하게 Lodash라는 외부 라이브러리의 <a href=\"https://lodash.com/docs/4.17.15#cloneDeep\"><code>cloneDeep(obj)</code></a>이라는 메서드를 사용합니다.\n아무래도 오픈 소스 커뮤니티의 고수들이 오랜 시간에 거쳐 다듬어온 코드이기 때문에 직접 구현하는 것보다 훨씬 더 검증이 되어있으니까요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> clone6 <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function func()</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone6<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function func()</span></code></pre></div>\n<p>이 밖에도 검색해보시면 객체 복제를 해주는 다양한 자바스크립트 라이브러리들이 있다는 것을 확인하실 수 있으실 겁니다.</p>\n<h2 id=\"structuredclone-등장\" style=\"position:relative;\"><a href=\"#structuredclone-%EB%93%B1%EC%9E%A5\" aria-label=\"structuredclone 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>structuredClone() 등장</h2>\n<p>여기서 반가운 소식! 🙌</p>\n<p>바로 깊은 복제를 하기 좀 더 편하도록 웹 표준 API로 <code>structuredClone()</code> 함수가 비교적 최근에 추가되었다는 것입니다.\n<code>structuredClone()</code> 함수에 인자로 객체를 넘기면 깊게 복제된 새로운 객체가 반환됩니다.\n정말 쉬어졌죠? 😁</p>\n<p>한 가지 아쉬운 부분은 <code>JSON.parse(JSON.stringify(obj))</code>을 사용할 때와 마찬가지로 함수로 된 속성은 복제가 되지 않습니다.\n만약에 원본 객체에 함수로 된 속성이 포함되어 있다면 <code>DataCloneError</code> 오류가 발생하므로 주의가 필요합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> original<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ⚠️ 함수 속성은 오류를 발생시키므로 제거</span>\n<span class=\"token keyword\">const</span> clone7 <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noriginal<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone7<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\nclone7<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"A\", \"B\", \"C\", \"D\", \"E\"]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>obj <span class=\"token operator\">===</span> clone7<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">.</span>arr <span class=\"token operator\">===</span> clone7<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>자바스크립트의 <code>structuredClone()</code> 함수는 2022년 3월부터 익스플로러를 제외한 모든 브라우저에서 지원하고 있습니다.\n참고로 서버 측 자바스크립트 런타임인 Node.js에서도 v17부터 지원을 시작하였습니다.\n물론 <a href=\"/?tag=Bun\">Bun</a>과 같은 차세대 런타임에서는 <code>structuredClone()</code> 함수가 처음부터 지원하고 있습니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 코드는 아래에서 확인하고 직접 실행해보실 수 있습니다.</p>\n<ul>\n<li><a href=\"https://runkit.com/daleseo/js-objects-clone\">https://runkit.com/daleseo/js-objects-clone</a></li>\n</ul>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 자바스크립트에서 객체를 복제하는 여러가지 방법에 대해서 총정리를 해보았습니다.\n객체 복제가 얼마나 까다로울 수 있는지 놀라지 않으셨나요?</p>\n<p>항상 객체를 복제하실 때는 얇은 복제가 필요한지 깊은 복제가 필요한 상황인지에 대해서 생각해보세요.\n그리고 그 두 가지 복제 방법의 Trade Off를 잘 고려하신다면 객체 복제 관련해서 실수나 시행착오를 줄이실 수 있으실 것입니다.</p>","timeToRead":7,"fields":{"slug":"/js-objects-clone/","tags":["JavaScript","JSON","ES6","clone","Lodash","structuredClone"]},"frontmatter":{"title":"자바스크립트 객체 복제 방법 총정리","date":"Apr 29, 2018"}},"next":{"fields":{"slug":"/css-position-absolute-image-caption/"},"frontmatter":{"title":"CSS의 absolute position으로 이미지 캡션 겹치기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}