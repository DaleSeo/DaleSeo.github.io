{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-nullish-coalescing/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-optional-chaining/"},"frontmatter":{"title":"[ES2020] ?. 연산자 - Optional Chaining"}},"node":{"html":"<p>nullish coalescing을 지원하기 위해서 ES2020에서 추가된 문법인 <code>??</code> 연산자에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"-연산자를-통한-기본값-처리의-문제점\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%ED%86%B5%ED%95%9C-%EA%B8%B0%EB%B3%B8%EA%B0%92-%EC%B2%98%EB%A6%AC%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\" 연산자를 통한 기본값 처리의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>|| 연산자를 통한 기본값 처리의 문제점</h2>\n<p>그동안 자바스크립트에서는 주로 <code>||</code> 연산자(logical OR)를 사용해서 기본값 처리를 해왔는데, 이 방법은 한 가지 맹점이 있었습니다.</p>\n<p>간단한 예로, <code>options</code> 객체를 인자로 받는 다음 <code>isEnabled</code> 함수를 생각해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>의도했던 대로 <code>enabled</code> 속성값이 <code>undefined</code>이거나 <code>null</code>일 때, 기본값인 <code>true</code>를 리턴합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token operator\">></span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>enabled<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">true</span></code></pre></div>\n<p>하지만 <code>enabled</code> 속성값이 <code>false</code>일 때도, 엉뚱하게 <code>true</code>가 리턴되는 것을 볼 수 있습니다. 😝</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>enabled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">true</span></code></pre></div>\n<p>왜 이러한 오류가 발생하는 걸까요? 원인은 <code>||</code> 연산자는 자바스크립트에서 logical OR 구할 때 좌항이 <code>falsy</code>한 모든 경우에 우항을 선택하기 때문입니다.\n자바스크립트에서는 <code>undefined</code>나 <code>null</code> 뿐만 아니라 <code>false</code>, <code>0</code>, <code>\"\"</code>, <code>NaN</code> 등 다양한 값들이 <code>falsy</code>가 될 수 있습니다.</p>\n<p>따라서 <code>||</code> 연산자로 기본값을 처리하면 <code>falsy</code>에 의존하는 코드가 되어 잘못 사용하면 다음과 같이 상황에 따라서 의도치 않은 결과를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token number\">10</span>\n<span class=\"token number\">10</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"unknown\"</span>\n<span class=\"token string\">'unknown'</span></code></pre></div>\n<h2 id=\"-연산자를-통한-견고한-기본값-처리\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%ED%86%B5%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EA%B8%B0%EB%B3%B8%EA%B0%92-%EC%B2%98%EB%A6%AC\" aria-label=\" 연산자를 통한 견고한 기본값 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>?? 연산자를 통한 견고한 기본값 처리</h2>\n<p><code>??</code> 연산자를 사용하면 nullish 즉, <code>undefined</code>와 <code>null</code>에 대해서만 기본값 처리를 할 수 있습니다.</p>\n<p>위에서 작성한 코드에서 <code>||</code> 연산자만 <code>??</code> 연산자로 대체해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">??</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 테스트를 해보면 이 번에는 예상대로 <code>enabled</code> 속성값이 <code>false</code>일 때는 기본값 적용되지 않는 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token operator\">></span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>enabled<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token operator\">></span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>enabled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">false</span></code></pre></div>\n<p><code>??</code> 연산자는 다음과 같이 좌항이 <code>undefined</code>와 <code>null</code>이 아닌 경우에만 우항을 선택하며, 그 외의 경우에는 항상 좌항을 선택합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">10</span>\n<span class=\"token number\">10</span>\n<span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">10</span>\n<span class=\"token number\">0</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"unknown\"</span>\n<span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"unknown\"</span>\n<span class=\"token string\">''</span></code></pre></div>\n<h2 id=\"-연산자와-함께-사용하기\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90%EC%99%80-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\" 연산자와 함께 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>?. 연산자와 함께 사용하기</h2>\n<p><code>??</code> 연산자는 ES2020에서 함께 도입된 <code>?.</code> 연산자와 함께 사용하면 더욱 시너지를 발휘합니다.\noptional chaining을 위해 사용되는 <code>?.</code> 연산자에 대한 내용은 <a href=\"/js-optional-chaining\">관련 포스트</a>를 참고 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> user<span class=\"token operator\">?.</span>country <span class=\"token operator\">??</span> <span class=\"token string\">\"Korea\"</span>\n<span class=\"token string\">'Korea'</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>2020년 현재 대부분의 최신 브라우저는 nullish coalescing을 지원하기 때문에 <code>??</code> 연산자를 사용할 수 있습니다.\nNode.js의 경우 버전 14부터 지원하며, 그 이전 버전에서는 <a href=\"/?tag=Babel\">Babel</a>과 같은 트랜스파일러(transfiler)를 통해서 접해볼 수 있습니다.</p>\n<p>nullish coalescing에 대한 좀 더 자세한 내용은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">관련 MDN 공식 문서</a>를 참고 바랍니다.</p>","timeToRead":3,"fields":{"slug":"/js-nullish-coalescing/","tags":["JavaScript","ES6","ES2020"]},"frontmatter":{"title":"[ES2020] ?? 연산자 - Nullish Coalescing","date":"Jul 25, 2020"}},"next":{"fields":{"slug":"/python-datetime/"},"frontmatter":{"title":"[파이썬] datetime 모듈로 날짜/시간 처리하기"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}