{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-react-apollo-testing/","result":{"pageContext":{"previous":{"fields":{"slug":"/react-router-nested/"},"frontmatter":{"title":"React Router로 중첩 라우팅 하기"}},"node":{"html":"<p>Apollo Client를 사용하여 GraphQL API를 호출하는 React 컴포넌트를 테스트하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"예제-컴포넌트-작성\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-label=\"예제 컴포넌트 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 컴포넌트 작성</h2>\n<p>Apollo Client를 사용하여 GraphQL API를 호출하는 매우 간단한 React 컴포넌트를 작성해보겠습니다.\n아래 <code>PingPong</code> 컴포넌트는 GraphQL 서버에 <code>ping</code>이라는 쿼리를 호출합니다.\n서버로부터 응답이 올 때까지는 <code>Loading...</code>라는 메세지를 렌더링합니다.\n만약에, 서버로 부터 에러가 응답되면 <code>Error!</code>라는 메세지를 렌더링합니다.\n마지막으로 서버로 부터 정상적으로 데이터가 응답되면, 해당 데이터를 렌더링합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> gql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-boost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Query <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-apollo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">PING_QUERY</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query ping {\n    ping\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PingPong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Query query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token constant\">PING_QUERY</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Error<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>ping<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Query<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PingPong<span class=\"token punctuation\">;</span></code></pre></div>\n<p>기존에 Apollo Client로 React 컴포넌트를 작성해본 적이 없으신 분들은 위 코드가 이해가 어려울 수도 있습니다.\n아래 포스트에서 Apollo Client를 이용해서 React 앱 개발하는 방법에 대해서 설명하고 있으니 참고 바랍니다.</p>\n<ul>\n<li><a href=\"/graphql-react-apollo-client\">Apollo Client로 React 앱 개발하기</a></li>\n</ul>\n<h2 id=\"mockedprovider\" style=\"position:relative;\"><a href=\"#mockedprovider\" aria-label=\"mockedprovider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MockedProvider</h2>\n<p>Apollo Client를 사용하고 있는 React 컴포넌트에 대한 단위 테스트틀 작성할 때 가장 까다로운 부분이 실제로 GraphQL 서버와 연동이 필요하다는 점입니다.\n상용 코드에서 사용하는 <code>ApolloProvider</code>는 <code>client</code> prop에 <code>ApolloClient</code> 객체를 넘겨달라고 요구하는데, <code>ApolloClient</code> 객체를 생성할 때는 연동할 GraphQL 서버의 접속 정보를 설정해줘야 합니다.\n이는 “단위 테스트는 다른 모듈에 의존하지 않고 격리되어 실행될 수 있어야 한다”는 기본 원칙에 위배되며, 실제로 단위 테스트 용 GraphQL 서버를 갖출 수 있다고 해도 테스트 실행 속도가 매우 느려질 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ApolloClient <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-boost\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-apollo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uri<span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.my-graphql-server.com\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>ApolloProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>MyComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ApolloProvider<span class=\"token operator\">></span></code></pre></div>\n<p>해결 방법은 <code>ApolloProvider</code>를 모킹(mocking)하여 실제로 GraphQL 서버와 연동하는 것처럼 React 컴포넌트를 속여주는 것입니다.\n이를 위해, Apollo Client의 React 용 라이브러리인 <code>react-apollo</code>는 <code>MockedProvider</code>를 제공해주고 있습니다.\n<code>MockedProvider</code>는 <code>ApolloClient</code> 객체를 필요로 하는 <code>ApolloProvider</code>와 달리 단지 가짜 데이터만을 필요로 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MockedProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-apollo/test-utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    request<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      query<span class=\"token operator\">:</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n      variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    result<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>MockedProvider mocks<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mocks<span class=\"token punctuation\">}</span> addTypename<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>MyComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MockedProvider<span class=\"token operator\">></span></code></pre></div>\n<p>각 요청에 대한 가짜 응답 결과를 담고 있는 <code>mocks</code> 배열을 <code>MockedProvider</code>에 넘겨주면 실제 GraphQL 서버가 없이도 <code>MyComponent</code>를 테스트할 수가 있습니다.</p>\n<h2 id=\"단위-테스트-작성\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9E%91%EC%84%B1\" aria-label=\"단위 테스트 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단위 테스트 작성</h2>\n<p>React 테스트를 작성할 때는 많이 사용되는 Jest와 React Testing Library를 이용해서 예제 컴포넌트에 대한 테스트를 작성해보겠습니다.</p>\n<blockquote>\n<p>Jest와 React Testing Library에 대한 기본적인 설명은 다음 포스트를 참고 바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/jest-basic\">Jest로 기본적인 테스트 작성하기</a></li>\n<li><a href=\"/react-testing-library\">React Testing Library 사용법</a></li>\n</ul>\n<p>먼저 서버로부터 응답이 올 때까지는 <code>Loading...</code>라는 메세지를 제대로 렌더링이 되는지 체크해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MockedProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-apollo/test-utils\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> wait <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> PingPong<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">PING_QUERY</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./PingPong\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;PingPong/> renders loading while fetching data\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>MockedProvider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>PingPong <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MockedProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loading...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>React Testing Library의 <code>render()</code> 함수를 이용해서 테스트할 <code>PingPong</code> 컴포넌트를 DOM에 렌더링해야합니다.\n이 때, 위에서 설명드린 <code>MockedProvider</code> 컴포넌트로 <code>PingPong</code> 컴포넌트를 감싸줘야 합니다.\n그 다음, React Testing Library의 <code>getByText()</code> 함수로 <code>Loading...</code> 메세지를 포함하고 있는 컴포넌트를 선택합니다.\n마지막으로 <code>jest-dom</code>의 매처 함수인 <code>toBeInTheDocument()</code>를 이용해서 선택한 컴포넌트가 DOM 안에 존재하고 있는지 검증합니다.</p>\n<p>다음으로 서버로 부터 에러가 응답되면 <code>Error!</code>라는 메세지가 제대로 렌더링이 되는지 체크해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;PingPong/> renders error when error is responded\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>MockedProvider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>PingPong <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MockedProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>MockedProvider</code>는 <code>mocks</code> prop을 넘기지 않은 경우에는 항상 가짜 에러를 응답해줍니다.\n여기서 중요한 것은, 화면에서 <code>Error!</code> 메세지가 나타날 때까지 기다려야 한다는 점입니다.\nReact Testing Library의 <code>wait()</code> 함수와 JavaScript의 <code>async/await</code> 키워드를 사용하여 비동기 처리를 해줍니다.</p>\n<p>마지막으로 서버로 부터 정상적으로 데이터가 응답되면, 해당 데이터가 렌더링되는지를 체크해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;PingPong/> renders data when data is responded\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      request<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        query<span class=\"token operator\">:</span> <span class=\"token constant\">PING_QUERY</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      result<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ping<span class=\"token operator\">:</span> <span class=\"token string\">\"pong\"</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>MockedProvider mocks<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mocks<span class=\"token punctuation\">}</span> addTypename<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>PingPong <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>MockedProvider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 번에는 <code>PingPong</code> 컴포넌트가 가짜 응답을 받아야 하기 때문에, <code>MockedProvider</code> 컴포넌트의 <code>mocks</code> prop에 <code>ping</code> 쿼리에 대한 가짜 응답을 담고 있는 배열을 넘겨줍니다.\n대게의 경우 <code>addTypename</code> prop은 <code>false</code>로 세팅하는데, <code>true</code> 세팅해줄 경우, 요청 정보가 <code>__typename</code> 필드까지 포함해야 하기 때문입니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Apollo Client를 사용하여 GraphQL API를 호출하는 React 컴포넌트를 테스트하는 방법에 대해서 알아보겠습니다.\n예제 프로젝트의 전체 코드는 아래를 통해 확인하실 수 있습니다.</p>\n<iframe src=\"https://codesandbox.io/embed/graphql-react-apollo-client-testing-hvfwc?fontsize=14\" title=\"graphql-react-apollo-testing\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>","timeToRead":4,"fields":{"slug":"/graphql-react-apollo-testing/","tags":["JavaScript","JS","GraphQL","Apollo","ApolloClient","MockedProvider"]},"frontmatter":{"title":"[GraphQL] Apollo Client를 사용하는 React 컴포넌트 테스트하기 (MockedProvider)","date":"Aug 3, 2019"}},"next":{"fields":{"slug":"/html-semantic-markup/"},"frontmatter":{"title":"[HTML] 시멘틱 마크업"}}}}}