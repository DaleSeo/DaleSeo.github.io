{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-logging-config/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-faker/"},"frontmatter":{"title":"파이썬으로 가짜 데이터 생성하기 - Faker"}},"node":{"html":"<p><a href=\"/python-logging\">지난 포스팅</a>에서 파이썬의 <code>logging</code> 내장 모듈을 이용해서 정말 기본적인 로깅 방법에 대해서 살펴보았습니다.\n이번 포스팅에서는 애플리케이션 규모가 커짐에 따라 어떻게 효과적으로 로깅을 설정해야 하는지에 대해서 다뤄보도록 하겠습니다.</p>\n<h2 id=\"핵심-컴포넌트\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"핵심 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 컴포넌트</h2>\n<p>로깅 설정을 제대로 하기 위해서는 먼저 로깅 시스템을 구성하는 핵심 컴포넌트를 이해하는 것이 중요합니다.</p>\n<p>먼저 가장 로깅 시스템의 가장 근간이 되는 로거(logger)는 로그 메시지를 남기기 위해서 우리가 직접 사용하는 프로그래밍 인터페이스를 제공합니다.\n우리는 로거를 통해서 <code>debug()</code>, <code>info()</code>, <code>warning()</code>, <code>error()</code>와 같은 메서드를 호출해서 로그 메시지를 로깅 시스템에 전달할 수 있습니다.\n모든 로거는 이름을 가지며, 최상위(root) 로거의 자식이 됩니다. 이 로깅의 계층 개념에 대해서는 밑에서 예제를 통해 추가 설명을 드리겠습니다.</p>\n<p>로거가 로그를 남기라고 전달을 하면, 로깅 시스템의 어디선가에서는 이를 받아서 처리를 해줘야겠죠? 이 부분은 핸들러(handler)가 담당합니다.\n우리는 핸들러를 통해서 로그 메시지를 다양한 방식으로 처리할 수 있습니다. 예를 들어, 단순히 콘솔이나 파일에 출력할 수도 있고, 이메일로 보내거나, 외부 로깅 서비스로 전달할 수도 있습니다.\n하나의 로거에는 여러 개의 핸들러를 설정할 수 있기 때문에, 하나의 로그 메시지를 여러가지 방식으로 처리할 수 있습니다.</p>\n<p>마지막으로 로그 메시지를 어떤 형태(format)로 남기냐는 문제가 남는데요. 이 부분은 포맷터(formatter)를 통해서 명시할 수 있습니다.\n우리는 포맷터를 통해서 로그 메시지 뿐만 아니라 로그 발생 시각, 로그 심각도, 함수 이름, 라인 번호 등도 함께 기록할 수 있습니다.\n포맷터를 핸들러에 설정을 해주면 핸들러는 포맷터에 설정되어 있는 형태대로 로그 메시지를 처리해줍니다.</p>\n<p>참고로, 이 부분은 비단 파이썬에 국한되지 않고, 대부분 언어들의 로깅 시스템에서 차용하고 있는 범용적인 개념입니다.</p>\n<h2 id=\"코드로-로깅-설정\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A1%9C-%EB%A1%9C%EA%B9%85-%EC%84%A4%EC%A0%95\" aria-label=\"코드로 로깅 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드로 로깅 설정</h2>\n<p>위에서 설명드린 핵심 개념을 이해하기 위해서 먼저, 간단하게 코드로 로깅 설정을 해보겠습니다.</p>\n<p>우선, <code>logging</code> 모듈을 임포트합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> logging</code></pre></div>\n<p>다음, 두 개의 포맷터를 생성하겠습니다. 첫 번째 포맷터는 간단한 형태를 가지고, 두 번째 포맷터는 복잡한 형태를 가집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">simple_formatter <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>Formatter<span class=\"token punctuation\">(</span><span class=\"token string\">\"[%(name)s] %(message)s\"</span><span class=\"token punctuation\">)</span>\ncomplex_formatter <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>Formatter<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"%(asctime)s %(levelname)s [%(name)s] [%(filename)s:%(lineno)d] - %(message)s\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음, 이전 단계에서 생성한 포맷터를 사용하여 두 개의 핸들러를 생성하겠습니다.\n첫 번째 핸들러는 로그를 콘솔에 출력해주는데, 간단한 형태의 포맷터를 사용하며, <code>DEBUG</code> 레벨 이상의 로그를 처리해줍니다.\n두 번째 핸들러는 로그를 파일에 출력해주는데, 복잡한 형태의 포맷터를 사용하며, <code>ERROR</code> 레벨 이상의 로그를 처리해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">console_handler <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>StreamHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole_handler<span class=\"token punctuation\">.</span>setFormatter<span class=\"token punctuation\">(</span>simple_formatter<span class=\"token punctuation\">)</span>\nconsole_handler<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>logging<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span>\n\nfile_handler <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>FileHandler<span class=\"token punctuation\">(</span><span class=\"token string\">\"error.log\"</span><span class=\"token punctuation\">)</span>\nfile_handler<span class=\"token punctuation\">.</span>setFormatter<span class=\"token punctuation\">(</span>complex_formatter<span class=\"token punctuation\">)</span>\nfile_handler<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>logging<span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음, 최상위(root) 로거에 이전 단계에서 생성한 핸들러 두 개를 연결해주도록 하겠습니다.\n최상위 로거는 <code>WARNING</code> 심각도 이상의 로그만 남기도록 설정하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">root_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nroot_logger<span class=\"token punctuation\">.</span>addHandler<span class=\"token punctuation\">(</span>console_handler<span class=\"token punctuation\">)</span>\nroot_logger<span class=\"token punctuation\">.</span>addHandler<span class=\"token punctuation\">(</span>file_handler<span class=\"token punctuation\">)</span>\nroot_logger<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>logging<span class=\"token punctuation\">.</span>WARNING<span class=\"token punctuation\">)</span></code></pre></div>\n<p>마지막으로, 특정 모듈을 위한 로거에 대한 설정을 해보겠습니다.\n<code>parent</code> 모듈은 <code>INFO</code> 레벨 이상의 로그만 남기도록, <code>parent.child</code> 모듈은 <code>DEBUG</code> 레벨 이상의 로그만 남기도록 하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">parent_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\nparent_logger<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>logging<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">)</span>\n\nchild_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">\"parent.child\"</span><span class=\"token punctuation\">)</span>\nchild_logger<span class=\"token punctuation\">.</span>setLevel<span class=\"token punctuation\">(</span>logging<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이런 식으로 모듈 별로 로깅 레벨을 다른 게 설정해줌으로써, 특정 모듈에 대해서는 다른 모듈에 비해서 좀 더 자세한 로그를 남길 수 있습니다.\n여기서 <code>parent</code> 로거와 <code>parent.child</code> 로거에 별도로 핸들러 설정을 하지 않아도 되는 이유는 자식 로거의 로그 메시지는 부모 로거로 전파(propogate)되기 때문입니다.</p>\n<p>즉, <code>parent.child</code> 로거의 로그 메시지는 <code>parent</code> 로거로 전파되고, 이는 다시 최종적으로 최상위 로거로 전파됩니다.\n따라서 <code>parent</code> 로거와 <code>parent.child</code> 로거가 남기는 로그는 취상위 로거에 연결되어 있는 두 개의 핸들러에 의해서 처리될 것 입니다.</p>\n<p>만약에 자식 로거에도 핸들러 설정을 해주고 싶다면, 해당 로거의 <code>propogate</code> 속성을 <code>False</code>로 설정하여 부모 로거로의 전파를 차단하면 됩니다.\n그러지 않으면, 의도치 않게 로그가 자식 핸들러와 부모 핸들러에 의해서 중복 처리가 될 것 입니다.</p>\n<h2 id=\"파일로-로깅-설정\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%A1%9C%EA%B9%85-%EC%84%A4%EC%A0%95\" aria-label=\"파일로 로깅 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일로 로깅 설정</h2>\n<p>코드로 로깅 설정을 하면 유지보수가 까다로울 수 있기 때문에 실제 프로젝트에서는 별도의 파일을 이용해서 로깅 설정을 하는 경우가 많습니다.\n위에서 코딩한 로깅 설정은 다음과 같이 파일로 변환을 할 수 있습니다.</p>\n<ul>\n<li>logging.conf</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[formatters]\nkeys=simple,complex\n\n[formatter_simple]\nformat=[%(name)s] %(message)s\n\n[formatter_complex]\nformat=%(asctime)s %(levelname)s [%(name)s] [%(filename)s:%(lineno)d] - %(message)s\n\n[handlers]\nkeys=console,file\n\n[handler_console]\nclass=StreamHandler\nargs=(sys.stdout,)\nformatter=simple\nlevel=DEBUG\n\n[handler_file]\nclass=FileHandler\nargs=(\"error.log\",)\nformatter=complex\nlevel=ERROR\n\n[loggers]\nkeys=root,parent,child\n\n[logger_root]\nlevel=WARNING\nhandlers=console,file\n\n[logger_parent]\nqualname=parent\nlevel=INFO\nhandlers=\n\n[logger_child]\nqualname=parent.child\nlevel=DEBUG\nhandlers=</code></pre></div>\n<p>그 다음, <code>logging.config.fileConfig()</code> 함수에 파일 경로를 넘겨주기면 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">import</span> logging<span class=\"token punctuation\">.</span>config\n\nlogging<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>fileConfig<span class=\"token punctuation\">(</span><span class=\"token string\">\"logging.conf\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>파일로 로깅 설정할 때 자세한 문법은 아래 파이썬 공식 레퍼런스를 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/logging.config.html#configuration-file-format\">Configuration file format</a></li>\n</ul>\n<h2 id=\"사전으로-로깅-설정\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84%EC%9C%BC%EB%A1%9C-%EB%A1%9C%EA%B9%85-%EC%84%A4%EC%A0%95\" aria-label=\"사전으로 로깅 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전으로 로깅 설정</h2>\n<p><a href=\"https://docs.python.org/3/howto/logging.html#configuring-logging\">파이썬의 공식 가이드</a>에 따르면 파이썬의 내장 자료 구조인 사전(dictionary)을 사용해서 로깅 설정을 하는 것이 권장되고 있습니다.\n위에서 코드나 파일로 했던 로깅 설정을 사전으로 옮긴 후에 <code>logging.config.fileConfig()</code> 함수에 사전 객체를 넘겨주기면 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">import</span> logging<span class=\"token punctuation\">.</span>config\n\nconfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"formatters\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"simple\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"format\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"[%(name)s] %(message)s\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"complex\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"format\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"%(asctime)s %(levelname)s [%(name)s] [%(filename)s:%(lineno)d] - %(message)s\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"handlers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"console\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"class\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"logging.StreamHandler\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"formatter\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"simple\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"level\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"DEBUG\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"file\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"class\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"logging.FileHandler\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"error.log\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"formatter\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"complex\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"level\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"handlers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"console\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"file\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"level\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"WARNING\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"loggers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"level\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"INFO\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parent.child\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"level\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"DEBUG\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nlogging<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>dictConfig<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></code></pre></div>\n<p>사전으로 로깅 설정할 때 자세한 문법은 아래 파이썬 공식 레퍼런스를 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/logging.config.html#configuration-dictionary-schema\">Configuration dictionary schema</a></li>\n</ul>\n<h2 id=\"로깅-설정-테스트\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B9%85-%EC%84%A4%EC%A0%95-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"로깅 설정 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로깅 설정 테스트</h2>\n<p>위에서 여러가지 방법으로 설정한 로깅 시스템을 이용해서 로그를 남겨보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    root_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    root_logger<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"디버그\"</span><span class=\"token punctuation\">)</span>\n    root_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"정보\"</span><span class=\"token punctuation\">)</span>\n    root_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"오류\"</span><span class=\"token punctuation\">)</span>\n\n    parent_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span>\n    parent_logger<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"디버그\"</span><span class=\"token punctuation\">)</span>\n    parent_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"정보\"</span><span class=\"token punctuation\">)</span>\n    parent_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"오류\"</span><span class=\"token punctuation\">)</span>\n\n    child_logger <span class=\"token operator\">=</span> logging<span class=\"token punctuation\">.</span>getLogger<span class=\"token punctuation\">(</span><span class=\"token string\">\"parent.child\"</span><span class=\"token punctuation\">)</span>\n    child_logger<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"디버그\"</span><span class=\"token punctuation\">)</span>\n    child_logger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"정보\"</span><span class=\"token punctuation\">)</span>\n    child_logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"오류\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>콘솔 핸들러는 간단한 포맷터가 설정되어 있기 때문에 콘솔에는 다음과 같이 간단한 형태의 로그가 출력이 됩니다.\n최상위 로거는 <code>ERROR</code> 레벨 이상의 로그만 남기는 반면에, <code>parent.child</code> 모듈에 대해서는 <code>DEBUG</code> 레벨까지 로그가 남는 것을 확인할 수 있습니다.</p>\n<ul>\n<li>콘솔</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[root] 오류\n[parent] 정보\n[parent] 오류\n[parent.child] 디버그\n[parent.child] 정보\n[parent.child] 오류</code></pre></div>\n<p>파일 핸들러는 <code>ERROR</code> 레벨 이상의 로그만 처리하도록 설정해놨기 때문에, 아래와 같이 파일에는 에러 로그만 남는 것을 알 수 있습니다.</p>\n<ul>\n<li>파일 (error.log)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2020-03-07 17:14:56,940 ERROR [root] [main.py:32] - 오류\n2020-03-07 17:14:56,940 ERROR [parent] [main.py:37] - 오류\n2020-03-07 17:14:56,940 ERROR [parent.child] [main.py:42] - 오류</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로, 코드, 파일, 사전을 이용해서 파이썬 애플리케이션의 로깅 설정을 하는 방법에 대해서 알아보았습니다.</p>","timeToRead":6,"fields":{"slug":"/python-logging-config/","tags":["Python","파이썬","logging","로깅","Logger","Hander","Formatter"]},"frontmatter":{"title":"파이썬 로깅 설정 - logger, handler, formatter","date":"Mar 7, 2020"}},"next":{"fields":{"slug":"/python-os-environ/"},"frontmatter":{"title":"파이썬에서 환경 변수 읽어오기 (os.environ)"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}