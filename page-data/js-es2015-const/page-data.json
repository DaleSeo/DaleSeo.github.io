{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-es2015-const/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-es2015-default-parameters/"},"frontmatter":{"title":"[ES2015] 기본 매개변수 (Default Parameters)"}},"node":{"html":"<p>이번 포스팅에서는 ES2015에서 <code>let</code>과 함께 자바스크립트에 추가된 <code>const</code> 사용법에 대해서 알아보도록 하겠습니다.</p>\n<p><code>let</code> 사용법에 대해서는 아래 포스팅들을 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"/js-es2015-let\">let으로 변수 선언하기 1</a></li>\n<li><a href=\"/js-es2015-let-in-for\">let으로 변수 선언하기 2</a></li>\n</ul>\n<h2 id=\"매직-넘버\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EC%A7%81-%EB%84%98%EB%B2%84\" aria-label=\"매직 넘버 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매직 넘버</h2>\n<p>아래 코드에서 <code>findUser</code> 함수는 안자로 받은 <code>id</code> 값이 <code>100</code>보다 작은지 여부에 따라서 로직이 분기되어 있습니다.\n그리고 <code>id</code> 값이 <code>100</code>보다 큰 경우, 가짜 사용자 객체를 생성 후, <code>name</code> 속성값의 길이가 <code>50</code>보다 큰지 여부에 따라 다시 한 번 로직이 분기되고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> failureMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"잘못된 아이디입니다!\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>failureMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> successMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"사용자를 조회하였습니다.\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>successMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> fakeUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"사용자 #\"</span> <span class=\"token operator\">+</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fakeUser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> fakeUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예제와 같은 코드에서 <code>100</code>, <code>50</code>과 같은 숫자 리터럴은 흔히 매직 넘버라고 불립니다.</p>\n<p>왜냐하면, 코드 최초 작성자가 아닌 이상 이와 같은 숫자의 정확한 용도를 파악하기 어려워서 유지보수가 어렵기 때문입니다.</p>\n<p>그리고 이러한 숫자가 코드 베이스 전반에 흩어져 있는 경우, 이 값이 바뀌었을 때 일일이 찾아서 변경해줘야하기 때문에 애플리케이션의 안정성을 떨어뜨리게됩니다.</p>\n<h2 id=\"상수-선언하기\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%88%98-%EC%84%A0%EC%96%B8%ED%95%98%EA%B8%B0\" aria-label=\"상수 선언하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상수 선언하기</h2>\n<p>자바스크립트에서는 <code>const</code> 키워드를 이용해서 상수를 선언할 수 있습니다.\n<strong>여기서 상수란 한 번 선언되어 초기화되면 다시 선언되거나 할당될 수 없는 변수를 의미합니다.</strong></p>\n<p>따라서 예제 코드는 다음과 같이 개선할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">MIN_USER_ID</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">MAX_NAME_LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MIN_USER_ID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> failureMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"잘못된 아이디입니다!\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>failureMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> successMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"사용자를 조회하였습니다.\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>successMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> fakeUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"사용자 #\"</span> <span class=\"token operator\">+</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token constant\">MAX_NAME_LENGTH</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fakeUser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> fakeUser<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MAX_NAME_LENGTH</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>상수 선언을 위해서 기존 코드 보다 두 줄이 더 추가되었지만, 대신 읽기 쉽고 유지 보수하기 용이한 코드를 얻게 되었습니다.</p>\n<h2 id=\"const-사용시-주의사항\" style=\"position:relative;\"><a href=\"#const-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"const 사용시 주의사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>const 사용시 주의사항</h2>\n<p><code>const</code> 키워드로 선언된 변수는 재할당 뿐만 아니라 재선언도 불가능합니다.\n즉, 다음과 같은 코드는 구문 오류를 일으킵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">MIN_USER_ID</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MIN_USER_ID</span> <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또한, <code>const</code>는 선언과 동시에 반드시 초기화가 되어야 합니다.\n따라서 다음과 같은 선 선언, 후 할당 코드도 허용되지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">MIN_USER_ID</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token constant\">MIN_USER_ID</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로 <code>const</code>도 <code>let</code>과 마찬가지로 block scope을 가집니다.\n따라서 특정 블록 내부에서 선언한 상수는 블록 외부에서 접근이 불가합니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 자바스크립트에서 상수 선언을 위해 제공하는 <code>const</code> 키워드에 대해서 알아보았습니다.</p>\n<p>그럼, <code>var</code>와 <code>let</code>, <code>const</code> 중에서 어떤 것을 이용하여 변수를 선언해야 할까요?</p>\n<p>저는 개인적으로, ES2015를 지원하는 자바스크립트 엔진에서 돌아가는 코드라면 <code>var</code>를 쓸 이유는 없다고 봅니다.\n<a href=\"/js-var-issues\">이전 포스팅</a>에서 설명드렸던 것 처럼 여러가지 예측할 수 없는 상황들이 발생하기 때문입니다.</p>\n<p><code>let</code>과 <code>const</code>는 변수가 프로그램의 생명 주기 동안 변경될 수 있는지 없는지, 그리고 로직의 문맥에 따라서 결정해야 할 일이라 봅니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const</a></p>","timeToRead":3,"fields":{"slug":"/js-es2015-const/","tags":["JavaScript","자바스크립트","ES6"]},"frontmatter":{"title":"[ES2015] const로 상수 선언하기","date":"Feb 26, 2017"}},"next":{"fields":{"slug":"/js-es2015-let-in-for/"},"frontmatter":{"title":"[ES2015] let으로 변수 선언하기 2"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}