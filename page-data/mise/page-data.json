{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/mise/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>여러 소프트웨어 개발을 하다 보면 전역과 프로젝트별로 프로그래밍 언어의 런타임 버전을 관리하는 것이 쉽지 않습니다.\n그래서 Node.js는 <a href=\"/js-nvm/\">nvm</a>, Python은 <a href=\"python-pyenv\">pyenv</a>, Java는 SDKMAN과 같은 도구를 사용해서 버전을 관리하실 거에요.\n하지만 이 역시도 여러 프로그래밍 언어로 개발을 하다보면 런타임마다 관리 도구와 설정 파일이 달라서 정신이 혼미해질 때가 있죠. 😵‍💫</p>\n<p>그래서 등장한 Mise는 하나의 CLI로 여러 프로그래밍 언어의 런타임을 빠르고 간편하게 관리할 수 있게 해주는 도구입니다.\n<a href=\"https://asdf-vm.com/\">asdf</a>에서 영감을 받았지만, 속도와 사용성을 모두 개선한 Rust 기반의 차세대 통합 런타임 매니저죠.</p>\n<h2 id=\"mise-설치\" style=\"position:relative;\"><a href=\"#mise-%EC%84%A4%EC%B9%98\" aria-label=\"mise 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mise 설치</h2>\n<p>Mise는 크로스 플랫폼 CLI로서 대부분의 운영 체제룰 지원합니다.</p>\n<p>macOS에서는 Homebrew를 통해서 손쉽게 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> mise</code></pre></div>\n<p>Windows에서는 Chocolatey를 통해서 손쉽게 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ choco <span class=\"token function\">install</span> mise</code></pre></div>\n<p>Linux 계열 운영체제나 Windows에서 WSL(Windows Subsystem for Linux)를 사용하시는 분은 <code>curl</code> 명령어로 설치하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> https://mise.run <span class=\"token operator\">|</span> <span class=\"token function\">sh</span></code></pre></div>\n<p>설치 후에는 새로운 쉘을 열 때 <code>mise activate</code>가 자동으로 실행될 수 있도록 RC 파일에 설정을 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(mise activate zsh)\"'</span> <span class=\"token operator\">>></span> ~/.zshrc</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(~/.local/bin/mise activate bash)\"'</span> <span class=\"token operator\">>></span> ~/.bashrc</code></pre></div>\n<p>Windows에서는 <code>&#x3C;homedir>\\AppData\\Local\\mise\\shims</code> 경로를 <code>PATH</code> 환경 변수에 추가해줍니다.</p>\n<h2 id=\"설치-가능한-버전-확인\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%B2%84%EC%A0%84-%ED%99%95%EC%9D%B8\" aria-label=\"설치 가능한 버전 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치 가능한 버전 확인</h2>\n<p>런타임을 설치할 때 항상 최선 버전을 설치할 수 있는 것은 아니죠?\n프로젝트의 환경에 경우에 따라 구 버전을 설치해야하는 경우도 있습니다.\n그래서 Mise는 현재 설치 가능한 버전이 무엇이 있는지 확인해보는 <code>mise ls-remote</code> 명령어를 제공합니다.</p>\n<p>예를 들어, 현재 이 글을 쓰고 있는 시점에서 설치 가능한 주요 프로그래밍 언어 별 런타임 버전을 확인해보겠습니다.</p>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mise ls-remote python <span class=\"token operator\">|</span><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token number\">3.13</span>.0\n<span class=\"token number\">3.13</span>-dev\n<span class=\"token number\">3.13</span>.1\n<span class=\"token number\">3.13</span>.2\n<span class=\"token number\">3.13</span>.3\n<span class=\"token number\">3.13</span>.4\n<span class=\"token number\">3.13</span>.5\n<span class=\"token number\">3.14</span>.0b4\n<span class=\"token number\">3.14</span>-dev\n<span class=\"token number\">3.15</span>-dev</code></pre></div>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise ls-remote <span class=\"token function\">java</span> <span class=\"token operator\">|</span><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token number\">21.0</span>.1\n<span class=\"token number\">21.0</span>.2\n<span class=\"token number\">22.0</span>.0\n<span class=\"token number\">22.0</span>.1\n<span class=\"token number\">22.0</span>.2\n<span class=\"token number\">23.0</span>.0\n<span class=\"token number\">23.0</span>.1\n<span class=\"token number\">24.0</span>.0\n<span class=\"token number\">24.0</span>.1\n<span class=\"token number\">24.0</span>.2</code></pre></div>\n<div class=\"gatsby-code-title\">Node.js</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mise ls-remote <span class=\"token function\">node</span> <span class=\"token operator\">|</span><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token number\">23.11</span>.0\n<span class=\"token number\">23.11</span>.1\n<span class=\"token number\">24.0</span>.0\n<span class=\"token number\">24.0</span>.1\n<span class=\"token number\">24.0</span>.2\n<span class=\"token number\">24.1</span>.0\n<span class=\"token number\">24.2</span>.0\n<span class=\"token number\">24.3</span>.0\n<span class=\"token number\">24.4</span>.0\n<span class=\"token number\">24.4</span>.1</code></pre></div>\n<div class=\"gatsby-code-title\">Bun</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise ls-remote bun <span class=\"token operator\">|</span><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token number\">1.2</span>.9\n<span class=\"token number\">1.2</span>.10\n<span class=\"token number\">1.2</span>.11\n<span class=\"token number\">1.2</span>.12\n<span class=\"token number\">1.2</span>.13\n<span class=\"token number\">1.2</span>.14\n<span class=\"token number\">1.2</span>.15\n<span class=\"token number\">1.2</span>.16\n<span class=\"token number\">1.2</span>.17\n<span class=\"token number\">1.2</span>.18</code></pre></div>\n<p><code>| tail -10</code>을 붙여서 결과값을 10개로 제한하였습니다.\n그러지 않으면 결과가 너무 많이 나오기 때문입니다.</p>\n<h2 id=\"전역-런타임-관리\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EB%9F%B0%ED%83%80%EC%9E%84-%EA%B4%80%EB%A6%AC\" aria-label=\"전역 런타임 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 런타임 관리</h2>\n<p>프로그래밍 언어 런타임을 전역으로 설치하려면 <code>mise use</code> 또는 <code>mise u</code> 명령어를 <code>--global</code> 옵션과 함께 사용하면 됩니다.\n버전은 프로그래밍 언어 이름 뒤에 <code>@</code> 기호로 기분해서 <code>이름@버전</code> 형태로 명시해줍니다.\n버전을 명시하지 않으면 현재 시점에서 최신 버전을 설치합니다.</p>\n<p>예를 들어, Python 3.13, Java 22, Node.js 24과 Bun 최신 버전을 설치해보겠습니다.</p>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise use <span class=\"token parameter variable\">-g</span> python@3.13\nmise python@3.13.5 ✓ installed                                                                     mise ~/.config/mise/config.toml tools: python@3.13.5\n$ python <span class=\"token parameter variable\">--version</span>\nPython <span class=\"token number\">3.13</span>.5</code></pre></div>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise use <span class=\"token parameter variable\">-g</span> java@22\nmise use <span class=\"token parameter variable\">-g</span> java@22\nmise To <span class=\"token builtin class-name\">enable</span> macOS integration, run the following commands:\n<span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /Library/Java/JavaVirtualMachines/22.0.2.jdk\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /Users/dale/.local/share/mise/installs/java/22.0.2/Contents /Library/Java/JavaVirtualMachines/22.0.2.jdk/Contents\n\nopenjdk version <span class=\"token string\">\"22.0.2\"</span> <span class=\"token number\">2024</span>-07-16\nOpenJDK Runtime Environment <span class=\"token punctuation\">(</span>build <span class=\"token number\">22.0</span>.2+9-70<span class=\"token punctuation\">)</span>\nOpenJDK <span class=\"token number\">64</span>-Bit Server VM <span class=\"token punctuation\">(</span>build <span class=\"token number\">22.0</span>.2+9-70, mixed mode, sharing<span class=\"token punctuation\">)</span>\nmise java@22.0.2 ✓ installed                                                                                                                                                           mise ~/.config/mise/config.toml tools: java@22.0.2\n$ <span class=\"token function\">java</span> <span class=\"token parameter variable\">--version</span>\nopenjdk <span class=\"token number\">22.0</span>.2 <span class=\"token number\">2024</span>-07-16\nOpenJDK Runtime Environment <span class=\"token punctuation\">(</span>build <span class=\"token number\">22.0</span>.2+9-70<span class=\"token punctuation\">)</span>\nOpenJDK <span class=\"token number\">64</span>-Bit Server VM <span class=\"token punctuation\">(</span>build <span class=\"token number\">22.0</span>.2+9-70, mixed mode, sharing<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">Node.js</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise use <span class=\"token parameter variable\">-g</span> node@24\nmise use node@24\nmise node@24.4.1 ✓ installed                                                                       mise ~/.config/mise/config.toml tools: node@24.4.1\n$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span>\nv24.4.1</code></pre></div>\n<div class=\"gatsby-code-title\">Bun</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise use <span class=\"token parameter variable\">-g</span> bun\nmise bun@1.2.18 ✓ installed                                                                        mise ~/.config/mise/config.toml tools: bun@1.2.18\n$ bun <span class=\"token parameter variable\">-v</span>\n<span class=\"token number\">1.2</span>.18</code></pre></div>\n<p>런타임의 설치가 끝나고 나서 <code>mise ls</code> 명령어를 치면 설치된 런타임과 버전을 일목요연하게 확인할 수 있습니다.\nRequested 열에는 설치했을 때 명시했던 버전이 나오고, Version 열에는 실제로 설치된 정확한 버전이 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token function\">ls</span>\nTool    Version  Source                      Requested\nbun     <span class=\"token number\">1.2</span>.18   ~/.config/mise/config.toml  latest\n<span class=\"token function\">java</span>    <span class=\"token number\">22.0</span>.2   ~/.config/mise/config.toml  <span class=\"token number\">22</span>\n<span class=\"token function\">node</span>    <span class=\"token number\">24.4</span>.1   ~/.config/mise/config.toml  <span class=\"token number\">24</span>\npython  <span class=\"token number\">3.13</span>.5   ~/.config/mise/config.toml  <span class=\"token number\">3.13</span></code></pre></div>\n<p>전역 런타임의 버전은 <code>~/.config/mise/config.toml</code> 파일에서 관리되는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> ~/.config/mise/config.toml\n<span class=\"token punctuation\">[</span>tools<span class=\"token punctuation\">]</span>\nbun <span class=\"token operator\">=</span> <span class=\"token string\">\"latest\"</span>\n<span class=\"token function\">java</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"22\"</span>\n<span class=\"token function\">node</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"24\"</span>\npython <span class=\"token operator\">=</span> <span class=\"token string\">\"3.13\"</span></code></pre></div>\n<h2 id=\"프로젝트-별-런타임-관리\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B3%84-%EB%9F%B0%ED%83%80%EC%9E%84-%EA%B4%80%EB%A6%AC\" aria-label=\"프로젝트 별 런타임 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 별 런타임 관리</h2>\n<p>전역에서는 최신 버전의 런타임을 사용하더라도, 프로젝트 별로는 사용하는 런타임 버전이 상이할 수 있습니다.\n이럴 때는 Mise를 통해서 프로젝트 별로 런타임 관리를 할 수 있습니다.</p>\n<p>예를 들어, <code>our-project</code> 폴더 안에 있는 프로젝트의 Node.js 버전을 18로 지정해보겠습니다.\n그러면 Node.js 18이 이미 설치되어 있지 않은 경우, 먼저 설치 후에 프로젝트에 설정이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> our-project\n$ mise use node@18\nmise node@18.20.8 ✓ installed                                                                                       mise ~/work/daleui/mise.toml tools: node@18.20.8</code></pre></div>\n<p>버전을 확인해보면, 전역에서 실치했던 Node.js 24가 아니라 Node.js 18이 확인됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span>\nv18.20.8</code></pre></div>\n<p><code>mise ls</code> 명령어를 실행해보시면 이제 Node.js v18이 활성화되어 있는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token function\">ls</span>\nTool    Version  Source                       Requested\nbun     <span class=\"token number\">1.2</span>.18   ~/.config/mise/config.toml   latest\n<span class=\"token function\">java</span>    <span class=\"token number\">22.0</span>.2   ~/.config/mise/config.toml   <span class=\"token number\">22</span>\n<span class=\"token function\">node</span>    <span class=\"token number\">18.20</span>.8  ~/work/our-project/mise.toml <span class=\"token number\">18</span>\n<span class=\"token function\">node</span>    <span class=\"token number\">24.4</span>.1\npython  <span class=\"token number\">3.13</span>.5   ~/.config/mise/config.toml   <span class=\"token number\">3.13</span></code></pre></div>\n<p>프로젝트의 최상위 디렉토리의 <code>mise.toml</code> 파일을 통해서 관리되며,\n해당 프로젝트에서 버전을 지정해주지 않은 런타임은 전역에서 설정한 버전이 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> mise.toml\n<span class=\"token punctuation\">[</span>tools<span class=\"token punctuation\">]</span>\n<span class=\"token function\">node</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"18\"</span></code></pre></div>\n<p>예를 들어, Python 버전을 확인해보면 전역에서 설치했던 버전과 동일한 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python <span class=\"token parameter variable\">--version</span>\nPython <span class=\"token number\">3.13</span>.5</code></pre></div>\n<p><code>mise.toml</code> 파일을 GitHub와 같은 코드 저장소에 올려두면 프로젝트의 다른 개발자나 CI 환경에서는 <code>mise i</code> 또는 <code>mise install</code> 명령어만 실행하면 프로젝트에서 필요한 정확한 버전의 런타임이 설치가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise i\nmise node@18.20.8 ✓ installed</code></pre></div>\n<p>프로젝트 디렉토리를 나가서 다시 Node.js 버전을 확인해보시면 v24가 잡힐 것입니다.\nMise가 자동으로 현재 경로에 맞춰서 버전을 잡아주기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span>\nv24.4.1</code></pre></div>\n<h2 id=\"환경-변수-관리\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EA%B4%80%EB%A6%AC\" aria-label=\"환경 변수 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 변수 관리</h2>\n<p>Mise는 런타임 버전 관리 뿐만 아니라 프로젝트의 환경 변수 관리도 도와줍니다.</p>\n<p>새로운 환경 변수를 추가할 때는 <code>mise set</code> 명령어를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DB_USER</span><span class=\"token operator\">=</span>root <span class=\"token assign-left variable\">DB_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$DB_USER</span> <span class=\"token variable\">$DB_PASS</span>\nroot <span class=\"token number\">1234</span></code></pre></div>\n<p><code>mise set</code> 명령어에 아무 인자도 넘기지 않으면 현재 설정되어 있는 환경 변수를 확안할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token builtin class-name\">set</span>\nkey                       value                 <span class=\"token builtin class-name\">source</span>\nDB_USER                   root                  ~/work/daleui/mise.toml\nDB_PASS                   <span class=\"token number\">1234</span>                  ~/work/daleui/mise.toml</code></pre></div>\n<p>환경 변수를 삭제하고 싶다면 <code>mise unset</code> 명령어를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token builtin class-name\">unset</span> DB_PASS\n$ mise <span class=\"token builtin class-name\">set</span>\nkey                       value                 <span class=\"token builtin class-name\">source</span>\nDB_USER                   root                  ~/work/daleui/mise.toml</code></pre></div>\n<h2 id=\"런타임-제거\" style=\"position:relative;\"><a href=\"#%EB%9F%B0%ED%83%80%EC%9E%84-%EC%A0%9C%EA%B1%B0\" aria-label=\"런타임 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>런타임 제거</h2>\n<p>런타임을 제거하고 싶을 때는 <code>mise unuse</code> 명령어를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise unuse\nremove core:node@18.20.8 ?\n\n\n   Yes     No     All\n\n←/→ toggle • y/n/a/enter submit\nmise node@18.20.8                                                                                              ⠚  8s</code></pre></div>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 Python, Java, Node.js, Bun 등을 프로그래밍 언어를 가리지 않고 런타임 버전을 통합해서 깔끔하게 관리할 수 있도록 도와주는 도구인 Mise에 대해서 알아보았습니다.\nMise를 한 번 제대로 설정해두면, 개발 환경 설정하시느라 30분씩 날리는 일은 거의 사라질 거예요! 😁</p>","timeToRead":6,"fields":{"slug":"/mise/","tags":["mise"]},"frontmatter":{"title":"Mise: 런타임 버전 관리 끝판왕","date":"Jul 18, 2025"}},"next":{"fields":{"slug":"/rust-thiserror/"},"frontmatter":{"title":"Rust 오류 자료형: thiserror 라이브러리 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}