{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/mise/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>여러 프로그래밍 언어를 자유자재로 넘나드는 풀스택 개발자들에게는 다양한 런타임의 버전을 관리하는 게 쉽지 않죠?\n대개는 Node.js는 <a href=\"/js-nvm/\">nvm</a>, Python은 <a href=\"python-pyenv\">pyenv</a>, Java는 <a href=\"https://sdkman.io/\">SDKMAN</a>과 같은 런타임 매니저를 사용해서 버전을 관리하실 거예요.\n하지만 이 역시도 프로그래밍 언어마다 관리 도구와 설정 파일이 달라서 정신이 혼미해질 때가 있죠. 😵‍💫</p>\n<p>Mise는 이러한 런타임 버전 관리에 대한 고민에 해결해주는 끝판왕 도구인데요.\nMise만 있으면 하나의 표준화된 방식으로 여러 프로그래밍 언어의 런타임 버전을 빠르고 간편하게 관리할 수 있답니다.</p>\n<h2 id=\"mise-설치\" style=\"position:relative;\"><a href=\"#mise-%EC%84%A4%EC%B9%98\" aria-label=\"mise 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mise 설치</h2>\n<p>Mise는 크로스 플랫폼 CLI(커맨드 라인 인터페이스) 도구로서 대부분의 운영 체제룰 지원합니다.</p>\n<p>macOS에서는 Homebrew를 통해서 손쉽게 설치할 수 있고요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> mise</code></pre></div>\n<p>Windows에서는 Chocolatey로 설치하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ choco <span class=\"token function\">install</span> mise</code></pre></div>\n<p>Linux 계열 운영체제나 Windows에서 WSL(Windows Subsystem for Linux)를 사용하시는 분은 <code>curl</code> 명령어로 설치하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> https://mise.run <span class=\"token operator\">|</span> <span class=\"token function\">sh</span></code></pre></div>\n<p>설치 후에는 새로운 쉘을 열 때마다 Mise가 자동으로 활성화될 수 있도록 RC 파일에 설정을 추가해 줍니다.</p>\n<p>macOS에서 Zsh를 쓰시면서 Homebrew로 설치하신 분들은 다음 명령어를 실행하시고요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(mise activate zsh)\"'</span> <span class=\"token operator\">>></span> ~/.zshrc</code></pre></div>\n<p>Linux에서 Bash를 쓰시면서 curl로 설치하신 분들은 다음 명령어를 실행해주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(~/.local/bin/mise activate bash)\"'</span> <span class=\"token operator\">>></span> ~/.bashrc</code></pre></div>\n<p>Windows에서는 <code>&#x3C;homedir>\\AppData\\Local\\mise\\shims</code> 경로를 <code>PATH</code> 환경 변수에 추가해줍니다.</p>\n<h2 id=\"설치-가능한-버전-확인\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%B2%84%EC%A0%84-%ED%99%95%EC%9D%B8\" aria-label=\"설치 가능한 버전 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치 가능한 버전 확인</h2>\n<p>Mise로 런타임을 설치하려면 우선 어떤 버전을 설치해야 할지 알아야겠죠?\n<code>mise ls-remote</code> 명령어를 사용하면 현재 설치 가능한 버전을 시간 순으로 나열해줍니다.</p>\n<p>예를 들어, 현재 이 글을 쓰고 있는 시점에서 설치 가능한 주요 프로그래밍 언어 별 런타임 버전을 확인해보겠습니다.</p>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise ls-remote python <span class=\"token operator\">|</span><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token number\">3.13</span>.0\n<span class=\"token number\">3.13</span>-dev\n<span class=\"token number\">3.13</span>.1\n<span class=\"token number\">3.13</span>.2\n<span class=\"token number\">3.13</span>.3\n<span class=\"token number\">3.13</span>.4\n<span class=\"token number\">3.13</span>.5\n<span class=\"token number\">3.14</span>.0b4\n<span class=\"token number\">3.14</span>-dev\n<span class=\"token number\">3.15</span>-dev</code></pre></div>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise ls-remote <span class=\"token function\">java</span> <span class=\"token operator\">|</span><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token number\">21.0</span>.1\n<span class=\"token number\">21.0</span>.2\n<span class=\"token number\">22.0</span>.0\n<span class=\"token number\">22.0</span>.1\n<span class=\"token number\">22.0</span>.2\n<span class=\"token number\">23.0</span>.0\n<span class=\"token number\">23.0</span>.1\n<span class=\"token number\">24.0</span>.0\n<span class=\"token number\">24.0</span>.1\n<span class=\"token number\">24.0</span>.2</code></pre></div>\n<div class=\"gatsby-code-title\">Node.js</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise ls-remote <span class=\"token function\">node</span> <span class=\"token operator\">|</span><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token number\">23.11</span>.0\n<span class=\"token number\">23.11</span>.1\n<span class=\"token number\">24.0</span>.0\n<span class=\"token number\">24.0</span>.1\n<span class=\"token number\">24.0</span>.2\n<span class=\"token number\">24.1</span>.0\n<span class=\"token number\">24.2</span>.0\n<span class=\"token number\">24.3</span>.0\n<span class=\"token number\">24.4</span>.0\n<span class=\"token number\">24.4</span>.1</code></pre></div>\n<div class=\"gatsby-code-title\">Bun</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise ls-remote bun <span class=\"token operator\">|</span><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-10</span>\n<span class=\"token number\">1.2</span>.9\n<span class=\"token number\">1.2</span>.10\n<span class=\"token number\">1.2</span>.11\n<span class=\"token number\">1.2</span>.12\n<span class=\"token number\">1.2</span>.13\n<span class=\"token number\">1.2</span>.14\n<span class=\"token number\">1.2</span>.15\n<span class=\"token number\">1.2</span>.16\n<span class=\"token number\">1.2</span>.17\n<span class=\"token number\">1.2</span>.18</code></pre></div>\n<p>명령어의 결과로 버전이 너무 많이 나오기 때문에 <code>| tail -10</code>을 붙여서 가장 최근 10개의 버전만 출력하였습니다.\n현재 설치 가능한 버전이</p>\n<h2 id=\"전역-런타임-버전-관리\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EB%9F%B0%ED%83%80%EC%9E%84-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC\" aria-label=\"전역 런타임 버전 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 런타임 버전 관리</h2>\n<p>먼저 전역에서 Mise를 사용하여 어떻게 런타임 버전을 관리할 수 있는지 알아볼까요?</p>\n<p>프로그래밍 언어의 런타임을 전역에서 사용하려면 <code>mise use</code> 명령어를 <code>--global</code> 옵션과 함께 사용합니다.\n줄여서 <code>mise u</code> 명령어를 <code>-g</code> 옵션과 함께 사용해도 됩니다.</p>\n<p>버전 번호는 언어 이름 뒤에 <code>@</code> 기호로 기분해서 <code>언어@버전</code> 형태로 명시하면 되는데요.\n버전을 명시하지 않으면 현재 시점에서 최신 버전이 선택됩니다.\n그리고 꼭 전체 버전을 명시할 필요는 없고, 메이저나 마이너 버전까지만 표시하면 그 범위 내에서 최신 버전을 사용합니다.</p>\n<p>예를 들어, Python v3.13, Java v22, Node.js v24과 Bun 최신 버전을 사용해보겠습니다.\n아직 설치되어 있지 않은 런타임 버전은 사용하기 전에 먼저 다운로드 후 설치가 됩니다.</p>\n<div class=\"gatsby-code-title\">Python</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise use <span class=\"token parameter variable\">-g</span> python@3.13\nmise python@3.13.5 ✓ installed                                                                     mise ~/.config/mise/config.toml tools: python@3.13.5\n\n$ python <span class=\"token parameter variable\">--version</span>\nPython <span class=\"token number\">3.13</span>.5</code></pre></div>\n<div class=\"gatsby-code-title\">Java</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise use <span class=\"token parameter variable\">-g</span> java@22\nmise use <span class=\"token parameter variable\">-g</span> java@22\nmise To <span class=\"token builtin class-name\">enable</span> macOS integration, run the following commands:\n<span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /Library/Java/JavaVirtualMachines/22.0.2.jdk\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /Users/dale/.local/share/mise/installs/java/22.0.2/Contents /Library/Java/JavaVirtualMachines/22.0.2.jdk/Contents\n\nopenjdk version <span class=\"token string\">\"22.0.2\"</span> <span class=\"token number\">2024</span>-07-16\nOpenJDK Runtime Environment <span class=\"token punctuation\">(</span>build <span class=\"token number\">22.0</span>.2+9-70<span class=\"token punctuation\">)</span>\nOpenJDK <span class=\"token number\">64</span>-Bit Server VM <span class=\"token punctuation\">(</span>build <span class=\"token number\">22.0</span>.2+9-70, mixed mode, sharing<span class=\"token punctuation\">)</span>\nmise java@22.0.2 ✓ installed                                                                                                                                                           mise ~/.config/mise/config.toml tools: java@22.0.2\n\n$ <span class=\"token function\">java</span> <span class=\"token parameter variable\">--version</span>\nopenjdk <span class=\"token number\">22.0</span>.2 <span class=\"token number\">2024</span>-07-16\nOpenJDK Runtime Environment <span class=\"token punctuation\">(</span>build <span class=\"token number\">22.0</span>.2+9-70<span class=\"token punctuation\">)</span>\nOpenJDK <span class=\"token number\">64</span>-Bit Server VM <span class=\"token punctuation\">(</span>build <span class=\"token number\">22.0</span>.2+9-70, mixed mode, sharing<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">Node.js</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise use <span class=\"token parameter variable\">-g</span> node@24\nmise use node@24\nmise node@24.4.1 ✓ installed                                                                       mise ~/.config/mise/config.toml tools: node@24.4.1\n\n$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span>\nv24.4.1</code></pre></div>\n<div class=\"gatsby-code-title\">Bun</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise use <span class=\"token parameter variable\">-g</span> bun\nmise bun@1.2.18 ✓ installed                                                                        mise ~/.config/mise/config.toml tools: bun@1.2.18\n\n$ bun <span class=\"token parameter variable\">-v</span>\n<span class=\"token number\">1.2</span>.18</code></pre></div>\n<p>런타임의 설치 및 사용 설정이 끝나고 나서 <code>mise ls</code> 명령어를 치면 현재 전역에서 사용 중인 모든 런타임과 버전이 일목요연하게 출력됩니다.\nRequested 열에는 <code>mise use</code>를 통해서 지정했던 버전이 나오고, Version 열에는 실제로 컴퓨터에 설치된 정확한 전체 버전이 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token function\">ls</span>\nTool    Version  Source                      Requested\nbun     <span class=\"token number\">1.2</span>.18   ~/.config/mise/config.toml  latest\n<span class=\"token function\">java</span>    <span class=\"token number\">22.0</span>.2   ~/.config/mise/config.toml  <span class=\"token number\">22</span>\n<span class=\"token function\">node</span>    <span class=\"token number\">24.4</span>.1   ~/.config/mise/config.toml  <span class=\"token number\">24</span>\npython  <span class=\"token number\">3.13</span>.5   ~/.config/mise/config.toml  <span class=\"token number\">3.13</span></code></pre></div>\n<p>참고로 전역 런타임의 버전은 <code>~/.config/mise/config.toml</code> 설정 파일을 통해서 관리됩니다.\n<code>--global</code> 줄여서 <code>-g</code> 옵션을 줘서 실행한 명령어는 모두 이 곳에 반영된다고 보면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">$ cat ~/<span class=\"token punctuation\">.</span>config/mise/config<span class=\"token punctuation\">.</span>toml\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tools</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">bun</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"latest\"</span>\n<span class=\"token key property\">java</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"22\"</span>\n<span class=\"token key property\">node</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"24\"</span>\n<span class=\"token key property\">python</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"3.13\"</span></code></pre></div>\n<h2 id=\"프로젝트-별-런타임-버전-관리\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B3%84-%EB%9F%B0%ED%83%80%EC%9E%84-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC\" aria-label=\"프로젝트 별 런타임 버전 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 별 런타임 버전 관리</h2>\n<p>전역에서는 최신 버전의 런타임을 사용하더라도, 프로젝트에서는 상황에 따라 구 버전을 사용해야하는 경우도 있습니다.\n게다가 같은 프로그래밍 언어로 여러 프로젝트에서 개발하는 경우, 프로젝트로 별로 사용해야 하는 런타임 버전이 상이할 수 있죠.</p>\n<p>Mise를 활용하면 프로젝트 별로도 아주 깔끔하고 유연하게 런타임 관리를 할 수 있습니다.\n방법이 정말 간단한데요.\n프로젝트 폴더에 들어가 <code>--global</code> 옵션없이 <code>mise use</code> 명령어로 원하는 버전의 런타임을 지정해주기만 하면 됩니다.</p>\n<p>예를 들어, <code>our-project</code> 폴더 안에 있는 프로젝트의 Node.js 버전을 v18로 지정해보겠습니다.\nNode.js 18이 이미 설치되어 있지 않은 경우에는 마찬가지로 먼저 다운로드 및 설치가 진행됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> our-project\n\n$ mise use node@18\nmise node@18.20.8 ✓ installed                                                                                       mise ~/work/our-project/mise.toml tools: node@18.20.8</code></pre></div>\n<p>프로젝트에서 사용되고 있는 Node.js을 버전을 확인해보면, 전역에서 설치했던 v24가 아니라 v18이 확인되죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span>\nv18.20.8</code></pre></div>\n<p><code>mise ls</code> 명령어를 실행해보시면 이제 Node.js v18이 활성화되어 있는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token function\">ls</span>\nTool    Version  Source                       Requested\nbun     <span class=\"token number\">1.2</span>.18   ~/.config/mise/config.toml   latest\n<span class=\"token function\">java</span>    <span class=\"token number\">22.0</span>.2   ~/.config/mise/config.toml   <span class=\"token number\">22</span>\n<span class=\"token function\">node</span>    <span class=\"token number\">18.20</span>.8  ~/work/our-project/mise.toml <span class=\"token number\">18</span>\n<span class=\"token function\">node</span>    <span class=\"token number\">24.4</span>.1\npython  <span class=\"token number\">3.13</span>.5   ~/.config/mise/config.toml   <span class=\"token number\">3.13</span></code></pre></div>\n<p>프로젝트 별 런타임 버전은 프로젝트의 최상위 디렉토리에 있는 <code>mise.toml</code> 설정 파일에 저장됩니다.\n우리가 방금 설치한 Node.js 런타임의 버전이 18로 등록되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">$ cat mise<span class=\"token punctuation\">.</span>toml\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tools</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">node</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"18\"</span></code></pre></div>\n<p>해당 프로젝트에서 버전을 지정해주지 않은 런타임은 전역에서 설치한 버전이 그대로 사용됩니다.\n예를 들어, Python 버전을 확인해보면 전역에서 설치했던 버전과 동일한 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python <span class=\"token parameter variable\">--version</span>\nPython <span class=\"token number\">3.13</span>.5</code></pre></div>\n<p>실제로 이럴 확률이 적겠지만 실습을 위해서 동일한 프로젝트에 Python v3.12도 설치해볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise use python@3.12\nmise python@3.12.11 ✓ installed                                                                    mise ~/work/our-project/mise.toml tools: python@3.12.11</code></pre></div>\n<p>다시 Python 버전을 확인해보면 이번에는 버전이 v3.12로 떨어진 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python <span class=\"token parameter variable\">--version</span>\nPython <span class=\"token number\">3.12</span>.11</code></pre></div>\n<p>다시 <code>mise.toml</code> 설정 파일을 확인해보면 우리가 방금 설치한 Python 런타임의 버전이 추가된 것을 볼 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">$ cat mise<span class=\"token punctuation\">.</span>toml\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tools</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">node</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"18\"</span>\n<span class=\"token key property\">python</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"3.12\"</span></code></pre></div>\n<p><code>mise ls</code> 명령어를 통해서도 Python이 v3.13이 아닌 v3.12가 활성화되어 있다는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token function\">ls</span>\nTool    Version  Source                      Requested\nbun     <span class=\"token number\">1.2</span>.18   ~/.config/mise/config.toml  latest\n<span class=\"token function\">java</span>    <span class=\"token number\">22.0</span>.2   ~/.config/mise/config.toml  <span class=\"token number\">22</span>\n<span class=\"token function\">node</span>    <span class=\"token number\">18.20</span>.8  ~/work/our-project/mise.toml     <span class=\"token number\">18</span>\n<span class=\"token function\">node</span>    <span class=\"token number\">24.4</span>.1\npython  <span class=\"token number\">3.12</span>.11  ~/work/our-project/mise.toml     <span class=\"token number\">3.12</span>\npython  <span class=\"token number\">3.13</span>.5</code></pre></div>\n<p>협업 프로젝트에서는 <code>mise.toml</code> 파일을 GitHub와 같은 코드 저장소에 올려두는 것이 권장됩니다.\n그러면 동료 개발자가 처음으로 코드 저장소를 로컬에 복제하고 <code>mise ls</code> 명령어를 실행하면 누락된 런타임이 표시되거든요.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">$ mise ls\nTool    Version            Source                      Requested\nnode    <span class=\"token number\">18.20</span><span class=\"token punctuation\">.</span><span class=\"token number\">8</span> (missing)  ~/work/our-project/mise<span class=\"token punctuation\">.</span>toml     <span class=\"token number\">18</span>\npython  <span class=\"token number\">3.12</span><span class=\"token punctuation\">.</span><span class=\"token number\">11</span> (missing)  ~/work/our-project/mise<span class=\"token punctuation\">.</span>toml     <span class=\"token number\">3.12</span></code></pre></div>\n<p>이때 <code>mise install</code> 또는 줄여서 <code>mise i</code> 명령어를 실행하면 프로젝트에 필요한 정확한 버전의 런타임을 일괄로 설치할 수 있습니다. CI 환경에서도 같은 방법으로 항상 동일한 런타임이 설치되도록 보장할 수 있겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token function\">install</span>\nmise python@3.12.11 ✓ installed\nmise node@18.20.8 ✓ installed</code></pre></div>\n<p>자 이제, 프로젝트 디렉토리를 나가서 다시 Node.js나 Python 버전을 확인해보시면 전역에서 설치한 버전이 확인될 거에요.\nMise가 자동으로 현재 경로에 보고 프로젝트 안에 있는지 밖에 있는지 파악하여 정확한 버전을 잡아주기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n\n$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span>\nv24.4.1\n\n$ python <span class=\"token parameter variable\">--version</span>\nPython <span class=\"token number\">3.13</span>.5</code></pre></div>\n<p>너무 편리하죠? 😍</p>\n<h2 id=\"보너스-환경-변수-관리\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EB%84%88%EC%8A%A4-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EA%B4%80%EB%A6%AC\" aria-label=\"보너스 환경 변수 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보너스: 환경 변수 관리</h2>\n<p>Mise를 사용하면 런타임 버전과 환경 변수 관리를 같이 할 수도 있습니다.</p>\n<p>새로운 환경 변수를 추가할 때는 <code>mise set</code> 명령어 뒤에 <code>이름=값</code> 형태로 명시해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DB_USER</span><span class=\"token operator\">=</span>root\n$ mise <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">DB_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$DB_USER</span> <span class=\"token variable\">$DB_PASS</span>\nroot <span class=\"token number\">1234</span></code></pre></div>\n<p><code>mise set</code> 명령어에 아무 인자도 넘기지 않으면 Mise를 통해 관리되고 있는 모든 환경 변수를 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token builtin class-name\">set</span>\nkey                       value                 <span class=\"token builtin class-name\">source</span>\nDB_USER                   root                  ~/work/our-project/mise.toml\nDB_PASS                   <span class=\"token number\">1234</span>                  ~/work/our-project/mise.toml</code></pre></div>\n<p><code>mise.toml</code> 파일에 런타임 버전과 함께 환경 변수가 함께 저장되니 하나의 설정 파일로 통합 관리를 할 수 있게 되는 것이지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"tool\"><pre class=\"language-tool\"><code class=\"language-tool\">$ cat mise.toml\n[tools]\nnode = &quot;18&quot;\npython = &quot;3.12&quot;\n\n[env]\nDB_USER = &quot;root&quot;\nDB_PASS = &quot;1234&quot;</code></pre></div>\n<p>환경 변수를 삭제하고 싶다면 <code>mise unset</code> 명령어를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise <span class=\"token builtin class-name\">unset</span> DB_PASS\n$ mise <span class=\"token builtin class-name\">set</span>\nkey                       value                 <span class=\"token builtin class-name\">source</span>\nDB_USER                   root                  ~/work/our-project/mise.toml</code></pre></div>\n<h2 id=\"런타임-버전-제거\" style=\"position:relative;\"><a href=\"#%EB%9F%B0%ED%83%80%EC%9E%84-%EB%B2%84%EC%A0%84-%EC%A0%9C%EA%B1%B0\" aria-label=\"런타임 버전 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>런타임 버전 제거</h2>\n<p>프로젝트에서든 전역에서든 런타임을 사용하고 싶지 않을 때는 <code>mise unuse</code> 명령어를 사용하면 되는데요.\n명령어를 실행하면 해당 런타임을 비활성화시킬 뿐만 아니라 삭제까지 할지 물어봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise unuse python@3.12\nremove core:python@3.12.11 ?\n\n\n   Yes     No     All\n\n←/→ toggle • y/n/a/enter submit</code></pre></div>\n<p>더 이상 해당 런타임 버전을 사용할 일이 없다면 <code>Yes</code>를 선택해서 삭제하시면 되고,\n나중에 다시 쓰실 예정이시라면 <code>No</code>를 선택하셔서 단순히 비활성화만 시키시면 됩니다.</p>\n<p>순수하게 특정 런타임의 버전을 삭제하고 싶다면 <code>mise uninstall</code> 또는 줄여서 <code>mise rm</code> 명령어를 쓰시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise uninstall python@3.13.5\nmise python@3.13.5 ✓ uninstalled</code></pre></div>\n<h2 id=\"런타임-업그레이드\" style=\"position:relative;\"><a href=\"#%EB%9F%B0%ED%83%80%EC%9E%84-%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C\" aria-label=\"런타임 업그레이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>런타임 업그레이드</h2>\n<p>전체 버전이 아닌 메이저나 마이너 버전을 지정하여 런타임을 설치한 경우, 추후에 같은 조건을 만족하는 새로운 버전이 나올 가능성이 존재합니다.\n현재 사용 중인 런타임 중에서 새로운 버전이 있는지 확인하려면 <code>mise outdated</code> 명령어를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise outdated\nname            requested         current         latest        <span class=\"token builtin class-name\">source</span>\nbun             latest            <span class=\"token number\">1.2</span>.15          <span class=\"token number\">1.2</span>.18        ~/.config/mise/config.toml\npython          <span class=\"token number\">3.13</span>              <span class=\"token number\">3.13</span>.3          <span class=\"token number\">3.13</span>.5        ~/.config/mise/config.toml</code></pre></div>\n<p><code>mise upgrade</code> 또는 줄여서 <code>mise up</code> 명령어를 통해서 손쉽게 오래된 버전의 런타임을 새로운 버전을 대체할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ mise upgrade\nmise bun@1.2.18 ✓ installed\nmise uninstall bun@1.2.15 ✓ remove ~/Library/Caches/mise/bun/1.2.15\nmise python@3.13.5 ✓ installed\nmise uninstall python@3.13.3 ✓ remove ~/Library/Caches/mise/python/3.13.3</code></pre></div>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 Python, Java, Node.js, Bun 등 프로그래밍 언어에 구애받지 않고 런타임 버전을 통합해서 깔끔하게 관리할 수 있도록 도와주는 Mise에 대해서 알아보았습니다.\nMise만 한 번 제대로 설정해두면, 개발 환경 설정하시느라 30분씩 날리는 일은 거의 사라질 거예요! 😁</p>","timeToRead":10,"fields":{"slug":"/mise/","tags":["mise"]},"frontmatter":{"title":"Mise: 통합 런타임 버전 관리 (끝판왕)","date":"Jul 18, 2025"}},"next":{"fields":{"slug":"/rust-thiserror/"},"frontmatter":{"title":"Rust 오류 자료형: thiserror 라이브러리 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}