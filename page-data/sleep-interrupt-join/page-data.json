{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/sleep-interrupt-join/","result":{"pageContext":{"previous":{"fields":{"slug":"/synchronization/"},"frontmatter":{"title":"동기화 (Synchronization)"}},"node":{"html":"<blockquote>\n<p>본 포스트는 오라클 자바 튜토리얼의 <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/sleep.html\">Pausing Execution with Sleep</a>와 <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html\">Interrupts</a>,  <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/join.html\">Joins</a>, <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/simple.html\">The SimpleThreads Example</a>를 번역하였습니다.</p>\n</blockquote>\n<h2 id=\"sleep으로-실행-중지하기\" style=\"position:relative;\"><a href=\"#sleep%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89-%EC%A4%91%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"sleep으로 실행 중지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Sleep</code>으로 실행 중지하기</h2>\n<p><code>Thread.sleep()</code> 메소드는 현재 쓰레드가 일정 기간동안 실행을 중지시킵니다.\n이 것은 해당 어플리케이션 또는 시스템 상에서 돌고 있는 다른 어플리케이션 내의 다른 쓰레드들에게 프로세서를 이용 가능하도록 만들기 위한 효율적인 방법입니다.\n<code>sleep()</code> 메소드는 다음 예제와 같이 속도 조절을 위해서도 사용될 수 있습니다.\n또한 다음 섹션의 <code>SimpleThreads</code> 예제와 같이 대기 요건이 용납되는 임무를 가진 또 다른 쓰레드를 기다리기 위해서도 사용될 수 있습니다.</p>\n<p><code>sleep</code> 메소드는 오버로드된 두가지 버전이 제공되는데 하나는 밀리 초단위로 정지 시간을 지정할 수 있고 다른 하나는 나노 초단위로 정지 사간을 지정할 수 있습니다.\n하지만 이 정지 시간은 기저 운영체제의 제한을 받기 때문에 정확하게 보장되지 않습니다.\n또한 정지 시간은 다음 섹션에서 보시겠지만 인터럽트에 의해서 종료될 수 있습니다.\n어떤 방식으로든지 <code>sleep</code> 메소드를 호출하는 것이 정확하게 지정한 기간 만큼 쓰레드를 중지시킬 것이라고 가정할 수는 없습니다.</p>\n<p>다음 <code>SleepMessages</code> 예제는 4초 간격으로 메세지를 출력하기 위해서 <code>sleep()</code> 메소드를 사용하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SleepMessages</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> importantInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"Mares eat oats\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Does eat oats\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Little lambs eat ivy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"A kid will eat ivy too\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> importantInfo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 4초 간 중지한다</span>\n      <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 메세지를 출력한다</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>importantInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>main</code> 메소드가 <code>InterruptedException</code>을 던지도록 정의되어 있다라는 점을 점을 주목하세요.\n이 것은 <code>sleep</code> 메소드가 실행 중에 다른 쓰레드가 현재 쓰레드를 인터럽트하면 <code>sleep</code> 메소드가 던지는 예외입니다.\n본 어플리케이션에서는 인터럽트를 유발하는 다른 쓰레드를 정의하지 않았기 때문에, 굳이 <code>InterruptedException</code> 예외를 잡으실 필요는 없습니다.</p>\n<h2 id=\"인터럽트-interrupts\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-interrupts\" aria-label=\"인터럽트 interrupts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터럽트 (Interrupts)</h2>\n<p>인터럽트는 쓰레드에게 하던 것을 멈추고 다른 것을 하라는 지시입니다.\n정확히 해당 쓰레드가 어떻게 인터럽트에 반응할지를 결정하는 것은 전적으로 프로그래머의 몫이지만 쓰레드를 종료시키는 것이 가장 일반적입니다.\n이 것이 이번 수업에서 초점을 맞출 용법입니다.</p>\n<p>쓰레드는 인터럽트 대상의 다른 쓰레드 객체 상대로 <code>interrupt()</code> 메소드를 호출함으로써 인터럽트를 보냅니다.\n인터럽트 메커니즘이 정확하기 동작하기 위해서는 인터럽트 대상 쓰레드가 스스로 인터럽트를 지원해줘야 합니다.</p>\n<h3 id=\"인터럽트-지원하기-supporting-interruption\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EC%A7%80%EC%9B%90%ED%95%98%EA%B8%B0-supporting-interruption\" aria-label=\"인터럽트 지원하기 supporting interruption permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터럽트 지원하기 (Supporting Interruption)</h3>\n<p>어떻게 쓰레드가 스스로 인터럽션을 지원해야 할까요?\n이는 그 쓰레드가 현재 무엇을 하고 있느냐에 달려있습니다.\n만약 해당 쓰레드가 <code>InterruptedException</code> 예외를 던지는 메소드를 빈번하게 호출하고 있다면, 단순하게 <code>run()</code> 메소드에서 해당 예외를 잡은 후에 반환해버립니다.\n예를 들어, <code>SleepMessages</code> 예제의 중앙에 있는 메세지 루프가 <code>Runnable</code> 객체의 <code>run()</code> 메소드 안에 있었다고 가정해봅시다.\n그러면 해당 코드는 인터럽트를 지원하기 위해서 다음과 같이 수정될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> importantInfo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 4초 간 중지한다</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 인터럽트 당했다 (메세지 출력 중단하고 바로 반환)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 메세지를 출력한다</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>importantInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>sleep()</code>처럼 <code>InterruptedException</code> 예외를 던지는 많은 메소드들이 인터럽트를 받았을 때 현재 작업을 취소하고 즉시 반환하도록 설계되어 있습니다.</p>\n<p>만약 <code>InterruptedException</code> 예외를 던지는 메소드를 호출하지 않는 쓰레드가 오래동안 수행되면 어찌할까요?\n그러면 인터럽트를 받았을 때 true를 반환하는 <code>Thread.interrupted()</code> 메소드를 주기적으로 호출해줘야만 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inputs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">heavyCrunch</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 인터럽트 당했다 (오래걸리는 작업 중단)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 단순한 예제에서, 코드는 단지 인터럽트 여부를 테스트해보고 인터럽트를 받았다면 쓰레드를 나갑니다.\n더 복잡한 어플리케이션에서는 <code>InterruptedException</code> 예외를 던지는 편이 더 나을지도 모르겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 하면 catch 절에서 인터럽트를 모아서 처리할 수 있습니다.</p>\n<h3 id=\"인터럽트-상태-플래그-the-interrupt-status-flag\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EC%83%81%ED%83%9C-%ED%94%8C%EB%9E%98%EA%B7%B8-the-interrupt-status-flag\" aria-label=\"인터럽트 상태 플래그 the interrupt status flag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터럽트 상태 플래그 (The Interrupt Status Flag)</h3>\n<p>인터럽트 매커니즘은 인터럽트 상태라고 알려진 내부 플래그에 의해서 구현됩니다.\n<code>Thread.interrupt()</code> 메소드를 호출해서 이 플래그를 true로 설정합니다.\n쓰레드가 정적 메소드인 <code>Thread.interrupted()</code>를 호출해서 인터럽트 여부를 체크할 때, 인터럽트 상태는 false로 초기화됩니다.\n정적 메소드가 아닌 <code>isInterrupted()</code>는 한 쓰레드가 다른 쓰레드의 인터럽트 생태를 조회하기 위해서 사용되며 인터럽트 상태를 변경하지 않습니다.</p>\n<p>관습적으로 어떤 메소드든지 <code>InterruptedException</code> 예외를 던져서 빠져나갈 때 인터럽트 상태를 false 초기화해버립니다.\n하지만 인터럽트 상태는 <code>interrupt</code> 메소드를 호출하는 또 다른 쓰레드에 의해서 즉시 재 변경될 가능성이 항상 있습니다.</p>\n<h2 id=\"조인-joins\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EC%9D%B8-joins\" aria-label=\"조인 joins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조인 (Joins)</h2>\n<p><code>join</code> 메소드는 한 쓰레드가 다른 쓰레드의 완료를 기다리게 합니다.\n만약 <code>t</code>가 현재 동작 중인 스레드 객체라고 한다면,</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 현재 쓰레드가 <code>t</code> 쓰레드가 종료될 때 까지 실행을 중단합니다.\n프로그래머는 오버로드된 <code>join</code> 메소드르르 통해 대기 기간을 명시해줄 수 있습니다.\n하지만 <code>sleep</code>처럼, <code>join</code> 메소드의 타이밍도 운영 체제에 달려있으므로 정확하게 명시된 시간만큼 대기한다고 가정하시면 안 됩니다.</p>\n<p><code>sleep</code>처럼, <code>join</code>도 인터럽트에 대해서 <code>InterruptedException</code> 예외를 발생시켜 대응합니다.</p>\n<h2 id=\"simplethreads-예제-the-simplethreads-example\" style=\"position:relative;\"><a href=\"#simplethreads-%EC%98%88%EC%A0%9C-the-simplethreads-example\" aria-label=\"simplethreads 예제 the simplethreads example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SimpleThreads 예제 (The SimpleThreads Example)</h2>\n<p>다음 예제에 본 섹션의 여러가지 컨셉들을 반영해보았습니다.\n<code>SimpleThreads</code>는 두 개의 쓰레드로 구서오딥니다.\n첫번째는 모든 자바 어플리케이션이 가지게 되는 메인 쓰레드입니다.\n메인 쓰레드는 <code>MessageLoop</code>라는 <code>Runnalbe</code> 객체를 통해서 새로운 쓰레드를 생성하고 그 쓰레드가 종료되기를 기다립니다.\n만약 <code>MessageLoop</code> 쓰레드가 종료되기까지 너무 오래 걸린다면, 메인 쓰레드는 인터럽트를 겁니다.</p>\n<p><code>MessageLoop</code> 쓰레드가 일련의 메세지들을 출력합니다.\n만약 모든 메세지를 출력하기 전에 인터럽트를 당한다면, <code>MessageLoop</code> 쓰레드는 메세지를 출력하고 빠져나갑니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleThreads</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 현재 쓰레드 이름과 함께 메세지를 출력한다.</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> threadName <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: %s%n\"</span><span class=\"token punctuation\">,</span> threadName<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MessageLoop</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> importantInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Mares eat oats\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Does eat oats\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Little lambs eat ivy\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"A kid will eat ivy too\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> importantInfo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 4초 간 중지한다</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 메세지를 출력한다</span>\n            <span class=\"token function\">threadMessage</span><span class=\"token punctuation\">(</span>importantInfo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">threadMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I wasn't done!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// MessageLoop 쓰레드를 인터럽트 하기 전에 밀리 초 단위로 대기한다. (기본값 : 1시간)</span>\n    <span class=\"token keyword\">long</span> patience <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 커맨드 라인 인자가 존재하면, patience 변수를 초 단위로 설정한다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        patience <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Argument must be an integer.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">threadMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting MessageLoop thread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">threadMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting for MessageLoop thread to finish\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// MessageLoop가 종료될 때까지 루프를 돈다.</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">threadMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Still waiting...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// MessageLoop 쓰레드가 종료될 때 까지 최대 1초를 기다린다.</span>\n      t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> patience<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">threadMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tired of waiting!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 더 오래 기다릴 수 없다</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">threadMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finally!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":5,"fields":{"slug":"/sleep-interrupt-join/","tags":["Java","Concurrency","Thread"]},"frontmatter":{"title":"자바 쓰레드 Sleep & Intterupt & Join","date":"Sep 25, 2016"}},"next":{"fields":{"slug":"/threads/"},"frontmatter":{"title":"자바 쓰레드"}}}},"staticQueryHashes":["2362167539","2820851463","3000541721","3056348342"]}