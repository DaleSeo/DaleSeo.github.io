{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/zod-schema/","result":{"pageContext":{"previous":{"fields":{"slug":"/zod-transformation/"},"frontmatter":{"title":"Zod로 입출력 간 데이터 변환하기"}},"node":{"html":"<p><a href=\"/zod/\">이전 포스팅</a>에서는 Zod를 사용하여 하나의 스키마로 유효성 검증과 타입 선언을 한 번에 해결하는 방법에 대해서 살펴보았는데요.</p>\n<p>이번 포스팅에서는 Zod에 제공하는 타입스크립트 친화적인 검증자를 사용하여 스키마를 정의하는 다양한 방법에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"자료형\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료형</h2>\n<p>스키마 정의는 자료형울 명시하는 것부터 시작하는데요.\nZod는 자바스크립트의 기본 자료형이나 <code>Date</code>와 같은 내장 클래스에 대응하는 검증자(validator) 함수를 제공합니다.</p>\n<p>예를 들어, 이메일, 나이, 활성화 여부, 생성 일자로 이루어진 사용자 객체를 나타내는 스키마를 Zod로 정의해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  createdAt<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>z.object()</code>를 사용하여 <code>User</code> 스키마가 객체의 형태이고, <code>z.string()</code>으로 <code>email</code> 속성은 문자열로, <code>age</code> 속성은 <code>z.number()</code>로 숫자로, <code>active</code> 속성은 <code>z.boolean()</code>으로 불리언으로, <code>z.date()</code>로 <code>createdAt</code> 속성을 날짜 타입으로 정의하고 있습니다.</p>\n<p>보시다 시피 API가 상당히 타입스크립트 친화적이면서도 굉장히 간단하고 명료하지 않나요?</p>\n<p>Zod를 처음 사용하시는 분들도 이러한 직관적인 API 덕분에 큰 어려움 없이 배울 수 있답니다.</p>\n<p>스키마에서 타입을 추출해보면 다음과 같은 타입이 추론이 되는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> User<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//   ^? { email: string; image: string; ips: string[]; createdAt: Date; }</span></code></pre></div>\n<p>여기까지만 보면 타입스크립트로 타입을 직접 선언하는 것과 큰 차이가 없다고 느껴질 수도 있는데요.\n본 포스팅의 후반부로 갈수록 타입스크립트로는 어려운 검증이 부분이 Zod로는 가능하다는 것을 느끼실 게 될 거에요.</p>\n<blockquote>\n<p>타입스크립트로 코드 작성하는 것과 무관하게 왜 자바스크립트 프로그램에서 유효성 검증이 필요한지에 대해서는 <a href=\"/zod-why-validation/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"필수선택\" style=\"position:relative;\"><a href=\"#%ED%95%84%EC%88%98%EC%84%A0%ED%83%9D\" aria-label=\"필수선택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필수/선택</h2>\n<p>기본적으로 Zod 스키마에 포함된 모든 속성은 필수 입력인데요.\n<code>optional()</code> 검증자를 사용하면 필수 입력을 선택 입력으로 바꿀 수가 있습니다.</p>\n<p>예를 들어, 위에서 작성한 스키마에서 <code>active</code> 속성을 선택 입력으로 한번 변경해볼까요?</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  active<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 스키마에서 타입을 추론해보면 <code>active</code> 속성 뒤에 <code>?</code>를 붙이고 타입을 <code>boolean</code> 또는 <code>undefined</code>로 선언한 것과 마찬가지라는 것을 알 수 있는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> User<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//   ^? { email: string; age: number; active?: boolean | undefined; }</span></code></pre></div>\n<p>따라서 다음 3가지 모두 유효성 검증을 모두 통과하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ✅ true</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ✅ undefined</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ✅ 누락</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"기본값\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92\" aria-label=\"기본값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본값</h2>\n<p>유효성 검증 과정에서 값이 누락되어 있는 속성에 기본값을 주고 싶다면 <code>default()</code>를 검증자를 사용할 수 있습니다.</p>\n<p>예를 들어, <code>active</code> 속성이 없으면 <code>false</code>으로 설정되도록 스키마를 변경해보겠습니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  active<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 <code>active</code> 속성이 누락되어 있는 객체를 <code>parse()</code> 함수의 인자로 넘겨서 호출한 결과를 출력해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"user@test.com\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 <code>active</code> 속성 값을 지정해주지 않았지만 <code>false</code>로 자동 설정되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-code-title\">콘솔</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">'user@test.com'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"배열array\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4array\" aria-label=\"배열array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열(array)</h2>\n<p>Zod로 배열 스키마를 정의할 때는 2가지 문법을 사용할 수 있는데요.\n먼저 타입을 명시하고 <code>.array()</code>를 뒤에 붙여줄 수도 있고, <code>z.string()</code> 안에 타입을 인자로 넘겨줄 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> IPs <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 첫 번째 방법</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> IPs <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 두 번째 방법</span></code></pre></div>\n<p>스키마로 부터 타입을 추출해보면 예상했던 것처럼 <code>string[]</code>이 나오는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IPs</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> IPs<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//   ^? type IPs = string[]</span></code></pre></div>\n<h2 id=\"이넘enum\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%84%98enum\" aria-label=\"이넘enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이넘(enum)</h2>\n<p>제한된 값 중에서 하나를 사용하도록 스키마를 정의하려면 어떻게 해야할까요?\n이럴 때는 <code>z.enum()</code> 검증자를 사용해여 사용 가능한 값을 나열해주면 되는데요.</p>\n<p>예를 들어, <code>GOLD</code>, <code>SILVER</code>, <code>BRONZE</code>로 이뤄진 등급에 대한 스키마를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Level <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">enum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GOLD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SILVER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BRONZE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 이 3가지 값 외에 다른 값을 사용할 시 유효성 검증이 실패하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">Level<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GOLD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\nLevel<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SILVER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\nLevel<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BRONZE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n\nLevel<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PLATINUM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Expected 'GOLD' | 'SILVER' | 'BRONZE', received 'PLATINUM'</span></code></pre></div>\n<p>스키마로 부터 타입을 추출해보면 유니온(union) 타입이 나오는 것이 확인됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Level</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Level<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//   ^? type Level = \"GOLD\" | \"SILVER\" | \"BRONZE\"</span></code></pre></div>\n<h2 id=\"문자열-포멧\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%8F%AC%EB%A9%A7\" aria-label=\"문자열 포멧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 포멧</h2>\n<p>실제 프로젝트에서 문자열 스키마를 작성하다보면 <code>z.string()</code> 만으로는 적절한 유효성 검증이 힘든 경우가 많은데요.</p>\n<p>예를 들어, 다음과 같이 사용자의 이메일, 사진, IP 주소를 나타내기 위한 스키마가 있다고 가정해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  image<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ips<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 아래처럼 빈 문자열이나 전혀 해당 포멧에 맞지 않은 값을 사용해도 아무 문제없이 유효성 검증이 통과하는 것을 볼 수 있는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  image<span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  ips<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-code-title\">콘솔</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> image<span class=\"token operator\">:</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span> ips<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>다행이도 이러한 문제를 방지할 수 있도록 Zod는 문자열에 특화된 검증자를 제공하고 있습니다.</p>\n<p>따라서 <code>z.string()</code> 다음에 <code>.email()</code>, <code>.url()</code>, <code>.ip()</code>와 같은 검증자를 추가하여 특정 포멧에 맞는 값만 유효성 검증에 통과하도록 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  image<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ips<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 추가 검증자를 사용하도록 스크마를 변경한 후에 동일한 객체를 <code>parse()</code> 함수에 넘겨보면 이번에는 유효성 검증이 실패하여 에러가 발생할 것입니다.</p>\n<div class=\"gatsby-code-title\">콘솔</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">ZodError<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"validation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"invalid_string\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid email\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"email\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"validation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"invalid_string\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid url\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"image\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"validation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ip\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"invalid_string\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid ip\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"ips\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"validation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ip\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"invalid_string\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid ip\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"ips\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 주의하실 부분은 하나 있는데요.\n실제로 스키마에서 타입을 추출해보면 여전히 모든 속성이 문자열이라는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> User<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//   ^? { email: string; image: string; ips: string[]; }</span></code></pre></div>\n<p>다시 말해서 타입스크립트로 코드를 작성할 때는 여전히 일반 문자열을 사용할 수 있으며 컴파일(compile) 시에도 스키마에서 정의한 수준의 타입 검사는 일어나지 않습니다.\n이러한 엄격한 유효성 검증은 순수하게 Zod에 의해서 실행 시점에서만 일어납니다.</p>\n<h2 id=\"숫자형-지정\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90%ED%98%95-%EC%A7%80%EC%A0%95\" aria-label=\"숫자형 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자형 지정</h2>\n<p>자바스크립트에서는 정수형과 실수형이 구분되지 않기 때문에 <code>z.number()</code> 만으로는 부족한 경우가 종종 있는데요.</p>\n<p>예를 들어, 나이를 단순히 숫자형으로 나타내면 정수를 사용하든 실수를 사용하든 문제가 되지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Age <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nAge<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\nAge<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.345</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span></code></pre></div>\n<p>만약에 이 값을 저정하는 데이터베이스에서 나이를 저장하는 칼럼이 정수형 타입으로 되어 있다면 큰 문제의 소지가 될 수 있겠죠?</p>\n<p>이럴 때는 <code>int()</code> 검증자를 추가해주면 오직 정수만 사용할 수도 있도록 제한할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Age <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// .int() 추가</span>\n\nAge<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\nAge<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.345</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Expected integer, received float</span></code></pre></div>\n<p>문자열 특화 검증자와 마찬가지로 타입스크립트 수준에서는 여전히 정수형과 실수형이 구분되지 않는 점 주의 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Age<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//   ^? type Age = number</span></code></pre></div>\n<h2 id=\"범위-지정\" style=\"position:relative;\"><a href=\"#%EB%B2%94%EC%9C%84-%EC%A7%80%EC%A0%95\" aria-label=\"범위 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>범위 지정</h2>\n<p>스키마를 정의할 때 값이 허용되는 범위를 지정해주면 도움이 될 때가 있는데요.\n특히 데이터베이스에서 저장하는 값이 길이에 제한이 있는 경우 특히 유용합니다.</p>\n<p>예를 들어, 아래와 같이 <code>.min()</code>나 <code>.max()</code>를 사용하여 하한이나 상한을 지정해주면 그 범위가 넘어갈 시 유효성 검증이 실패하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"zod\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Url <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Age <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nUrl<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.google.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 200자 넘지 않음</span>\nAge<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token number\">900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Number must be less than or equal to 80</span></code></pre></div>\n<p>역시 마찬가지로 추로된 타입에는 아무런 영향을 주지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Url</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Url<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//   ^? type Url = string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Age<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//   ^? type Age = number</span></code></pre></div>\n<h2 id=\"실전-예제\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%84-%EC%98%88%EC%A0%9C\" aria-label=\"실전 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실전 예제</h2>\n<p>지금까지 배운 스키마 정의 방법을 종합하여 실전에서 사용될 법한 사용자 스키마를 작성해보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  level<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">enum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GOLD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SILVER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BRONZE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  image<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ips<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  createdAt<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">default</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 다양한 실습을 통해서 Zod로 어떻게 스키마를 정의하는지에 대해서 살펴보았습니다.</p>\n<p>Zod는 본 포스팅에서 다룬 것보다 훨씬 더 많은 검증자를 제공하고 있지만 이 정도만 숙지하시면 나머지는 필요할 때 마다 <a href=\"https://zod.dev/\">공식 문서</a>를 통해 충분히 찾아보실 수 있으실 것입니다.</p>\n<blockquote>\n<p>Zod 관련 포스팅은 <a href=\"/?tag=Zod\">Zod 태그</a>를 통해서 쉽게 만나보세요! 😀</p>\n</blockquote>","timeToRead":7,"fields":{"slug":"/zod-schema/","tags":["JavaScript","TypeScript","validation","library","Zod"]},"frontmatter":{"title":"Zod를 통한 타입스크립트 친화적인 스키마 정의","date":"Jun 12, 2023"}},"next":{"fields":{"slug":"/zod/"},"frontmatter":{"title":"Zod로 유효성 검증과 타입 선언의 두 마리 토끼 잡기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}