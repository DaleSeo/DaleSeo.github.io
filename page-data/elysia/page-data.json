{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/elysia/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p><a href=\"/?tag=Bun\">Bun</a>이 Node.js를 잇는 차세대 자바스크립트 런타임으로 급 부상하면서, Bun을 위해서 탄생한 웹 프레임워크인 Elysia도 큰 관심을 받고 있습니다.\n이번 포스팅에서는 Elysia의 주요 특징과 사용법, 그리고 Elysia가 다른 웹 프레임워크와 어떻게 차별화되는지에 대해서 살펴보겠습니다.</p>\n<h2 id=\"elysia란\" style=\"position:relative;\"><a href=\"#elysia%EB%9E%80\" aria-label=\"elysia란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elysia란?</h2>\n<p>익스프레스 프레임워크가 Node.js 생태계에서 대표 웹 프레임워크를 담당하고 있다면 Elysia는 Bun 생태계 비슷한 역할과 인지도를 갖고 있는 하고 있는 웹 프레임워크입니다.</p>\n<p>물론 간단한 웹 서버를 개발할 때는 Bun에서 제공하는 HTTP 서버만으로도 충분할 때가 많지만, Elysia는 웹 서버 개발에 필요한 왠만한 기능이 모두 내장되어 있어서 단순한 서버 개발 뿐만 아니라 복잡한 서버 개발까지 사용할 수 있는 범용 우베 프레임워크입니다.</p>\n<p>타입스크립트를 바로 실행하는 Bun과 마찬가지로 Elysia도 타입스크립트에 매우 친화적인 API를 제공하면서도 개발자가 피곤하게 타입스크립트를 많이 작성하지 않도록 매우 인체 공학적으로 설계가 되어 있습니다.\n다시 말해서, 다른 웹 프레임워크처럼 개발자에게 번거로운 타이핑(typing)을 강요하지 않고, 강력한 타입 추론을 통해서 코드 편집기에서 훌륭한 자동 완성(autocomplete)과 정적 타입 체킹을 제공합니다.\n그래서 Elysia를 쓰면 마치 순수한(Vanilla) 자바스크립트를 쓰는 듯한 산뜻한 개발자 경험을 하면서도, 버그가 적은 견고한 서버 애플리케이션을 작성할 수 있습니다.</p>\n<p>아래 예제 코드를 보시면 Elysia의 API가 얼마나 아름답고 직관적인지 실감이 나실 겁니다.\n딱히 Elysia를 배우시지 않으신 분도 코드만 보면 대강 웹 서버가 어떻게 동작하는지 감을 잡을 수 있을 정도니까요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Elysia <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"elysia\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/image\"</span><span class=\"token punctuation\">,</span> Bun<span class=\"token punctuation\">.</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mika.webp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/stream\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">ws</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/realtime\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"got:\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Elysia는 개발자 경험 뿐만 아니라 성능 측면에서도 기존 웹 프레임워크를 압도하는 모습을 보여줍니다.\n<a href=\"https://www.techempower.com/benchmarks/#section=data-r22&#x26;hw=ph&#x26;test=composite\">벤치마크</a> 결과를 보면 Elysia는 초당 Express보다 무려 21배, Fastify보다 6배 많은 요청을 처리하는 것으로 알려져 있습니다.\n지나친 단순화이지만 Node.js에서 Express 익스프레스 서버 인스턴스로 처리할 수 있는 트래픽을, Bun에서는 1개의 Elysia 서버 인스턴스로 처리할 수 있다는 말입니다.\n단순히 런타임과 프레임워크를 바꿔서 이 정도의 성능 향상을 이룰 수 있다니, Bun과 Elysia는 정말 매력적인 조합이 아닐 수 없습니다.</p>\n<p><img src=\"https://res.cloudinary.com/daleseo/image/upload/v1728766438/elysia-benchmark.png\" alt=\"Elysia Benchmark\"></p>\n<h2 id=\"elysia-프로젝트-시작하기\" style=\"position:relative;\"><a href=\"#elysia-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"elysia 프로젝트 시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elysia 프로젝트 시작하기</h2>\n<blockquote>\n<p>Elysia를 사용하려면 우선적으로 Bun이 설치되어 있어야 합니다. Bun을 설치하는 방법은 <a href=\"/bun\">별도 포스팅</a>을 참고하세요.</p>\n</blockquote>\n<p>Elysia는 손쉽게 프로젝트를 만들 수 있도록 프로젝트를 쉽게 구성할 수 있도록 도와주는 명령줄 도구를 제공합니다.\n<code>bun create elysia</code> 명령어로 실행이 가능하며 뒤에 프로젝트를 생성할 디렉토리 이름만 명시해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> bun create elysia our-elysia\n\n$ bun <span class=\"token function\">install</span>\nbun <span class=\"token function\">install</span> v1.1.30 <span class=\"token punctuation\">(</span>7996d06b<span class=\"token punctuation\">)</span>\n\n+ bun-types@1.1.30\n+ elysia@1.1.21\n\n<span class=\"token number\">9</span> packages installed <span class=\"token punctuation\">[</span><span class=\"token number\">27</span>.00ms<span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">36</span>.00ms<span class=\"token punctuation\">]</span> bun <span class=\"token function\">install</span>\n\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">67</span>.00ms<span class=\"token punctuation\">]</span> <span class=\"token function\">git</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">382</span>.00ms<span class=\"token punctuation\">]</span> bun create elysia\n\nCome hang out <span class=\"token keyword\">in</span> bun's Discord: https://bun.sh/discord\n\n-----\n\nA <span class=\"token builtin class-name\">local</span> <span class=\"token function\">git</span> repository was created <span class=\"token keyword\">for</span> you and dependencies were installed automatically.\n\nCreated elysia project successfully\n\n<span class=\"token comment\"># To get started, run:</span>\n\n  <span class=\"token builtin class-name\">cd</span> our-elysia\n  bun run src/index.ts</code></pre></div>\n<p>터미널에서 시키는데로 프로젝트 폴더에 들어가서 <code>bun dev</code> 명령어로 웹 서버를 개발 모드로 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token builtin class-name\">cd</span> our-elysia\n<span class=\"token operator\">></span> bun dev\n$ bun run <span class=\"token parameter variable\">--watch</span> src/index.ts\n🦊 Elysia is running at localhost:3000</code></pre></div>\n<p>터미널 창을 하나 더 띄우고 <code>curl</code> 명령어로 <code>localhost:3000</code>에 접속해보면 <code>Hello Elysia</code>라는 문자열이 뜰 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">curl</span> localhost:3000\nHello Elysia%</code></pre></div>\n<h2 id=\"기본-라우팅\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%9D%BC%EC%9A%B0%ED%8C%85\" aria-label=\"기본 라우팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 라우팅</h2>\n<p><code>src</code> 폴더에 있는 <code>index.ts</code> 파일을 열어보면 아주 간단한 Elysia 서버 코드가 있는데요.\n<code>GET /</code> 엔드포인트로 요청이 들어오면 <code>Hello Elysia</code> 문자열을 응답하도록 구현이 되어 있습니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Elysia <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"elysia\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Hello Elysia\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🦊 Elysia is running at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>server<span class=\"token operator\">?.</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>server<span class=\"token operator\">?.</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드를 보면 <code>get()</code> 함수를 통해서 GET 요청을 처리하고 있다는 것을 알 수 있는데요.\n<code>get()</code> 함수는 첫 번째 인자로 경로를 받고, 두 번째 인자로 요청 처리 함수(request handler)나 단순한 값을 받습니다.</p>\n<p>예를 들어, <code>GET /hi</code> 엔드포인트로 요청이 들어오면 손 모양의 이모지를 응답하도록 코드를 추가해볼까요?</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Hello Elysia\"</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"👋\"</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>터미널에서 <code>curl</code> 명령어로 추가한 엔드포인트를 테스트해보면 잘 동작합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">curl</span> localhost:3000/hi\n👋%</code></pre></div>\n<p>Elysia를 사용할 때 함수 체이닝(chaining)을 통해서 여러 메서드를 연쇄 호출할 수 있는데요.\n코드가 간단 명료하게 읽힐 뿐만 아니라 직접 코드를 써보시면 정말 편하다는 것을 느끼게 되실 겁니다.</p>\n<h2 id=\"http-메서드\" style=\"position:relative;\"><a href=\"#http-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"http 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP 메서드</h2>\n<p>REST API를 구현하려면 GET 방식 뿐만 아니라, POST, PUT, PATCH, DELETE와 같은 다양한 HTTP 메서드로 들어오는 요청도 처리할 수 있어야겠죠?\nElysia는 <code>get()</code> 함수와 유사하게, 각 HTTP 메서드에 대응하는 <code>post()</code>, <code>put()</code>, <code>delete()</code>와 같은 함수를 제공합니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"get 👋\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"post 👋\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"put 👋\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"delete 👋\"</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>터미널에서 동일한 <code>/hi</code> 경로를 다른 메서드로 호출해보면, 그에 대응하는 응답이 옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">curl</span> localhost:3000/hi\nget 👋%\n<span class=\"token operator\">></span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST localhost:3000/hi\npost 👋%\n<span class=\"token operator\">></span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> PUT localhost:3000/hi\nput 👋%\n<span class=\"token operator\">></span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> DELETE localhost:3000/hi\ndelete 👋%</code></pre></div>\n<blockquote>\n<p>터미널 상에서 간편하게 사용할 수 있는 HTTP 클라이언트인 curl 커맨드에 대해서는 <a href=\"/curl/\">관련 포스팅</a>을 참고하세요.</p>\n</blockquote>\n<h2 id=\"쿼리-스트링\" style=\"position:relative;\"><a href=\"#%EC%BF%BC%EB%A6%AC-%EC%8A%A4%ED%8A%B8%EB%A7%81\" aria-label=\"쿼리 스트링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿼리 스트링</h2>\n<p>서버 측에서 필터링(filter), 페이지네이션(pagination), 정렬(sort)과 같은 작업을 하러면 쿼리 스트링(query string)을 통해 검색 파라미터를 받아야 합니다.</p>\n<p>클라이언트에서 명시한 검색 파라미터는 자바스크립트 객체로 변환되어 요청 처리 함수의 <code>query</code> 속성으로 넘어오는데요.</p>\n<p>예를 들어, 클라이언트에서 보낸 쿼리 스트링을 그대로 JSON 형태로 돌려주는 <code>GET /countries</code> 엔드포인트를 구현해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Elysia<span class=\"token punctuation\">,</span> t <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"elysia\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/countries\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>3개의 검색 파라미터를 쿼리 스트링에 넣어 호출을 해보면, JSON 형태로 변환된 객체가 응답이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">curl</span> <span class=\"token string\">\"localhost:3000/countries?region=Asia&amp;page=1&amp;sort=code\"</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"region\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Asia\"</span>,<span class=\"token string\">\"page\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span>,<span class=\"token string\">\"sort\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">}</span>%</code></pre></div>\n<h2 id=\"경로-변수\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EB%B3%80%EC%88%98\" aria-label=\"경로 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로 변수</h2>\n<p>REST API를 디자인할 때 클라이언트가 URL 경로 안에 식별자(ID)를 넣어서 서버로 부터 특정 자원을 요청하도록 하는 경우가 많은데요.</p>\n<p>경로 안에 <code>:</code> 기호로 시작하는 문자열을 설정해주면, 요청 처리 함수의 <code>params</code> 속성으로 넘어옵니다.</p>\n<p>예를 들어, 클라이언트가 국가 코드를 경로 변수로 보낼 수 있도록 <code>GET /countries/:code</code> 엔드포인트를 구현해보겠습니다.\n요청 처리 함수에서는 국가 코드를 읽어와서 그대로 JSON 형태로 응답합니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/countries/:code\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> code <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    code<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>경로 안에 <code>KR</code>을 명시하여 API를 호출해보면, 예상했던 JSON 객체가 응답됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">curl</span> localhost:3000/countries/KR\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"KR\"</span><span class=\"token punctuation\">}</span>%</code></pre></div>\n<h2 id=\"요청-바디\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%B2%AD-%EB%B0%94%EB%94%94\" aria-label=\"요청 바디 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요청 바디</h2>\n<p>클라이언트에서 요청 바디로 송신한 데이터는 요청 처리 함수의 <code>body</code> 속성으로 넘어옵니다.</p>\n<p>예를 들어, 요청 바디로 넘어온 국가 데이터를 그대로 응답하도록 <code>POST /countries</code> 엔드포인트를 구현해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/countries\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> body<span class=\"token operator\">:</span> country <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> country<span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>curl</code> 명령어의 <code>-d</code> 옵션으로 국가 데이터를 요청 바디로 명시해줍니다.\n이 때, <code>-H</code> 옵션으로 <code>Content-type</code> 헤더를 <code>application/json</code>으로 설정해주셔야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST localhost:3000/countries <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"code\": \"KR\", \"name\": \"Korea\"}'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-type: application/json'</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"KR\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Korea\"</span><span class=\"token punctuation\">}</span>%</code></pre></div>\n<h2 id=\"유효성-검증\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%A6%9D\" aria-label=\"유효성 검증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유효성 검증</h2>\n<p>요청 바디를 처리할 때는 클라이언트에서 옮바른 형태로 데이터를 보내는지 유효성 검증을 하는 것이 서버 측 데이터 무결성 측면에서 중요한데요.</p>\n<p><code>post()</code> 함수의 세 번째 인자로 서버에서 기대하는 요청 바디의 형태를 명시할 수 있습니다.\n이 때, <code>elysia</code> 패키지에서 불러온 <code>t</code>를 사용하여 스키마(schema)를 정의합니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Elysia<span class=\"token punctuation\">,</span> t <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"elysia\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/countries\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> body<span class=\"token operator\">:</span> country <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> country<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    body<span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      code<span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">Literal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Literal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"US\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Literal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      name<span class=\"token operator\">:</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번에는 <code>code</code> 속성 대신에 <code>id</code> 속성을 사용해서 국가 데이터를 보내볼까요?\n유효성 검증이 실패하여 오류가 응답이 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST localhost:3000/countries <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'{\"id\": \"KR\", \"name\": \"Korea\"}'</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">'Content-type: application/json'</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"validation\"</span>,\n  <span class=\"token string\">\"on\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"body\"</span>,\n  <span class=\"token string\">\"summary\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Property 'code' is missing\"</span>,\n  <span class=\"token string\">\"property\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/code\"</span>,\n  <span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Required property\"</span>,\n  <span class=\"token string\">\"expected\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"KR\"</span>,\n    <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"found\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Korea\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"errors\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">45</span>,\n      <span class=\"token string\">\"schema\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"anyOf\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"const\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"KR\"</span>,\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"string\"</span>\n          <span class=\"token punctuation\">}</span>,\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"const\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"US\"</span>,\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"string\"</span>\n          <span class=\"token punctuation\">}</span>,\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"const\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"CA\"</span>,\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"string\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>,\n      <span class=\"token string\">\"path\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/code\"</span>,\n      <span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Required property\"</span>,\n      <span class=\"token string\">\"summary\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Property 'code' is missing\"</span>\n    <span class=\"token punctuation\">}</span>,\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">62</span>,\n      <span class=\"token string\">\"schema\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"anyOf\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"const\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"KR\"</span>,\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"string\"</span>\n          <span class=\"token punctuation\">}</span>,\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"const\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"US\"</span>,\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"string\"</span>\n          <span class=\"token punctuation\">}</span>,\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"const\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"CA\"</span>,\n            <span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"string\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>,\n      <span class=\"token string\">\"path\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/code\"</span>,\n      <span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Expected union value\"</span>,\n      <span class=\"token string\">\"summary\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Property 'code' should be one of: 'string', 'string', 'string'\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>%</code></pre></div>\n<p>이와 같이 런타임(실행 시점)에 유효성 검증이 될 뿐 아니라, 코드 데이터에서 <code>country</code> 변수 위에 마우스 커서를 올려보면 타입스크립트로 타이핑이 되어 있는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">country<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  code<span class=\"token operator\">:</span> <span class=\"token string\">\"KR\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"US\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"CA\"</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>개발자가 직접 타입스크립트를 선언을 않아도 Elysia를 통해 유효성 검증과 타입 선언이라는 두 마리의 토끼를 잡을 수 있는 것이지요.</p>\n<h2 id=\"예외-처리\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\" aria-label=\"예외 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외 처리</h2>\n<p><code>200 OK</code>가 아닌 예외 상태가 발생했을 때는 요청 처리 함수의 <code>error</code> 속성을 사용하여 상태 코드와 오류 메세지를 명시해줄 수 있습니다.</p>\n<p>예를 들어, 클라이언트가 호출하면 무조건 예외가 발생하도록 <code>GET /error</code> 엔드포인트를 구현해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"서버 내부 문제\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>curl</code> 명령어의 <code>-i</code> 옵션으로 응답 헤더까지 출력해보면 명시해준 상태 코드와 오류 메시지를 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">curl</span> localhost:3000/error <span class=\"token parameter variable\">-i</span>\nHTTP/1.1 <span class=\"token number\">500</span> Internal Server Error\ncontent-type: text/plain<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>utf-8\nDate: Mon, <span class=\"token number\">14</span> Oct <span class=\"token number\">2024</span> <span class=\"token number\">14</span>:51:33 GMT\nContent-Length: <span class=\"token number\">20</span>\n\n서버 내부 문제%</code></pre></div>\n<h2 id=\"헤더-처리\" style=\"position:relative;\"><a href=\"#%ED%97%A4%EB%8D%94-%EC%B2%98%EB%A6%AC\" aria-label=\"헤더 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헤더 처리</h2>\n<p>HTTP 헤더를 통해서 클라이언트와 서버가 데이터를 주고 받는 경우도 있는데요.\n대표적인 예로 쿠키(Cookie) 들 수 있습니다.</p>\n<p>요청 헤더는 <code>headers</code> 속성을 통해서 읽을 수 있고, 응답 헤더는 <code>set.headers</code> 함수를 통해서 쓸 수 있습니다.</p>\n<p>예를 들어, <code>cookie</code> 요청 헤더를 읽어오고, <code>set-cookie</code> 응답 헤더를 써주는 <code>GET /cookie</code> 엔드포인트를 구현해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> headers<span class=\"token punctuation\">,</span> set <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    set<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"set-cookie\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a=2\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      cookie<span class=\"token operator\">:</span> headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"cookie\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">curl</span> localhost:3000/cookie <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Cookie: a=1\"</span> <span class=\"token parameter variable\">-i</span>\nHTTP/1.1 <span class=\"token number\">200</span> OK\nset-cookie: <span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\nContent-Type: application/json<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>utf-8\nDate: Mon, <span class=\"token number\">14</span> Oct <span class=\"token number\">2024</span> <span class=\"token number\">15</span>:33:58 GMT\nContent-Length: <span class=\"token number\">16</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"cookie\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"a=1\"</span><span class=\"token punctuation\">}</span>%</code></pre></div>\n<h2 id=\"문서화\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%84%9C%ED%99%94\" aria-label=\"문서화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문서화</h2>\n<p>Elysia는 코드만 작성하면 자동으로 Open API 규격에 맞는 문서를 추출해주는데요.\nSwagger와 통합하여 아름다운 API 문서를 웹으로 볼 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> bun <span class=\"token function\">add</span> @elysiajs/swagger\nbun <span class=\"token function\">add</span> v1.1.30 <span class=\"token punctuation\">(</span>7996d06b<span class=\"token punctuation\">)</span>\n\ninstalled @elysiajs/swagger@1.1.5\n\n<span class=\"token number\">7</span> packages installed <span class=\"token punctuation\">[</span><span class=\"token number\">920</span>.00ms<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Elysia <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"elysia\"</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> swagger <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@elysiajs/swagger\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">swagger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"get 👋\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"post 👋\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"put 👋\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"delete 👋\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ... 다른 요청 처리 함수 호출</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">🦊 Elysia is running at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>server<span class=\"token operator\">?.</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>server<span class=\"token operator\">?.</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Elysia의 수려하고 직관적인 API를 통해서 어떻게 웹 서버를 구현할 수 있는지 간단한 실습을 통해서 알아보았습니다.</p>\n<p>Node.js가 2009년에 나왔고 Express가 2010년에 나와서 정말 오랫동안 웹 서버 시장을 지배해왔습니다.\n그 동안 자바스크립트 생태계에서는 너무나 많은 진화가 있었죠?\n처음부터 TypeScript와 ES Modules 기반으로 설계된 기술로 넘어가야 할 때가 다가오고 있는 것 같습니다.</p>\n<p>본 포스팅이 차세대 런타임 Bun과 차세대 웹 프레임워크를 Elysia을 활용한 모던 웹 개발에 도움이 되었으면 좋겠습니다.</p>","timeToRead":9,"fields":{"slug":"/elysia/","tags":["JavaScript","TypeScript","Bun","Elysia"]},"frontmatter":{"title":"Elysia: Bun을 위한 인체 공학적 웹 프레임워크","date":"Oct 8, 2024"}},"next":{"fields":{"slug":"/hello-bun/"},"frontmatter":{"title":"👋 헬로 Bun 🥟 출간 소식 📚"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}