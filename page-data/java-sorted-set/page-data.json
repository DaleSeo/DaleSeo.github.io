{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/java-sorted-set/","result":{"pageContext":{"previous":{"fields":{"slug":"/java-navigable-set/"},"frontmatter":{"title":"[자바] NavigableSet 사용법"}},"node":{"html":"<p><code>SortedSet</code> 사용법에 대해서 알아보록 하겠습니다.</p>\n<p><code>SortedSet</code>은 원소들이 정렬되어 있는 <code>Set</code>입니다.<br>따라서 <code>SortedSet</code> 하여금 객체 간 대소 비교가 가능한 상황을 만들어줘야 합니다.<br>여기서 “객체 간 대소 비교가 가능한 상황”이란 다음 2가지로 생각해볼 수 있습니다.</p>\n<ol>\n<li><code>Comparable</code> 인터페이스를 구현하고 있는 클래스의 객체를 원소로 사용</li>\n<li><code>Comparator</code> 인터페이스를 구현한 대소 판단을 위한 로직을 <code>SortedSet</code> 객체 생성 시에 넘김</li>\n</ol>\n<p>본 포스트에서는 <code>Comparable</code> 인터페이스를 구현하고 있는 <code>String</code> 클래스의 객체를 원소로 이용하여 간단한 예제를 작성해보겠습니다.<br>자바에서 <code>SortedSet</code> 인터페이스의 기본 구현체로 <code>TreeSet</code> 클래스를 제공해주고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> animals <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lion\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Elephant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SortedSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> animalSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 5개의 동물 문자열로 <code>TreeSet</code> 객체를 생성하면, <code>TreeSet</code>은 원소들을 정렬된 상태로,<br>즉, <code>Cat</code>, <code>Dog</code>, <code>Elephant</code>, <code>Lion</code>, <code>Tiger</code> 순으로 보관하게 됩니다.</p>\n<h2 id=\"범위-접근-headset-tailset-subset\" style=\"position:relative;\"><a href=\"#%EB%B2%94%EC%9C%84-%EC%A0%91%EA%B7%BC-headset-tailset-subset\" aria-label=\"범위 접근 headset tailset subset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>범위 접근: headSet, tailSet, subSet</h2>\n<p>특정 범위 내의 원소를 접근하기 위한 방법을 알아봅시다.<br>먼저, 가장 작은 원소부터 특정 값까지는 범위 접근은 <code>headSet</code> 메소드를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headSet <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">headSet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elephant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#headSet: \"</span> <span class=\"token operator\">+</span> headSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// #headSet: [Cat, Dog]</span></code></pre></div>\n<p>인자로 넘기는 값과 동일한 원소는 빼고 반환하니 주의바랍니다. (exclusive)</p>\n<p>다음으로, 특정 원소부터 가장 큰 원소까지의 범위 접근은 <code>tailSet</code> 메소드를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tailSet <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">tailSet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elephant\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#tailSet: \"</span> <span class=\"token operator\">+</span> tailSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// #tailSet: [Elephant, Lion, Tiger]</span></code></pre></div>\n<p>인자로 넘기는 값을 동일한 원소도 포함해서 반환하니 주의바랍니다. (inclusive)</p>\n<p>마지막으로, 값A보다 크거나 같고, 값B보다 작은 원소의 범위 접근은 <code>subSet</code> 메소드를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> subSet <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">subSet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lion\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#subSet: \"</span> <span class=\"token operator\">+</span> subSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// #subSet: [Dog, Elephant]</span></code></pre></div>\n<p>첫번째 인자는 inclusive, 두번째 인자는 exclusive 입니다.</p>\n<h2 id=\"가장자리-접근-first-last\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9E%A5%EC%9E%90%EB%A6%AC-%EC%A0%91%EA%B7%BC-first-last\" aria-label=\"가장자리 접근 first last permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가장자리 접근: first, last</h2>\n<p>첫번째 인자, 즉 가장 작은 인자는 <code>first</code> 메소드로, 마지막 인자, 즉 가장 큰 인자는 <code>last</code> 메소드로 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> first <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#first: \"</span> <span class=\"token operator\">+</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// #first: Cat</span>\n\n<span class=\"token class-name\">String</span> last <span class=\"token operator\">=</span> animalSet<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#last: \"</span> <span class=\"token operator\">+</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// #last: Tiger</span></code></pre></div>\n<p>지금까지 <code>SortedSet</code> 사용법에 대해서 알아보았습니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/collections/interfaces/sorted-set.html\">http://docs.oracle.com/javase/tutorial/collections/interfaces/sorted-set.html</a></li>\n</ul>","timeToRead":2,"fields":{"slug":"/java-sorted-set/","tags":["Java","Java6","Collections"]},"frontmatter":{"title":"[자바] SortedSet 사용법","date":"May 21, 2017"}},"next":{"fields":{"slug":"/js-es2015-default-parameters/"},"frontmatter":{"title":"[ES2015] 기본 매개변수 (Default Parameters)"}}}}}