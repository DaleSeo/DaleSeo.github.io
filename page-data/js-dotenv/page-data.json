{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-dotenv/","result":{"pageContext":{"previous":{"fields":{"slug":"/material-ui-tables/"},"frontmatter":{"title":"Material UI의 Table 컴포넌트"}},"node":{"html":"<p>이번 포스트에서는 환경 변수를 파일에 저장할 수 있도록 해주는 <code>dotenv</code> 라이브러리에 대해서 알아보겟습니다.</p>\n<h2 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h2>\n<p>npm 패키지 매니저를 이용하여 <code>dotenv</code> 라이브러리를 Node.js 프로젝트에 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm i dotenv</code></pre></div>\n<h2 id=\"env-파일-작성\" style=\"position:relative;\"><a href=\"#env-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1\" aria-label=\"env 파일 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.env 파일 작성</h2>\n<p><code>dotenv</code> 라이브러리는 디폴트로 현재 디렉토리에 위치한 <code>.env</code> 파일로 부터 환경 변수를 읽어냅니다.\n따라서, <code>.env</code> 파일을 생성하고, 그 안에 필요한 환경 변수를 <code>키=값</code>의 포멧으로 나열하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">DB_HOST</span><span class=\"token operator\">=</span>localhost\n<span class=\"token assign-left variable\">DB_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token assign-left variable\">DB_PASS</span><span class=\"token operator\">=</span>s1mpl3</code></pre></div>\n<p>이렇게 <code>.env</code> 파일에 저장해놓은 환경 변수들을 <code>dotenv</code> 라이브러리를 이용해서 <code>process.env</code>에 설정할 수 있는데요.</p>\n<blockquote>\n<p>Node.js에서 process.env를 통해서 환경 변수 다루는 방법은 <a href=\"/js-node-process-env\">지난 포스트</a>를 참고 바랍니다.</p>\n</blockquote>\n<p>본인 프로젝트가 CommonJS 기반인지 ES 모듈 기반인지에 따라 라이브러리 사용법이 약간 상이하므로 나눠서 설명드리도록 하겠습니다.</p>\n<h2 id=\"commonjs에서-환경-변수-불러오기-require\" style=\"position:relative;\"><a href=\"#commonjs%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0-require\" aria-label=\"commonjs에서 환경 변수 불러오기 require permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS에서 환경 변수 불러오기 (require)</h2>\n<p>먼저 Node.js에서 전통적으로 제공해왔던 모듈 시스템인 CommonJS에서 <code>dotenv</code> 라이브러리를 어떻게 사용하는지 알아보겠습니다.</p>\n<p>애플리케이션을 구동할 때 제일 먼저 실행되는 자바스크립트 파일(ex. <code>index.js</code>, <code>main.js</code>)의 최상위에 다음과 같이 <code>dotenv</code> 라이브러를 임포트한 후 <code>config()</code> 함수를 호출해주기만 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예를 들어, 위 코드를 실행하면 <code>process.env</code>로 부터 읽어진 확경 변수가 출력되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">DB_HOST: localhost\nDB_USER: root\nDB_PASS: s1mpl3</code></pre></div>\n<p>하지만, 같은 파일 내에서 <code>dotenv</code> 라이브러리의 <code>config()</code> 함수를 호출하기 전에 <code>process.env</code>를 읽으면 안 되니 주의하셔야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">DB_HOST: undefined\nDB_USER: undefined\nDB_PASS: undefined</code></pre></div>\n<p>만약에 <code>.env</code>가 아닌 다른 경로에 있는 파일에 환경 변수를 저장해놨다면 <code>config()</code> 함수를 호출 시 <code>path</code> 옵션을 넘기면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">\"/path/to/.env.local\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"es-모듈에서-환경-변수-불러오기-import\" style=\"position:relative;\"><a href=\"#es-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0-import\" aria-label=\"es 모듈에서 환경 변수 불러오기 import permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES 모듈에서 환경 변수 불러오기 (import)</h2>\n<p><code>require</code> 대신에 <code>import</code> 키워드를 사용하는 ES 모듈에서는 <code>dotenv</code> 라이브러리를 어떻게 사용할까요?</p>\n<p>ES 모듈을 사용할 때는 CommonJS를 사용할 때 보다 좀 더 주의가 필요한데요.\n흔히 발생하는 문제를 재현해보겠습니다.</p>\n<p>아래 코드를 보시면, <code>dotenv</code> 라이브러리를 제일 임포트하기 때문에 <code>db.js</code> 파일이 <code>process.env</code>에 접근할 때 환경 변수가 설정이 되어 있을 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// db.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> db_host <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> db_user <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> db_pass <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">import</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> db_host<span class=\"token punctuation\">,</span> db_user<span class=\"token punctuation\">,</span> db_pass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./db.js\"</span><span class=\"token punctuation\">;</span>\n\ndotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> db_host<span class=\"token punctuation\">,</span> db_user<span class=\"token punctuation\">,</span> db_pass <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 실제 실행을 해보면 <code>db.js</code> 파일이 <code>process.env</code>에 접근했을 시점에는 환경 변수가 설정이 되어 있지 않았던 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">DB_HOST: localhost\nDB_USER: root\nDB_PASS: s1mpl3\n<span class=\"token punctuation\">{</span> db_host: undefined, db_user: undefined, db_pass: undefined <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이러한 현상이 발생하는 이유는 <code>dotenv.config()</code> 함수가 <code>db.js</code> 파일이 임포트 된 이후에 호출되었기 때문입니다.</p>\n<p>이 문제는 <code>dotenv</code> 라이브러리를 임포트하는 코드를 별도의 파일로 빼고, 그 안에서 <code>dotenv.config()</code> 함수를 호출하면 피할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// env.js</span>\n\n<span class=\"token keyword\">import</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">;</span>\n\ndotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./env.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> db_host<span class=\"token punctuation\">,</span> db_user<span class=\"token punctuation\">,</span> db_pass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./db.js\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> db_host<span class=\"token punctuation\">,</span> db_user<span class=\"token punctuation\">,</span> db_pass <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">DB_HOST: localhost\nDB_USER: root\nDB_PASS: s1mpl3\n<span class=\"token punctuation\">{</span> db_host: <span class=\"token string\">'localhost'</span>, db_user: <span class=\"token string\">'root'</span>, db_pass: <span class=\"token string\">'s1mpl3'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"node-커맨드--r-옵션-사용\" style=\"position:relative;\"><a href=\"#node-%EC%BB%A4%EB%A7%A8%EB%93%9C--r-%EC%98%B5%EC%85%98-%EC%82%AC%EC%9A%A9\" aria-label=\"node 커맨드  r 옵션 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>node 커맨드 -r 옵션 사용</h2>\n<p>본인 프로젝트가 CommonJS 기반인지 ES 모듈 기반인지 신경쓰기 싫으시다면 <code>node</code> 커맨드를 이용하는 방법도 있습니다.\n애플리케이션을 구동할 때, <code>node</code> 커맨드의 <code>-r</code> 또는 <code>--require</code> 옵션으로 <code>dotenv/config</code>를 넘기는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node -r dotenv/config index.js</code></pre></div>\n<p>이 방법을 사용하면 <code>dotenv</code> 라이브러리를 코드에 직접 임포트하지 않아도 <code>.env</code> 파일에 저장된 환경 변수가 <code>process.env</code>에 설정됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">DB_HOST: localhost\nDB_USER: root\nDB_PASS: s1mpl3</code></pre></div>\n<p>만약에 <code>.env</code>가 아닌 다른 경로에 있는 파일에 환경 변수를 저장해놨다면 <code>DOTENV_CONFIG_PATH</code> 환경 변수를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ <span class=\"token constant\">DOTENV_CONFIG_PATH</span><span class=\"token operator\">=</span><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>local node <span class=\"token operator\">-</span>r dotenv<span class=\"token operator\">/</span>config index<span class=\"token punctuation\">.</span>js</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 <code>dotenv</code> 라이브러리를 이용해서 파일에 환경 변수를 저장해놓고 불러오는 방법에 대해서 대략적으로 살펴보았습니다.\n<code>dotenv</code> 라이브러리에 좀 더 자세한 내용은 <a href=\"https://github.com/motdotla/dotenv\">Github</a>를 참고하시기 바랍니다.</p>","timeToRead":4,"fields":{"slug":"/js-dotenv/","tags":["JavaScript","env"]},"frontmatter":{"title":"dotenv로 환경 변수 관리하기","date":"Jan 12, 2021"}},"next":{"fields":{"slug":"/js-node-process-env/"},"frontmatter":{"title":"Node.js에서 환경 변수 다루기 (process.env)"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}