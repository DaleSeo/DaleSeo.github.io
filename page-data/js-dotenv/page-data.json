{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-dotenv/","result":{"pageContext":{"previous":{"fields":{"slug":"/material-ui-tables/"},"frontmatter":{"title":"Material UI의 Table 컴포넌트"}},"node":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/AIP88TPnCtQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>많은 Node.js 프로젝트에서 환경 변수를 좀 더 효과적으로 관리하기 위해서 <code>dotenv</code>라는 라이브러리를 사용하고 있습니다.\n이번 포스팅에서는 환경 변수를 파일에 저장해놓고 접근할 수 있게 도와주는 <code>dotenv</code> 라이브러리에 대해서 알아보겟습니다.</p>\n<h2 id=\"dotenv-패키지-설치\" style=\"position:relative;\"><a href=\"#dotenv-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"dotenv 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>dotenv 패키지 설치</h2>\n<p>npm 패키지 매니저를 이용하여 <code>dotenv</code> 라이브러리를 Node.js 프로젝트에 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm i dotenv</code></pre></div>\n<h2 id=\"env-파일-작성\" style=\"position:relative;\"><a href=\"#env-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1\" aria-label=\"env 파일 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.env 파일 작성</h2>\n<p><code>dotenv</code> 라이브러리는 아무 설정을 하지 않으면 현재 디렉토리에 위치한 <code>.env</code> 파일로 부터 환경 변수를 읽어오는데요.\n<code>.env</code> 파일을 생성하고, 그 안에 필요한 환경 변수를 <code>키=값</code>의 포멧으로 나열해보겠습니다.</p>\n<div class=\"gatsby-code-title\">.env</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">DB_HOST</span><span class=\"token operator\">=</span>localhost\n<span class=\"token assign-left variable\">DB_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token assign-left variable\">DB_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">1234</span></code></pre></div>\n<p>이렇게 <code>.env</code> 파일에 저장해놓은 환경 변수들을 <code>dotenv</code> 라이브러리를 이용해서 <code>process.env</code>에 설정할 수 있는데요.</p>\n<blockquote>\n<p><code>process.env</code>가 생소하신 분들은 <a href=\"/js-node-process-env/\">관련 포스팅</a>를 통해서 Node.js에서 환경 변수 다루는 방법을 먼저 학습하시기를 추천드립니다.</p>\n</blockquote>\n<p>본인 프로젝트가 CommonJS 기반인지 ES 모듈 기반인지에 따라 라이브러리 사용법이 약간 상이하므로 나눠서 설명드리도록 하겠습니다.</p>\n<h2 id=\"commonjs에서-환경-변수-불러오기-require\" style=\"position:relative;\"><a href=\"#commonjs%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0-require\" aria-label=\"commonjs에서 환경 변수 불러오기 require permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS에서 환경 변수 불러오기 (require)</h2>\n<p>먼저 Node.js에서 전통적으로 제공해왔던 모듈 시스템인 CommonJS에서 <code>dotenv</code> 라이브러리를 어떻게 사용하는지 알아볼께요.</p>\n<p>프로그램을 구동할 때 제일 먼저 실행되는 자바스크립트 파일(ex. <code>index.js</code>, <code>main.js</code>)의 최상위에 다음과 같이 <code>dotenv</code> 라이브러를 임포트한 후 <code>config()</code> 함수를 호출해주기만 하면 됩니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예를 들어, 위 코드를 실행하면 <code>process.env</code>로 부터 읽어진 확경 변수가 출력되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js\nDB_HOST: localhost\nDB_USER: root\nDB_PASS: <span class=\"token number\">1234</span></code></pre></div>\n<p>하지만, 같은 파일 내에서 <code>dotenv</code> 라이브러리의 <code>config()</code> 함수를 호출하기 전에 <code>process.env</code>를 읽으면 안 되니 주의하셔야 합니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js\nDB_HOST: undefined\nDB_USER: undefined\nDB_PASS: undefined</code></pre></div>\n<h2 id=\"es-모듈에서-환경-변수-불러오기-import\" style=\"position:relative;\"><a href=\"#es-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0-import\" aria-label=\"es 모듈에서 환경 변수 불러오기 import permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES 모듈에서 환경 변수 불러오기 (import)</h2>\n<p>ES 모듈을 사용하고 있는 Node.js 환경에서는 <code>require</code> 대신에 <code>import</code> 키워드를 사용해서 <code>dotenv</code> 패키지를 불러오면 됩니다.</p>\n<div class=\"gatsby-code-title\">index.mjs</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">;</span>\n\ndotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.mjs\nDB_HOST: localhost\nDB_USER: root\nDB_PASS: <span class=\"token number\">1234</span></code></pre></div>\n<blockquote>\n<p>Node.js에서 ES 모듈(import/export) 사용하는 방법은 <a href=\"/js-node-es-modules/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"다른-파일에-환경-변수-저장하기\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%ED%8C%8C%EC%9D%BC%EC%97%90-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0\" aria-label=\"다른 파일에 환경 변수 저장하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 파일에 환경 변수 저장하기</h2>\n<p>만약에 <code>.env</code>가 아닌 다른 경로에 있는 파일에 환경 변수를 저장해야 한다면 어떻게 해야할까요?</p>\n<div class=\"gatsby-code-title\">.env.local</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">DB_HOST</span><span class=\"token operator\">=</span>localhost\n<span class=\"token comment\"># DB_USER=root</span>\n<span class=\"token assign-left variable\">DB_USER</span><span class=\"token operator\">=</span>test\n<span class=\"token comment\"># DB_PASS=1234</span>\n<span class=\"token assign-left variable\">DB_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">5678</span></code></pre></div>\n<p>그럴 때는 <code>config()</code> 함수를 호출 시 <code>path</code> 옵션에 해당 파일 경로를 넘기면 됩니다.</p>\n<div class=\"gatsby-code-title\">index.mjs</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">dotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'.env.local'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_HOST:'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_USER:'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_PASS:'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.mjs\nDB_HOST: localhost\nDB_USER: <span class=\"token builtin class-name\">test</span>\nDB_PASS: <span class=\"token number\">5678</span></code></pre></div>\n<h2 id=\"프로그램을-실행하면서-환경변수-불러오기\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%8B%A4%ED%96%89%ED%95%98%EB%A9%B4%EC%84%9C-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" aria-label=\"프로그램을 실행하면서 환경변수 불러오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그램을 실행하면서 환경변수 불러오기</h2>\n<p><code>dotenv</code>를 임포트(import)하여 <code>dotenv.config()</code> 함수를 코드에서 호출하기 힘든 상황이라면,\n프로그램을 구동할 때, <code>node</code> 커맨드의 <code>-r</code> 또는 <code>--require</code> 옵션으로 <code>dotenv/config</code>를 넘기는 방법도 있는데요\n이 방법을 사용하면 <code>dotenv</code> 라이브러리를 코드에 직접 임포트하지 않아도 <code>.env</code> 파일에 저장된 환경 변수가 <code>process.env</code>에 설정됩니다.</p>\n<p>우선 <code>index.js</code>나 <code>index.mjs</code> 파일을 열고 <code>dontenv</code> 패키지를 불러와서 <code>dotenv.config()</code> 함수를 호출하는 부분을 삭제하고요.</p>\n<div class=\"gatsby-code-title\">index.mjs</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>-r</code> 옵션으로 <code>dotenv/config</code>를 넘겨서 실행을 해보면 정상적으로 환경 변수가 출력되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node -r dotenv/config index.mjs\nDB_HOST: localhost\nDB_USER: root\nDB_PASS: <span class=\"token number\">1234</span></code></pre></div>\n<p>만약에 <code>.env</code>가 아닌 다른 경로에 있는 파일에 환경 변수를 저장해놨다면 <code>DOTENV_CONFIG_PATH</code> 환경 변수를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">DOTENV_CONFIG_PATH</span><span class=\"token operator\">=</span>.env.local node -r dotenv/config index.mjs\nDB_HOST: localhost\nDB_USER: <span class=\"token builtin class-name\">test</span>\nDB_PASS: <span class=\"token number\">5678</span></code></pre></div>\n<p>이 방법은 어떤 프로젝트가 CommonJS 기반인지 ES 모듈 기반인지 미리 알 수 없을 때 매우 유용합니다.\n왜냐하면 해당 NOde.js 런타임(runtime)이 어떤 모듈 시스템을 사용하든지 상관없이 통하는 방법이기 때문입니다.</p>\n<h2 id=\"es-모듈에서-발생하기-쉬운-실수\" style=\"position:relative;\"><a href=\"#es-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EB%B0%9C%EC%83%9D%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EC%8B%A4%EC%88%98\" aria-label=\"es 모듈에서 발생하기 쉬운 실수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES 모듈에서 발생하기 쉬운 실수</h2>\n<p>ES 모듈을 사용할 때는 CommonJS를 사용할 때 보다 좀 더 주의가 필요한데요.\n흔히 발생하는 문제를 재현해보겠습니다.</p>\n<p>아래 코드를 보시면, <code>dotenv</code> 라이브러리를 제일 임포트하기 때문에 <code>db.js</code> 파일이 <code>process.env</code>에 접근할 때 환경 변수가 설정이 되어 있을 것 같습니다.</p>\n<div class=\"gatsby-code-title\">db.mjs</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> db_host <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> db_user <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> db_pass <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-code-title\">index2.mjs</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> db_host<span class=\"token punctuation\">,</span> db_user<span class=\"token punctuation\">,</span> db_pass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./db.js\"</span><span class=\"token punctuation\">;</span>\n\ndotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> db_host<span class=\"token punctuation\">,</span> db_user<span class=\"token punctuation\">,</span> db_pass <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 실제 실행을 해보면 <code>db.js</code> 파일이 <code>process.env</code>에 접근했을 시점에는 환경 변수가 설정이 되어 있지 않았던 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index2.mjs\nDB_HOST: localhost\nDB_USER: root\nDB_PASS: <span class=\"token number\">1234</span>\n<span class=\"token punctuation\">{</span> db_host: undefined, db_user: undefined, db_pass: undefined <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이러한 현상이 발생하는 이유는 <code>dotenv.config()</code> 함수가 <code>db.js</code> 파일이 임포트 된 이후에 호출되었기 때문인데요.\n이 문제는 <code>dotenv</code> 라이브러리를 임포트하는 코드를 별도의 파일로 빼고, 그 안에서 <code>dotenv.config()</code> 함수를 호출하면 피할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">env.mjs</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">\"dotenv\"</span><span class=\"token punctuation\">;</span>\n\ndotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-code-title\">index2.mjs</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"./env.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> db_host<span class=\"token punctuation\">,</span> db_user<span class=\"token punctuation\">,</span> db_pass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./db.js\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_HOST:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS:\"</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> db_host<span class=\"token punctuation\">,</span> db_user<span class=\"token punctuation\">,</span> db_pass <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 다시 프로그램을 실행을 해보면 환경 변수가 모든 파일에서 정상적으로 읽히는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index2.mjs\nDB_HOST: localhost\nDB_USER: root\nDB_PASS: <span class=\"token number\">1234</span>\n<span class=\"token punctuation\">{</span> db_host: <span class=\"token string\">'localhost'</span>, db_user: <span class=\"token string\">'root'</span>, db_pass: <span class=\"token string\">'1234'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 프로그램을 시작된 후 가급적 <code>dotenv.config()</code> 함수를 빨리 호출하는 것이 안전합니다.</p>\n<h2 id=\"이미-설정되어-있는-환경-변수\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%AF%B8-%EC%84%A4%EC%A0%95%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-%ED%99%98%EA%B2%BD-%EB%B3%80%EC%88%98\" aria-label=\"이미 설정되어 있는 환경 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이미 설정되어 있는 환경 변수</h2>\n<p>운영 체제 수준에서 이미 설정되어 있는 환경 변수는 dotenv를 통해 파일에서 읽어온 환경 변수 값들로 덮어써지지 않으니 주의가 필요한데요.\n예를 들어, 리눅스 계열 운영체제에서 다음과 같이 프로그램을 실행하기 전에 미리 <code>DB_PASS</code> 환경 변수를 설정해놓으면</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DB_PASS</span><span class=\"token operator\">=</span>0000\n$ node index.mjs</code></pre></div>\n<p><code>.env</code> 파일에 설정해놓은 <code>1234</code>가 무시되고 <code>0000</code>이 적용되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.mjs\nDB_HOST: localhost\nDB_USER: root\nDB_PASS: 0000</code></pre></div>\n<p>참고로 어느 환경 변수가 이미 설정되어 있었는지는 <code>debug</code> 옵션을 <code>true</code>로 주면 쉽게 알아낼 수 있습니다.</p>\n<div class=\"gatsby-code-title\">index.mjs</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">import</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> dotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> debug<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_HOST:'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_USER:'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_PASS:'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.mjs\n<span class=\"token punctuation\">[</span>dotenv@16.0.3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span> <span class=\"token string\">\"DB_PASS\"</span> is already defined <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span>process.env<span class=\"token variable\">`</span></span> and was NOT overwritten\nDB_HOST: localhost\nDB_USER: root\nDB_PASS: 0000</code></pre></div>\n<p><code>.env</code> 파일에 설정해놓은 환경 변수의 값이 기 설정된 환경 변수의 값을 덮어쓰기를 원한다면 (좋은 관행은 아닙니다) <code>override</code>를 <code>true</code>로 설정하면 됩니다.</p>\n<div class=\"gatsby-code-title\">index.mjs</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">import</span> dotenv <span class=\"token keyword\">from</span> <span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> dotenv<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> debug<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> override<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_HOST:'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_HOST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_USER:'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_PASS:'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index2.mjs\n<span class=\"token punctuation\">[</span>dotenv@16.0.3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>DEBUG<span class=\"token punctuation\">]</span> <span class=\"token string\">\"DB_PASS\"</span> is already defined <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span>process.env<span class=\"token variable\">`</span></span> and was overwritten\nDB_HOST: localhost\nDB_USER: root\nDB_PASS: 0000</code></pre></div>\n<h2 id=\"보안상-주의-사항\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88%EC%83%81-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\" aria-label=\"보안상 주의 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안상 주의 사항</h2>\n<p><code>.env</code> 파일에는 보통 데이터베이스의 비밀번호나 서드파티(3rd-party) 서비스의 API 키와 같이 민감한 인증 정보가 들어가기 때문에 GitHub와 같은 코드 저장소(repository)에 올리면 상당히 위험할 수 있습니다.\n특히 협업 프로젝트에서는 <code>.gitignore</code> 파일에 이용하여 개발자들이 실수로라도 코드 저장소에 올릴 수 없도록 설정해놓는 것이 바람직하겠습니다.</p>\n<div class=\"gatsby-code-title\">.gitignore</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">.env\n.env.local</code></pre></div>\n<p>뿐만 아니라, <code>.env.production</code>, <code>.env.staging</code>, <code>.env.qa</code>, <code>.env.development</code>, <code>.env.local</code>, <code>.env.test</code> 이런 식으로 각 배포(deploy) 환경 별로 환경 변수를 다른 파일에 저장해두고 사용하는 것도 심심치 않게 볼 수 있는데요.\n이렇게 하면 위와 마찬가지 이유로 보안 이슈에 취약할 뿐만 아니라, 일반적으로 코드(code)와 설정(config)을 한 곳에서 관리하는 것은 좋지 않은 소프트웨어 개발 관행으로 여겨집니다.</p>\n<p>따라서 <code>.env</code> 파일은 개발자가 로컬 환경에서 환경 변수를 설정해야할 때만 제한적으로 사용하는 것이 좋으며, 그 밖에 환경에서는 운영 체제 수준에서 제대로 환경 변수를 설정해줘야겠습니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 코드는 아래에서 직접 수정하거나 브라우저 상의 가상 터미널에서 실행해볼 수 있습니다.</p>\n<iframe src=\"https://stackblitz.com/edit/js-dotenv?ctl=1&embed=1&file=index.mjs\" \nstyle=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 <code>dotenv</code> 라이브러리를 이용해서 파일에 환경 변수를 저장해놓고 불러오는 방법에 대해서 자세히 살펴보았습니다.\n<code>dotenv</code> 라이브러리에 대해서 좀 더 많은 내용이 알고 싶으시다면 <a href=\"https://github.com/motdotla/dotenv\">GitHub 저장소</a>를 방문해보시면 좋을 것 같습니다.</p>","timeToRead":9,"fields":{"slug":"/js-dotenv/","tags":["JavaScript","Node.js","env"]},"frontmatter":{"title":"dotenv로 환경 변수를 .env 파일로 관리하기","date":"Jan 12, 2021"}},"next":{"fields":{"slug":"/js-node-process-env/"},"frontmatter":{"title":"Node.js에서 환경 변수 다루기 (process.env)"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}