{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/github-pages-actions/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/bGCIWIP_skg?si=muel4nCOOsvNZhfa\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p><a href=\"/github-pages/\">지난 포스팅</a>에서는 저장소의 특정 브랜치를 배포 디렉토리로 지정하여 아주 쉽고 빠르게 GitHub Pages로 웹사이트를 호스팅할 수 있다고 배웠는데요.\n하지만 요즘 웹 개발에서 HTML, CSS, JavaScript를 직접 작성하는 일은 드물죠?\n대부분 React와 같은 프론트엔드 라이브러리와 Vite와 같은 빌드 도구를 사용하여 HTML, CSS, JavaScript를 생성해낼 것입니다.</p>\n<p>이번 포스팅에서는 웹 프로젝트를 GitHub Actions를 사용하여 빌드하고, 빌드 결과물을 바로 GitHub Pages에 배포하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"github-pages-설정\" style=\"position:relative;\"><a href=\"#github-pages-%EC%84%A4%EC%A0%95\" aria-label=\"github pages 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Pages 설정</h2>\n<p>우선 GitHub Actions을 통해서 웹사이트가 빌드 후에 배포될 수 있도록 GitHub Pages를 설정을 해줘야 합니다.</p>\n<p>저장소 화면의 <code>Settings</code> 탭에 들어가서 좌측 사이드 메뉴에서 <code>Pages</code>를 클릭합니다.\n그 다음 <code>Source</code> 항목을 <code>GitHub Actions</code>로 설정합니다.</p>\n<p><img src=\"https://res.cloudinary.com/daleseo/image/upload/v1735488145/github-pages-actions_blmnuz.png\" alt=\"GitHub Pages 설정\"></p>\n<h2 id=\"vite로-react-프로젝트-생성\" style=\"position:relative;\"><a href=\"#vite%EB%A1%9C-react-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"vite로 react 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vite로 React 프로젝트 생성</h2>\n<p>차세대 빌드 도구인 <a href=\"/?tag=Vite\">Vite</a>로 간단한 React 프로젝트를 생성해보겠습니다.</p>\n<p>터미널에서 <code>npm</code> 명령어를 사용하여 저장소 최상위 디렉토리에서 Vite 프로젝트를 시작합니다.\n프레임워크로는 <code>React</code>를 선택하고, 변형(variant)로는 <code>JavaScript</code>를 선택하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> <span class=\"token function\">npm</span> create vite@latest ./\nNeed to <span class=\"token function\">install</span> the following packages:\ncreate-vite@6.1.1\nOk to proceed? <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> y\n\n\n<span class=\"token operator\">></span> npx\n<span class=\"token operator\">></span> create-vite ./\n\n✔ Current directory is not empty. Please choose how to proceed: › Ignore files and <span class=\"token builtin class-name\">continue</span>\n✔ Select a framework: › React\n✔ Select a variant: › JavaScript\n\nScaffolding project <span class=\"token keyword\">in</span> /workspaces/github-pages<span class=\"token punctuation\">..</span>.\n\nDone. Now run:\n\n  <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n  <span class=\"token function\">npm</span> run dev</code></pre></div>\n<blockquote>\n<p>다양한 자바스크립트 프로젝트 생성법에 대해서는 <a href=\"/js-npm-init/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<p>터미널에서 시키는데로 의존 패키지를 설치하고 개발 서버를 구동해보겠습니다.\n<code>http://localhost:5173</code>으로 접속하면 웹사이트가 열릴 것입니다.\n프로젝트의 코드를 수정하시면 변경 사항이 웹사이트에 즉시 반영이 될 거에요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n$ <span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>이번에는 프로젝트를 빌드도 해보고 상용 모드로 구동도 해보겠습니다.\n<code>dist</code> 폴더 안에 빌드 결과물이 생성된 것을 확인할 수 있을 거에요.\n<code>http://localhost:4173</code>으로 접속하면 웹사이트가 열릴 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run build\n$ <span class=\"token function\">npm</span> run preview</code></pre></div>\n<p>모든 잘 작동하면 프로젝트 코드를 커밋 후 저장소에 올립니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n$ <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Init Vite React\"</span>\n$ <span class=\"token function\">git</span> push</code></pre></div>\n<h2 id=\"github-actions-워크플로우-작성\" style=\"position:relative;\"><a href=\"#github-actions-%EC%9B%8C%ED%81%AC%ED%94%8C%EB%A1%9C%EC%9A%B0-%EC%9E%91%EC%84%B1\" aria-label=\"github actions 워크플로우 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Actions 워크플로우 작성</h2>\n<p>저장소에 새로운 코드가 올라올 때 마다 프로젝트를 빌드하고 웹사이트를 배포하기 위해서는 <a href=\"/?tag=GitHubActions\">GitHub Actions</a> 워크플로우가 필요합니다.</p>\n<p>우선 <code>on</code> 항목을 통해서 <code>main</code> 브랜치에 코드가 올라올 때만 워크프로우가 실행되도록 합니다.\n그 다음 빌드와 배포를 위한 두 개의 작업을 정의합니다.</p>\n<div class=\"gatsby-code-title\">.github/workflows/ci.yml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CI\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm ci\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/configure<span class=\"token punctuation\">-</span>pages@v5\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/upload<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>artifact@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./dist\"</span>\n\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> build\n    <span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">pages</span><span class=\"token punctuation\">:</span> write\n      <span class=\"token key atrule\">id-token</span><span class=\"token punctuation\">:</span> write\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> github<span class=\"token punctuation\">-</span>pages\n      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.deployment.outputs.page_url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/deploy<span class=\"token punctuation\">-</span>pages@v4\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> deployment</code></pre></div>\n<p><code>build</code> 작업에는 아래 작업으로 이루어집니다.</p>\n<ul>\n<li>저장소의 코드를 CI 서버로 내려받습니다.</li>\n<li>의존 패키지를 설치합니다.</li>\n<li>Vite로 프로젝트를 빌드합니다.</li>\n<li>GitHub Pages를 설정합니다.</li>\n<li><code>dist</code> 폴더에 생성된 빌드 결과물을 Artifact로 업로드합니다.</li>\n</ul>\n<p><code>deploy</code> 작업에는 아래 작업으로 이루어집니다.</p>\n<ul>\n<li>Artifact로 업로드한 빌드 결과물을 GitHub Pages에 배포합니다.</li>\n</ul>\n<p>반드시 빌드가 끝나고 배포가 시작될 수 있도록 <code>deploy</code> 작업에 <code>needs: build</code> 항목을 설정해줍니다.\n<code>permissions</code> 항목에는 GitHub Pages에 배포하는데 필요한 권한을 명시합니다.</p>\n<blockquote>\n<p>위 워크플로우를 제대로 이해하려면 GitHub Actions에 대한 사전 지식이 필요합니다. 관련 내용은 아래 포스팅에서 자세히 다루고 있으니 참고바랍니다.</p>\n<ul>\n<li><a href=\"/github-actions-checkout/\">GitHub Actions의 체크아웃(Checkout) 액션으로 코드 내려받기</a></li>\n<li><a href=\"/github-actions-setup-node/\">GitHub Actions 자바스크립트 셋업</a></li>\n<li><a href=\"/github-actions-jobs/\">GitHub Actions의 유용한 작업(job) 설정</a></li>\n<li><a href=\"/github-actions-artifacts/\">GitHub Actions의 아티팩트(Artifact)로 파일 올리거나 내려받기</a></li>\n<li><a href=\"/github-actions-triggers/\">GitHub Actions 워크플로우를 자극하는 주요 이벤트 정리</a></li>\n</ul>\n</blockquote>\n<h2 id=\"vite-추가-설정\" style=\"position:relative;\"><a href=\"#vite-%EC%B6%94%EA%B0%80-%EC%84%A4%EC%A0%95\" aria-label=\"vite 추가 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vite 추가 설정</h2>\n<p>커스텀 도메인을 사용하지 않고 GitHub Pages에서 무료로 제공하는 기본 도메인을 사용할 경우 배포한 웹사이트가 하얀 공백으로 뜨는 문제를 흔히 겪게 되는데요.\n이러한 문제가 발생하는 이유는 <code>github.io</code> 무료 도메인을 사용할 경우 URL 맨 뒤에 저장소명이 경로로 붙기 때문입니다.</p>\n<p><img src=\"https://res.cloudinary.com/daleseo/image/upload/v1735492374/github-pages-actions_nnsbgo.png\" alt=\"Vite 추가 설정\"></p>\n<p>이 문제는 Vite의 <code>base</code> 항목을 <code>/저장소명/</code>으로 설정해주면 해결될 것입니다.</p>\n<div class=\"gatsby-code-title\">vite.config.js</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> react <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vitejs/plugin-react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// https://vite.dev/config/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">react</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token literal-property property\">base</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/github-pages/\"</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 간단한 실습을 통해 GitHub Actions로 빌드한 웹사이트를 어떻게 GitHub Pages에 배포하는지 알아보았습니다.\nGitHub의 CI 서비스인 GitHub Actions와 GitHub의 호스팅 서비스인 GitHub Pages를 함께 사용하면 강력한 시너지가 발휘됩니다.\nGitHub에서 제공하는 이 2가지 무료 서비스만 잘 활용하시면 개인 사이드 프로젝트를 효과적으로 빌드 및 배포하실 수 있으실 거라 생각합니다.</p>\n<blockquote>\n<p>GitHub Pages 관련 포스팅은 <a href=\"/?tag=GitHubPages\">GitHub Pages 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":4,"fields":{"slug":"/github-pages-actions/","tags":["GitHub","GitHubPages","GitHubActions"]},"frontmatter":{"title":"GitHub Actions로 빌드 후 GitHub Pages에 배포하기","date":"Dec 26, 2024"}},"next":{"fields":{"slug":"/github-pages-custom-domain/"},"frontmatter":{"title":"GitHub Pages에 커스텀 도메인 연결하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}