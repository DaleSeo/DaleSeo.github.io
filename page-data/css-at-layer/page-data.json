{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/css-at-layer/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/css-at-scope/"},"frontmatter":{"title":"CSS의 @scope으로 스타일 범위 제한하기"}},"node":{"html":"<p>웹 개발을 하다보면 CSS를 작성할 때 원하는 스타일이 우선적으로 적용되지 않아서 골치가 아플 때가 많습니다.\n특히 대규모 프로젝트에서는 여러 CSS 파일에서 스타일을 가져오다 보니 스타일의 우선순위를 파악하는 것이 쉽지 않죠.\n이런 문제를 해결하기 위해 CSS에는 <code>@layer</code>라는 새로운 at-rule을 도입되었습니다.</p>\n<p>이번 포스팅에서는 <code>@layer</code>를 사용하여 CSS 스타일 시트를 계층화하여 우선순위를 효과적으로 설정하는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"기존의-스타일-우선순위-관리법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4%EC%9D%98-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EA%B4%80%EB%A6%AC%EB%B2%95\" aria-label=\"기존의 스타일 우선순위 관리법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존의 스타일 우선순위 관리법</h2>\n<p>CSS에 <code>@layer</code>가 없던 시절에는 동일한 요소를 상대로 여러 스타일이 정의되어 있을 때 명시도(specificity)를 계산해야 어떤 스타일이 적용될지를 파악할 수 있었습니다.\n그리고 명시도가 동일하다면 CSS 파일 상에서 나중에 나오는 스타일이 먼저 나오는 스타일보다 우선시되었습니다.</p>\n<p>예를 들어, 동일한 <code>&#x3C;div></code> 요소를 상대로 정의된 아래 3개의 스타일은 모두 인라인(inline) 스타일의 명시도인 <code>1,0,0,0</code>보다 작기 때문에 아무런 효력을 내지 못하고, 배경색이 핑크색이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 명시도: 0,0,0,1 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 명시도: 0,1,0,0 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.warning</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 명시도: 0,0,1,0 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"css-at-layer-1\" src=\"https://codepen.io/daleseo/embed/XWvVYgR?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/daleseo/pen/XWvVYgR\">\n  css-at-layer-1</a> by Dale Seo (<a href=\"https://codepen.io/daleseo\">@daleseo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<p>프로젝트의 규모가 커지면 CSS 명시도나 스타일 정의 순서 만으로는 스타일 우선순위를 정리하는 것이 너무 복잡해지며 실수를 일으키기 쉽습니다.\n이럴 때 <code>!important</code>를 사용하면 명시도를 무시하고 특정 스타일의 우선순위를 끌어올릴 수 있습니다.</p>\n<p>예를 들어, 클래스 선택자를 사용한 스타일 정의에 <code>!important</code>를 붙여서 인라인(inline) 스타일의 명시도를 극복하고 노란색 배경을 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 명시도: 0,0,0,1 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 명시도: 0,1,0,0 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.warning</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ❗ */</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"css-at-layer-2\" src=\"https://codepen.io/daleseo/embed/KKOZeoz?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/daleseo/pen/KKOZeoz\">\n  css-at-layer-2</a> by Dale Seo (<a href=\"https://codepen.io/daleseo\">@daleseo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<p>하지만 여러 개발자들이 자신이 작성한 스타일의 우선순위를 끌어올리기 위해서 여기저기 <code>!important</code>를 남발하면 아래와 같이 난처한 상황이 펼쳐지는데요. <code>!important</code>가 붙어있는 스타일이 2개다 보니 다시 명시도에 따라서 스타일의 우선순위가 결정되는 것입니다.\n따라서 ID 선택자의 스타일이 이겨서 빨간 배경색이 됩니다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 명시도: 0,0,0,1 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#error</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ❗❗ */</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.warning</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ❗ */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"css-at-layer-3\" src=\"https://codepen.io/daleseo/embed/gOVoKeJ?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/daleseo/pen/gOVoKeJ\">\n  css-at-layer-3</a> by Dale Seo (<a href=\"https://codepen.io/daleseo\">@daleseo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<p>결국 <code>!important</code>는 우선순위 문제는 해결하지 못하고 스타일의 유지 보수성만 떨어뜨리는 악순환에 빠질 수 있습니다.</p>\n<blockquote>\n<p>CSS의 선택자에 대해서는 <a href=\"/css-selectors/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고하세요.</p>\n</blockquote>\n<h2 id=\"우선순위-설정\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EC%84%A4%EC%A0%95\" aria-label=\"우선순위 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우선순위 설정</h2>\n<p>자 그럼 지금부터 <code>@layer</code>를 사용하여 좀 더 우아하게 스타일의 우선순위를 관리할 수 있는지에 대해서 알아볼까요?</p>\n<p><code>@layer</code>의 핵심 기능은 레이어 간의 우선순위를 쉽게 조절할 수 있다는 점입니다.\n레이어는 선언된 순서에 따라 우선순위를 가지며, 나중에 선언된 레이어가 앞선 레이어보다 우선순위가 높아집니다.</p>\n<p>예를 들어, 다음과 같이 작성했을 때 <code>utilities</code> 계층의 우선순위가 가장 높고, 그 다음이 <code>components</code> 계층, <code>base</code> 계층의 우선순위는 가장 낮습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> components<span class=\"token punctuation\">,</span> utilities<span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>참고로 이렇게 계층 간에 우선순위를 설정하면 어떤 계층 속하지 않은 일반 스타일이 가장 높은 우선순위를 가지게 됩니다.</p>\n<h2 id=\"스타일-계층화\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%80%EC%9D%BC-%EA%B3%84%EC%B8%B5%ED%99%94\" aria-label=\"스타일 계층화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스타일 계층화</h2>\n<p><code>@layer</code>는 계층 간 우선순위를 설정할 때 뿐만 아니라, 각 계층의 스타일을 담아두기 위해서도 사용됩니다.\n기본 문법은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@layer</span> 레이어 이름</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 스타일 정의 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예를 들어, <code>base</code>, <code>components</code>, <code>utilities</code> 계층에 대한 스타일을 다음과 같이 분리하여 정의할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 스타일 정의 */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@layer</span> components</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 스타일 정의 */</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">.card</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 스타일 정의 */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@layer</span> utilities</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.sr-only</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 스타일 정의 */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"실습\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5\" aria-label=\"실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습</h2>\n<p>이해를 돕기 위해서 간단한 실습을 해볼까요?\n<code>green</code>과 <code>red</code>라는 레이어를 만들고 그 안에 서로 다른 색으로 배경색을 설정하는 스타일을 추가합니다.</p>\n<p>먼저 <code>red</code>의 우선순위를 높게 설정해보겠습니다.</p>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"css-at-layer-red\" src=\"https://codepen.io/daleseo/embed/zYgpPJb?default-tab=css%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/daleseo/pen/zYgpPJb\">\n  css-at-layer-red</a> by Dale Seo (<a href=\"https://codepen.io/daleseo\">@daleseo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<p>이번에는 <code>green</code>의 우선순위를 높게 설정해보겠습니다.</p>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"css-at-layer-low\" src=\"https://codepen.io/daleseo/embed/WNVdyPw?default-tab=css%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/daleseo/pen/WNVdyPw\">\n  css-at-layer-low</a> by Dale Seo (<a href=\"https://codepen.io/daleseo\">@daleseo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h2 id=\"외부-스타일의-우선순위-조정\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EC%8A%A4%ED%83%80%EC%9D%BC%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EC%A1%B0%EC%A0%95\" aria-label=\"외부 스타일의 우선순위 조정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 스타일의 우선순위 조정</h2>\n<p>Bootstrap이나 Material과 같은 CSS 프레임워크를 사용하다 보면 CSS 프레임워크에서 제공하는 스타일의 우선순위가 높아서 직접 작성한 스타일이 잘 적용되지 않을 때가 있습니다.\n이러한 문제도 <code>@layer</code>를 사용해서 해결할 수 있는데요.</p>\n<p>우선 CSS 프레임워크에서 제공하는 외부 스타일을 불러올 때, 뒤에 <code>layer(레이어 이름)</code>을 붙여서 계층을 할당해줍니다.\n그리고 나서 위에서 배운 방법으로 <code>@layer</code>를 통해 외부 스타일의 우선순위를 하양 조정하고, 자신이 작성한 스타일의 우선순위를 상향 조정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"./node_modules/bootstrap/dist/css/bootstrap.min.css\"</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@layer</span> bootstrap<span class=\"token punctuation\">,</span> our-styles<span class=\"token punctuation\">;</span></span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@layer</span> our-styles</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 스타일 정의 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 방법을 사용하면 CSS Reset(리셋)과 CSS Normalize(노멀라이즈)도 스타일 충돌없이 안전하게 불러올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"./reset.css\"</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>reset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"./node_modules/bootstrap/dist/css/bootstrap.min.css\"</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>bootstrap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@layer</span> reset<span class=\"token punctuation\">,</span> bootstrap<span class=\"token punctuation\">,</span> our-styles<span class=\"token punctuation\">;</span></span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@layer</span> our-styles</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 스타일 정의 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>브라우저의 내장 스타일로 인한 부작용에 대한 두 가지 대표적인 접근 방법인 CSS Reset과 CSS Normalize에 대해서는 <a href=\"/css-normalize-reset/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고하세요.</p>\n</blockquote>\n<p>컴포넌트 라이브러리나 디자인 시스템을 직접 개발할 때도 <code>@layer</code>를 통해서 체계적으로 스타일을 나누고 우선순위를 설정할 수 있겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"reset.css\"</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>reset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"globals.css\"</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>globals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"typography.css\"</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>typography<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"components.css\"</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"utilities.css\"</span><span class=\"token punctuation\">)</span></span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>utilities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@layer</span> reset<span class=\"token punctuation\">,</span> globals<span class=\"token punctuation\">,</span> typography<span class=\"token punctuation\">,</span> components<span class=\"token punctuation\">,</span> utilities<span class=\"token punctuation\">;</span></span></code></pre></div>\n<h2 id=\"브라우저-지원\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A7%80%EC%9B%90\" aria-label=\"브라우저 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 지원</h2>\n<p><code>@layer</code>는 공식적으로 지원이 끝난 인터넷 익스플로러(Internet Explorer)를 제외한 대부분의 모던 브라우저에서 지원되고 있습니다.</p>\n<ul>\n<li>브라우저 지원 현황: <a href=\"https://caniuse.com/css-cascade-layers\">https://caniuse.com/css-cascade-layers</a></li>\n</ul>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 CSS에 새롭게 추가된 at-rule인 <code>@layer</code>에 대해서 어떻게 스타일을 계층화하고 우선순위를 수 있는지 살펴보았습니다.</p>\n<p><code>@layer</code>는 CSS 스타일 시트를 더 효율적으로 관리할 수 있는 강력한 도구입니다.\n특히 복잡한 스타일 시트나 여러 팀이 협업하는 프로젝트에서 유용하게 활용될 수 있습니다.\n스타일의 우선순위를 직관적으로 제어하고 싶다면, <code>@layer</code>를 적극적으로 사용해보세요.</p>\n<p>CSS의 새로운 기능을 배우고 적용하면서 더욱 깔끔하고 유지 보수하기 쉬운 스타일 작성을 하실 수 있기를 바랍니다.</p>\n<p>CSS에서 정의한 스타일을 레이어 단위로 그룹화하여, 필요한 경우 레이어별 우선순위를 설정할 수 있습니다.\n이렇게 하면 코드의 복잡도를 줄이고, 우선순위 문제를 쉽게 해결할 수 있습니다.</p>","timeToRead":5,"fields":{"slug":"/css-at-layer/","tags":["CSS","at-rules","layer"]},"frontmatter":{"title":"CSS의 @layer로 스타일 우선순위 정하기","date":"Oct 15, 2024"}},"next":{"fields":{"slug":"/elysia/"},"frontmatter":{"title":"Elysia: Bun을 위한 인체 공학적 웹 프레임워크"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}