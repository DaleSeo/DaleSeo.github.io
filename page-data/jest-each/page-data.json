{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/jest-each/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/css-media-queries/"},"frontmatter":{"title":"CSS 미디어 쿼리 (Media Query) 사용법"}},"node":{"html":"<p>테스트를 작성하다보면 다양한 테스트 데이터에 대해서 동일한 테스트 코드를 돌리고 싶을 때가 있죠?\n이러한 테스팅 기법을 보통 파라미터화(parameterized) 테스팅이라고 하는데요.</p>\n<p>이번 글에서는 Jest에서 제공하는 <code>test.each()</code>와 <code>describe.each()</code> 함수를 사용하여 파라미터화 테스트를 하는 방법에 대해서 배워보겠습니다.</p>\n<h2 id=\"파라미터화parameterized-테스트\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%ED%99%94parameterized-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"파라미터화parameterized 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파라미터화(parameterized) 테스트</h2>\n<p>간단한 실습을 위해 2개의 문자열의 인자로 받아 애너그램(anagram) 여부를 반환해주는 함수를 작성해볼까요?</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ch <span class=\"token keyword\">of</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ch <span class=\"token keyword\">of</span> second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cnt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 위 함수에 대한 테스트를 작성하고 실행해보겠습니다.</p>\n<div class=\"gatsby-code-title\">1.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> areAnagrams <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"car and bike are not anagrams\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"car\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bike\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"car and arc are anagrams\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"car\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"arc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat and dog are not anagrams\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat and act are anagrams\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"act\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-code-title\">Terminal</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ jest <span class=\"token number\">1</span>.test.js\n\n PASS  ./1.test.js <span class=\"token punctuation\">(</span><span class=\"token number\">3.943</span> s<span class=\"token punctuation\">)</span>\n  ✓ car and bike are not anagrams <span class=\"token punctuation\">(</span><span class=\"token number\">19</span> ms<span class=\"token punctuation\">)</span>\n  ✓ car and arc are anagrams <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> ms<span class=\"token punctuation\">)</span>\n  ✓ <span class=\"token function\">cat</span> and dog are not anagrams <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n  ✓ <span class=\"token function\">cat</span> and act are anagrams <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">4</span> passed, <span class=\"token number\">4</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">4.535</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites matching /1.test.js/i.</code></pre></div>\n<p>위 4개의 테스트 함수를 살펴보면, 테스트 데이터만 빼만 동일한 코드라는 것을 알 수 있습니다.</p>\n<p>이런 식으로 테스트를 작성하면 함수의 이름이나 매개변수가 바뀌었을 때 어러 곳을 반복해서 수정해줘야 해서 이상적이지 않은데요.\n어떻게 하면 반복되는 테스트 코드를 제거하면서, 다양한 테스트 데이터에 대한 테스트를 작성할 수 있을까요?</p>\n<p>파라미터화(parameterized) 테스트는 이러한 상황에서 유용하게 사용할 수 있는 테스팅 기법입니다.\nJest에서는 파라미터화 테스트를 지원하기 위해서 <code>test.each()</code>와 <code>describe.each()</code> 함수를 제공하고 있습니다.</p>\n<h2 id=\"testeach-함수\" style=\"position:relative;\"><a href=\"#testeach-%ED%95%A8%EC%88%98\" aria-label=\"testeach 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>test.each() 함수</h2>\n<p>먼저 <code>test.each()</code> 함수를 사용해서 파라미터화 테스트를 작성해보겠습니다.</p>\n<p>테스트 데이터를 2차원 배열에 담에서 <code>test.each()</code> 함수의 인자로 넘기면, 배열을 루프 돌면서 각 테스트 데이터를 대상으로 테스트 함수를 호출해줍니다.\n뿐만 아니라, 테스트 이름에도 테스트 데이터 값을 삽입해주기 때문에 여러 테스트 간에 구분을 용이하게 하는데 활용할 수 있습니다.</p>\n<div class=\"gatsby-code-title\">2.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> areAnagrams <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">;</span>\n\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bike\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"car\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"arc\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"act\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"areAnagrams(%s, %s) returns %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> expected</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-code-title\">Terminal</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ jest <span class=\"token string\">\"2.test.js\"</span>\n\n PASS  ./2.test.js <span class=\"token punctuation\">(</span><span class=\"token number\">4.119</span> s<span class=\"token punctuation\">)</span>\n  ✓ areAnagrams<span class=\"token punctuation\">(</span>cat, bike<span class=\"token punctuation\">)</span> returns <span class=\"token boolean\">false</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> ms<span class=\"token punctuation\">)</span>\n  ✓ areAnagrams<span class=\"token punctuation\">(</span>car, arc<span class=\"token punctuation\">)</span> returns <span class=\"token boolean\">true</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> ms<span class=\"token punctuation\">)</span>\n  ✓ areAnagrams<span class=\"token punctuation\">(</span>cat, dog<span class=\"token punctuation\">)</span> returns <span class=\"token boolean\">false</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> ms<span class=\"token punctuation\">)</span>\n  ✓ areAnagrams<span class=\"token punctuation\">(</span>cat, act<span class=\"token punctuation\">)</span> returns <span class=\"token boolean\">true</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">4</span> passed, <span class=\"token number\">4</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">5.168</span> s</code></pre></div>\n<p>참고로 <code>test</code>의 별칭(alias)인 <code>it</code>을 통해서도 동일한 방식으로 <code>each()</code> 함수를 사용하실 수 있습니다.</p>\n<div class=\"gatsby-code-title\">2-1.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> areAnagrams <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"areAnagrams()\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  it<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bike\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"car\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"arc\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"act\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"areAnagrams(%s, %s) returns %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> expected</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"describeeach-함수\" style=\"position:relative;\"><a href=\"#describeeach-%ED%95%A8%EC%88%98\" aria-label=\"describeeach 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>describe.each() 함수</h2>\n<p>좀 더 복잡한 함수에 대한 파라미터화 테스트를 작성할 때는 <code>describe.each()</code> 함수를 이용하면 됩니다.\n<code>describe.each()</code> 함수는 여러 테스트 함수를 여러 테스트 데이터를 대상으로 실행해야할 때 사용합니다.</p>\n<p>예를 들어, 위에서 작성한 애너그램 함수가 추가적인 옵션을 받을 수 있도록 코드를 살짝 변경 해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">first<span class=\"token punctuation\">,</span>\n  second<span class=\"token punctuation\">,</span>\n  options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ignoreCase</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ignoreSpaces</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>ignoreCase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    second <span class=\"token operator\">=</span> second<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>ignoreSpaces<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> </span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    second <span class=\"token operator\">=</span> second<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> </span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ch <span class=\"token keyword\">of</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ch <span class=\"token keyword\">of</span> second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cnt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 이 함수는 동일한 인자가 주어지더라도 어떤 옵션을 사용했는지에 따라 다른 결과를 반환할 수 있게 되었습니다.\n따라서 옵션 여부에 따라 함수가 제대로 동작하는지 <code>describe.each()</code> 함수를 이용해서 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">3.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> areAnagrams <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">;</span>\n\ndescribe<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Act\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"Save\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Vase\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"Elbow\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Below\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"areAnagrams(%s, %s)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> second</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return true with ignoreCase option\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ignoreCase</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return false without ignoreCase option\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndescribe<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"dormitory\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dirty room\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"conversation\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"voices rant on\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"areAnagrams(%s, %s)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> second</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return true with ignoreSpaces option\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ignoreSpaces</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return false without ignoreSpaces option\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">areAnagrams</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-code-title\">Terminal</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ jest <span class=\"token string\">\"3.test.js\"</span>\n\n PASS  ./3.test.js\n  areAnagrams<span class=\"token punctuation\">(</span>Cat, Act<span class=\"token punctuation\">)</span>\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> with ignoreCase option <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> ms<span class=\"token punctuation\">)</span>\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span> without ignoreCase option <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n  areAnagrams<span class=\"token punctuation\">(</span>Save, Vase<span class=\"token punctuation\">)</span>\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> with ignoreCase option <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span> without ignoreCase option <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n  areAnagrams<span class=\"token punctuation\">(</span>Elbow, Below<span class=\"token punctuation\">)</span>\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> with ignoreCase option\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span> without ignoreCase option <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> ms<span class=\"token punctuation\">)</span>\n  areAnagrams<span class=\"token punctuation\">(</span>dormitory, dirty room<span class=\"token punctuation\">)</span>\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> with ignoreSpaces option <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span> without ignoreSpaces option <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n  areAnagrams<span class=\"token punctuation\">(</span>conversation, voices rant on<span class=\"token punctuation\">)</span>\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> with ignoreSpaces option\n    ✓ <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span> without ignoreSpaces option <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> ms<span class=\"token punctuation\">)</span>\n\nTest Suites: <span class=\"token number\">1</span> passed, <span class=\"token number\">1</span> total\nTests:       <span class=\"token number\">10</span> passed, <span class=\"token number\">10</span> total\nSnapshots:   <span class=\"token number\">0</span> total\nTime:        <span class=\"token number\">6.977</span> s, estimated <span class=\"token number\">8</span> s\nRan all <span class=\"token builtin class-name\">test</span> suites matching /3.test.js/i.</code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 코드는 아래에서 확인하시고 바로 실행해보실 수 있습니다.</p>\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@DaleSeo/jest-each?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Jest의 <code>test.each()</code>와 <code>describe.each()</code> 함수를 사용하여 여러 테스트 데이터를 대상으로 테스트 함수를 실행하는 방법에 대해서 살펴보았습니다.\n파라미터화(parameterized) 테스트를 적지적소에 잘 활용하셔서 좀 더 깔끔하고 유지보수가 쉬운 테스트 코드를 작성하시길 바랍니다.</p>\n<blockquote>\n<p>Jest에 연관된 포스팅은 <a href=\"/?tag=Jest\">Jest 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":5,"fields":{"slug":"/jest-each/","tags":["JavaScript","Jest","testing","TDD"]},"frontmatter":{"title":"Jest로 파라미터화 테스트하기: test.each(), describe.each() ","date":"Mar 7, 2021"}},"next":{"fields":{"slug":"/python-dir/"},"frontmatter":{"title":"[파이썬] 내장 함수 dir 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}