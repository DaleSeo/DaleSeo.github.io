{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-float-decimal/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-unittest-mock-patch/"},"frontmatter":{"title":"[파이썬] 테스트 모킹 - patch"}},"node":{"html":"<h2 id=\"float-타입\" style=\"position:relative;\"><a href=\"#float-%ED%83%80%EC%9E%85\" aria-label=\"float 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>float 타입</h2>\n<p>파이썬의 <code>float</code> 기본 타입은 대부분의 다른 프로그래밍 언어들처럼 소수를 내부적으로 이진수의 형태로 저장합니다. (컴퓨터라는 기계는 결국에 <code>0</code> 또는 <code>1</code>로 모든 데이터를 저장히기 때문이죠…)<br>예를 들어, 십진 소수 <code>0.875</code>을 float 타입으로 저장하면 이진 소수인 <code>0.111</code>의 형태가 됩니다 (1/2 + 1/4 + 1/8).</p>\n<p>하지만 불행이도 모든 십진 소수가 이와 같이 딱 떨어지게 이진 소수의 형태로 표현될 수 있는 것은 아닙니다.<br>예를 들어, 십진 소수 <code>0.895</code>를 이진 소수로 변환해보면 <code>0.111001010001111011...</code>가 되어 무한 소수가 되어버립니다.</p>\n<p>즉, 십진 소수 <code>0.895</code>와 매우 가까울 수는 있어도 수학적으로 완벽한 등가를 <code>float</code> 타입으로 표현하는 것은 불가능합니다.<br>대부분의 십진 소수가 이진 소수로 변환하면 무한 소수가 되는 것을 감안하면, 사실 <code>float</code> 타입으로 저장된 소수는 근사값일 확률이 훨씬 높습니다.</p>\n<h2 id=\"float-연산의-문제점\" style=\"position:relative;\"><a href=\"#float-%EC%97%B0%EC%82%B0%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"float 연산의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>float 연산의 문제점</h2>\n<p>이와 같이, <code>float</code> 타입이 내부적으로 소수를 저장하는 매커니즘 때문에 <code>float</code> 타입의 소수로 연산을할 때 다음과 같이 어처구니 없는 상황을 맞이할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.2</span>\n<span class=\"token number\">3.3000000000000003</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">8.95</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n<span class=\"token number\">894.9999999999999</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.3</span>\n<span class=\"token number\">5.551115123125783e-17</span></code></pre></div>\n<p>이러한 황당한 상황이 발생하는 이유는 <code>float</code> 연산이 보통 사람이 생각하는 십진수 기반 연산이 아닌 컴퓨터 관점의 이진수 기반 연산이기 때문입니다.<br>그리고 이러한 미세한 연산의 오류는 계산에 있어서 한치의 오차도 용납되지 않는 금융권 시스템이나 재무/회계 관련 소프트웨어에서는 치명적인 버그로 이어질 수 있습니다.</p>\n<h2 id=\"decimal-모듈\" style=\"position:relative;\"><a href=\"#decimal-%EB%AA%A8%EB%93%88\" aria-label=\"decimal 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>decimal 모듈</h2>\n<p>정확한 십진수 기반의 연산이 필요한 경우를 위해서 파이썬에서는 <code>decimal</code> 내장 모듈을 제공하고 있습니다.<br><code>decimal</code> 내장 모듈의 <code>Decimal</code> 클래스를 사용해서 위에서 했던 연산을 반복해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> decimal <span class=\"token keyword\">import</span> Decimal\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">'1.1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">'2.2'</span><span class=\"token punctuation\">)</span>\nDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">'3.3'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">'8.95'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">'100'</span><span class=\"token punctuation\">)</span>\nDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">'895.00'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">'0.1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">'0.1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">'0.1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">'0.3'</span><span class=\"token punctuation\">)</span>\nDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">'0.0'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>모든 연산이 우리가 예상하던 데로 오차없이 정확하게 이루어지는 것을 알 수 있습니다.<br><code>Decimal</code> 클래스를 사용할 때 한가지 주의 사항은 생성자에 문자열 대신에 숫자를 넘기면 <code>float</code> 타입을 사용했을 때와 동일한 문제가 발생하게 된다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Decimal<span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span>\nDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">'1.100000000000000088817841970012523233890533447265625'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>따라서 정확한 십진수 연산을 위해서 <code>decimal</code> 모듈을 사용하는 것이라면 <code>Decimal</code> 클래스 생성자에 문자열을 넘기도록 주의바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Decimal<span class=\"token punctuation\">(</span><span class=\"token string\">'1.1'</span><span class=\"token punctuation\">)</span>\nDecimal<span class=\"token punctuation\">(</span><span class=\"token string\">'1.1'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬의 <code>float</code> 연산의 문제점과 <code>decimal</code> 내장 모듈을 이용한 간단한 해결 방법에 대해서 살펴보았습니다.<br>좀 더 자세한 내용은 아래 파이썬 공식 레퍼런스를 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/decimal.html\">https://docs.python.org/3/library/decimal.html</a></li>\n</ul>","timeToRead":2,"fields":{"slug":"/python-float-decimal/","tags":["Python","파이썬","float","decimal"]},"frontmatter":{"title":"파이썬 소수 연산 - float 타입과 decimal 모듈","date":"Feb 14, 2020"}},"next":{"fields":{"slug":"/python-unittest-mock/"},"frontmatter":{"title":"[파이썬] 테스트 모킹 - unittest.mock"}}}}}