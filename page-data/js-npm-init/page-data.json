{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-npm-init/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-npm-install/"},"frontmatter":{"title":"자바스크립트 패키지 설치법 완벽 가이드 (npm install)"}},"node":{"html":"<p>개발자 경험을 중요시하는 트렌드에 따라서 최근에 나오는 자바스크립트 프레임워크는 대부분 프로젝트를 편리하게 구성할 수 있도록 명령줄 도구(CLI)를 제공하고 있습니다.\n그런데 각 프레임워크의 문서를 확인해보면 프로젝트를 생성하는 방법이 조금씩 다르다는 것을 알 수 있는데요.</p>\n<p>예를 들어, React 기반 <a href=\"/spa-ssg-ssr/\">SPA(Single Page Application)</a>을 생성할 때 많이 사용되는 <a href=\"https://create-react-app.dev/docs/getting-started\">Create React App의 문서</a>를 보면, <code>npx</code> 명령어나 <code>npm init</code> 명령어를 사용하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx create-react-app my-app</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init react-app my-app</code></pre></div>\n<p>다른 예로, React의 대표적인 <a href=\"/meta-frameworks/\">메타 프레임워크</a>인 <a href=\"https://nextjs.org/docs/getting-started/installation\">Next.js 문서</a>를 보면 <code>npx</code> 명령어를 사용하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx create-next-app@latest</code></pre></div>\n<p>Svelte나 Vue.js 쪽은 어떨까요?\n<a href=\"https://svelte.dev/docs/introduction\">Svelte 문서</a>와 <a href=\"https://vuejs.org/guide/quick-start.html#creating-a-vue-application\">Vue.js 문서</a>를 보면 <code>npm create</code> 명령어를 사용하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> create svelte@latest myapp</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> create vue@latest</code></pre></div>\n<p>하나의 명령어로 통일하면 좋을텐데 왜 이렇게 헛갈리게 다른 명령어를 사용해서 프로젝트를 생성하라고 하는지 궁금하지 않으세요?\n이번 포스팅에서는 자바스크립트 프로젝트 생성할 때 자주 보게되는 <code>npm init</code>, <code>npm create</code>, <code>npx</code>, 이 세 가지 명령어에 대해 샅샅이 파헤쳐 보겠습니다!</p>\n<h2 id=\"npm-create는-npm-init의-별칭\" style=\"position:relative;\"><a href=\"#npm-create%EB%8A%94-npm-init%EC%9D%98-%EB%B3%84%EC%B9%AD\" aria-label=\"npm create는 npm init의 별칭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm create는 npm init의 별칭</h2>\n<p>먼저, <a href=\"https://docs.npmjs.com/cli/v10/commands/npm-init\">npm 공식 문서</a>에서 <code>npm init</code> 명령어에 대한 자세한 성명을 확인할 수 있는데요.\n문서 페이지의 제일 위 부분에서 <code>npm create</code> 명령어는 <code>npm init</code> 명령어의 별칭(alias)이라는 것을 알 수 있습니다.\n다시 말해서, <code>npm init</code>를 쓰든 <code>npm create</code>를 쓰든 상관이 없으며 결국 둘 다 같은 작업을 수행합니다.</p>\n<p>예를 들어, 차세대 번들러(bundler)로 각광받고 있는 Vite를 기반으로 프로젝트를 생성해보면요.\n<a href=\"https://vitejs.dev/guide/\">공식 문서</a>를 따라서 <code>npm create</code>를 사용하든, <code>npm init</code> 사용하든 동일하게 프로젝트 이름을 입력하라는 첫 질문을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> create vite@latest\n? Project name: › vite-project</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init vite@latest\n? Project name: › vite-project</code></pre></div>\n<h2 id=\"npm-init--npx-create-를-실행\" style=\"position:relative;\"><a href=\"#npm-init--npx-create-%EB%A5%BC-%EC%8B%A4%ED%96%89\" aria-label=\"npm init  npx create 를 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm init ??? npx create-???를 실행</h2>\n<p><code>npm init</code> 명령어나 <code>npm create</code> 명령어어 바로 뒤에 나오는 <code>react-app</code>이나 <code>svelte@latest</code>와 같은 부분을 소위 initializer(“초기자”라고 번역해야할까요?)라고 하는데요.\n쉽게 말해서 해당 프레임워크를 기반으로 프로젝트를 쉽게 구성할 수 있도록 도와주는 CLI, 즉 명령줄 도구입니다.\n보통 사용자로 부터 템플릿(template)이나 갖가지 옵션을 입력받아서 이를 토대로 별다른 추가 설정없이 바로 개발을 시작할 수 있는 프로젝트를 하나 뚝딱 만들어주죠.</p>\n<p>그러면 이러한 initializer는 어디서부터 오는 걸까요?\n당연히 npm 패키지 저장소겠죠?</p>\n<p><a href=\"https://www.npmjs.com/\">npm 저장소 사이트</a>에 들어가서 한번 <code>create-</code>로 검색을 해보시면 수많은 패키지들이 결과로 나올텐데요.\n얘네들이 바로 initializer입니다.\n즉, initializer는 npm 저장소에 올릴 때 패키지 이름을 <code>create-</code>로 시작하도록 약속되어 있습니다.</p>\n<p>예를 들어, Gatsby의 initializer는 npm 저장소에 <a href=\"https://www.npmjs.com/package/create-gatsby\">create-gatsby</a>라는 이름으로 등록되어 있고,\nVue.js의 initializer는 npm 저장소에 <a href=\"https://www.npmjs.com/package/create-vue\">create-vue</a>라는 이름으로 등록되어 있습니다.</p>\n<p>우리가 터미널에서 <code>npm init ???</code>라고 실행하면 npm은 패키지 저장소에서 <code>create-???</code>라는 패키지를 내려받아 실행해줍니다.\n그리고 바로 <code>npm</code> 저장소로 부터 패키지를 내려받아서 설치해주는 명령어가 <code>npx</code> 입니다.\n그러므로, <code>npm init ???</code> 또는 <code>npm create ???</code>를 실행하는 것은 <code>npx create-???</code>를 실행하는 것과 동일합니다.</p>\n<p>예를 들어서, <code>npm init gatsby</code>를 실행하는 것은 <code>npx create-gatsby</code>를 실행하는 것과 마찬가지이고,\n<code>npm create vue</code>를 실행하는 것은 <code>npx create-vue</code>를 실행하는 것과 마찬가지입니다.</p>\n<p>자, 이제 왜 이렇게 프레임워크 별로 다양한 명령어로 프로젝트를 생성하라고 하고 있는지 아시겠죠?\n<code>npx init ???</code>, <code>npm create ???</code>, <code>npx create-???</code> 모두 동일한 결과를 만들어 냅니다.\n이 원리를 이해하고 있으면 프레임워크 별로 프로젝트 생성하기 위한 커맨드를 굳이 외울 필요가 없겠죠?</p>\n<h2 id=\"latest는-꼭-붙여야할까\" style=\"position:relative;\"><a href=\"#latest%EB%8A%94-%EA%BC%AD-%EB%B6%99%EC%97%AC%EC%95%BC%ED%95%A0%EA%B9%8C\" aria-label=\"latest는 꼭 붙여야할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@latest는 꼭 붙여야할까?</h2>\n<p>Vite나 Svelte, Astro와 같은 프레임워크의 문서를 보면 프로젝트를 생성하는 명령어 맨 뒤에 <code>@latest</code>를 붙이고 있는데요.\n매번 이렇게 패키지 이름 뒤에 <code>@latest</code>를 꼭 붙어야할까요?</p>\n<p>여기서 <code>@latest</code>는 명령어를 실행하는 시점에 npm 저장소에 올라와 있는 해당 패키지의 최신 버전을 가리킵니다.\n즉, 동일하게 <code>npm init ???@latest</code>를 실행하더라도, 어제랑 오늘, 내일 설치되는 버전이 다를 수 있는 것이지요.\n반면에 <code>@latest</code>를 뒤에 붙이지 않으면, 해당 컴퓨터에서 캐시(cache)되어 있던 initializer가 사용될 가능성이 생깁니다.</p>\n<p>기존 프로젝트의 패키지를 최신 버전으로 업데이트할 때는 기존에 작동하던 기능이 여전히 잘 작동하는지 확인이 필요한데요.\n하지만 새로운 프로젝트를 만들 때는 굳이 구 버전의 initializer를 사용해야 할 경우는 그리 많지 않겠죠?\n이 것이 바로 많은 프레임워크 문서에서 패키지 이름 뒤에 <code>@latest</code>를 붙이도록 권장하고 있는 이유입니다.</p>\n<h2 id=\"단순-프로젝트-생성\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%88%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"단순 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단순 프로젝트 생성</h2>\n<p>참고로 자바스크립트 프로젝트를 생성하실 때, 꼭 initializer를 사용해야하는 것은 아니에요.\n<code>npm init</code> 명령어에 initializer를 명시하지 않으면 <code>package.json</code> 파일로만 이루어진 완전 기본 자바스크립트 프로젝트를 생성할 수 있습니다.</p>\n<p>예를 들어서, 터미널에서 <code>npm init</code>만 입력하고 실행하시면 생성할 프로젝트 대한 정보를 물어보고요.\n이 질문의 답변에 따라서 <code>package.json</code> 파일을 생성해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init\nThis utility will walk you through creating a package.json file.\nIt only covers the <span class=\"token function\">most</span> common items, and tries to guess sensible defaults.\n\nSee <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> <span class=\"token builtin class-name\">help</span> init<span class=\"token variable\">`</span></span> <span class=\"token keyword\">for</span> definitive documentation on these fields\nand exactly what they do.\n\nUse <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>pkg<span class=\"token operator\">></span><span class=\"token variable\">`</span></span> afterwards to <span class=\"token function\">install</span> a package and\nsave it as a dependency <span class=\"token keyword\">in</span> the package.json file.\n\nPress ^C at any <span class=\"token function\">time</span> to quit.\npackage name: <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>-y</code> 옵션을 사용하면 이러한 티키타카(?)를 생략하고 기본 값으로 <code>package.json</code> 파일을 신속하게 생성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span>\nWrote to /Users/daleseo/Temp/our-project/package.json:\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"our-project\"</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0.0\"</span>,\n  <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"main\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"index.js\"</span>,\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"keywords\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,\n  <span class=\"token string\">\"author\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"license\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ISC\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 자바스크립트 프로젝트를 사용할 때 자주 볼 수 있는 3가지 명령어인 <code>npm init</code>, <code>npm create</code>, <code>npx</code>에 대해 살펴보았습니다.\n알고 보니 이 3개의 명령어가 밀접하게 연관되어 있으며 서로 대체해서 사용할 수 있다는 것을 깨달으셨을 거에요.\n이제 번거롭지 않게 프로젝트를 생성하실 때마다 공식 문서를 보실 필요가 없으시겠죠? 😉</p>","timeToRead":5,"fields":{"slug":"/js-npm-init/","tags":["JavaScript","Node.js","npm","npmrc"]},"frontmatter":{"title":"자바스크립트 프로젝트 생성법 정리 (npm init, npm create, npx)","date":"Oct 30, 2023"}},"next":{"fields":{"slug":"/css-align-icon-text/"},"frontmatter":{"title":"CSS로 아이콘과 텍스트를 수평 정렬하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}