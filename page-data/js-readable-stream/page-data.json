{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-readable-stream/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/partytown/"},"frontmatter":{"title":"지연 없는 서드파티 스크립트 로딩을 위한 Partytown 🎉"}},"node":{"html":"<p>ChatGPT와 같은 LLM(Large Language Model, 대형 언어 모델)이 등장하면서 웹에서 텍스트를 스트리밍하는 사례가 점점 늘어나고 있는데요.\n그에 따라 별다른 라이브러리없이도 웹에서 스트림을 쓰고 읽을 수 있는 자바스크립트의 Streams API가 다시 주목받고 있는 것 같습니다.</p>\n<p>이번 포스팅에서는 자바스크립트의 Streams API을 사용하여 스트림을 생성하고 데이터를 읽는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"읽을-수-있는-스트림-생성\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%83%9D%EC%84%B1\" aria-label=\"읽을 수 있는 스트림 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽을 수 있는 스트림 생성</h2>\n<p>자바스크립트에서 데이터를 읽을 수 있는 스트림을 만들 때는 <code>ReadableStream</code> 클래스를 사용합니다.</p>\n<p>이 클래스의 생성자는 두 개의 인자를 받는데요\n두 번째 인자인 <code>queuingStrategy</code>는 고급 주제이기 때문에 생략하고, 첫 번째 인자인 <code>underlyingSource</code> 대해서만 다루겠습니다.</p>\n<p><code>underlyingSource</code>는 쉽게 말해 스트림의 데이터 원천지 또는 공급처를 나타내는 객체인데요.\n이 객체의 <code>start()</code> 함수를 사용하여 스트림이 내부적으로 관리하는 큐(queue)에 데이터를 넣어줄 수 있습니다.</p>\n<p>간단한 예로, 1초 간격으로 <code>0</code>부터 <code>10</code>까지의 숫자 데이터가 공급되는 스트림을 만들어볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1_000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>start()</code> 함수를 보면 <code>controller</code>가 인자로 넘어오고 <code>setInterval()</code> 함수 안에서 <code>controller.enqueue()</code>를 통해 스트림에 숫자를 하나씩 내부 데이터 큐에 넣어주고 있습니다.\n그리고 숫자가 10에 다다르면 데이터 공급을 끊기 위해서 <code>controller.close()</code>를 호출하고 있습니다.</p>\n<p><code>start()</code> 함수를 사용하면 데이터를 누가 읽든 말든 상관없이 스트림이 생성 시점에 데이터가 미리 공급이 되는 특징이 있습니다.</p>\n<h2 id=\"데이터-스트림을-읽는-방법-1\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EC%9D%BD%EB%8A%94-%EB%B0%A9%EB%B2%95-1\" aria-label=\"데이터 스트림을 읽는 방법 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 스트림을 읽는 방법 1</h2>\n<p>스트림으로 부터 데이터를 잆으려면 <code>ReadableStream</code> 객체를 상대로 <code>getReader()</code> 함수를 호출하여 리더(reader)를 얻어야하는데요.\n스트림은 리더를 얻는 순간 잠겨버리기(locked) 때문에 여러 리더로 읽을 수 없습니다.\n(<code>tee()</code> 함수를 통해서 스트림을 2개로 쪼개서 읽는 방법이 있는데 이 부분은 추후 별도의 포스팅에서 다루도록 할께요.)</p>\n<p>이 리더의 <code>read()</code> 함수를 호출하면 본격적으로 스트림에서 제공하는 데이터를 비동기로 읽을 수 있는데요.\n<code>read()</code> 함수는 <code>done</code>과 <code>value</code> 속성으로 이루어진 객체를 프라미스(promise)로 반환합니다.\n<code>done</code>은 스트림에서 데이터를 모두 읽었는지 여부를 나타내고, <code>value</code>에는 바로 읽은 데이터가 들어있죠.</p>\n<p>그럼 위에서 만든 읽기 가능한 스트림의 데이터를 한번 읽어볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>리더의 <code>read()</code> 함수를 호출하여 얻은 프라미스의 <code>then()</code> 함수를 호출한 후, <code>done</code>이 <code>true</code>가 될 때까지 재귀적으로 리더의 <code>read()</code> 함수를 호출하고 있습니다.</p>\n<p>작성한 코드를 실행해보면 다음과 같이 스트림이 생성하자 마자 <code>start()</code> 함수가 호출되어 <code>start</code>라는 메세지가 콘솔에 먼저 찍힐테고요.\n그 밑으로는 1초 간격으로 <code>start()</code> 함수를 통해 공급된 숫자 데이터가 1초마다 출력되는 것을 볼 수 있으실 것입니다.\n마지막에는 스트림의 데이터가 소진되어 <code>then()</code> 함수의 재귀 호출이 종료되고 <code>done</code>이라는 메세지가 찍히게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">start\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<blockquote>\n<p>위 코드가 잘 이해되지 않으시는 분들은 <a href=\"/js-async-promise/\">자바스크립트의 Promise에 대한 포스팅</a>를 먼저 읽어보시면 도움이 되실 겁니다.</p>\n</blockquote>\n<h2 id=\"필요-시-데이터를-공급해주기\" style=\"position:relative;\"><a href=\"#%ED%95%84%EC%9A%94-%EC%8B%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B3%B5%EA%B8%89%ED%95%B4%EC%A3%BC%EA%B8%B0\" aria-label=\"필요 시 데이터를 공급해주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필요 시 데이터를 공급해주기</h2>\n<p>읽기 가능한 스트림에 데이터를 공급하는 또 다른 방법으로 <code>underlyingSource</code> 객체의 <code>pull()</code> 함수를 구현해줄 수도 있는데요.\n스트림이 생성될 때 딱 한 번 호출되는 <code>start()</code> 함수와 달리 <code>pull()</code> 함수는 스트림에서 데이터를 읽어갈 때 마다 호출이 됩니다.</p>\n<p>예를 들어, 위 동일하게 1초 간격으로 숫자 <code>0</code>부터 <code>10</code>까지의 데이터를 리더가 요청할 때 마다 공급해주는 스트림을 만들어보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pull\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1_000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">===</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>pull()</code> 함수도 <code>start()</code> 함수와 비슷한 방식으로 <code>controller.enqueue()</code>와 <code>controller.close()</code>를 사용하여\n데이터를 공급하거나 공급을 끊을 수 있습니다.</p>\n<h2 id=\"데이터-스트림을-읽는-방법-2\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EC%9D%BD%EB%8A%94-%EB%B0%A9%EB%B2%95-2\" aria-label=\"데이터 스트림을 읽는 방법 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 스트림을 읽는 방법 2</h2>\n<p>위에서 데이터 스트림을 읽을 때 프라미스의 <code>then()</code> 함수를 재귀적으로 호출했었는데 코드가 읽기 좀 힘들었죠?\n이번에는 <code>await</code> 키워드를 사용하여 좀 더 깔끔하게 동일한 코드를 재작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>while</code> 문 안에서 리더의 <code>read()</code> 함수를 <code>await</code> 키워드를 붙여서 호출하면 바로 <code>done</code>과 <code>value</code>을 담은 객체가 반환됩니다.\n<code>done</code>이 <code>true</code>라면 반복을 마치고 <code>done</code>이 <code>false</code>라면 <code>value</code>를 출력하도록 구현하였습니다.</p>\n<p>이 코드를 실행해보면 1초 간격으로 <code>pull()</code> 함수가 호출되어 <code>pull</code> 메시지와 함께 숫자 데이터가 출력되는 것을 볼 수 있으실 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<blockquote>\n<p>자바스크립트의 async/await에 대한 자세한 설명은 <a href=\"/js-async-async-await/\">관련 포스팅</a>를 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"start-vs-pull\" style=\"position:relative;\"><a href=\"#start-vs-pull\" aria-label=\"start vs pull permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>start vs. pull</h2>\n<p>스트림에 데이터를 공급할 때 <code>start()</code> 함수와 <code>pull()</code> 함수 중에서 어떤 것을 사용하는 게 나을지 궁금하실 것 같습니다.</p>\n<p><code>start()</code> 함수를 사용하면 스트림에 데이터를 미리 준비해놓을 수 있기 때문에 스트림 데이터를 빨리 읽어가야하는 상황에서 유리합니다.\n하지만 데이터를 미리 만들어놓을 수 없거나 데이터가 엄청 큰 경우에는 <code>start()</code> 함수 사용 시 메모리의 비효율적인 사용으로 이어질 수 있습니다.</p>\n<p>반면에 <code>pull()</code> 함수를 사용하면 데이터를 요청량에 맞춰서 실시간으로 제공할 수 있다는 이점이 있습니다.\n따라서 메모리에 한번에 올리기에는 부담스러운 대용량 데이터를 스트리밍하거나 LLM(대형 언어 모델)처럼 데이터 출력 속도가 느린 경우에는 <code>pull()</code> 함수를 사용하는 편이 유리할 것입니다.</p>\n<p>물론 쾌적한 읽기 경험을 위해서 <code>start()</code> 함수와 <code>pull()</code> 함수를 적절히 섞어서 사용하는 전략도 있습니다.\n<code>start()</code> 함수를 통해 데이터의 일부를 미리 공급해놓고, <code>pull()</code> 함수를 통해서는 그 이후 데이터를 실시간으로 분할 공급하는 것이지요.</p>\n<p>좀 억지스러운 예제이기는 하지만 <code>0</code>부터 <code>4</code>까지는 <code>start()</code> 함수로 미리 공급하고, <code>5</code>부터 <code>9</code>까지는 <code>pull()</code> 함수로 실시간 공급을 하는 스트림을 한번 만들어보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pull\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">1_000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">===</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"데이터-스트림을-읽는-방법-3\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8A%A4%ED%8A%B8%EB%A6%BC%EC%9D%84-%EC%9D%BD%EB%8A%94-%EB%B0%A9%EB%B2%95-3\" aria-label=\"데이터 스트림을 읽는 방법 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 스트림을 읽는 방법 3</h2>\n<p>데이터 스트림을 읽는 가장 최신 방법으로 <code>for await</code> 문법이 있는데요.\n위 두 가지 방법에서는 여러 줄이 필요했던 코드를 다음과 같이 초간단하게 작성할 수가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드를 실행해보면 우선 <code>start()</code>를 통해 공급된 숫자가 우선 출력되고, <code>pull()</code>을 통해 공급된 숫자가 나중에 출력되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">start\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">8</span> <span class=\"token punctuation\">}</span>\npull\n<span class=\"token punctuation\">{</span> value: <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>아쉽게도 읽기 가능한 현재 글 작성일 기준으로 파이어폭스에서만 스트림을 상대로 <code>for await</code>를 사용할 수 있으며 다른 브라우저에서 지원될 때까지는 좀 기다려셔야 할 것 같습니다.\n다행이도 Node.js에서는 지원이 되기 때문에 백앤드에서 바로 쓰실 수 있는 문법입니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 다양한 예제를 통해서 자바스크립트에서 어떻게 스트림을 생성하고 데이터를 읽는지에 대해서 살펴보았습니다.</p>\n<p>실전에서는 이렇게 읽기 기능한 스트림을 직접 만들기보다는 이미 만들어진 스트림을 읽어야하는 경우가 더 많을 것입니다.\n대표적으로 fetch API를 통해서 원격 스트림을 읽어오는 것을 들 수 있겠는데요.\n이 부분에 대해서는 추후 포스팅해보도록 하겠습니다.</p>","timeToRead":6,"fields":{"slug":"/js-readable-stream/","tags":["JavaScript","Node.js","API","library","streams"]},"frontmatter":{"title":"자바스크립트에서 데이터 스트림 읽기 (ReadableStream)","date":"Jul 1, 2023"}},"next":{"fields":{"slug":"/github-actions-reusable-workflows/"},"frontmatter":{"title":"GitHub Actions에서 워크플로우 재사용하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}