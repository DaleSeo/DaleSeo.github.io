{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/bun/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>최근에 Bun v1.0이 출시되면서 차세대 자바스크립트 런타임(Runtime)으로 많은 주목을 받고 있습니다.\n이번 포스팅에서는 Bun이 얼마나 대단하길래 이렇게 큰 관심을 받고 있는지 알아보겠습니다.</p>\n<h2 id=\"자바스크립트-런타임이란\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%9F%B0%ED%83%80%EC%9E%84%EC%9D%B4%EB%9E%80\" aria-label=\"자바스크립트 런타임이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 런타임이란?</h2>\n<p>Bun에 대해서 소개드리기 전에 먼저 자바스크립트 런타임(Runtime)이 무엇인지 짚고 넘어가겠습니다.</p>\n<p>자바스크립트 런타임이란 쉽게 말해 자바스크립트로 작성된 프로그램을 실행시킬 수 있는 소프트웨어를 의미합니다.\n가장 흔한 예로, 우리가 매일 사용하는 크롬이나 사파리, 파이어폭스, 엣지와 같은 다양한 웹 브라우저를 들 수 있는데요.\n웹 브라우저는 HTML 문서에서 <code>&#x3C;script/></code> 태그를 통해 삽입된 자바스크립트 코드를 실행하여 웹페이지가 사용자와 상호작용할 수 있도록 해줍니다.</p>\n<p>자바스크립트로 작성된 프로그램은 클라이언트 측에서만 돌아가는 게 아니라 서버 측에서도 실행할 수 있는데요.\n2009년에 Node.js가 등장하면서 백앤드에서도 자바스크립트 프로그램을 실행할 수 있는 길이 열리게 되었고,\n2018년에 출시된 Deno라는 새로운 자바스크립트 런타임도 있습니다.</p>\n<p>Bun은 여기서 Zig라는 프로그래밍 언어로 쓰여진 새로운 자바스크립트 런타임입니다.</p>\n<p>참고로 하나의 프로그래밍 언어에 여러 런타임이 있다는 것은 젼혀 이상한 현상이 아닙니다.\n예를 들어, 파이썬(Python)에도 CPython, PyPy, Jython 등 다양한 런타임이 있고요,\n루비(Ruby)에도 MRI, JRuby, Rubinius 등 다양한 런타임이 있습니다.</p>\n<p>그러므로 새로운 런타임이 등장했다고 반드시 기존 런타임과 경쟁 구도에서 바라 볼 필요는 없어요.\nNode.js와 Deno, Bun 그리고 앞으로 등장할 다른 런타임들이 시장에서 선의의 경쟁하면서 서로 좋은 부분은 받아드리면서 진화할 것이 기 때문에, 우리는 자바스크립트 개발자로서 이러한 런타임을 반드시 경쟁 구도에서 바라 볼 필요는 없어요.</p>\n<p>배워할 기술이 하나 더 늘어났다고 생각이 들 수도 있지만,</p>\n<p>자바스크립트 개발자 입장에서\n자바스크립트 생태계에는 매우 긍정적인</p>\n<h2 id=\"bun-설치\" style=\"position:relative;\"><a href=\"#bun-%EC%84%A4%EC%B9%98\" aria-label=\"bun 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bun 설치</h2>\n<p>Bun은 MacOS와 같은 리눅스 계열 운영체제를 사용하고 계신다면 <code>curl</code> 명령어로 간편하게 설치해서 사용해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://bun.sh/install <span class=\"token operator\">|</span> <span class=\"token function\">bash</span></code></pre></div>\n<p>현재 블로그를 쓰는 시점에서 참고로 윈도우즈 운영체제에서는 Bun을 온전하게 사용하기 어려우니 참고 바라겠습니다.</p>\n<p>다음과 같이 터미널에서 Bun의 버전이 확인된다면 설치가 완료된 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun <span class=\"token parameter variable\">-v</span>\n<span class=\"token number\">1.0</span>.4</code></pre></div>\n<h2 id=\"타입스크립트-실행\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-label=\"타입스크립트 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 실행</h2>\n<p>Bun은 타입스크립트로 작성된 프로그램을 자바스크립트로 변환하지 않고도 바로 실행할 수 있는데요.</p>\n<p>예를 들어, 아주 간단한 타입스크립트 프로그램을 작성해보겠습니다.</p>\n<div class=\"gatsby-code-title\">index.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"안녕하세요!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 Bun을 통해서 바로 해당 프로그램 파일을 실행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun index.ts\n안녕하세요<span class=\"token operator\">!</span></code></pre></div>\n<p>동일한 작업을 Node.js로 하려면 어떻게 했어야 할가요?\n우선 타입스크립트로 작성된 프로그램 컴파일(compile)하여,</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title\"><pre class=\"language-js:title\"><code class=\"language-js:title\">$ npx tsc index.ts</code></pre></div>\n<p>자바스크립트 파일을 만들었어야 했을 것입니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"안녕하세요!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그 다음에 이 프로그램을 Node.js로 실행했어야 겠죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> index.js\n안녕하세요<span class=\"token operator\">!</span></code></pre></div>\n<blockquote>\n<p>타입스크립트 코드를 자바스크립트로 코드로 컴파일하는 기본적인 방법에 대해서는 <a href=\"/tsc/\">별도 포스팅</a>에서 자세히 다루고 있습니다.</p>\n</blockquote>\n<p>물론, 이 두 단계의 작업을 한 번으로 줄여주는 <code>ts-node</code>라는 개발 도구를 사용할 수도 있는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> ts-node\n$ npx ts-node index.ts\n안녕하세요<span class=\"token operator\">!</span></code></pre></div>\n<p>이 방법은 <code>ts-node</code> 패키지를 추가로 설치해줘야 한다는 나름의 귀찮음이 있습니다.</p>\n<p>Bun을 사용하면 번거로운 컴파일 과정을 완전히 생략할 수 있기 때문에 개발 생산성이나 개발자 경험을 향상시킬 수 있습니다.</p>\n<p>한 가지 오해하기 쉬운 부분은 단순히 개발 도구로 Bun을 사용한다고 해서 항상 컴파일 과정을 완전히 피할 수 있는 것은 아니라는 것입니다.\n특히 프론트엔드 프로젝트에서는 개발 도구로 어떤 런타임을 사용하든 타입스크립트로 작성된 코드를 자바스크립트를 변환하는 작업은 필수입니다.\n브라우저는 타입스크립트 코드를 실행할 수 없기 때문입니다.</p>\n<h2 id=\"모듈-시스템\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-label=\"모듈 시스템 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈 시스템</h2>\n<p>현재 자바스크립트 생태계에서는 수년에 결쳐 고통스러운 모듈 시스템의 전환 작업이 일어나고 있습니다.</p>\n<p>예전에는 모듈을 내보내거나 불러오기 위해서 Node.js에서 표준으로 사용하던 CommonJS를 많이 사용했었는데요,\nES6(ES2105)에서</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 차세대 자바스크립트 런타임으로 주목받고 있는 Bun에 대해서 알아보았습니다.</p>\n<p>자 그럼, Bun이 Node.js</p>","timeToRead":3,"fields":{"slug":"/bun/","tags":["JavaScript"]},"frontmatter":{"title":"Bun: 귀엽지만 강력한 자바스크립트 런타임","date":"Oct 8, 2023"}},"next":{"fields":{"slug":"/nestjs-versioning/"},"frontmatter":{"title":"NestJS에서 API 버전 관리하기(Versioning)"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}