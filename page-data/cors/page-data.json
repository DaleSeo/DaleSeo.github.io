{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/cors/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>웹 개발자라면 한 번쯤은 CORS 문제 때문에 골치아팠던 적이 있으시죠?\nCross-Origin Resource Sharing, 줄여서 CORS는 웹 페이지가 다른 도메인의 리소스에 안전하게 접근할 수 도와주는 브라우저의 기능입니다.</p>\n<p>이번 포스팅에서는 CORS의 기본 개념부터 작동 원리, 요청 흐름 그리고 실제 구현 방법까지 자세히 다루도록 하겠습니다.</p>\n<h2 id=\"동일-출처-정책\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9D%BC-%EC%B6%9C%EC%B2%98-%EC%A0%95%EC%B1%85\" aria-label=\"동일 출처 정책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동일 출처 정책</h2>\n<p>CORS를 제대로 이해하려면 우선 브라우저의 기본 보안 기능인 Same-Origin Policy, 즉 동일 출저 정책에 대해서 알고 있어야 합니다.\n브라우저는 현재 자바스크립트가 실행되고 있는 웹페이지의 출처와 동일하지 않은 출처의 리소스에 접근하는 걸 원칙적으로 금지합니다.</p>\n<p>여기서 출처(Origin)이란 다음 세 가지 요소로 구성이 되며, 이 세 요소가 모두 동일해야 브라우저는 같은 동일 출처(Same Origin)로 판단합니다.</p>\n<ol>\n<li>프로토콜: http 또는 https</li>\n<li>도메인: <a href=\"http://www.test.com\">www.test.com</a>, api.test.com, localhost, 127.0.0.1, 등</li>\n<li>포트: 80, 443, 3000, 8080, 등</li>\n</ol>\n<p>브라우저는 기본 보안 정책인 Same-Origin Policy를 완화하여 필요한 경우 교차 출처, 즉 Cross-Origin 접근을 허용합니다.\n서로 다른 출처에서 리소스를 공유하게 하는 메커니즘이기 때문에, Cross-Origin Resource Sharing, 즉 여기서 CORS가 시작됩니다.</p>\n<h2 id=\"cors-문제는-왜-발생하는가\" style=\"position:relative;\"><a href=\"#cors-%EB%AC%B8%EC%A0%9C%EB%8A%94-%EC%99%9C-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"cors 문제는 왜 발생하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS 문제는 왜 발생하는가?</h2>\n<p>CORS 문제는 쉽게 말해서 웹페이지에서 자바스크립트를 통해 다른 출처에 있는 리소스에 접근하려고 할 때 브라우저가 차단하는 현상을 말합니다.</p>\n<p>과거에는 대부분의 웹 애플리케이션이 단일 서버에서 모든 것을 처리했기 때문에 Same-Origin Policy이 큰 문제가 되지 않았습니다.\n하지만 현대에는 마이크로서비스 아키텍처가 일반화되면서 여러 도메인 간에 통신을 해야하는 경우가 많아졌고 동일 출처 정책을 위반하는 경우가 늘어났습니다.</p>\n<p>SPA(Single Page Application)이나 모바일 앱 등 다양한 클라이언트가 서로 다른 출처에서 동작하고,\n이미지나 폰트와 같은 정적 리소스의 로딩 지연을 최소화하기 위해서 CDN 사용도 보편화되었고, 프론트엔드에서 제3자 서비스와 통합하는 일도 아주 흔하게 발생합니다.\n이 모든 경우 프로토콜이나 도메인이 달라질 수 있기 때문에 동일 출처 정책을 위반할 가능성이 매우 높아집니다.</p>\n<p>비단 이러한 상용 환경뿐만 아니라 개발 환경에서도 CORS 문제를 어렵지 않게 접할 수 있는데요.\n프론트엔드는 3000 포트에 띄우고 백엔드는 8000 포트에 띄우면, <code>http://localhost:3000</code>가 출처인 웹 페이지가 <code>http://localhost:8080</code>가 출처의 API를 호출하므로 동일 출처 정책을 위반하게 됩니다.</p>\n<p>동일 출처 정책을 위반할 경우 브라우저는 <code>Origin</code> 헤더를 현재 페이지의 출처, 즉 <code>프로토콜://도메인:포트</code> 설정하여 요청에 자동으로 추가합니다.\n그리고 서버에 Preflight, 즉 사전 요청을 보내어 현재 페이지가 해당 리소스에 접근할 수 있는지를 확인합니다.\n서버가 접근을 허용하면 본 요청을 보내고, 거부하면 우리가 흔히 겪는 CORS 문제가 발생하게 되는 것입니다.</p>\n<h2 id=\"cors-오류의-다양한-유형\" style=\"position:relative;\"><a href=\"#cors-%EC%98%A4%EB%A5%98%EC%9D%98-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9C%A0%ED%98%95\" aria-label=\"cors 오류의 다양한 유형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS 오류의 다양한 유형</h2>\n<p>CORS 문제는 브라우저의 콘솔이나 개발자 도구의 네트워크 탭을 통해서 쉽게 탐지할 수 있습니다.</p>\n<p>가장 흔하게 볼 수 있는 오류는 역시 클라이언트의 Origin을 허용하지 않는 것입니다.\n클라이언트 측에서 보내는 <code>Origin</code> 요청 헤더를 서버에서 허락하지 않는다는 뜻입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">No 'Access-Control-Allow-Origin' header is present on the requested resource.</code></pre></div>\n<p>다음으로 자주 볼 수 있는 오류는 서버가 특정 HTTP Method를 허용하지 않을 때입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Method POST is not allowed by 'Access-Control-Allow-Methods' header in preflight response.</code></pre></div>\n<p>서버가 특정 헤더를 허용하지 않을 때도 CORS 오류가 발생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Request header field X-Custom-Header is not allowed by 'Access-Control-Allow-Headers' header.</code></pre></div>\n<p>마지막으로 쿠키를 포함한 요청에서 CORS 오류가 발생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">The value of 'Access-Control-Allow-Origin' header must not be '*' when credentials mode is 'include'.</code></pre></div>\n<p>오류 메시지를 보면 공통적으로 <code>Access-Control-Allow</code>로 시작하는 헤더가 많이 나옵니다.\n이를 통해 우리는 브라우저가 다른 출처의 리소스에 접근하기 위해서는 서버에서 돌려주는 응답에 설정된 헤더 값들이 중요하다는 것을 알 수 있습니다.</p>\n<h2 id=\"cors-프로토콜-심층-분석\" style=\"position:relative;\"><a href=\"#cors-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D\" aria-label=\"cors 프로토콜 심층 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS 프로토콜 심층 분석</h2>\n<p>이제 중요한 것은 브라우저가 다른 출처에 있는 리소스에 접근할 수 있는지 없는지 판단하는 방법을 아는 것인데요.\n이 것을 바로 <a href=\"https://fetch.spec.whatwg.org/#http-cors-protocol\">CORS 프로토콜</a>이라고 하며 다양한 벤더의 브라우저가 동일하게 따르고 있는 웹 표준입니다.</p>\n<p>위에서 간단히 설명드렸던 것처럼 브라우저는 다른 출처에 있는 리소스에 접근하기 위해서 우선 서버에 Preflight, 즉 사전 요청을 자동으로 보냅니다.</p>\n<p>이 사전 요청은 HTTP Method 중에서 좀 생소할 수도 있는 OPTIONS을 사용하며, <code>Origin</code>을 포함한 아래 2개의 헤더를 요청에 추가됩니다.</p>\n<ul>\n<li><code>Access-Control-Request-Method</code>: 어떤 HTTP Method를 사용하고 싶은지</li>\n<li><code>Access-Control-Request-Headers</code>: 어떤 요청 헤더를 사용하고 싶은지</li>\n</ul>\n<p>즉, 본 요청에 대한 상세 정보를 사전 요청을 통해서 서버에 전달해주는 것입니다.</p>\n<p>그러면 서버는 아래와 같은 헤더를 통해서 자신의 허용하는 요청한 대해서 응답합니다.\n위에서 살펴본 CORS 오류 메시지에 들어있던 헤더들입니다.</p>\n<ul>\n<li><code>Access-Control-Allow-Origin</code>: 허용하는 Origin</li>\n<li><code>Access-Control-Allow-Methods</code>: 허용하는 HTTP 메서드</li>\n<li><code>Access-Control-Allow-Headers</code>: 허용하는 요청 헤더</li>\n<li><code>Access-Control-Allow-Credentials</code>: 쿠키 허용 여부</li>\n<li><code>Access-Control-Max-Age</code>:Preflight 캐시 시간(초)</li>\n<li><code>Access-Control-Expose-Header</code>: 클라이언트에서 접근 가능한 응답 헤더</li>\n</ul>\n<p>브라우저는 Preflight 응답을 통해 요청 헤더와 응답 헤더를 다음과 같이 비교합니다.</p>\n<ul>\n<li>송신한 <code>Origin</code> 헤더가 수신된 <code>Access-Control-Allow-Origin</code> 헤더와 일치하는가?</li>\n<li>송신한 <code>Access-Control-Request-Method</code>가 수신된 <code>Access-Control-Allow-Methods</code> 헤더에 포함되어 있는가?</li>\n<li>송신한 <code>Access-Control-Request-Headers</code>가 수신된 <code>Access-Control-Allow-Headers</code> 헤더에 포함되어 있는가?</li>\n<li>요청에 쿠키를 포함할 거라면 <code>Access-Control-Allow-Credentials</code> 값이 <code>true</code>인가?</li>\n</ul>\n<p>이 모든 것이 만족한다면 서버가 해당 요청을 접근하는 것으로 판단하고 실제 요청을 보냅니다.\n이 이후는 같은 Origin에 있는 리소스에 접근하는 것과 동일한 과정을 거치게 됩니다.</p>\n<p>서버가 리소스의 접근을 허용한 경우에는 브라우저는 <code>Access-Control-Max-Age</code> 헤더에 설정된 기간동안 동일한 Preflight 요청없이 다른 Origin에 있는 리소스를 바로 접근합니다.\n그리고 리소스를 요청한 자바스크립트는 본 응답에서 <code>Access-Control-Expose-Header</code>에 명시된 헤더에만 접근할 수 있습니다.</p>\n<h2 id=\"실제-요청-흐름-시나리오\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%9C-%EC%9A%94%EC%B2%AD-%ED%9D%90%EB%A6%84-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-label=\"실제 요청 흐름 시나리오 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 요청 흐름 시나리오</h2>\n<p>React 앱 <code>https://app.example.com</code> 에서 API <code>https://api.example.com</code>에 사용자 생성 요청한다고 가정해보겠습니다.</p>\n<p>브라우저가 자동으로 사전 요청을 보냅니다.\n<code>Origin</code>, <code>Access-Control-Request-Method</code>, <code>Access-Control-Request-Headers</code> 헤더를 본 요청에 대한 정보를 서버에 알려줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">OPTIONS</span> <span class=\"token request-target url\">/users</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">api.example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://app.example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Request-Method</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">POST</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Request-Headers</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Content-Type, Authorization</span></span></code></pre></div>\n<p>서버가 <code>204</code> 상태 코드로 바디없이 CORS 헤더만 응답합니다.\n<code>Access-Control-Allow-Methods</code> 헤더에 <code>POST</code>가 들어있고,\n<code>Access-Control-Allow-Headers</code> 헤더에 <code>Content-Type</code>과 <code>Authorization</code>이 모두 들어 있습니다.\n따라서 본 요청을 허용한다는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">204</span> <span class=\"token reason-phrase string\">No Content</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Allow-Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://app.example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Allow-Methods</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">GET, POST, PUT, DELETE</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Allow-Headers</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Content-Type, Authorization</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Max-Age</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">3600</span></span></code></pre></div>\n<p>이제 브라우저는 안전하다가 판단하고 사용자 생성을 위한 본래 요청을 보냅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">POST</span> <span class=\"token request-target url\">/users</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">api.example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://app.example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Authorization</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Bearer token123</span></span>\n<span class=\"token application-json\">\n<span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"email\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"dale@example.com\"</span><span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>서버는 <code>201</code> 상태 코드와 함께 사용자된 사용자의 데이터를 응답을 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\">httpHTTP/1.1 201 Created\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Allow-Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://app.example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span>\n<span class=\"token application-json\">\n<span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"email\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"dale@example.com\"</span><span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>본 응답에도 <code>Access-Control-Allow-Origin</code> 헤더가 설정되어 있는 것을 유심하게 보셔야합니다. 👀\nCors의 응답 헤더 중에서 <code>Access-Control-Allow-Origin</code> 헤더와 <code>Access-Control-Allow-Credentials</code> 헤더는 Preflight 뿐만 아니라 실제 응답에도 포함되야 합니다.</p>\n<h2 id=\"cors-예외-simple-request\" style=\"position:relative;\"><a href=\"#cors-%EC%98%88%EC%99%B8-simple-request\" aria-label=\"cors 예외 simple request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS 예외: Simple Request</h2>\n<p>참고로 동일 출저 정책을 위반했다고 해서 브라우저가 항상 CORS 프로토콜을 따라 Preflight 요청을 거치는 것은 아닙니다.\n다음과 같은 조건을 만족하면 Simple Request, 즉 단순 요청으로 간주하여 사전 단계없이 다른 Origin에 있는 리소스에 바로 접근을 시도합니다.</p>\n<ul>\n<li>메서드: <code>GET</code>, <code>HEAD</code>, <code>POST</code> 중 하나</li>\n<li>헤더: 브라우저 기본 헤더와 <code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code>, <code>Content-Type</code>만 사용</li>\n<li>Content-Type: <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, <code>text/plain</code> 중 하나</li>\n</ul>\n<p>만약 서버가 <code>Access-Control-Allow-Origin</code> 헤더를 응답하지 않으면, Simple Request라도 브라우저가 응답을 차단합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">api.example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://app.example.com</span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">200</span> <span class=\"token reason-phrase string\">OK</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Allow-Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://mywebsite.com</span></span></code></pre></div>\n<p>Preflight Request와 Simple Request의 차이를 정리해보면,</p>\n<ul>\n<li><strong>Simple Request</strong>: 요청이 서버에 도달하고 처리됨. 응답 차단은 브라우저에서만 발생</li>\n<li><strong>Preflight Request</strong>: OPTIONS 요청이 실패하면 본 요청 자체를 보내지 않음</li>\n</ul>\n<h2 id=\"클라이언트에서-cors-요청하기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-cors-%EC%9A%94%EC%B2%AD%ED%95%98%EA%B8%B0\" aria-label=\"클라이언트에서 cors 요청하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트에서 CORS 요청하기</h2>\n<p>클라이언트에서 CORS 요청을 할 때는 브라우저가 자동으로 CORS 프로토콜을 처리해주므로, 개발자는 일반적인 HTTP 요청과 거의 동일하게 코드를 작성할 수 있습니다.\n다만 CORS 에러가 네트워크 에러로 잡히므로, 이를 적절히 처리해주면 좋습니다.</p>\n<p>GET 요청은 일반적으로 Simple Request 조건을 만족하므로 Preflight 요청 없이 바로 실행됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.test.com/data\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request failed:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>자바스크립트의 Promise에 대한 자세한 설명은 <a href=\"/js-async-promise/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<p>POST 요청에 <code>Content-Type: application/json</code>을 포함하면 Simple Request 조건을 벗어나므로 브라우저가 자동으로 Preflight 요청을 보냅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">postData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.test.com/users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">Authorization</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer token123</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dale@test.com\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created user:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request failed:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>자바스크립트의 async/await에 대한 자세한 설명은 <a href=\"/js-async-async-await/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<p>쿠키나 HTTP 인증 정보를 포함해야 하는 경우 <code>credentials</code> 옵션을 설정해야 합니다.\n이 경우 서버에서 사전 요청 때 <code>Access-Control-Allow-Credentials: true</code>를 응답해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://api.test.com/profile\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token string\">\"include\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Profile:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>CORS 에러는 사용자가 이해하기 어려운 기술적인 문제이므로, 적절한 에러 처리와 사용자 친화적인 메시지 제공이 중요하겠습니다.</p>\n<blockquote>\n<p>자바스크립트의 fetch() 함수에 대해서는 <a href=\"/js-window-fetch/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"서버에서-cors-구현하기\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-cors-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"서버에서 cors 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버에서 CORS 구현하기</h2>\n<p>CORS 프로토콜에서 다른 출처로부터 들어온 접근을 허용하거나 거부하는지는 전적으로 서버 측의 구현에 달려있습니다.</p>\n<p>직접 구현하려면 OPTIONS 요청을 처리하는 핸들링 로직을 작성해야하는데요.\n결국은 응답 헤더에 CORS 응답 헤더를 설정해주는 작업입니다.</p>\n<p>대부분의 웹 서버 프레임워크에서 CORS 기능을 내장하거나 플러그인을 통해서 지원하고 있어서 많은 코드 작성없이 쉽게 구현할 수 있습니다.\n예를 들어, 가장 대중적인 Express.js에서는 CORS 미들웨어를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cors\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> allowedOrigins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://www.example.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://app.example.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">origin</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">origin<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>origin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowedOrigins<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not allowed by CORS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">allowedHeaders</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"X-Custom-Header\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">86400</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exposedHeaders</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"X-Total-Count\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"X-Page-Number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dale\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3001</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API listening on port 3001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>보안을 위해서 개발 환경이나 외부에 공개된 리소스가 아니라면 가급적 Whitelist, 즉 제한된 리스트 내에서 동적으로 <code>Access-Control-Allow-Origin</code> 헤더를 설정해주는 것이 좋습니다.</p>\n<p>그리고 CORS 프로토콜 규격상 <code>credentials: include</code> 옵션을 사용하면서 <code>Access-Control-Allow-Origin: *</code>를 사용하는 건 허용되지 않으며 반드시 특정 출처를 명시해야 합니다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>CORS는 브라우저가 출처가 다른 리소스를 가져올 수 있는가 없는가에 대한 명시적 계약입니다.\n잘못 이해하거나 설정하면 서비스가 안 되거나, 보안 구멍이 될 수 있고, 정확히 이해하고 설정하면 사용자 경험도 깔끔해지고 서비스도 안전해집니다.\n본 가이드를 통해 CORS의 동작 원리를 정확히 이해하고, 보안을 고려한 올바른 구현 방법을 익히셨기를 바랍니다.</p>","timeToRead":9,"fields":{"slug":"/cors/","tags":["Web","Security","API"]},"frontmatter":{"title":"CORS (Cross-Origin Resource Sharing) 완벽 가이드","date":"Sep 17, 2025"}},"next":{"fields":{"slug":"/claude-code/"},"frontmatter":{"title":"Claude Code: 터미널 기반 코딩 에이전트"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}