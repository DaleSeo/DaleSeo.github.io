{
    "componentChunkName": "component---src-templates-list-template-jsx",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"테스트를 작성하다보면 날짜와 시간이 골칫거리가 되는 경우가 많습니다.\n날짜와 시간은 다른 데이터와 다르게 항상 변하기 때문인데요. 이번 포스팅에서는 Jest를 이용하여 날짜와 시간을 효과적으로 모킹(mocking)하는 방법에 대해서 알아보겠습니다. 테스팅 프레임워크인 Jest에 생소하신 분들은 먼저 관련 포스팅를 읽어 보시고 돌아오시기를 추천드립니다. 예제 코드 자바스크립트의 Intl API를 사용하여 현재 날짜를 주어진 언어에 따라 문자열로 변환해주는 간단한 함수를 작성해보겠습니다. 이 함수는 내부적으로 Date() 생성자를 통…","timeToRead":8,"fields":{"slug":"/jest-date-mocking/","tags":["JavaScript","library","Jest","testing","mocking"]},"frontmatter":{"title":"Jest의 가짜 타이머로 테스트의 시간을 멈추기","date":"Oct 23, 2023"}},{"excerpt":"많은 양의 내용을 보여줘야하는 웹페이지에서 목차(TOC, Table of Contents) UI를 쉽게 볼 수 있는데요.\n사용자가 목차에 있는 링크를 클릭하면, 번거롭게 스크롤을 여러 번 내리지 않아도 해당 페이지의 특정 지점으로 바로 건너뛸 수 있기 때문에, 더 나은 경험을 제공할 수 있습니다.\n하지만 이 때 스크롤링이 너무 빠르게 일어나기 때문에 기존에 보던 화면과 이동한 화면이 비슷한 경우 사용자에게 혼선을 줄 수도 있는데요. 이번 포스팅에서는 함께 간단한 목차 UI를 구현하면서, 어떻게 하면 좀 더 부르럽게 스크롤링을 하여…","timeToRead":4,"fields":{"slug":"/css-scroll-smooth/","tags":["CSS","HTML","a","link","URL"]},"frontmatter":{"title":"CSS로 부드럽게 스크롤되는 목차 만들기","date":"Oct 20, 2023"}},{"excerpt":"이번 포스팅이 제가 블로그에 올리는 400번째 글입니다.\n제가 평균적으로 주 1회 포스팅을 하니, 이 말은 제가 블로그를 시작한지도 약 8년의 시간이 흘렀다는 얘기인데요.\n현재 제가 16년 째 개발자로 일하고 있으니, 제 커리어의 절반은 블로그를 쓰면서 보냈다고 할 수 있겠네요. 많은 분들께서 어떻게 그렇게 꾸준히 블로그에 글을 쓸 수 있는지에서 자주 여쭤보시는데요.\n그래서 오늘은 제가 400번째 글을 쓸 수 있게 했던 원동력이 무엇이었는지에 대해서 곰곰히 생각해보았습니다. 이번 포스팅에서는 개발자로서 성장하는데 블로그를 쓰는 것…","timeToRead":4,"fields":{"slug":"/blogging-for-growth/","tags":["blog"]},"frontmatter":{"title":"개발자의 성장을 돕는 블로그 쓰기","date":"Oct 16, 2023"}},{"excerpt":"세트(set)는 파이썬에서 고유한 값들의 집합을 다루는 자료구조입니다.\n이를 활용하면 데이터 중복을 제거하고 유일한 값들을 효과적으로 관리할 수 있는데요. 이번 포스팅에서는 다양한 예제를 통해서 파이썬의 set을 어떻게 사용하는지 아주 꼼꼼하고 차근차근 알아보도록 하겠습니다. 세트 자료구조 먼저, 파이썬와 별개로 자료구조로서의 세트(set)에 대해서 가볍게 개념 정리를 하고 넘어가면 좋을 것 같습니다. 세트(set)는 한마디로 순서가 없는 중복되지 않은 데이터의 집합인데요.\n리스트(list)과 차이점을 이해하는 것이 무엇보다 중요…","timeToRead":6,"fields":{"slug":"/python-set/","tags":["Python","set","BIF"]},"frontmatter":{"title":"파이썬 세트(set) 완벽 가이드","date":"Oct 14, 2023"}},{"excerpt":"최근에 번(Bun) v1.0이 출시되면서 차세대 자바스크립트 런타임(Runtime)으로 많은 기대를 한몸에 받고 있습니다.\n이번 포스팅에서는 귀여운 이름과 로고 뒤에 무시무시한 기능과 성능으로 무장하고 하고 있는 Bun이라는 새로운 자바스크립트 런타임에 대해서 살펴보겠습니다. Bun v1.0 자바스크립트 런타임 Bun에 대해서 소개드리기 전에 먼저 자바스크립트 런타임(Runtime)이 무엇인지 가볍게 짚고 넘어가면 좋을 것 같아요. 자바스크립트 런타임이란 쉽게 말해 자바스크립트로 작성된 프로그램을 실행해주는 소프트웨어를 의미합니다…","timeToRead":10,"fields":{"slug":"/bun/","tags":["JavaScript"]},"frontmatter":{"title":"Bun: 귀엽지만 강력한 새로운 자바스크립트 런타임","date":"Oct 9, 2023"}},{"excerpt":"이번 글에서는 NestJS에서 API의 버전을 체계적으로 관리하는 방법에 대해서 배워보도록 하겠습니다. API Versioning이란? REST API와 같은 서버 애플리케이션을 운영하다 보면, 부득이하게 클라이언트에 큰 영향을 줄 수 있는 위험한 변경을 해야할 때가 있는데요.\nAPI Versioning, 즉 버전 관리를 통해서, 우리는 서버 측 API 변경에 따른 클라이언트의 영향을 최소화하고, API의 호환성과 안정성을 높일 수 있습니다. 버전 관리가 이루어지는 API는 보통 클라이언트에게 v1, v2, v3… 이런 식으로 여…","timeToRead":7,"fields":{"slug":"/nestjs-versioning/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","authentication","authorization","security"]},"frontmatter":{"title":"NestJS에서 API 버전 관리하기(Versioning)","date":"Oct 3, 2023"}},{"excerpt":"배열에 원소를 제거하는 것은 자바스크립트 코딩할 때 매우 빈번하게 필요한 작업이죠? 이번 포스팅에서는 자바스크립트 배열의 원소를 제거하는 다양한 방법에 대해서 간단히 정리해보겠습니다. pop() 메서드 자바스크립트 배열에 원소를 추가하는 방법 중에서 가장 널리 알려진 방법은 뭐니뭐니 해도 배열의 pop() 메서드일 것 같은데요. 예를 들어, pop() 메서드로 과일 이름을 담은 배열로 부터 원소를 제거해보겠습니다. pop() 배열에서 마지막 원소를 제거한 후에, 제거된 원소를 결과로 반환합니다. unshift() 메서드 반대로 배…","timeToRead":3,"fields":{"slug":"/js-array-pop-shift/","tags":["JavaScript","array","ES6"]},"frontmatter":{"title":"자바스크립트 배열의 원소 제거하기: pop()와 shift() 메서드","date":"Oct 1, 2023"}},{"excerpt":"배열에 원소를 추가하는 것은 자바스크립트 코딩할 때 매우 빈번하게 필요한 작업이죠? 이번 포스팅에서는 자바스크립트 배열에 원소를 추가하는 다양한 방법에 대해서 간단히 정리해보겠습니다. push() 메서드 자바스크립트 배열에 원소를 추가하는 방법 중에서 가장 널리 알려진 방법은 뭐니뭐니 해도 배열의 push() 메서드일 것 같은데요. 예를 들어, push() 메서드로 과일 이름을 담은 배열에 원소를 추가해보겠습니다. push() 메서드에 넘어온 인수는 배열의 끝, 즉 기존에 마지막 원소 바로 뒤에 추가됩니다.\n그리고 결과로 원소를 …","timeToRead":3,"fields":{"slug":"/js-array-push-unshift/","tags":["JavaScript","array","ES6"]},"frontmatter":{"title":"자바스크립트 배열에 원소 추가하기: push()와 unshift() 메서드","date":"Sep 30, 2023"}},{"excerpt":"이번 포스팅에서는 파이썬에서 하나라도 참인지 확인할 때 사용하는 any() 내장 함수에 대해서 알아보겠습니다. 반복문으로 하나라도 참인지 확인하기 여러 개의 데이터가 하나라도 어떤 조건을 만족하는지 확인을 해야할 때 보통 어떻게 접근을 하시나요?\n많은 분들이 자연스럽게 반복문을 떠올릴 것 같은데요. 예를 들어, 여러 숫자 중에서 하나라도 양의 짝수인지를 확인하는 함수를 다음과 같이 구현할 수 있을 것입니다. 이 함수에 양의 짝수가 하나라도 들어있는 리스트를 넘겨서 호출하면 True를 반환하겠죠? 반면에 인자로 넘긴 리스트에 양의 …","timeToRead":7,"fields":{"slug":"/python-any/","tags":["Python","BIF","any","comprehensions"]},"frontmatter":{"title":"파이썬의 내장 함수 any() 사용법","date":"Sep 26, 2023"}},{"excerpt":"도메인을 구매한 후에 DNS 설정을 했는데 브라우저에서 해당 웹사이트에 접속이 안되면 어디서부터 디버깅을 해야할지 상당히 난감할 수 있는데요. 이번 포스팅에서는 DNS 설정에 문제가 발생했을 때 정말로 유용하게 사용할 수 있는 도구인 dig 명령어에 대해서 알아보겠습니다. 명령어 소개 dig는 Domain Information Groper의 약자로, DNS 정보를 조회하고 진단하기 위한 커맨드 라인 도구인데요.\ndig라는 영단어가 “파다”, “파헤치다”, “파서 찾아내다” 라는 뜻이 있어서, 도구의 목적을 생각해보면 굉장히 쉽게 …","timeToRead":13,"fields":{"slug":"/dig/","tags":["CLI","Linux","DNS","network"]},"frontmatter":{"title":"dig 명령어로 DNS 조회 및 진단하기","date":"Sep 18, 2023"}},{"excerpt":"전자 상거래와 같이 많은 양의 데이터를 다루는 서비스에서 필터(filter)는 사용자가 데이터를 추려낼 수 있는 도와주는 매우 중요한 UI입니다.\n이번 포스팅에서는 아래와 같은 간단한 상품 목록 페이지를 구현하면서 필터(filter) UI를 어떻게 구현하는 방법에 대해서 알아보겠습니다. 상품 목록 컴포넌트 구현 우선 단순히 모든 상품 목록을 보여주는 React 컴포넌트를 작성하겠습니다. <Products/> 컴포넌트는 prop으로 상품 배열(products)와 로딩 여부(loading)를 받습니다.\n그리고 아직 데이터를 로딩 중이…","timeToRead":9,"fields":{"slug":"/react-filter/","tags":["JavaScript","React","hook","useEffect","useState","pagination"]},"frontmatter":{"title":"React로 필터 UI 구현하기 (+ URL 동기화)","date":"Sep 14, 2023"}},{"excerpt":"백엔드와 프론트엔드를 불문하고 대부분의 자바스크립트 프로젝트에는 최상위 경로에 package.json 파일이 있는데요.\n그런데 혹시 이 파일이 언제 어떻게 사용되는지를 정확히 알고 계신가요? 이번 포스팅에서는 자바스크립트 개발자로서 알아두면 좋은 package.json 파일에 대해서 자주 사용되는 필드 위주로 정리해드리려고 합니다. 왜 package.json 필요할까? 자바스크립트가 프로그래밍 언어로서 여러 가지 부족한 측면이 있음에도 불구하고 현재의 번영을 누리고 있는 이유는 뭐니 뭐니해도 다른 언어와 비교할 수 없는 어마어마한…","timeToRead":8,"fields":{"slug":"/js-package-json/","tags":["JavaScript","Node.js","npm","yarn"]},"frontmatter":{"title":"자바스크립트 개발자를 위한 package.json 파일 정리","date":"Sep 5, 2023"}},{"excerpt":"웹 개발을 할 때 쿼리 스트링(Query String)을 다루는 일은 번거롭기도 하고 버그도 생기기 쉬워서 오래전부터 라이브러리가 많이 쓰였는데요.\n관련해서 npm에서 검색해보면 이름이 조금씩 다른 수많은 라이브러리가 있어서 어떤 것을 선택해야 할지 헷갈릴 수 있습니다. 이번 포스팅에서는 현재 npm trends 기준으로 가장 많이 사용되고 관리가 잘 되고 있는 2종의 자바스크립트 라이브리리, qs와 query-string에 대해서 알아보겠습니다. 라이브러리가 필요한 이유 먼저 자바스크립트로 쿼리 스트링을 다룰 때 왜 라이브러리가…","timeToRead":7,"fields":{"slug":"/qs-vs-query-string/","tags":["JavaScript","Node.js","Library","URL","npm"]},"frontmatter":{"title":"쿼리 스트링을 다루기 위한 자바스크립트 라이브러리 2종 비교 (qs vs. query-string)","date":"Sep 1, 2023"}},{"excerpt":"제가 몇 년 전에 블로그에서 npm 패키지 저장소에 faker라는 이름으로 등록되어 있는 라이브러리를 소개해 드린 적이 있는데요.\n안타깝게도 2022년에 faker를 유지보수하던 개발자가 불미스러운 일을 저질러 더 이상 사용하면 안 되는 라이브러리가 되었습니다.\n(오픈 소스 커뮤니티에 시사하는 바가 컸던 사건이므로 관심있으신 분은 관련 기사를 참고하시기 바랍니다.) 현재는 npm 패키지 저장소에 @faker-js/faker라는 패키지 이름으로 등록된 새로운 라이브러리가 예전에 faker 라이브러리를 대신하고 있는데요.\n과거의 실수…","timeToRead":9,"fields":{"slug":"/js-faker-js/","tags":["JavaScript","Node.js","library","testing","faker"]},"frontmatter":{"title":"자바스크립트에서 Faker로 가짜 데이터 생성하기","date":"Aug 27, 2023"}},{"excerpt":"React로 SPA(Single Page Application)를 개발하는 경우 window.location 객체에 접근할 때 여러가지 문제가 발생할 수 있는데요.\nSPA에서는 보통 클라이언트 단에서 랜더링을 하기 때문에 브라우저의 location 객체를 사용할 때 조금 더 세심한 고려가 필요합니다. 이번 포스팅에서는 React 앱에서 브라우저의 location 객체에 안전하게 접근하는 방법과 이를 위한 커스텀 훅(hook)을 구현해보도록 하겠습니다. 브라우저의 location 전역 객체 우선 브라우저의 location 객체에 대…","timeToRead":6,"fields":{"slug":"/react-use-location/","tags":["JavaScript","React","hook","useState"]},"frontmatter":{"title":"React에서 location 객체 접근하기","date":"Aug 21, 2023"}},{"excerpt":"URL이 바뀔 때 마다 새로운 페이지를 서버로 요청하지 않는 SPA(Single Page Application)에서는 보통 클라이언트 단에서 라우팅(routing)을 하는데요.\n그래서 React, Svelte, Vue.js와 같은 대부분의 프론트엔드 프레임워크을 사용할 때는 이러한 클라이언트 단 라우팅을 지원하는 라이브러리와 함께 쓰는 경우가 많습니다. 그런데 이러한 라우팅 라이브러리는 대부분은 내부적으로 자바스크립트의 History API를 사용하고 있다는 것을 알고 계셨나요?\n이번 글에서는 클라이언트 단 라우팅을 이해하는데 핵…","timeToRead":8,"fields":{"slug":"/js-history-api/","tags":["JavaScript","Web","API","SPA","history"]},"frontmatter":{"title":"자바스크립트의 History API와 클라이언트 단 라우팅","date":"Aug 18, 2023"}},{"excerpt":"이번 포스팅에서는 자바스크립트에서 배열을 합치는 방법에 대해서 간단히 정리해보겠습니다. concat() 메서드 연결하다(concatenate)를 의미하는 배열의 concat() 메서드를 사용하면 하나의 배열에 다른 배열을 합칠 수 있습니다. 예를 들어, concat() 메서드로 숫자 배열에 글자 배열을 합쳐보겠습니다. concat() 메서드의 중요한 특징은 바로 원본 배열을 건드리지 않고 새로운 배열을 반환한다는 것입니다. 따라서 원본 배열을 건드리지 않는 배열의 다른 메서드와 함께 체인(chain)의 형태로 연쇄 호출이 가능합니…","timeToRead":2,"fields":{"slug":"/js-array-concat/","tags":["JavaScript","array","ES6"]},"frontmatter":{"title":"자바스크립트 배열 합치기: concat() 메서드, spread 연산자","date":"Aug 16, 2023"}},{"excerpt":"웹에서 페이지 간의 이동은 일반적으로 하이퍼링크(Hyperlink)를 통해 이루어집니다.\n즉, 사용자가 웹 페이지 상의 링크를 클릭하면 브라우저에서 해당 페이지가 열리게 됩니다.\n웹 개발자는 이를 위해 HTML의 <a> 요소의 href 속성에 이동해야 할 URL을 명시해주죠. 하지만 웹 개발을 하다보면 부득이하게 자바스크립트로 페이지 이동을 처리해야하는 경우가 생기기 마련인데요.\n대표적인 예로 미인증 사용자가 접근했을 때 바로 로그인 페이지로 강제 이동 시키는 것을 들 수 있겠습니다. 이번 글에서는 자바스크립트를 사용하여 페이지 …","timeToRead":4,"fields":{"slug":"/js-location/","tags":["JavaScript","TypeScript","location"]},"frontmatter":{"title":"자바스크립트로 웹 페이지 이동하는 방법","date":"Aug 11, 2023"}},{"excerpt":"지난 포스팅에서는 URL API의 URL을 사용하여 좀 더 안전하게 웹 주소 다루는 방법에 대해서 살펴보았는데요. 이번 포스팅에서는 URL API에서 제공하는 또 다른 유용한 기능인 URLSearchParams를 이용하여 웹 주소의 구성 요소 중에서도 가장 다루기 어려운 쿼리 스트링을 다루는 방법에 대해서 알아보겠습니다. URLSearchParams 객체의 필요성 자바스크립트의 URLSearchParams에 대해서 본격적으로 배우기 전에 먼저 URL의 쿼리 스트링에 대해서 짚고 넘어가는 게 좋을 것 같아요. 소위 검색 파라미터(s…","timeToRead":7,"fields":{"slug":"/js-url-search-params/","tags":["JavaScript","Node.js","API","URL"]},"frontmatter":{"title":"자바스크립트의 URLSearchParams로 쿼리 스트링 다루기","date":"Aug 7, 2023"}},{"excerpt":"Prettier는 일관적인 규칙에 따라서 코드를 자동으로 포맷팅해줌으로써 특히 협업 프로젝트에서 개발 생산성을 올려주는 유용한 도구입니다.\nPrettier는 대부분의 경우에 별다른 설정없이 그대로 사용할 수 있으나 간혹 개발팀의 입맛에 맞게 약간의 설정이 필요한 경우도 생길 수 있는데요. 이번 글에서는 Prettier의 설정 방법을 알아보고 자주 사용되는 옵션에 대해서 살펴보겠습니다. 자바스크립트에서 가장 많이 사용되는 코드 포맷터인 Prettier 자체에 대한 내용은 별도 포스팅에서 자세히 다루고 있으니 참고 바랍니다. Pret…","timeToRead":4,"fields":{"slug":"/js-prettier-config/","tags":["JavaScript","Prettier","Format"]},"frontmatter":{"title":"Prettier 상세 설정 가이드","date":"Aug 5, 2023"}},{"excerpt":"웹 개발에서 URL을 다루는 일은 참 빈번하게 발생하죠?\n프론트엔드에서는 URL로 다른 웹페이지로 링크를 걸고, CSS와 자바스크립트 코드를 불러오며, 이미지, 오디오, 비디오와 같은 멀티미디어도 제공할 수 있습니다.\n반면에 백엔드에서는 요청 URL의 경로에 따라서 DB에 저장되어 있는 데이터를 조회하고 URL의 쿼리 스트링으로 넘어온 매개변수에 따라서 다른 데이터 처리를 해줄 수 있습니다. 이번 글에서는 웹 주소를 좀 더 안전하게 다룰 수 있도록 도와주는 자바스크립트의 URL API에 대해 알아보겠습니다. URL이란? 우리는 거…","timeToRead":6,"fields":{"slug":"/js-url-api/","tags":["JavaScript","Node.js","API","URL"]},"frontmatter":{"title":"자바스크립트의 URL API로 웹 주소 다루기","date":"Aug 5, 2023"}},{"excerpt":"자바스크립트에서 부분 문자열이 필요하실 때 substr()을 쓰시나요 아니면 substring()을 쓰시나요?\n혹시 이 두 함수가 동일하다고 생각하시고 계셨나요? 🤪 이 이름이 비슷한 두 함수는 둘 다 문자열의 일부를 추출하여 반환하는 기능을 수행하지만 사용 방법과 동작 방식에서 미묘한 차이가 있는데요.\n이번 글에서는 substr()와 substring() 함수에 대해 자세히 알아보고 각각의 특징과 어떤 점이 같고 어떤 점이 다른지에 대해서 살펴보겠습니다. substr() 함수 먼저 살펴볼 substr() 함수는 문자열의 일부를 …","timeToRead":4,"fields":{"slug":"/js-substr-substring/","tags":["JavaScript","string"]},"frontmatter":{"title":"자바스크립트 문자열 자르기: substr()과 substring() 함수","date":"Aug 2, 2023"}},{"excerpt":"CSS로 웹사이트의 레이아웃을 잡다보면 어떤 HTML 요소의 높이를 브라우저의 화면에 맞추고 싶을 때가 있죠?\n웹 페이지의 풋터(footer) 영역을 화면 하단에 붙이고 싶을 때도 그렇고 모바일에서는 네비게이션 버튼을 화면 하단에 두기도 하니까요. 이번 글에서는 CSS로 화면 높이의 HTML 요소 만드는 다양한 방법에 대해서 알아보겠습니다. 흔히 범하는 실수 CSS 초보자들이 HTML 요소의 높이를 스타일할 때 하기 쉬운 실수가 있는데요.\n바로 무작정 height 속성을 100%로 설정하고 해당 요소의 높이가 화면 높이만큼 커질 …","timeToRead":4,"fields":{"slug":"/css-screen-height/","tags":["CSS","HTML","viewport","height"]},"frontmatter":{"title":"CSS로 화면 높이의 HTML 요소 만들기","date":"Aug 1, 2023"}},{"excerpt":"웹 개발자라면 200, 404, 500과 같은 HTTP 상태 코드에 대해 한 번쯤은 들어보셨을텐데요.\n경험을 통해서 이렇게 자주 보이는 코드에 대해서 막연히 감은 있으시지만, 실제로 내가 HTTP 상태 코드에 대해서 잘 알고 있는지에 대해서 스스로 의문이 들 때가 있으실 것입니다. 특히 백엔드 개발자라면 요즘에 웹이나 Rest API 개발을 간편하게 해주는 프레임워크가 워낙 잘 나와있다보니, 어떤 상태 코드를 응답하고 있는지에 대해서 오히려 소홀해 질 수 있는 것 같아요.\n이번 글에서는 웹 개발에 있어서 HTTP 상태 코드가 얼마…","timeToRead":9,"fields":{"slug":"/http-status-codes/","tags":["HTTP","response","status"]},"frontmatter":{"title":"웹 개발자를 위한 HTTP 상태 코드 안내서","date":"Jul 26, 2023"}},{"excerpt":"최근에 웹 개발에 대해서 얘기할 때 메타 프레임워크(Meta Framework)라는 용어를 한 번쯤 써보셨거나 적어도 들어보셨을텐데요.\n하지만 자주 쓰이는 용어임에도 불구하고 막상 메타 프레임워크가 뭔지 설명해보려고 하면 쉽지 않은 것 같죠? 이번 글에서는 요즘 유행하는 메타 프레임워크가 전통적인 프레임워크와 어떻게 다르며 왜 필요한지에 대해서 알아보았습니다.\n그리고 현재 시장에 어떤 메타 프레임워크가 주목받고 있는지도 간단히 살펴보겠습니다. 메타 프레임워크의 특징 우리가 기존에 프레임워크를 생각할 때는 보통 어떤 프로그래밍 언어…","timeToRead":5,"fields":{"slug":"/meta-frameworks/","tags":["terms","JavaScript","framework","library","SPA","SSG","SSR","React"]},"frontmatter":{"title":"메타 프레임워크 - 프레임워크를 위한 프레임워크","date":"Jul 18, 2023"}},{"excerpt":"배열 안의 값들을 원하는 순서로 정렬하는 것은 백엔드 프론트엔드 가라지 않고 빈번하게 필요한 작업인데요.\n자바스크립트에서 배열을 정렬할 때는 sort() 함수나 toSorted() 함수를 사용합니다. 이번 글에서는 이 두 함수를 사용하여 자바스크립트에서 배열을 정렬하는 기본적인 방법과 주의해야 할 부분에 대해서 알아보겠습니다. 배열의 sort() 함수 자바스크립트에서 배열을 정렬을 하는 가장 유명한 방법은 뭐니뭐니 해도 sort() 함수일텐데요. 배열을 상대로 sort() 함수를 호출하면 해당 배열 내의 값들이 오름차순으로 정렬됩…","timeToRead":6,"fields":{"slug":"/js-sort-to-sorted/","tags":["JavaScript","array","sort","ES6"]},"frontmatter":{"title":"자바스크립트 배열 정렬: sort()와 toSorted() 함수","date":"Jul 16, 2023"}},{"excerpt":"이번 글에서는 가드(Guard)를 활용하여 NestJS 앱을 위험한 요청으로 부터 효과적으로 보호하는 방법에 대해서 배워보도록 하겠습니다. 가드(Guard)란? NestJS에서 가드(guard)란 애플리케이션의 최전선에서 말그대로 애플리케이션을 보호하는 역할을 담당하는데요.\nNestJS로 들어오는 요청은 컨트롤러(controller) 단에 도달하기 전에 반드시 가드를 거쳐가도록 되어 있습니다. 가드를 이용하면 컨트롤러가 요청을 처리하기 전에 안전하지 않은 요청을 효과적으로 차단할 수 있습니다.\n따라서 애플리케이션 보안을 위해서 필…","timeToRead":5,"fields":{"slug":"/nestjs-guards/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","authentication","authorization","security"]},"frontmatter":{"title":"가드(Guard)로 NestJS 앱 안전하게 지키기","date":"Jul 12, 2023"}},{"excerpt":"많은 분들이 GitHub Actions을 사용하실 때 GitHub Marketplace에 공개된 액션을 사용하실텐데요.\n만약에 필요한 액션을 찾지 못했거나 회사에 보안 상의 이유로 승인되지 않은 외부 액션을 사용할 수 없다면 어떻게 해야할까요? 이번 글에서는 GitHub Actions에서 직접 액션을 만들어보고 워크플로우에서 사용하거나 GitHub Marketplace를 통해 공유하는 방법에 대해서 알아보겠습니다. 액션의 종류 GitHub Actions에서는 도커(Docker) 컨테이너 액션, 자바스크립트 액션, 복합(compos…","timeToRead":7,"fields":{"slug":"/github-actions-composite/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions에서 나만의 액션(action) 만들기","date":"Jul 5, 2023"}},{"excerpt":"웹사이트 개발을 하다보면 여러가지 이유로 내가 작성하지 않은 서드파티(3rd-party) 스크립트를 불러와야 하는 경우가 있습니다.\n대표적인 예로 Google Analytics와 같은 통계용 스크립트와 Google AdSense와 같은 광고용 스크립트를 들 수 있는데요. 이번 글에서는 웹 워커(Web Worker)라는 기술을 사용하여 이러한 서드파티 스크립트를 매우 빠르게 로딩해주는 혁신적인 라이브러리인 Partytown을 소개해드리겠습니다. 기존 스크립트 로딩 방식의 문제점 Partytown에 대해서 이야기하기 전에 기존에 웹에…","timeToRead":5,"fields":{"slug":"/partytown/","tags":["HTML","JavaScript","script","library"]},"frontmatter":{"title":"지연 없는 서드파티 스크립트 로딩을 위한 Partytown 🎉","date":"Jul 3, 2023"}},{"excerpt":"ChatGPT와 같은 LLM(Large Language Model, 대형 언어 모델)이 등장하면서 웹에서 텍스트를 스트리밍하는 사례가 점점 늘어나고 있는데요.\n그에 따라 별다른 라이브러리없이도 웹에서 스트림을 쓰고 읽을 수 있는 자바스크립트의 Streams API가 다시 주목받고 있는 것 같습니다. 이번 포스팅에서는 자바스크립트의 Streams API을 사용하여 스트림을 생성하고 데이터를 읽는 방법에 대해서 알아보겠습니다. 읽을 수 있는 스트림 생성 자바스크립트에서 데이터를 읽을 수 있는 스트림을 만들 때는 ReadableStre…","timeToRead":6,"fields":{"slug":"/js-readable-stream/","tags":["JavaScript","Node.js","API","library","streams"]},"frontmatter":{"title":"자바스크립트에서 데이터 스트림 읽기 (ReadableStream)","date":"Jul 1, 2023"}},{"excerpt":"GitHub Actions을 사용하다 보면 시간이 지남에 따라 워크플로우가 점점 복잡해지고, 그에 따라 중복되는 부분이 생기며 결국 워크플로우의 유지보수가 어려워지게 되는데요. 이번 포스팅에서는 GitHub Actions에서 워크플로우를 재사용하여 이러한 중복 설정 문제를 해결해보도록 하겠습니다. 실습 워크플로우 생성 실습을 위해서 자바스크립트 프로젝트의 전형적인 워크플로우 파일을 하나 작성해보았습니다.\nmain 브랜치로 새로운 커밋(commit)이 유입되면 애플리케이션을 빌드하여 배포하는 작업을 수행되도록 하겠습니다. 6개의 단…","timeToRead":5,"fields":{"slug":"/github-actions-reusable-workflows/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions에서 워크플로우 재사용하기","date":"Jun 30, 2023"}},{"excerpt":"깃허브(GitHub)는 개발자들이 소프트웨어 프로젝트를 관리하고 협업하는 데 필요한 다양한 기능을 제공하는 매우 인기있는 플랫폼인데요.\n일상적인 개발을 할 때는 깃허브의 웹사이트를 통해서 대부분의 작업을 처리할 수 있지만 개발 과정을 자동화하거나 다른 개발 도구와 통합할 때는 프로그래밍적으로 접근해야할 때가 있습니다. 이럴 때는 깃허브에서 제공하는 REST API를 사용하면 되는데요.\n이번 포스팅에서는 터미널에서 curl로 깃허브의 REST API를 실제로 같이 호출해보면서 기본적인 API 사용 방법에 대해서 알아보겠습니다. 터미…","timeToRead":10,"fields":{"slug":"/github-rest-api/","tags":["GitHub","REST","API"]},"frontmatter":{"title":"깃허브의 REST API 호출 방법","date":"Jun 23, 2023"}},{"excerpt":"우리가 코드를 관리하는 GitHub의 저장소(repository)에서는 여러가지 일(event)들이 일어날 수 있죠?\n개발자가 새로운 커밋(commit)을 푸시(push)할 수도 있고, 기여자(contributor)가 PR(pull request)을 제출하거나 사용자가 이슈(issue)를 보고할 수도 있습니다. GitHub Actions를 사용하면 이렇게 GitHub 저장소에서 일어나는 다양한 이벤트에 알아서 반응하도록 워크플로우(workflow)를 구성할 수 있는데요.\n이번 포스팅에서는 GitHub Actions에서 워크플로우를…","timeToRead":4,"fields":{"slug":"/github-actions-triggers/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions에서 워크플로우의 방아쇠를 설정하기","date":"Jun 18, 2023"}},{"excerpt":"소프트웨어 개발에서 아티팩트(Artifact)라는 용어는 보통 프로젝트에서 소스 코드를 빌드(build)한 결과물로 생성된 파일을 가리키는데요.\n이번 포스팅에서는 GitHub Actions의 아티팩트 기능을 활용하여 깃허브의 CI 서버에 파일을 올리거나 내려받는 방법에 대해서 알아보겠습니다. 실습 프로젝트와 코드 저장소 생성 간단한 실습을 위해서 Create React App을 통해 자바스크립트 프로젝트를 하나 생성하겠습니다. 그 다음 본인 깃허브 계정에 새로운 코드 저장소(repository)를 하나를 만들고 위에서 생성한 프로…","timeToRead":9,"fields":{"slug":"/github-actions-artifacts/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions의 아티팩트(Artifact)로 파일 올리거나 내려받기","date":"Jun 16, 2023"}},{"excerpt":"지난 포스팅에서 Zod로 스키마를 정의하는 다양한 방법에 대해서 알아보았는데요. Zod의 부가적인 기능이지만 알아두면 굉장히 유용한 입출력 간 데이터 변환에 대해서 알아보겠습니다. 내장 트랜스포머 Zod는 입출력 간 문자열 변환을 돕기 위해서 트랜스포머(transformer)를 내장하고 있는데요.\n대표적으로 .trim(), .toLowerCase(), .toUpperCase()를 들 수 있습니다. 그럼 이 3가지 내장 트랜스포머를 모두 사용해서 스키마를 하나 정의한 후에 데이터 변환을 해보겠습니다. 결과를 출력해보면 입력된 문자열…","timeToRead":4,"fields":{"slug":"/zod-transformation/","tags":["JavaScript","TypeScript","validation","library","Zod"]},"frontmatter":{"title":"Zod로 입출력 간 데이터 변환하기","date":"Jun 13, 2023"}},{"excerpt":"이전 포스팅에서는 Zod를 사용하여 하나의 스키마로 유효성 검증과 타입 선언을 한 번에 해결하는 방법에 대해서 살펴보았는데요. 이번 포스팅에서는 Zod에 제공하는 타입스크립트 친화적인 검증자를 사용하여 스키마를 정의하는 다양한 방법에 대해서 알아보도록 하겠습니다. 자료형 스키마 정의는 자료형울 명시하는 것부터 시작하는데요.\nZod는 자바스크립트의 기본 자료형이나 Date와 같은 내장 클래스에 대응하는 검증자(validator) 함수를 제공합니다. 예를 들어, 이메일, 나이, 활성화 여부, 생성 일자로 이루어진 사용자 객체를 나타내…","timeToRead":8,"fields":{"slug":"/zod-schema/","tags":["JavaScript","TypeScript","validation","library","Zod"]},"frontmatter":{"title":"Zod를 통한 타입스크립트 친화적인 스키마 정의","date":"Jun 12, 2023"}},{"excerpt":"이전 포스팅에서 타입스크립트로 코드를 작성하는 것과 무관하게 왜 자바스크립트 프로그램에서 유효성 검증이 필요한지에 대해서 알아보았는데요. 이번 포스팅에서는 최근 개발자들로부터 많은 인기를 끌고 있는 Zod를 사용하는 전반적인 방법에 대해서 알아보겠습니다. 라이브러리 설치 프로젝트에 zod라는 패키지를 npm으로 설치합니다. 그리고 Zod를 사용하실 때는 가급적 타입스크립트는 strict 모드로 쓰시기를 추천드릴게요. 이제 zod 패키지에서 z를 불러올 수 있으며, 이 녀석만 있으면 우리는 Zod의 모든 기능을 활용할 수 있습니다.…","timeToRead":3,"fields":{"slug":"/zod/","tags":["JavaScript","TypeScript","validation","library","Zod"]},"frontmatter":{"title":"Zod로 유효성 검증과 타입 선언의 두 마리 토끼 잡기","date":"Jun 10, 2023"}},{"excerpt":"“타입스크립트로 코드를 짜니까 별도로 유효성 검증은 필요없는 거 아니에요?” 타입스크립트를 공부하고 계시거나 자바스크립트 경험이 많지 않은 개발자들로 부터 종종 받는 질문인데요.\n정말 타입스크립트의 타입 검사가 자바스크립트의 유효성 검증을 대신할 수 있을까요? 이번 포스팅에서는 이러한 타입스크립트에 대한 오해를 풀어보는 시간을 갖도록 하겠습니다. 타입스크립트의 역할 이해를 돕기 위해서 타입스크립트로 간단한 코드를 함께 짜볼까요?\n사용자 계정을 나타내는 Account 인터페이스를 선언하고 이것을 입력으로 받는 processAccou…","timeToRead":6,"fields":{"slug":"/zod-why-validation/","tags":["JavaScript","TypeScript","validation","library","Zod"]},"frontmatter":{"title":"타입스크립트를 쓰는데도 유효성 검증이 필요할까?","date":"Jun 6, 2023"}},{"excerpt":"세트(Set)는 자바스크립트에서 고유한 값들의 집합을 다루는 자료구조입니다.\n이를 활용하면 데이터 중복을 제거하고 유일한 값들을 효과적으로 관리할 수 있는데요. 아무래도 세트가 ES6에서 추가된 기능이다 보니 아직도 많은 분들이 세트를 쓰면 딱인 경우에도 습관처럼 배열을 쓰시는 것 같습니다.\n뿐만 아니라 굳이 세트를 쓸 필요가 없는 상황에서 단지 새로운 기능이라고 세트를 오용/납용하시는 주니어분들도 심심치 않게 볼 수 있는데요. 이번 포스팅에서는 다양한 예제를 통해서 자바스크립트의 Set을 어떻게 사용하는지 아주 꼼꼼하고 차근차근…","timeToRead":6,"fields":{"slug":"/js-set/","tags":["JavaScript","TypeScript","set","ES6"]},"frontmatter":{"title":"자바스크립트 세트(Set) 완벽 가이드","date":"Jun 1, 2023"}},{"excerpt":"HTML에서 체크 박스나 라디오 버튼과 같이 양식(form)을 구성하는 요소들은 CSS로 스타일하기가 까다롭기로 악명이 높은데요.\n브라우저에서 제공하는 기본 스타일대로 두자니 너무 올드해보이고 직접 스타일을 하자니 다른 HTML 요소처럼 쉽게 스타일이 되지 않으니까요. 그런데 CSS 속성 딱 하나로 이렇게 스타일이 어려운 HTML 요소를 나름 그럴 듯하게 스타일할 수 있다는 사실을 알고 계셨나요?\n이번 포스팅에서는 최소한 노력으로 최대 스타일 효과를 낼 수 있는 CSS의 accent-color라는 유용한 속성을 소개해드리겠습니다.…","timeToRead":3,"fields":{"slug":"/css-accent-color/","tags":["CSS","form","input","progress"]},"frontmatter":{"title":"CSS의 accent-color 속성을 활용한 미니멀 스타일링","date":"May 30, 2023"}},{"excerpt":"우리가 버그가 없는 코드를 작성하기 위해서 사용하는 타입스크립트도 알고 보면 은근히 버그 투성이라는 것을 혹시 알고 계신가요? 이번 포스팅에서는 많은 개발자들이 타입스크립트로 코딩하다가 겪게 되는 황당한 경우에 대해서 알아보고, 이러한 타입스크립트의 버그를 깔끔하게 고쳐주는 ts-reset이라는 라이브러리를 소개해드리려고 합니다. 배열의 includes() 함수의 배신 배열에 특정 요소가 존재하는지를 확인하기 위해서 includes() 함수를 많이 사용하시죠?\n그런데 배열을 상대로 as const를 사용하여 읽기 전용(read-o…","timeToRead":8,"fields":{"slug":"/ts-reset/","tags":["TypeScript","JavaScript","library"]},"frontmatter":{"title":"ts-reset: 타입스크립트한테 뒤통수 맞지 않기","date":"May 25, 2023"}},{"excerpt":"예전에는 웹에서 너비와 높이가 제한된 상황에서 이미지를 효과적으로 보여주는 것이 쉽지가 않았는데요.\n그래서 이미지의 왜곡을 피하기 위해서 어쩔 수 없이 대신 배경 이미지를 사용해서 처리해야 하는 경우가 많았습니다. 하지만 다행히도 최근 몇 년 동안 CSS에서 이미지 요소를 다루는 방식이 상당히 개선되었습니다.\n이번 포스팅에서는 이미지를 보여주는 방식을 결정하는 CSS의 object-fit 속성에 대해서 다양한 예제를 통해 최대한 쉽게 설명해보겠습니다. 이미지 본래 크기 HTML에서 <img> 요소를 사용할 때 너비나 높이를 지정해…","timeToRead":6,"fields":{"slug":"/css-object-fit/","tags":["CSS","object-fit","object-position","HTML","img"]},"frontmatter":{"title":"CSS의 object-fit 속성으로 이미지를 왜곡없이 보여주기","date":"May 20, 2023"}},{"excerpt":"CSS에서는 포커스 상태를 스타일링하기 위해 focus, focus-visible, focus-within과 같은 가상 클래스(pseudo class)를 제공하는데요.\n그런데 이 녀석들이 이름이 묘하게 비슷해서 정확하게 언제 어떻게 쓰시는지에 대해서 햇갈려하시는 분들이 많은 것 같습니다. 이번 포스팅에서는 CSS의 focus와 focus-visible 그리고 focus-within 가상 클래스에 대해 자세히 알아보고, 각각이 나타내는 포커스 상황과 용도와 차이점을 비교해보겠습니다. HTML 요소의 포커스 상태 CSS의 포커스(fo…","timeToRead":5,"fields":{"slug":"/css-focus/","tags":["HTML","CSS","selectors","pseudo class","focus","a11y"]},"frontmatter":{"title":"CSS 포커스 관련 가상 클래스 사용법 :focus, :focus-visible, :focus-within","date":"May 17, 2023"}},{"excerpt":"파이썬에서 리스트(list)는 사전(dictionary)과 더불어 가장 널리 사용되는 내장 자료형입니다.\n이 두 가지 자료형은 파이썬 프로그래밍에서 필수적인 요소로 사용되지 않은 프로그램을 보기 힘들 정도이죠. 이번 포스팅에서는 다양한 예제를 통해서 파이썬에서 리스트를 어떻게 사용하는지 아주 꼼꼼하게 차근차근 알아보도록 하겠습니다. 참고로 사전(dictionary)에 대해서는 별도의 포스팅에서 아주 자세히 다루고 있습니다! 리스트의 특징 리스트(list)는 여러 데이터를 순서있게 담기 위해서 파이썬에서 가장 범용적으로 사용되는 자…","timeToRead":10,"fields":{"slug":"/python-list/","tags":["Python","list","BIF"]},"frontmatter":{"title":"파이썬 리스트(list) 완벽 가이드","date":"May 13, 2023"}},{"excerpt":"어떤 웹 프로젝트를 하든 브라우저의 내장 스타일에 영향을 최소화하면서 일관적인 UI를 구현하는 것은 매우 중요한 고려사항인데요.\n이번 포스팅에서는 Tailwind에서 제시하고 있는 이러한 CSS 초기화 문제에 대한 해답인 Preflight에 대해서 알아보겠습니다. Preflight란? Preflight는 Tailwind에서 가장 근간이 되는 기본 스타일시트(stylesheet)이며 Tailwind로 스타일한 웹 페이지가 어느 브라우저에서 열든 일관적으로 보이도록 해주는데요.\nTailwind를 사용하는 것을 “비행”이라고 비유하여 …","timeToRead":4,"fields":{"slug":"/tailwind-preflight/","tags":["CSS","HTML","normalize","reset","framework","Tailwind"]},"frontmatter":{"title":"Preflight: CSS 초기화에 대한 Tailwind의 해답","date":"May 11, 2023"}},{"excerpt":"Tailwind가 좋다는 소문을 듣고 막상 써보려고 해도 초기 설정에서 어려움을 겪을 수 있는데요.\ntailwindcss 패키지 뿐만 아니라 postcss, autoprefixer와 같은 추가적인 패키지 설치도 필요한데다가,\ntailwind.config.js와 postcss.config.js 등 설정이 다소 복잡하게 다가올 수 있기 때문입니다. 이러한 Tailwind의 진입 장벽을 느끼시는 분들을 위해서 이번 포스팅에서는 Play CDN을 사용해서 번거로운 초기 설정을 건너띄고 좀 더 간편하게 Tailwind를 써볼 수 있는 방법…","timeToRead":4,"fields":{"slug":"/tailwind-play/","tags":["CSS","HTML","framework","Tailwind"]},"frontmatter":{"title":"Play CDN으로 간편하게 Tailwind 시작하기","date":"May 9, 2023"}},{"excerpt":"Tailwind는 최근 웹 개발 분야에서 상당히 인기를 끌고 있는 차세대 CSS 프레임워크인데요.\n워낙 호볼호가 많이 갈리다보니 개발자 커뮤니티에서 단골 논쟁거리가 되기도 합니다. Tailwind에 대한 첫 번째 포스팅으로 이번 글에서는 Tailwind에 대한 기본 개념과 기존에 우리가 스타일링해온 방식과 비교해서 무엇이 다른지에 대해서 간략하게 알아보겟습니다. Tailwind란? Tailwind는 쉽게 말해 엄청나게 많은 유틸리티(utility) 클래스로 이루어진 CSS 프레임워크입니다.\nTailwind가 제공하는 유틸리티 클래…","timeToRead":5,"fields":{"slug":"/tailwind/","tags":["CSS","HTML","framework","Tailwind"]},"frontmatter":{"title":"Tailwind: 스타일링 시간을 단축하는 CSS 프레임워크","date":"May 4, 2023"}},{"excerpt":"웹, 모바일, 서버 등 다양한 환경에서 확장이 용이한 애플리케이션을 개발하기 위해서 전통적인 숫자 시퀀스 기반의 식별자 대신 랜덤 문자열 기반의 식별자를 많이 사용하는 추세인데요. 이번 포스팅에서는 이러한 문자열 기반의 고유 식별자를 빠르게 생성하기 위한 간편한 도구인 NanoID에 대해서 알아보겠습니다. NanoID란? 고유 문자열 식별자 생성기(unique string ID generator)기 하면 아마도 UUID(Universally Unique IDentifier)를 떠올리시는 분들이 많을 것 같은데요.\n대표적인 식별자 …","timeToRead":3,"fields":{"slug":"/nanoid/","tags":["JavaScript","ID","NanoID"]},"frontmatter":{"title":"NanoID: 작고 빠른 고유 식별자 생성기","date":"May 1, 2023"}},{"excerpt":"pip(Package Installer for Python)는 파이썬에 기본적으로 내장되어 있는 패키지 매니저입니다.\n이 명령줄 도구를 사용하면 Python Package Index에 다른 개발자들이 올려놓은 패키지를 쉽게 다운로드하고 설치할 수 있는데요. 이번 포스팅에서는 pip를 사용하여 패키지를 관리하는 기본적인 방법에 대해서 알아보겠습니다. pip 설치 여부 확인 pip는 파이썬만 설치하면 기본적으로 딸려서 설치가 되는데요.\n혹시 모르니 컴퓨터에 먼저 파이썬과 pip의 설치 여부를 확인하고 넘어가주세요. 패키지 설치 pip…","timeToRead":6,"fields":{"slug":"/python-pip/","tags":["Python","pip"]},"frontmatter":{"title":"파이썬의 패키지 매니저 pip 사용법","date":"Apr 28, 2023"}},{"excerpt":"유지보수가 용이하고 안정적으로 동작하는 NestJS API를 개발하려면 각각의 엔드포인트가 잘 작동하는지 확인하는 것이 필수적입니다. 이번 글에서는 Jest와 Supertest를 활용하여 효과적으로 NestJS 앱을 테스트하는 방법에 대해서 알아보겠습니다. 실습 프로젝트 구성 먼저 간단한 실습을 위해서 NestJS 프로젝트가 하나 필요할 것 같은데요.\n터미널에서 NestJS CLI 도구의 nest new 명령어를 실행하여 새로운 프로젝트를 구성하도록 하겠습니다. NestJS CLI를 설치하고 NestJS 프로젝트를 구성하는 기본적…","timeToRead":5,"fields":{"slug":"/nestjs-testing/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","testing","Jest"]},"frontmatter":{"title":"Jest와 Supertest 활용한 NestJS 테스트","date":"Apr 22, 2023"}},{"excerpt":"이번 포스팅에서는 ChatGPT API를 활용하여 파이썬으로 GhatGPT와 유사하지만 터미널 상에서 돌아가는 간단한 챗앱을 구현해보겠습니다. OpenAI API 키 설정 OpenAI에서 회원 가입 후에 API 키를 발급받는 방법은 별도 포스팅에서 자세히 다루었으니 참고 바랍니다. 사전 준비로 터미널을 열고 OPENAI_API_KEY라는 환경 변수에 OpenAI에서 발급받은 API 키를 설정해줍니다. 이렇게 API 키를 환경 변수로 저장해놓으면 Python 코드를 실행할 때 os 모듈의 getenv() 함수를 통해 쉽게 환경 변수…","timeToRead":3,"fields":{"slug":"/chatgpt-cli-python/","tags":["OpenAI","ChatGPT","API","Python","CLI","Terminal"]},"frontmatter":{"title":"ChatGPT 터미널 앱 파이썬으로 만들어보기","date":"Apr 20, 2023"}},{"excerpt":"이번 포스팅에서는 파이썬으로 ChatGPT API를 호출하는 방법에 대해서 알아보겠습니다. OpenAI API 키 설정 OpenAI에서 회원 가입 후에 API 키를 발급받는 방법은 별도 포스팅에서 자세히 다루었으니 참고 바랍니다. 사전 준비로 터미널을 열고 OPENAI_API_KEY라는 환경 변수에 OpenAI에서 발급받은 API 키를 설정해줍니다. 이렇게 API 키를 환경 변수로 저장해놓으면 Python 코드를 실행할 때 os 모듈의 getenv() 함수를 통해 쉽게 환경 변수를 읽어올 수 있습니다. Python에서 환경 변수를…","timeToRead":5,"fields":{"slug":"/chatgpt-python/","tags":["OpenAI","ChatGPT","API","Python"]},"frontmatter":{"title":"파이썬으로 ChatGPT API를 호출하는 방법","date":"Apr 18, 2023"}},{"excerpt":"이번 포스팅에서는 ChatGPT API를 활용하여 자바스크립트로 GhatGPT와 유사하지만 터미널 상에서 돌아가는 간단한 챗앱을 구현해보겠습니다. 사전 준비 최대한 간단한 예제를 위해서 GhatGPT API를 호출할 때 외부 라이브러리를 사용하지 않고 Node.js에 내장되어 있는 fetch() 함수를 사용하려고 합니다.\nNode.js에서는 v17.5 이상부터 fetch() 함수를 지원하고 있으므로 본인 컴퓨터에 v17.5 이전 Node.js가 설치되어 있다면 현재 LTS 버전인 v18로 업그레이드를 추천드리겠습니다. 원격 API…","timeToRead":4,"fields":{"slug":"/chatgpt-cli-js/","tags":["OpenAI","ChatGPT","API","Javascript","CLI","Terminal"]},"frontmatter":{"title":"ChatGPT 터미널 앱 자바스크립트로 만들어보기","date":"Apr 14, 2023"}},{"excerpt":"이번 포스팅에서는 터미널에서 curl을 이용하여 ChatGPT API 직접 호출해보면서 ChatGPT와 어떻게 메시지를 주고 받을 수 있는지 알아보겠습니다. 터미널에서 간단한 명령어를 입력하여 웹 페이지나 API 데이터를 요청하고 받을 수 있는 HTTP 클라이언트 도구인 curl에 대한 자세한 설명은 관련 포스팅을 참고 바랍니다. ChatGPT API 키 발급 ChatGPT API를 사용하려면 반드시 OpenAI의 API 키가 있어야 합니다.\nAPI키가 없으신 분들은 이전 글을 따라서 OpenAI 웹사이트에 가입을 하시고 API …","timeToRead":6,"fields":{"slug":"/chatgpt-curl/","tags":["OpenAI","ChatGPT","API","curl"]},"frontmatter":{"title":"터미널에서 curl로 ChatGPT API 호출 해보기","date":"Apr 12, 2023"}},{"excerpt":"이번 포스팅에서는 ChatGPT 앱 개발을 위한 첫걸음인 API 키를 발급 받는 방법에 대해 알아보겠습니다. ChatGPT API OpenAI에서는 누구나 ChatGPT를 기반으로 새로운 애플리케이션을 개발하거나 기존 서비스에 ChatGPT를 통합하기 용이하도록 ChatGPT API를 제공하는데요.\nChatGPT API는 OpenAI에서 제공하는 인공지능 모델을 활용하여 자연어 대화를 생성하는 기능을 제공합니다. 구글이나 페이스북의 API처럼 ChatGPT API는 HTTP 프로토콜 기반 Rest API 형태로 되어 있어 네트워크…","timeToRead":2,"fields":{"slug":"/chatgpt-api-keys/","tags":["OpenAI","ChatGPT","API"]},"frontmatter":{"title":"ChatGPT 앱 개발을 위한 API 키 발급 받기","date":"Apr 10, 2023"}},{"excerpt":"이번 포스팅에서는 Passport.js라는 자바스크립트 프레임워크를 사용하여 Bearer 토큰 기반 API 인증을 구현해보겠습니다. 본 포스팅의 예제 코드는 ES 모듈 문법을 사용하여 작성되었습니다. Node.js에서 ES 모듈을 사용하는 방법은 별도 포스팅에서 자세히 다루고 있으니 참고 바랍니다. Bearer 토큰이란? Bearer 토큰은 HTTP 요청에서 인증 정보를 전달하는 방법으로 클라이언트가 서버에 접근할 때 인증을 위해 널리 사용됩니다.\n일반적으로 클라이언트가 서버에 요청을 보낼 때 HTTP 요청의 Authorizati…","timeToRead":5,"fields":{"slug":"/js-passport-bearer/","tags":["JavaScript","authentication","security"]},"frontmatter":{"title":"Passport.js로 Bearer 토큰 기반 API 인증 구현하기","date":"Apr 5, 2023"}},{"excerpt":"우리는 인터넷을 통해 누군가가 공유한 창작물을 통해 쉽게 접하고, 그 창작물을 또 다른 타인에게 공유하거나 편집해서 새로운 창작물을 만들어내는 게 아주 자연스러운 시대를 살고 있습니다. 이번 포스팅에서는 저작권을 보호하기 위해서 많이 사용되고 있는 크리에이티브 커먼즈(Creative Commons) 라이선스에 대해서 알아보겠습니다. 저작권이란? 크리에이티브 커먼즈 라이선스에 대해서 알아보기 전에 저작권(copyright)에 대해서 간단하게 짚고 넘어가면 좋을 것 같습니다. 저작권은 쉽게 말해서 저작자가 소유하고 있는 창작물에 대한…","timeToRead":7,"fields":{"slug":"/creativecommons/","tags":["copyright","CC"]},"frontmatter":{"title":"저작권 보호와 크리에이티브 커먼즈 라이선스","date":"Apr 3, 2023"}},{"excerpt":"웹 개발을 하실 때 HTML에서 뛰어쓰기를 위해서 &nbsp;를 사용하시는 분을 종종 보게 되는데요.\n이렇게 무분별하게 &nbsp;를 사용하면 큰 낭패를 볼 수 있다는 사실을 알고 계시나요? 이번 포스팅에서는 사실 공백 문자랑은 완전히 용도가 다른 &nbsp;에 대해서 한번 알아보도록 하겠습니다. 줄바꿈을 일으키는 공백 일반적으로 웹에서는 텍스트가 너무 길어서 요소 내에 주어진 가로 폭을 넘어갈 때는 자동으로 줄바꿈이 일어나는데요.\n예를 들어 너비가 250px인 <div> 요소 안에 긴 문장을 넣으면 다음과 같이 알아서 적당한 위…","timeToRead":4,"fields":{"slug":"/html-nbsp/","tags":["HTML","white-space"]},"frontmatter":{"title":"HTML에서 &nbsp;를 언제, 왜 써야할까?","date":"Apr 1, 2023"}},{"excerpt":"Netlify에 웹사이트를 배포하면 기본적으로 <웹사이트명>.netlify.app이라는 무료 도메인 네임(domain name)을 주는데요.\n취미 프로젝트라면 이 기본 무료 도메인만 사용해도 큰 지장이 없겠지만 대부분의 실제로 운영되는 웹사이트는 유료로 구매한 도메인 이름을 사용해야 할 것입니다. 이렇게 Netlify 사용자가 별도로 구매해서 Netlify에서 주는 도메임 대신에 사용하는 도메인 네임을 소위 커스텀(custom) 도메인 네임이라고 하는데요.\n이번 포스팅에서는 Netlify에 배포한 웹사이트에 커스텀(custom) …","timeToRead":4,"fields":{"slug":"/netlify-custom-domain/","tags":["Netlify","DNS","network"]},"frontmatter":{"title":"Netlify에서 커스텀 도메인 사용과 DNS 설정","date":"Mar 28, 2023"}},{"excerpt":"많은 웹 개발자분들이 HTML 문서 내에서는 띄어쓰기를 여러 번 하더라도 한 번만 띄어쓰기가 되고, 들여쓰기나 줄바꿈이 무시되는 현상을 한번 쯤은 경험하셨을텐데요.\n사실 이러한 HTML 요소 내의 공백 처리 방식은 CSS의 white-space 속성을 이용하여 쉽게 변경할 수가 있다는 사실을 알고 계셨나요? 공백 문자 우선 HTML에서 어떤 문자를 이용해서 공백을 나타낼 수 있는지 이해할 필요가 있는데요.\n바로 띄어쓰기(\\s), 들여쓰기(\\t), 줄바꿈(\\n)이 대표적으로 공백을 나타내는 문자지요? 이러한 문자들을 아무리 연속해서…","timeToRead":5,"fields":{"slug":"/css-white-space/","tags":["HTML","CSS","white-space"]},"frontmatter":{"title":"CSS의 white-space 속성 사용법","date":"Mar 21, 2023"}},{"excerpt":"이번 포스팅에서는 자바스크립트로 어떻게 JWT 토큰을 발급하고 검증하는지에 대해서 알아보겠습니다. jsonwebtoken 패키지 설치 우선 Node.js의 패키지 매니저인 npm을 이용하여 jsonwebtoken 패키지를 설치하겠습니다. jsonwebtoken는 JWT 표준 명세서를 자바스크립트 언어로 구현하고 있는 라이브러리입니다.\n따라서 JWT 기반으로 사용자 인증이나 인가를 하는 자바스크립트 서버 애플리케이션에서는 직접적으로든 간접적으로든 (passport-jwt와 같은 프레임워크를 통해서) jsonwebtoken 라이브러리…","timeToRead":6,"fields":{"slug":"/js-jwt/","tags":["JavaScript","Node.js","security","authentication","authorization","JWT"]},"frontmatter":{"title":"자바스크립트로 JWT 토큰을 발급하고 검증하기","date":"Mar 18, 2023"}},{"excerpt":"이번 포스팅에서는 Json Web Token, 줄여서 흔히 JWT라고 불리는 사용자 인증/인가 수단 대해서 알아보도록 하겠습니다. JWT 란? JWT(Json Web Token)는 말그대로 웹에서 사용되는 JSON 형식의 토큰에 대한 표준 규격인데요.\n주로 사용자의 인증(authentication) 또는 인가(authorization) 정보를 서버와 클라이언트 간에 안전하게 주고 받기 위해서 사용됩니다. JWT 토큰 웹에서 보통 Authorization HTTP 헤더를 Bearer <토큰>의 형태로 설정하여 클라이언트에서 서버로 …","timeToRead":3,"fields":{"slug":"/jwt/","tags":["security","authentication","authorization","JWT","OAuth","OIDC"]},"frontmatter":{"title":"JWT - Json Web Token","date":"Mar 15, 2023"}},{"excerpt":"NestJS 앱을 개발,테스트, 운영 등 다양한 환경에 배포하려면 어느 환경에 배포하느냐에 따라서 다르게 설정되야하는 값들이 생기기 마련이죠? 이번 포스팅에서는 NestJS 앱에서 이렇게 환경 별로 달라지는 설정 값들을 어떻게 효과적으로 관리할 수 있는지 알아보겠습니다. 실습 프로젝트 구성 먼저 간단한 실습을 위해서 NestJS 프로젝트가 하나 필요할 것 같은데요.\n터미널에서 NestJS CLI 도구의 nest new 명령어를 실행하여 새로운 프로젝트를 구성하도록 하겠습니다. NestJS CLI를 설치하고 NestJS 프로젝트를 …","timeToRead":9,"fields":{"slug":"/nestjs-configuration/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","config"]},"frontmatter":{"title":"NestJS 앱의 환경 설정","date":"Mar 11, 2023"}},{"excerpt":"웹 개발을 하다보면 아래와 같이 종종 영단어가 너무 길어서 모바일 환경과 같이 좁은 뷰포트(viewport)에서 부모 요소 밖으로 밀려나오는 경우를 접할 수 있는데요.\n꼭 영문 웹사이트가 아니더라도 요즘에는 한국어 컨텐츠에도 워낙 외래어가 많이 사용되고, 게다가 인터넷 URL과 이메일 주소가 대부분 영어로 되어 있어서 의외로 한국어 웹시아트를 구현할 때도 쉽게 겪을 수 있는 문제입니다. 이번 포스팅에서는 웹에서 이렇게 원치 않게 부모 요소 밖으로 삐져나오는 영단어를 처리하는 다양한 방법에 대해서 알아보겠습니다. 영어와 한국어의 줄…","timeToRead":5,"fields":{"slug":"/css-long-words/","tags":["HTML","CSS","overflow","shy","overflow-wrap","hyphens","word-break","text-overflow"]},"frontmatter":{"title":"부모 요소 밖으로 삐져나오는 긴 영단어 처리법","date":"Mar 6, 2023"}},{"excerpt":"최근에 ORM으로 Prisma를 선택하는 자바스크립트 또는 타입스크립트 프로젝트가 부쩍 많아진 느낌입니다.\n이번 포스팅에서는 차세대 ORM 프레임워크로 각광받고 있는 Prisma에 대해서 함께 알아볼까요? Prisma란? Prisma는 자바스크립트와 타입스크립트 커뮤니티에서 주목받고 있는 차세대 ORM(Object Relational Mapping) 프레임워크입니다. 데이터베이스와 상호작용을 하는 응용 애플리케이션을 개발할 때 프로그래머가 직접 SQL을 작성하지 않아도 되어 개발 생산성을 높여준다는 측면에서는 기존의 Sequeli…","timeToRead":7,"fields":{"slug":"/prisma/","tags":["Prisma","ORM","framework","JavaScript","TypeScript","CLI","GUI","Node.js"]},"frontmatter":{"title":"Prisma 처음 시작하기","date":"Mar 1, 2023"}},{"excerpt":"우리는 보통 웹페이지를 2차원 공간으로 생각하고 웹 개발을 하는 경우가 많은데요.\n하지만 복잡한 웹페이지를 구현할 때는 마치 3차원 공간처럼 요소를 앞뒤로 겹쳐서 배치해야 경우가 생기기 마련이죠. 이번 포스팅에서는 이렇게 웹에서 요소의 Z축 방향의 깊이를 결정하는 CSS의 z-index 속성에 대해서 배워보겠습니다. z-index가 없을 때 요소 간 상대적 깊이 z-index 속성에 대해서 배우기 전에 먼저 z-index가 없을 때 어떻게 요소(element) 간의 상대적 깊이가 결정되는지에 대해서 이해하는 것이 중요한데요.\nz-…","timeToRead":8,"fields":{"slug":"/css-z-index/","tags":["CSS","HTML","z-index"]},"frontmatter":{"title":"CSS의 z-index 속성 이해하기","date":"Feb 23, 2023"}},{"excerpt":"마이크로서비스(microservices) 아키텍처나 분산 시스템 환경에서는 모든 서비스가 정상적으로 살아서 동작하는지를 검사하는 것이 매우 중요합니다.\n이를 위해서 각 서비스에 생존 여부(liveness)와 가용 여부(readiness)를 응답해주는 HTTP 엔드포인트(endpoint)가 필요하기 마련인데요. 이번 포스팅에서는 NestJS 앱에서 이러한 엔드포인트(endpoint)를 어떻게 구현할 수 있는지에 대해서 알아보도록 하겠습니다. 실습 프로젝트 구성 먼저 간단한 실습을 위해서 NestJS 프로젝트가 하나 필요할 것 같은데…","timeToRead":7,"fields":{"slug":"/nestjs-health/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","health"]},"frontmatter":{"title":"NestJS의 liveness/readiness 엔드포인트","date":"Feb 20, 2023"}},{"excerpt":"이번 포스팅에서는 체크박스(checkbox)를 사용하여 사용자와 다양하게 상호작용을 할 수 있는 React 컴포넌트를 작성해보도록 하겠습니다. Checkbox 컴포넌트 구현 웹에서 체크박스가 쓰이는 가장 흔한 사례는 사용자로 부터 어떤 동의를 받기 위함일텐데요.\n이렇게 서로 관련이 없는 체크박스가 하나 이상 필요할 때 유용하게 쓸 수 있는 React 컴포넌트를 먼저 구현해보겠습니다. 체크박스는 HTML에서 <input> 요소의 type 속성을 checkbox로 설정해주면 얻을 수 있는데요.\n텍스트를 클릭햇을 때도 라디오 버튼이 선…","timeToRead":6,"fields":{"slug":"/react-checkboxes/","tags":["JavaScript","CSS","React","checkbox","context","form"]},"frontmatter":{"title":"React에서 체크박스 사용하기","date":"Feb 5, 2023"}},{"excerpt":"타입스크립트(Typescript)가 대중화되면서 나타나는 흥미로운 현상이 있는데요.\n바로 기존에 자바스크립트(JavaScript)에서 비교적 등한시되던 자료형(data type)에 많은 개발자들이 다시 관심을 갖게 되었다는 점입니다. 이번 포스팅에서는 자바스크립트의 9가지 자료형과 typeof 연산자를 통해서 자료형을 파악하는 방법에 대해서 알아보겠습니다. typeof 연산자 우선 본 포스팅에서 전체에 걸쳐 빈번하게 사용하게 될 자바스크립트의 typeof 연산자에 대해서 짚고 넘어갈까요? 기본적으로 typeof 연산자는 바로 뒤에…","timeToRead":5,"fields":{"slug":"/js-typeof/","tags":["JavaScript","TypeScript","typeof"]},"frontmatter":{"title":"자바스크립트의 자료형과 typeof 연산자","date":"Feb 1, 2023"}},{"excerpt":"이번 포스팅에서는 React의 Children API를 사용해서 컴포넌트의 children prop을 다루는 방법에 대해서 다뤄보겠습니다. Children API의 필요성 먼저 React에서 Children라는 API가 왜 필요한지에 대해서 간단하게 짚고 넘어가겠습니다. 우선 이름이 비슷해서 컴포넌트의 children prop과 Children API이 헛갈리게 쉬운데요.\n소문자로 시작하는 children은 소외 props라고 일컫는 컴포넌트 함수의 매개 변수가 가지고 있는 하나의 속성이며 이를 통해 컴포넌트의 자식이 넘어오게 됩…","timeToRead":7,"fields":{"slug":"/react-children/","tags":["JavaScript","React","Children"]},"frontmatter":{"title":"React의 Children API 사용법","date":"Jan 21, 2023"}},{"excerpt":"로깅(logging)은 애플리케이션에서 발생하는 각종 이벤트에 대한 기록을 남기고 문제 발생 시 원인을 파악하는데 핵심적인 역할을 하는데요.\n이번 포스팅에서는 NestJS 앱에서 어떻게 로거(logger)를 사용하고 커스터마이징(customizing)할 수 있는지 알아보겠습니다. 실습 프로젝트 구성 먼저 간단한 실습을 위해서 NestJS 프로젝트가 하나 필요할 것 같은데요.\n터미널에서 NestJS CLI 도구의 nest new 명령어를 실행하여 새로운 프로젝트를 구성하도록 하겠습니다. NestJS CLI를 설치하고 NestJS 프…","timeToRead":6,"fields":{"slug":"/nestjs-logging/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","logging","logger"]},"frontmatter":{"title":"NestJS에서 로깅(logging)하기","date":"Jan 11, 2023"}},{"excerpt":"분산 시스템 환경에서 가장 흔하게 접할 수 있는 백엔드(backend) 애플리케이션은 아마도 특정한 도메인의 데이터를 관리해주는 REST API일 텐데요.\n이번 포스팅에서는 NestJS를 이용하면 얼마나 효과적으로 이러한 전형적인 REST API를 개발할 수 있는지 알아보겠습니다. 실습 프로젝트 구성 먼저 간단한 실습을 위해서 NestJS 프로젝트가 하나 필요할 것 같은데요.\n터미널에서 NestJS CLI 도구의 nest new 명령어를 실행하여 새로운 프로젝트를 구성하도록 하겠습니다. NestJS CLI를 설치하고 NestJS …","timeToRead":8,"fields":{"slug":"/nestjs-rest-api/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","REST","API","CLI"]},"frontmatter":{"title":"NestJS로 REST API 찍어내기","date":"Jan 9, 2023"}},{"excerpt":"최근에 NestJS로 시작하는 백엔드(backend) 프로젝트가 부쩍 많아진 느낌입니다.\n이번 포스팅에서는 차세대 웹 프레임워크로 각광받고 있는 NestJS에 대해서 함께 알아보려고 합니다. NestJS란? NestJS는 자바스크립트나 타입스크립트로 서버 애플리케이션을 개발할 수 있는 백엔드 웹 프레임워크(Web framework)입니다.\n다른 프로그래밍 언어에서 넘어오신 분이라면 자바의 스프링(Spring)이나 파이썬의 장고(Django)를 생각하시면 이해가 쉬우실 것 같네요. 자바스크립트 쪽에서는 상당히 오랫동안 Express…","timeToRead":9,"fields":{"slug":"/nestjs/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript","CLI"]},"frontmatter":{"title":"NestJS 처음 시작하기","date":"Jan 4, 2023"}},{"excerpt":"Happy New Year! 2023년 새해가 밝았네요. 🎊 컨테이너 관리 도구를 직접 개발하는 것은 매우 어려운 일이기 때문에, AWS에서는 다양한 완전 관리형 컨테이너 오케스트레이션 서비스를 제공하고 있습니다.\n이번 포스팅에서는 AWS에서 사용할 수 있는 다양한 컨테이너(container) 서비스에 대해서 살펴보도록 하겠습니다. ECS Amazon Elastic Container Service, 줄여서 ECS는 AWS에서 가장 오래된 컨테이너 서비스로서 도커(Docker) 컨테이너를 사용할 수 있도록 해주는 서비스입니다. EC…","timeToRead":2,"fields":{"slug":"/aws-container-services/","tags":["AWS","container","ECS","EKS","ECR","Fargate","Docker","Kubernetes"]},"frontmatter":{"title":"AWS 컨테이너 서비스 훑어보기","date":"Jan 1, 2023"}},{"excerpt":"이번 포스팅에서는 AWS에 어떠한 이벤트(event) 기반 메시징(messaging) 서비스가 있는지 간단하게 살펴보도록 하겠습니다. SQS Amazon Simple Queue Service, 줄여서 SQS는 메시지 대기열(queue) 서비스인데요.\nEC2, S3와 함께 AWS에서 가장 역사가 깊은 서비스 중에 하나이며 그만큼 Amazon 내부에서도 오래전 부터 사용했었고 여러 해 동안 테스트가 되어서 아주 안정화된 서비스입니다. SQS는 일반적으로 두 개의 애플리케이션 사이에서 송수신되고 있는 메시지를 중간에서 담아 놓는 일종의…","timeToRead":2,"fields":{"slug":"/aws-messaging-services/","tags":["AWS","messaging","queue","SQS","SNS","Kinesis","MQ"]},"frontmatter":{"title":"AWS 메시징 서비스 훑어보기","date":"Dec 26, 2022"}},{"excerpt":"AWS에는 정말로 여러 종류의 데이터베이스 제품이 있어서 용도에 따라서 어떤 서비스를 써야할지 헛갈리가 쉬운데요.\n이번 포스팅에서는 AWS에서 제공하는 데이터베이스 관련 서비스를 간략하게 정리해보려고 합니다. RDS AWS에서 데이터베이스라고 하면 아마 많은 분들이 Amazon Relational Database Service, 줄여서 Amazon RDS라는 서비스를 떠올리실텐데요.\nRDS는 클라우드 환경에서 마치 온 프레미스(on-premises) 환경처럼 제약없이 원하는 데이터베이스 엔진을 쓰고 싶을 때 사용할 수 있는 AWS…","timeToRead":3,"fields":{"slug":"/aws-database-services/","tags":["AWS","DB","RDS","Aurora","ElastiCache","DynamoDB","DocumentDB","Neptune"]},"frontmatter":{"title":"AWS 데이터베이스 서비스 훑어보기","date":"Dec 14, 2022"}},{"excerpt":"Amazon EC2(Elastic Cloud Compute)를 사용할 때 순수하게 계산만 하는 경우가 아라면 데이터를 저장할 파일 시스템이 필요하기 마련인데요.\n이번 포스팅에서는 Amazon EC2에서 제공하는 다양한 블록 수준(block-level) 스토리지 옵션에 대해서 알아보겠습니다. aws-ec2-storage 이미지 출처: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html Amazon EBS (Elastic Block Storage) Amazon Elast…","timeToRead":2,"fields":{"slug":"/aws-ec2-storage/","tags":["AWS","EC2","Elastic Cloud Compute"]},"frontmatter":{"title":"Amazon EC2의 스토리지 옵션","date":"Dec 10, 2022"}},{"excerpt":"AWS Identity and Access Management, 줄여서 AWS IAM은 아마존 웹 서비스에서 보안 측면에서 매우 중요한 서비스입니다.\n하지만 마치 물과 공기처럼 너무 기본이 되는 서비스인데다가 별도로 과금도 안 되다 보니 오히려 소홀히 여겨지기도 쉬운 것 같습니다. 이번 포스팅에서는 AWS IAM을 통해서 접근 통제의 기본 개념을 함께 이해해보는 시간을 가져보려고 합니다.\nAWS IAM 자체를 어떻게 사용하는지는 인터넷에 이미 튜토리얼이 많으므로 굳이 다루지 않겠습니다. AWS IAM 서비스 AWS에서 권한이란 어…","timeToRead":4,"fields":{"slug":"/aws-iam/","tags":["AWS","IAM","Identity and Access Management"]},"frontmatter":{"title":"AWS IAM으로 배우는 접근 통제의 기본 개념","date":"Dec 6, 2022"}},{"excerpt":"이번 포스팅에서는 CSS에서 height 속성을 사용할 때 흔히 겪을 수 있는 문제점과 min-height 속성을 사용하여 이러한 문제를 쉽게 예방하는 방법에 대해서 살펴보았습니다. height 속성의 기본값 height 속성을 명시해주지 않으면 auto라는 키워드가 기본값으로 사용이 되는데요.\nheight 속성이 auto로 설정되어 있는 요소는 내부 컨텐츠를 해당 요소를 딱 맞게 담을 수 있을만큼 높이가 자동 결정됩니다. 이 기본값 덕분에 우리가 height 속성을 별도로 명시해주지 않아도 요소의 높이는 화면 크기에 따라서 자동…","timeToRead":3,"fields":{"slug":"/css-min-height/","tags":["CSS","HTML","height"]},"frontmatter":{"title":"CSS에서 height 대신에 min-height를 사용해야 하는 이유","date":"Dec 1, 2022"}},{"excerpt":"자바스크립트만 하시다가 처음으로 타입스크립트를 하시게 되면 매우 흔하게 겪는 문제가 있습니다.\n바로 자바스크립트에서 하던데로 객체를 순회하는 코드를 짜다보면 자꾸 예상치 못한 타입 오류에 부딪치게 되는 것인데요. 이번 포스팅에서는 객체를 순회하다가 발생할 수 있는 타입 오류를 해결하는 방법에 대해서 알아보겠습니다. Object.keys() 간단한 실습을 위해서 TypeScript Playground에서 객체를 순회하는 코드를 같이 작성해볼까요?\nObject.keys() 함수로 객체의 키 배열을 얻고, 이 배열을 forEach() …","timeToRead":5,"fields":{"slug":"/ts-object-iteration/","tags":["TypeScript","JavaScript","iteration","for"]},"frontmatter":{"title":"객체를 순회하다가 발생하는 타입스크립트 오류 해결하기","date":"Nov 25, 2022"}},{"excerpt":"이번 포스팅에서는 CSS에서 SVG 이미지를 배경으로 사용하는 방법을 간단한 실십을 통해 알아보겠습니다. 실습 시작 코드 HTML로 <div> 요소 3개를 만들고, 2번째 <div> 요소와 3번째 <div> 요소의 클래스를 각각 check와 heart로 설정해주겠습니다. CSS로는 글꼴 크기와 배경색과 같은 기본 스타일링을 해주었으며, SVG 이미지가 보일 자리를 확보하기 위해서 좌측 여백을 좀 크게 주었습니다. 이제부터 check와 heart 클래스에 스타일을 추가하여 2번째 <div> 요소와 3번째 <div> 요소 앞에 각각 …","timeToRead":5,"fields":{"slug":"/css-svg-background/","tags":["HTML","CSS","SVG","background"]},"frontmatter":{"title":"CSS에서 SVG 이미지를 배경으로 사용하기","date":"Nov 19, 2022"}},{"excerpt":"웹에서 이미지 아래나 옆에 의도치 않게 공백이 생겨서 애를 먹는 경우가 있는데요.\n이번 포스팅에서는 언제 이렇게 이미지 주변에 불필요한 공백이 생길 수 있으며, 이 것을 효과적으로 제거하는 다양한 요령을 알려드리겠습니다. 이미지 아래에 생기는 공백 <div>나 <figure>와 같은 HTML 요소 안에 이미지를 담고 있는 <img> 요소를 넣어보겠습니다. 이미지 아래에 살짝 공백이 생긴 것이 보이시나요? 🤨 이미지 아래에 이러한 공백이 생기는 이유는 <img> 요소의 display 속성이 기본적으로 inline이기 때문인데요.\n다…","timeToRead":6,"fields":{"slug":"/css-img-extra-space/","tags":["HTML","CSS","img","inline","Flexbox"]},"frontmatter":{"title":"이미지 주변에 생기는 불필요한 공백 제거하기","date":"Nov 12, 2022"}},{"excerpt":"이번 포스팅에서는 파이썬에서 연산자를 이용해서 나눗셈을 하는 방법에 대해서 간단히 알아보고, 몫과 나머지를 동시에 구할 때 사용하는 divmod() 내장 함수에 대해서도 알아보겠습니다. 나누기 연산자 파이썬은 특이하게도 2가지 나누기 연산자를 제공하는데요.\n첫 번째는 실수 나누기 연산자인 /이고, 두 번째는 정수 나누기 연산자인 //입니다. 이 두 종의 나누기 연산자는 나머지가 없는 경우에는 동일한 값을 반환하는데요. 하지만 엄밀히 얘기하면 이 두 값의 자료형(data type)은 각각 실수와 정수로 차이가 있습니다. 그럼 나눗셈…","timeToRead":2,"fields":{"slug":"/python-divmod/","tags":["Python","BIF","divmod"]},"frontmatter":{"title":"파이썬의 divmod() 내장 함수로 나눗셈하기","date":"Nov 6, 2022"}},{"excerpt":"HTML에서 리스트를 만들 때 사용하는 <ul>, <ol>, <li> 요소는 다른 HTML 요소에서 사용하지 않는 특수한 CSS 속성이 많이 사용되서 스타일하기가 좀 까다로운 편인데요. 이번 포스팅에서는 HTML의 <ul> 또는 <ol> 요소로 마크업이 되는 리스트(list)와 <li> 요소로 마크업되는 리스트 아이템(list item)을 CSS로 스타일하는 요령에 대해서 자세히 정리해보겠습니다. HTML로 리스트 마크업 HTML에서 리스트는 <ul> 또는 <ol> 요소로 마크업 할 수 있는데요.\n순서가 중요하지 않은 경우에는 <…","timeToRead":6,"fields":{"slug":"/css-html-ul-ol-li/","tags":["CSS","HTML","list","a11y","marker"]},"frontmatter":{"title":"HTML 리스트 CSS 스타일링 가이드: <ul>, <ol>, <li>","date":"Nov 2, 2022"}},{"excerpt":"이번 포스팅에서는 CSS에 비교적 최근에 추가된 의사 클래스(pseudo class) 함수인 :where()에 대해서 알아보겠습니다. 기본 문법 :where() 의사 클래스 함수는 인자로 여러 개의 선택자를 쉼표(,)로 구분하여 넘길 수 있습니다. 위와 같은 CSS 규칙은 마치 아래와 같이 CSS 코드를 작성한 효과가 발생하게 되는데요. 여기까지만 보면 뭐하러 굳이 :where() 함수를 사용해야될까 싶죠? 😅 지금부터 사례를 통해서 :where()를 사용하면 어떠한 이점이 있는지 살펴보겠습니다. 여러 상태 스타일링 :where(…","timeToRead":4,"fields":{"slug":"/css-where/","tags":["CSS","selectors","pseudo classes"]},"frontmatter":{"title":"CSS의 :where() 의사 클래스 함수","date":"Oct 23, 2022"}},{"excerpt":"이번 포스팅에서는 CSS Reset(리셋)과 CSS Normalize(노멀라이즈)에 대해서 알아보도록 하겠습니다. CSS Normalize와 CSS Reset의 필요성 세상에서는 여러 가지 브라우저가 있으며 우리가 만든 웹사이트나 웹 애플리케이션이 이 중 어떤 브라우저에서 돌아갈지는 알 수 없습니다.\n여기서 문제는 소위 User Agent Stylesheet라고 불리는 브라우저 내장 스타일이 브라우저마다 조금씩 다르다는 것 인데요.\n다시 말해서, 우리가 만든 UI가 크롬(Chrome)에서 열었을 때와 사파리(Safari)에서 열었…","timeToRead":3,"fields":{"slug":"/css-normalize-reset/","tags":["CSS","HTML","normalize","reset","React","StyledComponents"]},"frontmatter":{"title":"CSS Normalize와 CSS Reset","date":"Oct 15, 2022"}},{"excerpt":"이번 포스팅에서는 순수하게 HTML과 CSS만을 이용하여 아래와 같이 웹에서 어렵지 않게 볼 수 있는 토글 스위치 UI를 만들어보겠습니다. 토글 스위치란? 먼저 웹에서 토글(toggle) 혹은 토글 스위치(toggle switch)라고도 불리는 스위치(switch) UI 대해서 짚고 넘어가겠습니다. 마치 우리가 집 안에서 조명을 켜고 끌 때 사용하는 벽에 붙어있는 스위치를 상상하면 쉬울 것 같은데요.\n웹에서도 이렇게 사용자가 어떤 기능을 켜거나 끌 수 있도록 해야하는 경우가 생기기 마련입니다.\n좋은 사례로, 알람(notificat…","timeToRead":5,"fields":{"slug":"/css-toggle-switch/","tags":["CSS","HTML","input","checkbox"]},"frontmatter":{"title":"HTML과 CSS로 토글 스위치 UI 만들기","date":"Oct 7, 2022"}},{"excerpt":"이번 포스팅에서는 테스트 커버리지(coverage)가 무엇인지 알아보고 Jest를 이용해서 테스트 커버리지를 수집하는 방법에 대해서 알아보겠습니다. 테스트 커버리지(Test Coverage)란? 테스트 커버리지(test coverage)는 코드 커버리지(code coverage)라고도 하는데요.\n쉽게 말해 코드가 얼만큼 테스트되고 있는지를 나타내는 소프트웨어의 품질 지표입니다.\n테스트 커버리지가 높은 소프트웨어는 버그가 발생할 확률이 적기 때문에 사용자가 좀 더 신뢰하고 사용할 수 있습니다.\n당연히 반대로 테스트 커버리지가 낮은 …","timeToRead":4,"fields":{"slug":"/jest-coverage/","tags":["JavaScript","library","Jest","coverage","testing"]},"frontmatter":{"title":"Jest로 테스트 커버리지 수집하기","date":"Oct 1, 2022"}},{"excerpt":"이번 포스팅에서는 라디오 버튼(radio button)으로 사용자의 선택을 받을 수 있는 React 컴포넌트를 작성하는 방법에 대해서 알아보겠습니다. HTML과 CSS만으로 라디오 버튼을 사용하는 방법은 관련 포스팅을 참고 바랍니다. Radio 컴포넌트 작성 먼저 개별 라디오 버튼을 나타내는 React 컴포넌트를 작성해보겠습니다. 라디오 버튼은 HTML에서 <input> 요소의 type 속성을 radio로 설정해주면 얻을 수 있습니다.\n텍스트를 클릭햇을 때도 라디오 버튼이 선택될 수 있도록 <label> 요소로 <input> 요소…","timeToRead":5,"fields":{"slug":"/react-radio-buttons/","tags":["JavaScript","CSS","React","radio","context"]},"frontmatter":{"title":"React에서 라디오 버튼 사용하기","date":"Sep 24, 2022"}},{"excerpt":"이번 포스팅에서는 Uncontrolled Components 방식을 활용하여 React로 비제어 양식 UI를 만드는 몇가지 방법에 대해서 알아보겠습니다. Uncontrolled Components란? 웹에서 양식 UI를 구현할 때 <input>, <select>, <textarea>와 같은 HTML 요소를 사용하게 되는데요.\n이러한 요소들은 value나 checked와 같은 내부 상태를 가지는데 기본적으로는 브라우저의 DOM이 상태를 제어해줍니다. React를 사용해서 양식 관련 HTML 요소들이 포함된 컴포넌트를 작성할 때는 이…","timeToRead":5,"fields":{"slug":"/react-uncontrolled-components/","tags":["JavaScript","DOM","React","form"]},"frontmatter":{"title":"React로 비제어 양식 UI를 만드는 방법 (Uncontrolled Components)","date":"Sep 16, 2022"}},{"excerpt":"지난 포스팅에서는 HTML 문서에 SVG로 다양한 그림을 그리는 방법에 대해서 알아보았습니다.\n이번 포스팅에서는 HTML 문서에 삽입된 SVG 요소를 CSS로 스타일하는 방법에 대해서 알아보겠습니다. SVG 요소 우선 스타일할 SVG 요소가 있어야겠죠?\n아래 SVG 요소는 로그인이 필요한 웹사이트에서 흔히 볼 수 있는 사용자 아이콘인데요.\n이 요소를 상대로 간단한 실습을 해보려고 합니다. 크기 조정 위의 사용자 아이콘이 너무 작은 것 같은데요. 먼저 크기를 좀 키워볼까요? SVG 요소를 크기를 조정할 때는 viewBox 속성을 고…","timeToRead":3,"fields":{"slug":"/css-svg/","tags":["CSS","SVG"]},"frontmatter":{"title":"CSS로 SVG 요소 스타일하기","date":"Sep 10, 2022"}},{"excerpt":"빠른 선택 알고리즘은 여러 값이 주어졌을 때 k 번째로 작은 값이나 큰 값을 찾을 매우 유용한 검색 알고리즘인데요.\n보통 이럴 때 정렬을 생각하지만 빠른 선택 알고리즘을 이용하면 배열을 정렬하지 않고도 빠르게 해당 원소를 찾을 수 있습니다. 알고달레에서 코딩 테스트/인터뷰 준비에 좀 더 특화된 컨텐츠를 만나보세요! 📝 아이디어 일반적으로 빠른 선택 알고리즘을 설명할 때 빠른 정렬 (Quick Sort) 알고리즘이 빠지지 않는데요.\n이 두 알고리즘은 공통적으로 피봇(pivot)이라고 하는 임의의 값을 기준으로 배열을 분할하는 로직을…","timeToRead":2,"fields":{"slug":"/quick-select/","tags":["algorithm","search","Python"]},"frontmatter":{"title":"빠른 선택 (Quick Select) 알고리즘","date":"Sep 3, 2022"}},{"excerpt":"웹에서 SVG가 사용되기 시작한지가 꽤 되어 가는 것 같죠?\n개발자로서 주로 이미 만들어진 SVG 코드를 복사해서 붙여넣기만 하지 제대로 SVG에 대해서 깊이 알아볼 기회는 많지 않은 것 같습니다. 이번 포스팅에서는 HTML 문서 안에 SVG로 직접 간단한 그림을 그려보면서 그려보면서 전반적으로 SVG를 어떻게 사용하는지 가볍게 알아보겠습니다. SVG 란? SVG(Scalable Vector Graphics)는 HTML 문서에 백터(vector) 기반 그래픽을 그리기 위해서 사용되는 XML 기반 웹 기술입니다.\n백터 기반 그래픽은…","timeToRead":8,"fields":{"slug":"/html-svg/","tags":["HTML","SVG"]},"frontmatter":{"title":"SVG로 HTML 문서에 그림 그리기","date":"Sep 1, 2022"}},{"excerpt":"이번 포스팅에서는 CSS를 이용하여 라디오 버튼을 스타일하는 요령에 대해서 알아보겠습니다.\n차근차근 따라오시다보면 아래와 같은 라디오 버튼을 만드실 수 있으실 거에요. 🍅😄 왜, 라디오 버튼을 스타일할까? 먼저 웹사이트를 만들 때 라디오 버튼(radio button)을 뭐하러 직접 스타일하는지에 대해서 잠깐 짚고 넘어가겠습니다. 일반적으로 웹사이트에서 라디오 버튼은 브라우저나 운영체제, 디바이스에 따라서 미묘하게 다르게 표현이 됩니다.\n그래서 플랫폼에 구애받지 않고 일관적인 사용자 경험을 제공하기 위해서 라디오 버튼에 커스텀 스타…","timeToRead":7,"fields":{"slug":"/css-html-radio/","tags":["CSS","HTML","radio","a11y"]},"frontmatter":{"title":"CSS 라디오 버튼 스타일링 가이드","date":"Aug 27, 2022"}},{"excerpt":"모바일 우선(mobile-first) 웹디자일 할 때 컨텐츠를 위에서 아래로 배치하는 화면 레이아웃을 제일 먼저 고려하게 되는데요.\n이 때 대부분의 경우 컨텐츠 (특히, 텍스트 컨텐츠)를 수평 중간에 위치시켜야 하죠? 이번 포스팅에서는 CSS로 레이아웃 잡을 때 컨텐츠를 수평 중간에 정렬하는 요령에 대해서 알아보려고 합니다. 수평 중간 정렬 컨텐츠를 수평에 정렬하는 작업은 웹페이지의 여러 부분에 걸쳐서 일어나게 되므로 보통 클래스로 스타일하는 경우가 많습니다.\n관례적으로 container나 max-width-wrapper와 같은 …","timeToRead":3,"fields":{"slug":"/css-max-width-container/","tags":["CSS","layout","max-width","min"]},"frontmatter":{"title":"CSS 레이아웃: 컨텐츠 수평 중간 정렬하기","date":"Aug 16, 2022"}},{"excerpt":"이번 포스팅에서는 화면(viewport) 너비에 따라서 적절히 반응하는 글꼴을 CSS로 어떻게 스타일하는지 알아보겠습니다. Media Queries 반응형 글꼴하면 가장 쉽게 떠올리리 수 있는 방법이 바로 미디어 쿼리(media query)를 사용하는 것입니다. 예를 들어, 화면 너비가 480px 이상과 1024px 이상이 되었을 때 HTML의 여러 요소(element)와 클래스(class)에 적용된 글자 크기가 자동으로 늘어나게 스타일해볼까요? 오래전 부터 쓰이던 이 방법은 보시다시피 동일한 CSS 선택자에 대해서 여러 번 스타…","timeToRead":6,"fields":{"slug":"/css-responsive-typography/","tags":["CSS","Flexbox","Media Query","responsive","clamp","CSS Variables","vw"]},"frontmatter":{"title":"CSS로 반응형 글꼴 스타일하기","date":"Aug 10, 2022"}},{"excerpt":"웹이 지금과 같이 대중적인 플랫폼이 되는데 서로 다른 웹페이지를 무한대로 연결해주는 HTML의 링크(link)가 중요한 역할을 했을텐데요.\n이번 포스팅에서는 HTML의 <a> 요소로 마크업이 되는 링크(link)를 CSS로 스타일하는 방법에 대해서 알아보겠습니다. 브라우저 기본 링크 스타일링 우리가 굳이 링크를 스타일해주지 않더라도 대부분의 브라우저에서는 링크를 유관으로 구분하기 쉽도록 기본적으로 스타일을 제공하는데요.\n보통 이렇게 브라우저 자체에서 지원하는 기본 스타일을 User Agent Stylesheet이라고 합니다. 크롬…","timeToRead":6,"fields":{"slug":"/css-html-a/","tags":["CSS","a","link","a11y"]},"frontmatter":{"title":"CSS 링크 스타일링 가이드 (HTML <a> 요소)","date":"Aug 4, 2022"}},{"excerpt":"달레줄레 두번째 에피소드에서는 프로그래밍 언어(특징/역사/분류)에 대해서 이야기 나누어 보았습니다. 달레줄레 팟케스트는 다음 플랫폼에서 들으실 수 있습니다. Apple Podcast Google Podcast YouTube 팟빵 오디오클립 GitHub","timeToRead":1,"fields":{"slug":"/dalejule-ep2/","tags":["DaleJule","podcast","programming"]},"frontmatter":{"title":"달레줄레 Ep. 2 | 프로그래밍 언어","date":"Aug 1, 2022"}},{"excerpt":"React에서는 컴포넌트 스타일링을 위해서 CSS-in-JS 라이브러리가 매우 많이 사용되고 있는데요. 이번 포스팅에서는 Styled Components와 함께 CSS-in-JS 라이브러리의 양대산맥으로 손꼽히는 손꼽히는 이모션(Emotion)을 사용해서 React 컴포넌트를 스타일하는 방법에 대해서 살펴보겠습니다. 외부 라이브러리 없이 React 컴포넌트를 스타일링하는 방법은 React 컴포넌트 CSS 스타일링 기본을 참고 바랍니다. 패키지 설치 자바스크립트 패키지 매니저인 npm을 이용하면 React 프로젝트에 Emotion을…","timeToRead":7,"fields":{"slug":"/emotion/","tags":["JavaScript","React","CSS","style","CSS-in-JS","Emotion"]},"frontmatter":{"title":"Emotion으로 React 컴포넌트 스타일하기","date":"Jul 27, 2022"}},{"excerpt":"구글 지도(Google Maps)는 구글에서 제공하는 글로벌 지도 서비스입니다.\n네이버나 카카오에서 제공하는 지도 서비스와 달리 국내 지도 뿐만 아니라 해외 지도까지 제공하기 때문에\n전 세계 사용자를 대상으로 하는 애플리케이션을 개발할 때 특히 유용하게 사용할 수 있는데요. 이번 포스팅에서는 구글 지도를 웹페이지 상에서 띄우고 제어할 때 사용하는 구글 Maps API에 대해서 알아보려고 합니다.\n차근차근 따라오시다보면 위와 같은 구글 지도를 웹페이지에 나오게 수 있으실 것입니다. 😁 API 키 발급 받기 구글 Maps API를 사…","timeToRead":8,"fields":{"slug":"/google-maps-api/","tags":["JavaScript","구글 API","Google API","Google Maps"]},"frontmatter":{"title":"웹 페이지에 구글 지도 띄우기 (구글 Maps API)","date":"Jul 23, 2022"}},{"excerpt":"C, C++, C#, Objective-C, Swift, Java, Kotlin, Scala, Go, Rust, Python, PHP, Ruby, JavaScript, HTML, CSS, SQL… 프로그래밍 언어의 과잉의 시대에서 여러분은 어떤 프로그래밍 언어로 소프트웨어 개발을 하고 계신가요?\n이번 포스팅에서는 코딩 입문자를 위해서 이렇게 수많은 프로그래밍 언어를 분류하는 몇 가지 기준에 대해서 얘기해보겠습니다. 레벨(level)에 따른 분류 프로그래밍 언어에 대해서 얘기할 때 흔히 얼마나 레벨 또는 수준(level)이 높으냐 …","timeToRead":7,"fields":{"slug":"/programming-languages/","tags":["programming"]},"frontmatter":{"title":"코딩 입문자를 위한 프로그래밍 언어의 분류","date":"Jul 15, 2022"}},{"excerpt":"달레줄레 첫 번째 에피소드에서는 프로그래밍 관련 국내외 팟캐스트 현황과 달레와 줄레가 프로그래밍 팟케스트를 시작한 계기에 대해서 이야기 나누어 보았습니다 😄 달레줄레 팟케스트는 다음 플랫폼에서 들으실 수 있습니다. Apple Podcast Google Podcast YouTube 팟빵 오디오클립 GitHub","timeToRead":1,"fields":{"slug":"/dalejule-ep1/","tags":["DaleJule","podcast","programming"]},"frontmatter":{"title":"달레줄레 Ep. 1 | 프로그래밍 팟케스트","date":"Jul 11, 2022"}},{"excerpt":"React 프로젝트에서 대부분의 외부 스크립트는 npm 패키지로 설치해서 불러올 수 있지만 간혹 npm 패키지가 제공되지 않는 경우도 있습니다.\n이럴 경우 어쩔 수 없이 웹에서 전통적으로 외부 스크립트를 불러오는 방법인 HTML 문서의 <script> 태그를 사용할 수 밖에 없는데요. 이번 포스팅에서는 React 컴포넌트에서는 어떻게 <script> 태그로 외부 자바스크립트 불러울 수 있는지에 대해서 알아보도록 하겠습니다. index.html 파일 안에 script 태그 추가하기 일반적으로 React 프로젝트에는 public 폴더…","timeToRead":10,"fields":{"slug":"/react-hooks-use-script/","tags":["JavaScript","React","hook","script"]},"frontmatter":{"title":"React에서 <script> 태그로 자바스크립트 불러오기","date":"Jul 8, 2022"}},{"excerpt":"이번 포스팅에서는 Glob Patterns, 흔히 줄여서 Globs라고 불리는 패턴 매칭에 대해서 알아보도록 하겠습니다. Globs(Glob Patterns)란? Globs은 오래전부터 리눅스 운영체제에서 한 번에 여러 개의 파일을 찾을 때 사용해온 패턴 매칭 기법인데요.\n많은 리눅스 명령어가 인자로 Glob 패턴을 받기 때문에 알게 모르게 많이 사용하고 있으실 거에요.\n예를 들어, 터미널에서 ls src/*.java와 유사한 커맨드를 날려보신 적이 있으시면 이미 어느 정도 Globs 문법을 자연스럽게 체득하셨다고 볼 수 있을 것…","timeToRead":5,"fields":{"slug":"/glob-patterns/","tags":["Linux","CLI"]},"frontmatter":{"title":"Globs (Glob Patterns) 문법 정리","date":"Jul 1, 2022"}},{"excerpt":"지난 포스팅에서는 커스텀(custom) React Hook을 사용하여 양식(form) UI를 구현해보았는데요.\n이번 포스팅에서는 이와 유사한 방식으로 React Hook 기반의 API를 제공하는 React Hook Form 라이브러리에 대해서 알아보려고 합니다. 새로운 라이브러리를 배우는 가장 효과적인 방법은 그 라이브러리를 이용해서 무언가를 만들어보는 것이 겠죠?\n본 포스팅을 끝까지 따라오시면 아래와 같은 로그인 폼(form)을 만드실 수 있으실 거 에요 😁 패키지 설치 React Hook Form 라이브러리는 자바스크립트 패키…","timeToRead":6,"fields":{"slug":"/react-hook-form/","tags":["JavaScript","React","hook","form","library","a11y","testing","testingLibrary"]},"frontmatter":{"title":"React Hook Form 라이브러리 사용법","date":"Jun 25, 2022"}},{"excerpt":"이번 포스팅에서는 타입스크립트 코드를 자바스크립트로 코드로 컴파일하는 기본적인 방법에 대해서 알아보겠습니다. 타입스크립트 컴파일러 우선 타입스크립트 컴파일러(TypeScript compiler)가 무엇을 해주는 도구인지 간단히 짚고 넘어갈까요? 일반적으로 컴파일(compile)은 소스 코드를 특정 플렛폼에서 실행 가능한 형태로 변환하는 과정을 의미하는데요.\n기존에는 C++나 Java와 같이 자체 타입 시스템을 가진 프로그래밍 언어에서 주로 다뤄되던 개념이었으나, 타입스크립트의 등장 이후로는 자바스크립트에서도 컴파일이라는 용어를 심…","timeToRead":8,"fields":{"slug":"/tsc/","tags":["JavaScript","TypeScript","CLI"]},"frontmatter":{"title":"타입스크립트 컴파일러 사용법 (tsc 커맨드)","date":"Jun 18, 2022"}},{"excerpt":"많은 자바스크립트 프로젝트에서 ESLint를 사용하여 코드에 문제가 없는지 검사를 하고 있습니다.\n이번 포스팅에서는 ESLint를 어떻게 설정하는지에 대해서 각 옵션 별로 좀 자세히 알아보겠습니다. ESLint에 대한 기본적인 사용법은 관련 포스팅를 참고 바랍니다. 설정 파일 형식 ESLint는 JSON, YAML, JavaScript와 같이 다양한 형식의 설정 파일을 지원하는데요.\n설정 파일의 이름은 항상 .eslintrc가 되야하며, 원하는 포맷에 따른 파일 확장자를 사용해야 합니다. 예를 들어, JSON 파일 포맷을 사용하고…","timeToRead":8,"fields":{"slug":"/eslint-config/","tags":["JavaScript","ESLint","Lint","Linter","lint-staged","husky"]},"frontmatter":{"title":"ESLint 상세 설정 가이드","date":"Jun 9, 2022"}},{"excerpt":"지난 포스팅에서는 GitHub Actions의 4가지 핵심적인 개념인 워크플로우(workflow), 작업(job), 단계(step), 액션(action)에 대해서 가볍게 살펴보았는데요. 이번 포스팅에서는 작업(Job)의 근간이 되는 단계(step)에 대해서 좀 더 깊이 다뤄보도록 하겠습니다. GitHub Actions에서 단계(step)란? GitHub Actions에서 하나의 작업(job)은 순차적으로 실행되는 여러 단계(step)로 모델링이 되는데요.\n이 단계는 단순한 커맨드(command)나 스크립트(script)가 될 수도…","timeToRead":8,"fields":{"slug":"/github-actions-steps/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions 단계(step) 고급 설정","date":"Jun 5, 2022"}},{"excerpt":"이번 포스팅에서는 Git 설정을 위해 사용하는 git config 명령어에 대해서 알아보겠습니다. 설정 범위와 설정 파일 git config 명령어에 대해서 배우기 전에 먼저 간단하게 설정 범위에 대해서 짚고 넘어가겠습니다.\nGit은 지역(local), 전역(global), 시스템(system) 이렇게 크게 3가지 범위로 설정이 가능한데요. 지역 범위로 설정하면 특정 저장소(repository)로 한정되고, 전역 범위는 현재 사용자(user)의 모든 저장소를 포함시킵니다.\n자주 사용되지는 않지만 시스템 범위로 설정하면 해당 컴퓨터…","timeToRead":5,"fields":{"slug":"/git-config/","tags":["Git","CLI"]},"frontmatter":{"title":"git config 명령어 사용법","date":"Jun 2, 2022"}},{"excerpt":"어느 프로그래밍 언어로 코딩을 하든 우리는 수시로 데이터를 정렬해야 되는데요.\n이번 포스팅에서는 파이썬에서 데이터를 어떻게 정렬하는지 알아보도록 하겠습니다. sorted() 내장 함수 파이썬에서 정렬을 할 때 가장 부담없이 사용할 수 있는 방법은 내장된 sorted() 함수를 이용하는 것입니다. sorted() 내장 함수는 파이썬에서 순회가 가능한(iterable) 객체를 인자로 받아 데이터를 정렬해줄 수 있습니다. sorted() 내장 함수는 인자로 넘어온 객체의 원래 순서를 건드리지 않고 정렬된 원소들을 새로운 객체에 담아서 …","timeToRead":6,"fields":{"slug":"/python-sorted/","tags":["Python","sqlite3"]},"frontmatter":{"title":"파이썬의 sorted() 내장 함수로 데이터 정렬하기 (feat. 리스트의 sort() 함수)","date":"May 22, 2022"}},{"excerpt":"지난 포스팅에서는 GitHub Actions의 4가지 핵심적인 개념인 워크플로우(workflow), 작업(job), 단계(step), 액션(action)에 대해서 가볍게 살펴보았는데요. 이번 포스팅에서는 이 중에서도 가장 다양하게 설정할 수 있는 작업(job)에 대해서 좀 더 깊이 알아보도록 하겠습니다. GitHub Actions에서 작업(job)이란? 먼저 GitHub Actions에서 작업(job)의 역할과 위치에 대해서 간단히 복습을 하고 넘어가겠습니다. 작업(job)은 어떤 이벤트가 발생했을 때 독립된 환경에서 실행되야 하…","timeToRead":9,"fields":{"slug":"/github-actions-jobs/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions의 유용한 작업(job) 설정","date":"May 15, 2022"}},{"excerpt":"이번 포스팅에서는 깃허브의 CI 서비스인 GitHub Actions를 사용하여 자바스크립트 프로젝트의 지속 통합(Continuous Integration)을 위한 워크플로우를 구성하는 방법에 대해서 알아보겠습니다.\n또한 자바스크립트 프로젝트에서 GitHub Actions 셋업이 용이하도록 깃허브에서 제공하는 Setup Node 액션에 대해서도 살펴보겠습니다. 실습 프로젝트와 코드 저장소 생성 실습을 위해서 Create React App을 통해 간단한 자바스크립트 프로젝트를 하나 생성하겠습니다. 그 다음 본인 깃허브 계정에 새로운 …","timeToRead":12,"fields":{"slug":"/github-actions-setup-node/","tags":["GitHub","GitHubActions","JavaScript","Node.js","npm","CI","CD"]},"frontmatter":{"title":"GitHub Actions 자바스크립트 셋업","date":"May 8, 2022"}},{"excerpt":"이번 포스팅에서는 MSW(Mock Service Worker) 라이브러리를 이용하여 백엔드 API를 모킹(mocking)하는 방법에 대해서 알아보겠습니다. Mock Service Worker란? MSW(Mock Service Worker)는 서비스 워커(Service Worker)를 사용하여 네트워크 호출을 가로채는 API 모킹(mocking) 라이브러리입니다.\n쉽게 말해, 브라우저에 기생(?)해서 마치 백엔드 API인 척하면서 프론트엔드의 요청에 가짜 데이터를 응답해주는 녀석이라고 볼 수 있겠네요. 비교적에 최근에 도입된 웹 표…","timeToRead":8,"fields":{"slug":"/mock-service-worker/","tags":["JavaScript","library","mocking","React","Jest","testingLibrary"]},"frontmatter":{"title":"MSW로 백엔드 API 모킹하기","date":"May 4, 2022"}},{"excerpt":"어느 프로그래밍 언어를 사용하든 요즘 대부분의 소프트웨어 프로젝트는 수많은 다른 패키지에 의존하기 마련인데요.\n로컬 환경에서 소프트웨어 개발을 할 때는 이러한 외부 패키지를 최초에 딱 한 번만 설치하면 되지만 항상 새롭게 셋업되는 CI 서버에서는 이 작업을 매번 다시 해야합니다. 이번 포스팅에서는 깃허브에서 제공하는 캐시(Cache) 액션을 사용하여 CI 서버에서 발생할 수 있는 불필요한 패키지 재설치를 예방해보겠습니다. GitHub Actions의 액션(Action)이란? 먼저 GitHub Actions에서 액션(Action)이…","timeToRead":11,"fields":{"slug":"/github-actions-cache/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions의 캐시(Cache) 액션으로 패키지 설치 최적화하기","date":"May 1, 2022"}},{"excerpt":"이번 포스팅에서는 npm 설정을 할 때 필요한 npmrc 파일과 npm config 커맨드에서 대해서 알아보겠습니다. npmrc 파일 npmrc 파일은 npm에서 설정을 저장해두는 파일로서 내장(builtin), 전역(global), 사용자(user), 프로젝트(project) 이렇게 4가지 범위의 npmrc 파일이 존재하는데요. 먼저 내장 설정은 npm이 설치된 경로에 있는 npmrc 파일에 명시되어 있으며 모든 기본 설정을 담고 있습니다.\n전역 설정은 같은 컴퓨터를 사용하는 다른 사용자와 모든 프로젝트에 광범위하게 적용되기 때…","timeToRead":5,"fields":{"slug":"/js-npm-config/","tags":["JavaScript","Node.js","npm","npmrc"]},"frontmatter":{"title":"npmrc 파일과 npm config 커맨드","date":"Apr 27, 2022"}},{"excerpt":"이번 포스팅에서는 파이썬에서 reversed() 함수를 이용해서 거꾸로 루프를 돌리는 방법에 대해서 알아보려고합니다.\n뿐만 아니라 reversed() 함수와 비슷해보이지만 오묘하게 틀린 리스트의 slicing 연산자와 reverse() 함수에 대해서 간단히 살펴보도록 하겠습니다. 거꾸로 루프 돌리기 다음과 같이 5개의 알파멧 문자를 담고 있는 리스트를 어떻게 루프 돌면서 각 문자를 출력할 수 있을까요? 아마도 다음과 같이 간단한 for 문으로 어렵지 않게 각 문자에 순서대로 접근할 수 있을 것입니다. 그럼 역방향으로 각 문자에 접…","timeToRead":5,"fields":{"slug":"/python-reversed/","tags":["Python","BIF"]},"frontmatter":{"title":"파이썬의 reversed() 함수로 거꾸로 루프 돌리기 (vs. slicing 연산자 & reverse() 함수)","date":"Apr 24, 2022"}},{"excerpt":"GitHub Actions에서 가장 많이 사용되는 액션(Action)은 무엇일까요?\n바로 저장소로 부터 코드를 내려받기 위한 체크아웃(Checkout) 액션인데요.\n이번 포스팅에서는 GitHub Actions를 사용할 때 거의 필수적으로 사용하게 되는 체크아웃 액션에 대해서 알아보겠습니다. GitHub Actions의 액션(Action)이란? 먼저 GitHub Actions에서 액션(Action)이 무엇을 의미하는지 간단하게 짚고 넘어가겠습니다.\nGitHub Actions는 일반적으로 CI(Continuous Integration…","timeToRead":9,"fields":{"slug":"/github-actions-checkout/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions의 체크아웃(Checkout) 액션으로 코드 내려받기","date":"Apr 23, 2022"}},{"excerpt":"지난 포스팅에서는 GitHub Actions를 이해하기 위해서 필요한 핵심 개념에 대해서 알아보았습니다. 이번 포스팅에서는 GitHub Actions 입문자를 위해서 정말 기초적인 워크플로우를 하나 생성해보려고 함께 테스트를 해보겠습니다. GitHub 저장소 생성 GitHub 계정이 있으시다면 누구나 무료로 GitHub 워크플로우를 사용해볼 수 있습니다 🤗\n실습을 위해서 본인 GitHub에 계정에 github-actions-first-workflow라는 이름으로 새로운 코드 저장소(repository)를 하나를 만들고 시작하겠습니…","timeToRead":5,"fields":{"slug":"/github-actions-first-workflow/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions 첫 워크플로우 생성해보기","date":"Apr 16, 2022"}},{"excerpt":"GitHub가 Microsoft에 인수된 이후 야심차게 출시한 GitHub Actions는 CI/CD 시장에 지각변동을 일으키고 있는데요.\n전 세계에 대부분의 개발자들이 이미 깃허브 계정이 있다고 해도 과언이 아닌 유리한 상황에서, GitHub Actions의 약진은 Jenkins, Circle CI, Travis CI와 같은 기존에 유수의 서비스까지도 위협하고 있습니다. 이번 포스팅은 제 블로그에서 GitHub Actions에 대해서 처음 다루는 만큼 GitHub Actions를 처음 접하시는 분들을 위해서 아주 얇고 넓게 Gi…","timeToRead":5,"fields":{"slug":"/github-actions-basics/","tags":["GitHub","GitHubActions","CI","CD"]},"frontmatter":{"title":"GitHub Actions의 소개와 핵심 개념","date":"Apr 9, 2022"}},{"excerpt":"며칠 전에 드디어 React v18이 정식 릴리스가 되었죠? 🎉\n이번 포스팅에서는 React v18에서 단연 가장 큰 주목과 기대를 받고 있는 기능일 Suspense에 대해서 알아보겠습니다. Suspense란? Suspense는 2018년에 첫 시연되어 React 커뮤니티에서 큰 반향을 일으킨 후, React v16.6에 실험적인(experimental) 기능으로 추가되어 이미 알 만한 분들은 다들 한 번씩 써보셨을텐데요.\n많은 리액트 개발자들이 Suspense가 React의 정식 기능이 되기를 목이 빠지게 기다렸던 걸로 아는데 …","timeToRead":7,"fields":{"slug":"/react-suspense/","tags":["JavaScript","React","Suspense"]},"frontmatter":{"title":"React Suspense 소개 (feat. React v18)","date":"Apr 3, 2022"}},{"excerpt":"다른 프로그래밍 언어를 쓰시다가 파이썬으로 넘어온 분들이 for 루프 때문에 적지 않게 당황하시는 것을 자주 보게 됩니다. 다른 언어에서는 일반적으로 for 루프를 작성할 때 항상 다음 3가지를 명시를 하면서 시작하죠? 인덱스 변수의 초기 값 반복 지속 조건 인덱스 변수 갱신 방법 예를 들어, 자바의 경우 보통 다음과 같은 형태로 for 루프를 돌고요. 자바스크립트에서 for 루프를 돌리는 모습도 크게 다르지는 않습니다. 하지만 파이썬에서는 이러한 전형적인 for 문법을 제공하지 않고, 비교적 다른 언어에서는 나중에 추가된 for…","timeToRead":11,"fields":{"slug":"/python-range/","tags":["Python","BIF","for","range"]},"frontmatter":{"title":"파이썬의 range() 내장 함수로 정수 범위 만들기 (feat. for 루프)","date":"Mar 26, 2022"}},{"excerpt":"“사용자 인증을 할 때 쿠키를 사용하면 위험하고요 서버에 데이터를 저장하는 세션을 사용하는 것이 안전해요.” 사용자 인증에 대해서 논할 때 자주 듣게 되는 얘기인데요.\n과연 이 말이 맞는 말일까요?\n저한테는 굉장히 모순된 얘기로 들리는 것 같습니다. 많은 분들이 쿠키(cookie)와 세션(session)을 서로 대립하거나 세션이 쿠키를 대체하는 기술로 오해하는 것 같은데요.\n사실 쿠키와 세션은 상호 보완을 하는 기술이라고 보는 것이 더 맞을 것입니다. 지난 포스팅에서는 서버가 브라우저에 쿠키를 어떻게 저장하고 쿠키라는 기술의 한계…","timeToRead":7,"fields":{"slug":"/http-session/","tags":["HTTP","security","header","cookie","session"]},"frontmatter":{"title":"쿠키 2부: 세션은 쿠키가 필요해~","date":"Mar 20, 2022"}},{"excerpt":"“쿠키는 클라이언트에 저장되고… 음,,, 보안에 좋지 않습니다.” 😅 개발자 면접을 볼 때 쿠키에 대해서 물어보면 가장 흔하게 들을 수 있는 대답인데요.\n완전히 틀린 말은 아니지만 뭔가 알맹이가 빠진 느낌이 듭니다. “그럼 보안을 위해서 쿠키는 안 쓰는 게 좋겠네요?” 라고 반문을 하면 오랫동안 웹 개발을 한 분들도 머뭇거리시는 경우가 많은데요.\n아무래도 대부분의 서버 프레임워크에서 쿠키를 직접 다루지 않아도 되도록 추상화 잘 되어 있기 때문에 오히려 쿠키를 직접 다루거나 쿠키에 대해 깊이 생각해볼 기회가 많지 않아서 그런 것 같…","timeToRead":9,"fields":{"slug":"/http-cookies/","tags":["HTTP","security","header","cookie"]},"frontmatter":{"title":"쿠키 1부: HTTP로 설명하는 쿠키(cookie)","date":"Mar 16, 2022"}},{"excerpt":"이번 포스팅에서는 다국어 지원을 할 때 유용하고 쓸 수 있는 자바스크립트의 Intl API에 대해 알아보도록 하겠습니다. Intl API 소개 여러 가지 언어로 서비스를 할 수 있도록 웹 애플리케이션을 설계하고 구현하는 과정을 흔히 국제화(internalization, i18n)라고 합니다.\n이를 위해서는 웹페이지 상에 사용된 문구들을 단순히 번역하여 표시해주는 것만 뿐만 아니라 동일한 데이터를 언어나 지역별로 다른 형식으로 보여줘야 하는데요. 예를 들어, 12/11/21로 표시된 날짜 데이터를 한국 사용자들은 2012년 11월 …","timeToRead":7,"fields":{"slug":"/js-intl-api/","tags":["JavaScript","Node.js","API","library","i18n"]},"frontmatter":{"title":"자바스크립트의 Intl API로 국제화하기","date":"Mar 8, 2022"}},{"excerpt":"이번 포스팅에서는 파이썬에서 모든 것이 참인지 확인할 때 사용하는 all() 내장 함수에 대해서 알아보겠습니다. 반복문으로 모두 참인지 확인하기 여러 개의 데이터가 모두 어떤 조건을 만족하는지 확인을 해야할 때 보통 어떻게 접근을 하시나요?\n많은 분들이 자연스럽게 반복문을 떠올릴 것 같은데요. 예를 들어, 여러 숫자가 모두 양의 짝수인지 확인하는 함수를 다음과 같이 구현할 수 있을 것입니다. 이 함수에 양의 짝수로만 이루어진 리스트를 넘겨서 호출하면 True를 반환하겠죠? 반면에 인자로 넘긴 리스트에 음수가 하나라도 있다면 Fal…","timeToRead":7,"fields":{"slug":"/python-all/","tags":["Python","BIF","all","comprehensions"]},"frontmatter":{"title":"파이썬의 내장 함수 all() 사용법","date":"Mar 2, 2022"}},{"excerpt":"파이썬에는 global과 nonlocal이라는 아주 많이 쓰이지는 않지만 종종 만나게 되는 재미있는 키워드가 있습니다.\n이 두 키워드를 한글로 해석하면 각각 ‘전역’, ‘비지역’으로 비슷한 의미인 것 같아서 많은 분들이 햇갈려하시는데요. 이번 포스팅에서는 이 두 개의 키워드가 왜 필요하고 어떤 경우에 사용해야되는지에 대해서 알아보도록 하겠습니다. 변수의 범위(scope) global과 nonlocal 키워드에 대해서 이해하려면 먼저 변수의 범위(scope)에 대한 개념을 간단히 짚고 넘어가야할 것 같습니다. 비단 파이썬 뿐만 아니…","timeToRead":7,"fields":{"slug":"/python-global-nonlocal/","tags":["Python","global","nonlocal","scope"]},"frontmatter":{"title":"파이썬의 global과 nonlocal 키워드 사용법","date":"Feb 19, 2022"}},{"excerpt":"웹사이트에 연결하고 싶은 커스텀(custom) 도메인 네임을 구매해놓고 DNS 설정이 생각처럼 잘 안되서 당혹스러우셨던 경험이 있으신가요?\n아무래도 DNS 레코드에 대한 아무런 사전 지식이 없이 호스팅 서비스에서 시키는데로 따라하기가 쉽지 않은 것 같습니다. 그래서 이번 포스팅에서는 커스텀(custom) 도메인을 웹사이트에 연결할 때 알아두면 큰 도움이 되는 DNS 레코드의 기초적인 부분에 대해서 다뤄보려고 합니다. DNS 레코드란? 커스텀 도메인 추가하려고 웹사이트 호스팅 서비스가 제공하는 문서 페이지를 열어 보면 대게 A 레코…","timeToRead":7,"fields":{"slug":"/dns-records/","tags":["DNS","network","Netlify","Vercel"]},"frontmatter":{"title":"DNS 레코드 유형: A, CNAME, ALIAS/ANAME","date":"Feb 11, 2022"}},{"excerpt":"PostgreSQL를 사용하실 때 일반적으로 데이터베이스를 보기 좋게 시각화하여 보여주는 GUI(그래픽 사용자 인터페이스) 기반 클라이언트를 이용하실텐데요.\n하지만 간혹 어떤 제약 사항 때문에 이렇게 무거운 프로그램을 설치하기 어려운 상황도 생기기 마련이죠? 이런 경우 PostgreSQL에서 제공하는 CLI(명령 줄 인터페이스) 기반 클라이언트인 psql을 사용하면 매우 간편하게 터미널에서 데이터베이스에 접속할 수 있습니다. psql 명령어 설치 psql는 PostgreSQL 데이터베이스만 설치하면 기본적으로 딸려오는 CLI 도구…","timeToRead":7,"fields":{"slug":"/psql/","tags":["DB","CLI","PostgreSQL","psql"]},"frontmatter":{"title":"터미널에서 psql로 PostgreSQL 간편 사용","date":"Feb 9, 2022"}},{"excerpt":"아마도 파이썬에서 가장 많이 사용되는 내장 함수는 뭐니 뭐니 해도 print()일 것 같은데요. 특히 아무리 디버거(debugger)가 좋아지더라도 간단한 버그를 찾을 때 print()로 출력해보는 것만큼 빠르고 간단한 방법도 없기 때문일 것입니다. 이렇게 정말 유용하고 많이 사용되는 print() 함수를 어떻게하면 좀 더 잘 활용할 수 있을까요? 기본 출력 제일 먼저 주변에서 print() 함수를 사용하는 가장 흔한 방법을 살펴볼까요? 매일 쓰다보니 당연히 받아드려지는 부분이지만 print() 함수는 문자열을 출력하지만 입력으로…","timeToRead":5,"fields":{"slug":"/python-print/","tags":["Python","BIF","print"]},"frontmatter":{"title":"파이썬의 print() 함수 제대로 활용하기","date":"Jan 29, 2022"}},{"excerpt":"객체 지향 프로그래밍 언어인 파이썬에서 모든 데이터는 결국 객체라고 볼 수 있습니다.\n우리가 작성한 클래스의 인스턴스 뿐만 아니라, 심지어 함수, 문자열, 정수, 실수도 결국 타입을 가집니다. 이번 포스팅에서는 파이썬에서 데이터 타입을 확인할 수 있는 몇 가지 방법을 알아보도록 하겠습니다. __class__ 속성 파이썬에서 모든 객체는 __class__라는 특별한 속성을 가지는데요.\n여기에는 해당 객체의 데이터 타입이 저장이 되어 있습니다. 예를 들어, 변수 a에 정수 1을 저장하고, a.__class__를 출력해보겠습니다. 정수…","timeToRead":4,"fields":{"slug":"/python-class-type-isinstance/","tags":["Python","__class__","type","isinstance"]},"frontmatter":{"title":"파이썬에서 데이터 타입 확인하기","date":"Jan 22, 2022"}},{"excerpt":"하드웨어와 소프트웨어를 불문하고 Caching(캐싱)은 정말 광범위하게 다양한 형태로 활용되고 있는 성능 최적화 기법입니다.\n이번 포스팅에서는 파이썬으로 프로그래밍할 때는 어떻게 캐시를 적용할 수 있는지 알아보도록 하겠습니다. 캐싱이란? 먼저 프로그래밍 입문자 분들을 위해서 캐싱에 대해서 간단히 개념은 짚고 넘어가는 게 좋을 것 같습니다. 일반적으로 캐싱은 접근하는데 시간이 오래 걸리는 데이터를 접근 속도가 빠른 저장소에 사본을 저장해두고 재사용하거나, 실행하는데 오래 걸리는 연산의 결과를 미리 계산해놓고 최초로 필요할 때 한번만…","timeToRead":9,"fields":{"slug":"/python-cache/","tags":["Python","memoization","cache","lru_cache","OrderedDict"]},"frontmatter":{"title":"파이썬에서 캐시 적용하기 (@cache, @lru_cache)","date":"Jan 15, 2022"}},{"excerpt":"텍스트로만은 설명하기가 부족한 부분이 있어서 별도의 시연 동영상을 유튜브에 따로 올렸으니 참고바랍니다. 요즘에는 로컬에 복잡하게 개발 환경을 구축하지 않고 대신 온라인에서 코드 편집이 가능한 도구들을 많이 사용하는 것 같습니다.\n이러한 온라인 코드 편집기 중에서도 거의 원조격에 해당하면서 꾸준하게 전 세계적으로 많은 개발자들에게 사랑받고 있는 CodePen에 대해서 알아보겠습니다. CodePen이란? CodePen을 한마디로 정의하면 프론트엔드(frontend) 웹 개발에 특화된 온라인 코드 편집기입니다.\n프론트엔드(fronten…","timeToRead":3,"fields":{"slug":"/code-pen/","tags":["tools","CodePen"]},"frontmatter":{"title":"CodePen 온라인 코드 편집기","date":"Jan 8, 2022"}},{"excerpt":"와, 2022년이 밝았습니다! 🎊\n나도 새해에는 블로그를 하나 시작해볼까 하시는 분들이 많을 것 같은데요. 블로그는 크게 두가지 방법으로 시작할 수 있는데요.\n첫번째는 블로그 서비스를 이용하는 것이고, 두번째는 스스로 블로그를 만드는 것이에요. 블로그를 다년 간 운영해온 경험을 바탕으로 블로그를 시작하는 다양한 방법과 직접 블로그를 만들 수 있는 정적 사이트 생성기에 대해서 소개해드릴게요. 포털 블로그 서비스 블로그를 한 번도 안 해보신 분들이 블로그를 시작할 때 가장 쉽게 접근할 수 있는 방법은 바로 대형 포털 사이트에서 제공하…","timeToRead":5,"fields":{"slug":"/ssg-for-blogging/","tags":["blog","SSG","CMS","SSR"]},"frontmatter":{"title":"정적 사이트 생성기로 나만의 블로그 시작하기","date":"Jan 1, 2022"}},{"excerpt":"요즘 프론트엔드(front-end) 개발을 하다 보면 SPA, SSG, SSR이라는 상당히 비슷해서 헷갈리는 약어를 심심치 않게 들을 수 있는데요.\n이번 포스팅에서는 모던 웹 개발의 트랜드를 주도하고 있는 이 3가지 랜더링(rendering) 기법에 대해서 이야기해보려고 합니다. SPA: Single Page Application SPA(Single Page Application)는 직역하면 단일 웹페이지로 돌아가는 애플리케이션을 의미하는데요.\n이를 곧이곧대로 받아드리면 정말로 페이지 하나로 이루어진 정말 간단한 웹사이트로 오해할…","timeToRead":5,"fields":{"slug":"/spa-ssg-ssr/","tags":["terms","JavaScript","framework","library","SPA","SSG","SSR","React"]},"frontmatter":{"title":"SPA와 SSG, 그리고 SSR","date":"Dec 25, 2021"}},{"excerpt":"웹사이트를 개발하다 보면 아무래도 사람들에게 보여질 부분에만 치중하기 쉬워집니다.\n그런데 알고보면 사람뿐만 아니라 기계가 웹사이트를 읽어야하는 경우가 의외로 많은데요. 여기서 기계라함은 유저가 사용하는 브라우저가 될 수도 있고 웹사이트의 데이터를 수시로 수집해가는 검색엔진이 될 수도 있겠습니다.\n또한 어떤 웹페이지의 링크를 공유하면 링크를 열기 전에 해당 콘텐츠를 미리보여주는 SNS나 메신저가 될 수도 있겠네요. 이번 포스팅에서는 이러한 기계들이 웹페이지를 효과적으로 이해할 수 있도록 도와주는 메타 태그에 대해서 알아보겠습니다. …","timeToRead":4,"fields":{"slug":"/html-meta-tags-for-seo/","tags":["HTML","head","meta","SEO"]},"frontmatter":{"title":"메타 태그를 통한 검색엔진 최적화 (SEO)","date":"Dec 18, 2021"}},{"excerpt":"자바스크립트로 개발을 시작하게 되면 꼭 한번 씩은 만나게 되지만 별로 대수롭지 않게 넘어가는 함수 2개가 있습니다.\n바로 setTimeout() 함수와 setInterval() 함수인데요.\n이번 포스팅에서는 자바스크립트의 타이머를 사용하는 이 두 내장 함수에 대해서 한 번 알아보려고 합니다. setTimeout() 사용법 어떤 코드를 바로 실행하지 않고 일정 시간 기다린 후 실행해야하는 경우가 있는데요.\n이럴 때는 자바스크립트의 setTimeout() 함수를 사용할 수 있습니다. setTimeout() 함수는 첫번째 인자로 실행할…","timeToRead":3,"fields":{"slug":"/js-timer/","tags":["JavaScript","async","setTimeout","setInterval"]},"frontmatter":{"title":"자바스크립트의 setTimeout()과 setInterval() 함수","date":"Dec 12, 2021"}},{"excerpt":"페이지네이션(pagination)은 여러 개의 게시물을 보여주는 웹사이트에서 보통 화면 하단에서 흔히 볼 수 있는 UI입니다.\n이번 포스팅에서는 아래와 같이 간단한 페이지네이션(pagination) UI를 구현하는 방법에 대해서 알아보겠습니다. 전체 게시물 목록 구현 우선 단순히 모든 게시물의 목록을 보여주는 React 컴포넌트를 페이지네이션이 없이 구현해볼까요?\n게시물 데이터는 JSON Placeholder라는 인터넷에 공개된 API를 통해 가져오도록 하겠습니다. <Posts/>라는 함수 컴포넌트를 작성하고, useState()…","timeToRead":8,"fields":{"slug":"/react-pagination/","tags":["JavaScript","React","hook","useEffect","useState","pagination"]},"frontmatter":{"title":"React로 페이지네이션 UI 구현하기","date":"Dec 11, 2021"}},{"excerpt":"자바스크립트에서 배열을 다룰 때 자주 사용하게되는 함수 중에서 이름이 상당히 비슷한 slice()와 splice()가 있습니다.\n이번 포스팅에서는 예제 코드를 작성하면서 이 두 함수가 어떤 점이 비슷하고 어떤 점이 다른지에 대해서 알아보겠습니다. slice() 함수 slice() 함수는 배열로 부터 특정 범위를 복사한 값들을 담고 있는 새로운 배열을 만드는데 사용합니다.\n첫번째 인자로 시작 인덱스(index), 두번째 인자로 종료 인덱스를 받으며, 시작 인덱스부터 종료 인덱스까지 값을 복사하여 반환합니다. 간단한 실습을 위해 숫자…","timeToRead":5,"fields":{"slug":"/js-array-slice-splice/","tags":["JavaScript","array"]},"frontmatter":{"title":"자바스크립트 배열의 slice()와 splice() 함수","date":"Dec 1, 2021"}},{"excerpt":"사이트 네비게이션(site navigation)은 웹사이트에서 사용자가 효과적으로 페이지 사이를 이동을 할 수 있도록 도와주는 매우 흔하면서도 중요한 UI 입니다.\n이번 포스팅에서는 React와 Styled Components를 이용하여 아래와 같은 다단계 사이드 네비게이션 UI를 한 번 구현해도록 하겠습니다. 컴파운트 컴포넌트 HTML에는 부모없이는 단독으로 쓰이지 않는 요소들이 있습니다.\n대표적인 예로 <option> 요소는 항상 <select> 요소 안에서 사용되며, <li> 요소는 항상 <ul>이나 <ol> 요소 안에서 사…","timeToRead":7,"fields":{"slug":"/react-side-navigation/","tags":["JavaScript","React","CSS-in-JS","StyledComponents","Semantic","HTML","CSS"]},"frontmatter":{"title":"React로 사이드 네비게이션 UI 구현하기","date":"Nov 27, 2021"}},{"excerpt":"이번 포스팅에서는 자바스크립트에서 JSON 내장 객체를 이용하여 JSON 형식으로 표현된 데이터를 다루는 방법에 대해서 알아보겠습니다. JSON 이란? 자바스크립트의 JSON 내장 객체에 대해서 배우기 전에 먼저 JSON이 무엇인지에 대해서 간단하게 짚고 넘어가겠습니다. JSON은 JavaScript Object Notation의 약자로서 데이터를 문자열의 형태로 나타내기 위해서 사용됩니다.\n이름이 암시하듯 JSON은 본래 자바스크립트에서 파생되었지만 현재는 거의 표준으로 자리잡아 대부분의 다른 프로그래밍 언어에서도 지원하는 데이…","timeToRead":5,"fields":{"slug":"/js-json/","tags":["JavaScript","JSON"]},"frontmatter":{"title":"JSON.parse()와 JSON.stringify()","date":"Nov 20, 2021"}},{"excerpt":"이번 포스팅에서는 Node.js에서 파일 입출력 처리를 할 때 사용하는 fs 모듈에 대해서 알아보겠습니다. fs모듈 불러오기 fs 모듈은 Node.js에 내장되어 있어 있기 때문에 별도의 라이브러리 설치없이 바로 불러와서 사용할 수 있습니다. CommonJS 모듈 시스템을 사용하는 프로젝트에서는 require 키워드로 불러오고, ES 모듈 시스템을 사용하는 프로젝트에서는 import 키워드를 사용할 수 있습니다. 비동기 함수 vs 동기 함수 fs 모듈는 비동기(asynchronous) API와 동기(synchronous) API를…","timeToRead":5,"fields":{"slug":"/js-node-fs/","tags":["JavaScript","Node.js","async","fs"]},"frontmatter":{"title":"Node.js의 fs 모듈로 파일 입출력 처리하기","date":"Nov 13, 2021"}},{"excerpt":"이번 포스팅에서는 Node.js에서 파일이나 디렉토리의 경로를 다룰 때 사용하는 path 모듈에 대해서 알아보겠습니다. 운영체제 파일이나 디렉토리의 경로를 다루는 게 뭐가 어렵다고 굳이 별도의 모듈이 필요할까요? 사실 경로 처리는 많은 분들이 간과하지만 알고 보면 은근히 오류가 발생할 소지가 많은 부분인데요. 일단 유닉스 계열 운영체제와 윈도우 운영체제는 서로 다른 문자로 디렉토리 구조를 표현합니다.\n유닉스 계열 운영체제에서는 / 문자를 사용하는 반면에 윈도우 운영체제에서는 \\ 문자를 사용하죠. 유닉스 계열 윈도우 또한 이 두 진…","timeToRead":5,"fields":{"slug":"/js-node-path/","tags":["JavaScript","Node.js","path"]},"frontmatter":{"title":"Node.js의 path 모듈로 경로 다루기","date":"Nov 5, 2021"}},{"excerpt":"이번 포스팅에서는 .gitignore 파일을 이용하여 Git으로 프로젝트의 버전 관리를 할 때 특정 파일이나 디렉토리를 제외시키는 방법에 대해서 알아보겠습니다. 버전 관리를 하지 않는 파일과 디렉토리 어떤 프로그래밍 언어로 프로젝트를 하든 버전 관리를 할 필요가 없거나 하지 말아야하는 파일이나 디렉토리가 생기기 마련입니다. 대표적인 예로, 자바스크립트(JavaScript) 프로젝트에서는 의존성을 설치하고 나면, 프로젝트에 node_modules 디텍토리가 생성되고 그 안에 npm 저장소로 부터 내려받은 라이브러리 코드가 저장됩니다…","timeToRead":7,"fields":{"slug":"/gitignore/","tags":["Git","GitHub",".gitignore"]},"frontmatter":{"title":".gitignore 파일 사용법","date":"Nov 1, 2021"}},{"excerpt":"이번 포스팅에서는 하나의 컴퓨터에서 여러 버전의 Node.js를 사용할 수 있도록 도와주는 도구인 nvm(Node Version Manager)에서 대해서 알아보겠습니다. nvm 설치 제가 Mac을 사용하는 관계로 macOS를 기준으로 nvm을 어떻게 설치하는지 설명하겠습니다. macOS를 포함한 리눅스 계열의 운영체제에서는 nvm 사이트에서 설치 스크립트를 확인할 수 있으며, 윈도우 운영체제의 경우 nvm-windows 사이트에서 설치 파일을 다운로드 받을 수 있습니다. 터미널을 열고 다음 설치 스크립트를 실행합니다.\n여기서 다…","timeToRead":8,"fields":{"slug":"/js-nvm/","tags":["JavaScript","Node.js","nvm","CLI"]},"frontmatter":{"title":"nvm으로 여러 Node.js 버전 관리하기","date":"Oct 28, 2021"}},{"excerpt":"우리가 사용하는 웹 사이트나 웹 애플리케이션에서는 수많은 이벤트가 발생합니다.\n사용자가 마우스나 키보드로 일으킬 수 있는 이벤트도 있고, 브라우저 스스로도 웹페이지를 로딩하면서 여러 이벤트를 발생시킵니다. 이번 포스팅에서는 이렇게 웹에서 다양한 이유로 발생하는 이벤트를 처리하는 여러 가지 방법에 대해서 알아보겠습니다. HTML 이벤트 속성 먼저 가장 고전적이지만 사용하기 간단한 방법부터 알아볼까요? HTML 요소(element)에서 발생하는 이벤트를 처리하는 가장 쉬운 방법은 HTML의 이벤트 속성을 활용하는 것입니다.\non<이벤…","timeToRead":4,"fields":{"slug":"/js-dom-event-handling/","tags":["JavaScript","DOM","addEventListener","removeEventListener"]},"frontmatter":{"title":"자바스크립트로 이벤트 처리하기","date":"Oct 23, 2021"}},{"excerpt":"2006년에 출시되었던 jQuery는 한 때는 자바스크립트 개발이 곧 jQuery 개발이라고 여겨질 정도로 정도로 상당히 오랫동안 자바스크립트 생태계를 주름잡던 라이브러리입니다.\n하지만 최근에는 React, Angular, Vue.js, Svelte와 같은 모던 자바스크립트 라이브러리에 밀려 주로 레거시(legacy) 코드에서나 미처 못해 쓰는 라이브러리로 전략하고 말았는데요.\n아무래도 컴포넌트 기반의 웹 프로그래밍의 대세가 되고 브라우저의 표준화가 전반적으로 개선되고 있어서 앞으로 jQuery의 입지는 점점 더 좁아질 것 같습니…","timeToRead":7,"fields":{"slug":"/js-document-query-selector/","tags":["JavaScript","DOM","jQuery","querySelector","querySelectorAll"]},"frontmatter":{"title":"jQuery 없이 자바스크립트만으로 HTML 요소 조작하기","date":"Oct 21, 2021"}},{"excerpt":"이번 포스팅에서는 자바스크립트에서 패키지 매니저로 가장 많이 사용되고 있는 npm과 Yarn에 대해서 알아보겠습니다. 자바스크립트 패키지 매니저 패키지 매니저(package manager)는 프로젝트가 의존하고 있는 패키지를 효과적으로 설치, 갱신, 삭제할 수 있도록 도와주는 관리 도구입니다.\n그 어떤 프로그래밍 언어보다 풍부한 오픈 소스 생태계를 자랑하는 자바스크립트에서는 특히 패키지 매니저는 중요한 역할을 하는데요.\n아무리 간단한 자바스크립트 프로젝트라고 해도 적게는 수십게 많게는 수백개의 다른 패키지에 의존하기 때문입니다. …","timeToRead":4,"fields":{"slug":"/js-package-manager/","tags":["JavaScript","Node.js","npm","yarn"]},"frontmatter":{"title":"자바스크립트 패키지 매니저: npm vs. Yarn","date":"Oct 15, 2021"}},{"excerpt":"이번 포스팅에서는 HTML 요소(element)를 원하는 위치에 배치하기 위해서 사용하는 CSS의 position 속성에 대해서 알아보겠습니다. position 속성 CSS에서 position 속성은 HTML 문서 상에서 요소가 배치되는 방식을 결정합니다.\n많은 경우, position 속성은 요소의 정확한 위치 지정을 위해서 top, left, bottom, right 속성과 함께 사용됩니다. position: static position 속성을 별도로 지정해주지 않으면 기본값인 static이 적용됩니다.\nposition 속성이 …","timeToRead":6,"fields":{"slug":"/css-position/","tags":["CSS","position"]},"frontmatter":{"title":"CSS의 position 속성으로 HTML 요소 배치하기","date":"Oct 11, 2021"}},{"excerpt":"자바스크립트 프로젝트에서 개발을 하다보면 터미널을 열고 명령어를 실행해야하는 경우가 빈번하게 생기는데요.\n대표적인 예로 로컬 환경에서 애플리케이션을 빌드하고 구동하거나 테스트를 실행하는 것을 들 수 있습니다. 이번 포스팅에서는 자바스크립트 프로젝트에서 자주 사용되는 명령어를 스크립트로 등록하고 실행하는 방법에 대해서 알아보겠습니다. 반복 명령은 스크립트로 자바스크립트 프로젝트에서 개발을 진행하다보면 테스트나 빌드(build), 린트(lint), 포맷(format)처럼 반복적으로 수행해야하는 작업들이 생기기 마련입니다.\n각 작업은 …","timeToRead":6,"fields":{"slug":"/js-npm-run-script/","tags":["JavaScript","Node.js","npm","CLI","ESLint","Jest"]},"frontmatter":{"title":"자바스크립트 프로젝트에서 스크립트 활용하기 (npm run)","date":"Oct 9, 2021"}},{"excerpt":"이번 포스팅에서는 CSS로 배경을 설정하는데 자주 사용되는 속성에 대해서 알아보겠습니다. background-color 배경 관련 CSS 속성 중 가장 많이 사용되는 것은 아마도 배경색을 지정할 때 사용하는 background-color일 것입니다. 기본값은 transparent, 즉 투명이며 색상명이나 색상 코드를 사용할 수 있습니다. 일반적으로 배경색은 웹 접근성(accessibility)을 준수하기 위해서 글자색과의 명암비를 고려해서 결정을 하는데요.\n저시력자나 고령자도 텍스트를 인식하는데 어려움이 없도록 하기 위함입니다. …","timeToRead":3,"fields":{"slug":"/css-background/","tags":["CSS","background"]},"frontmatter":{"title":"CSS 배경(background) 관련 속성","date":"Oct 6, 2021"}},{"excerpt":"다른 프로그래밍 언어에서 넘어오신 개발자 분들께서 파이썬의 yield 키워드 때문에 당혹스러워하시는 것을 종종 목격하게 되는데요. 이번 포스팅에서는 파이썬에서 제네레이터(generator)를 만드는데 사용되는 yield 키워드에 대해서 예제를 통해서 이해하기 쉽게 설명드리겠습니다. yield 키워드 대부분의 프로그래밍 언어에서 일반적으로 함수는 어떤 결과 값을 return 키워드를 이용해서 반환을 하는데요.\n하지만 파이썬에서는 함수가 yield 키워드를 이용해서 다소 다른 방식으로 결과 값을 제공할 수 있습니다. 장황한 설명보다는…","timeToRead":5,"fields":{"slug":"/python-yield/","tags":["Python","generators","comprehensions"]},"frontmatter":{"title":"파이썬의 yield 키워드와 제너레이터(generator)","date":"Oct 2, 2021"}},{"excerpt":"이번 포스팅에서는 React 프로젝트를 쉽고 빠르게 만들 수 있도록 도와주는 Create React App에 대해서 알아보겠습니다. Create React App React로 개발 프로젝트를 맨땅에서 시작하려면 웹팩(Webpack), 바벨(Babel) 등 정말 미리 배워야하는 기술들이 한 두개가 아닙니다.\n초보 개발자들이 이러한 선수 기술들을 일일이 학습하다보면 본래 목표했던 React 애플리케이션 개발이 아득하게 멀어지기 일수인데요… React는 각종 개발 편의 도구가 함께 포함된 프레임워크(framework)라기 보다는 어느 …","timeToRead":5,"fields":{"slug":"/create-react-app/","tags":["JavaScript","React","CLI"]},"frontmatter":{"title":"Create React App: 손쉽게 프로젝트 만들기","date":"Sep 25, 2021"}},{"excerpt":"국내 많은 서비스들이 당장 다국어 지원의 요구가 없더라도 향후 해외 진출을 염두해두고 개발 초기부터 애플리케이션을 국제화(internalization, i18n)하는 사례가 늘고 있는데요.\n이번 포스팅에서는 React Intl 라이브러리를 이용해서 다국어를 지원하는 방법에 대해서 알아보겠습니다. React가 아닌 일반 자바스크립트에서 국제화하는 방법에 대해서는 관련 게시물을 참고 바랍니다. React Intl 설치 React Intl 라이브러리는 Node.js 패키지 매니저인 npm으로 설치할 수 있습니다. Locale: Lang…","timeToRead":6,"fields":{"slug":"/react-intl/","tags":["JavaScript","React","library","i18n"]},"frontmatter":{"title":"React Intl로 다국어 지원하기 (국제화)","date":"Sep 18, 2021"}},{"excerpt":"React v16.8에서 리액트 훅(React Hook)이 소개된 이후로 많은 프로젝트에서 커스텀(custom) 훅 함수를 사용하고 있는 것 같은데요.\n이번 포스팅에는 리액트 훅(React Hook)을 테스트하는 방법에 대해서 알아보겠습니다. 예제 React Hook 먼저 테스트 대상이 될 간단한 React Hook 함수 하나를 작성해보겠습니다. 아래 useToggle() 함수는 true 또는 false가 될 수 있는 상태 state와 그 상태값을 반전할 수 있는 함수 toggle()을 배열에 담아 반환합니다.\n초기 상태값을 in…","timeToRead":4,"fields":{"slug":"/react-hooks-testing-library/","tags":["JavaScript","testing","React","Jest","testingLibrary","hook"]},"frontmatter":{"title":"React Hooks Testing Library 사용법","date":"Sep 10, 2021"}},{"excerpt":"지난 포스팅에서 가짜 데이터를 만들 때 사용하는 Faker.js에 대해서 간단히 알아보았는데요.\n이번 포스팅에서는 실제로 테스트를 작성할 때 Faker.js를 어떻게 활용할 수 있는지에 대해서 다뤄보려고 합니다. 테스트 대상 코드 작성하기 먼저 테스트 대상이 될 임의의 함수를 하나 필요한데요.\n사용자 객체를 인자로 받아 회원 가입을 처리해주는 함수를 작성해보겠습니다. 이 함수는 인자로 넘어온 사용자의 이메일과 비밀번호에 대한 입력값 검증이 실패할 경우 error 속성에 오류 메시지를 담아서 반환하며, 회원 가입이 성공한 경우 us…","timeToRead":7,"fields":{"slug":"/js-test-object-factory/","tags":["JavaScript","testing","faker"]},"frontmatter":{"title":"[자바스크립트] 테스트 데이터 생성","date":"Sep 6, 2021"}},{"excerpt":"중요: 본 포스팅에서 소개하고 있는 faker라는 라이브러리는 안타깝게도 안타깝게도 2022년에 faker를 유지보수하던 개발자가 불미스러운 일을 저질러 더 이상 사용하면 안 되는 라이브러리가 되었습니다. 가짜 데이터 생성을 위한 라이브러리가 필요하신 분들은 새로운 포스팅을 참고하시길 바랍니다. 가짜 데이터 시제품(prototype)을 개발하거나, 단위 테스트를 작성할 때 가짜 데이터가 필요할 때가 자주 있습니다.\n이럴 때, 직접 가짜 데이터를 하드코딩(hard-coding)할 수도 있겠지만, 좀 더 편하고 빠르게 가짜 데이터를 …","timeToRead":4,"fields":{"slug":"/js-faker/","tags":["JavaScript","Node.js","library","testing","faker"]},"frontmatter":{"title":"자바스크립트로 가짜 데이터 생성하기 - Faker.js","date":"Sep 4, 2021"}},{"excerpt":"이번 포스팅에서는 tabindex 속성을 사용해서 키보드 포커스 여부와 우선순위를 제어하는 방법에 대해서 알아보았습니다. 키보드 포커스 혹시 마우스가 고장나거나 배터리가 나가서 키보드로만 컴퓨터를 조작하거나 웹서핑을 해보신 적이 있으신가요?\n마우스 사용자는 포인터로 웹페이지의 어디든지 클릭을 할 수 있지만, 키보드 사용자는 포커스라는 제한된 방법을 이용해야 되는데요. 다행히도 웹은 사용자와 상호작용(interactive)이 가능한 요소(element)는 기본적으로 키보드로 포커스가 잡히게 되어 있습니다.\n대표적으로 <input>,…","timeToRead":5,"fields":{"slug":"/html-tabindex/","tags":["HTML","a11y"]},"frontmatter":{"title":"HTML의 tabindex 속성과 키보드 포커스","date":"Aug 28, 2021"}},{"excerpt":"이번 포스팅에서는 React Testing Library(RTL)로 비동기(asynchronous)로 작동하는 컴포넌트를 테스트하는 방법에 대해서 알아보겠습니다. 예제 컴포넌트 우선 테스트 대상이 될 간단한 React 컴포넌트 하나를 작성해보도록 하겠습니다. 아래 <Switch/> 컴포넌트 함수는 on 상태값에 따라 ON 버튼 또는 OFF 버튼을 리턴합니다.\non 상태값은 최초에는 false이지만 버튼을 클릭할 때 마다 true, false, …로 번갈아 가면서 바뀝니다.\n상태값이 바뀌는데는 0.5초(500ms)가 걸리며, 상태값…","timeToRead":5,"fields":{"slug":"/react-testing-library-async/","tags":["JavaScript","testing","React","Jest","testingLibrary","setTimeout"]},"frontmatter":{"title":"React Testing Library - 비동기 테스트","date":"Aug 21, 2021"}},{"excerpt":"CSS 코드를 읽다보면 아래와 같이 선택자(selector) 사이에서 >나 +, 또는 ~와 같은 기호를 어렵지 않게 볼 수 있습니다. CSS에서는 이렇게 선택자 사이에 나오는 기호들을 결합자(combinator)라는 다소 어려운 이름으로 부르는데요.\n이번 포스팅에서는 CSS의 결합자(combinator)에 대해서 한번 알아보려고 합니다. Descendant combinator CSS에서 너무 흔하게 볼 수 있어서 많은 개발자들이 결합자라는 인식도 없이 사용하는 결합자가 있습니다.\n바로 공백 문자를 사용해서 선택자를 조합하는 후손 …","timeToRead":4,"fields":{"slug":"/css-combinators/","tags":["CSS","selectors"]},"frontmatter":{"title":"CSS 결합자(combinator)로 선택자 조합하기","date":"Aug 14, 2021"}},{"excerpt":"CSS에서는 선택자(selector)를 통해서 웹페이지의 특정 부분만을 선택하여 원하는 스타일을 적용합니다.\n이번 포스팅에서는 CSS의 선택자의 근간이 되는 기본 선택자에 대해서 알아보겠습니다. Type Selector CSS에서 가장 쉽게 볼 수 있는 기본 선택자는 태그 이름을 그대로 사용하는 타입 선택자(Type selector) 입니다.\n타입 선택자를 사용하면 특정 태그로 마크업된 모든 요소(element)를 선택할 수 있습니다. 예를 들어, 웹페이지 상의 모든 <strong> 요소의 글꼴 두께를 스타일하기 위한 CSS 코드…","timeToRead":2,"fields":{"slug":"/css-selectors/","tags":["CSS","selectors"]},"frontmatter":{"title":"CSS 기본 선택자 (selector)","date":"Aug 8, 2021"}},{"excerpt":"HTML에는 모든 엘리먼트를 대상으로 사용할 수 있는 속성이 존재하는데요.\n이를 전역 속성(global attribute)이라고 합니다.\n이번 포스팅에서는 HTML에서 자주 사용되는 전역 속성에 대해서 알아보겠습니다. style 아무래도 많은 분들에게 가장 익숙한 HTML 전역 속성은 style일 것입니다.\nstyle 속성은 해당 엘리먼트에 인라인으로 CSS 스타일을 선언하고 싶을 때 사용합니다. class 두번째로 살펴볼 HTML 전역 속성은 class인데요.\nHTML 문서 상에서 여러 엘리먼트를 하나의 이름으로 묶고 싶을 때 …","timeToRead":3,"fields":{"slug":"/html-global-attributes/","tags":["HTML","CSS","head"]},"frontmatter":{"title":"HTML에서 자주 쓰이는 전역 속성","date":"Aug 1, 2021"}},{"excerpt":"모든 HTML 문서는 크게 head 영역과 body 영역으로 나누어 집니다.\n이번 포스팅에서는 웹 개발을 하면서 간과하기 쉬운 head 영역에 대해서 살펴보려고 합니다. head 요소 HTML의 <head> 요소(element)는 <body> 요소와 함께 HTML 문서의 최상위 요소인 <html> 바로 아래 위치합니다.\n브라우저 화면에 보여지는 영역을 감싸고 있는 <body> 요소와 달리 <head> 요소는 화면에 보여지지는 않지만 브라우저가 해당 HTML 문서에 대해서 알아야 할 정보를 감싸고 있습니다. 그럼, head 영역에는…","timeToRead":3,"fields":{"slug":"/html-head/","tags":["HTML","head"]},"frontmatter":{"title":"HTML 문서의 head 영역을 살펴보기","date":"Jul 28, 2021"}},{"excerpt":"이번 포스팅에서는 터미널에서 간단한 명령어를 입력하여 웹 페이지나 API 데이터를 요청하고 받을 수 있는 HTTP 클라이언트 도구인 curl 커맨드에 대해서 알아보겠습니다. curl 커맨드 1998년에 만들어진 curl 커맨드는 Postman이나 Insomnia와 같이 다양한 기능과 화려한 UI를 제공하는 GUI 기반 HTTP 클라이언트가 계속해서 출시되는 와중에도 아직까지 꾸준히 사랑받고 있는 CLI 도구입니다. curl 커맨드는 리눅스나 MacOS에 대부분의 경우 기본 탑제되어 있고 몇가지 주요 옵션만 숙지하면 사용하기 매우 …","timeToRead":8,"fields":{"slug":"/curl/","tags":["CLI","Linux"]},"frontmatter":{"title":"curl 커맨드: 터미널에서 HTTP 호출하기","date":"Jul 20, 2021"}},{"excerpt":"아무리 웹에서 이미지나 비디오의 비중이 커지더라도 텍스트는 웹에서 빠질 수 없는 핵심적인 구성 요소인데요.\n이번 포스팅에서는 웹에서 텍스트를 스타일하기 위해서 자주 사용되는 대표적인 CSS 속성을 정리해보겠습니다. 텍스트 색상: color CSS에서 정말 자주 사용되는 color 속성은 텍스트 색상을 지정하는데 사용됩니다.\ncolor 속성에는 여러 가지 타입의 값을 설정해줄 수 있는데요.\n예를 들어, blue와 같은 명명된(named) 색상, #ff0000와 같은 색상 코드, 그리고 rgb(), hsl()과 같은 색상 함수도 사용…","timeToRead":5,"fields":{"slug":"/css-typography/","tags":["CSS","typography","fonts"]},"frontmatter":{"title":"텍스트 스타일링을 위한 10가지 CSS 속성","date":"Jul 10, 2021"}},{"excerpt":"웹 페이지의 레이아웃을 디자인할 때 CSS에서 요소의 너비를 정의하는 width 속성이 매우 중요한 역할을 하게 되는데요. 이번 포스팅에서는 CSS의 width 속성의 기본적인 사용법과 각 속성값에 따라 어떻게 너비가 결정되는지에 대해서 알아보겠습니다. width 속성 CSS의 width 속성은 HTML 요소의 너비를 제어하기 위해서 사용되는데요. 크게 절대값, 상대값, 키워드로 설정이 가능한데 이에 따른 너비가 어떻게 결정되는지 이해하는 것이 중요합니다. 절대값 px와 같은 절대 단위를 사용하여 width 속성값을 지정해주면 해…","timeToRead":6,"fields":{"slug":"/css-width/","tags":["CSS","HTML","viewport","width"]},"frontmatter":{"title":"CSS의 width 속성과 너비 결정 매커니즘","date":"Jul 3, 2021"}},{"excerpt":"이번 포스팅에서는 fontsource를 사용하여 웹폰트를 직접 호스팅하는 방법에 대해서 알아보겠습니다. fontsource fontsource는 오픈 소스(open source) 웹폰트를 npm 패키지의 형태로 손쉽게 설치하고 직접 호스팅이 가능하게 해주는 라이브러리입니다. 웹폰트를 사용할 때 Google Fonts와 같은 외부 서비스를 통해서 웹폰트를 호스팅하는 경우가 많은데요.\n하지만 다양한 웹폰트를 사용하거나 속도가 민감한 서비스의 경우에는 웹폰트를 직접 호스팅하면, 웹폰트 다운로드로 인한 지연을 최소화하여 사용자 경험을 개…","timeToRead":2,"fields":{"slug":"/fontsource/","tags":["fonts","CSS","HTML","JavaScript"]},"frontmatter":{"title":"Fontsource로 웹폰트 직접 호스팅하기","date":"Jun 21, 2021"}},{"excerpt":"웹폰트(web font)를 사용하면 사용자의 컴퓨터에 설치된 폰트뿐만 아니라 웹에서 다양한 폰트를 불러와서 웹사이트에 적용할 수 있습니다.\n뿐만 아니라, 사용자가 어느 플랫폼에서 웹사이트를 이용하든 항상 동일한 글꼴로 텍스트 컨텐츠를 보여줄 수는 있다는 장점도 있습니다. 이번 포스팅에서는 Google Fonts를 통해서 웹폰트를 웹사이트에 적용하는 방법에 대해서 알아보겠습니다. 웹폰트 선택하기 웹사이트에 웹폰트를 적용하려면 우선 사용하고 싶은 웹폰트를 골라야겠죠?\n유료로 웹폰트를 구매할 수도 있겠지만 본 포스팅에서는 무료 웹폰트를…","timeToRead":3,"fields":{"slug":"/css-web-fonts/","tags":["CSS","HTML","fonts"]},"frontmatter":{"title":"구글 웹폰트 사용법 (Google Fonts)","date":"Jun 12, 2021"}},{"excerpt":"CSS 변수는 예전에는 Sass나, LESS, Stylus와 같은 CSS 전처리기(CSS preprocessor)를 통해서 접할 수 있었던 기능이었습니다.\n하지만 최근에는 CSS 스펙 자체에 CSS 변수 개념이 추가되어 이제 CSS 전처리기 없이도 부담없이 CSS 변수를 사용할 수 있게 되었습니다.\n이번 포스팅에서는 CSS 사용자 속성(CSS custom properties)라고도 알려진 CSS 변수(CSS variables)에 대해서 알아보겠습니다. CSS 변수 정의 CSS 변수가 CSS 사용자 속성이라고 불리는 이유는 CSS …","timeToRead":4,"fields":{"slug":"/css-variables/","tags":["CSS","CSS Variables"]},"frontmatter":{"title":"CSS 변수 (CSS 사용자 속성)","date":"Jun 5, 2021"}},{"excerpt":"CSS의 sticky position을 이용하여 항상 화면 상단에 항상 달라붙어 있는 헤더(header)를 만들어보겠습니다. sticky position의 특징 sticky position은 CSS에 비교적 최근에 추가된 포지셔닝 메커니즘인데요.\n스크롤하지 않을 때는 static position처럼 동작하다가 스크롤할 때는 fixed position과 유사하게 동작합니다. position 속성을 sticky로 설정되어 있는 엘리먼트는 마치 position 속성이 static으로 설정되어 있는 것처럼 부모 엘리먼트 내부에서 공간을 …","timeToRead":3,"fields":{"slug":"/css-position-sticky-header/","tags":["CSS","position","sticky","header","navigation"]},"frontmatter":{"title":"CSS로 스티키 헤더 (sticky header) 만들기","date":"May 29, 2021"}},{"excerpt":"웹사이트 레이아웃에서 사이드바(sidebar)는 목차, 광고 배너, 인기/신규 게시물 목록, 연관/추천 상품 목록과 같이 보조적인 컨텐츠를 배치하기 위해서 사용합니다. 이번 포스팅에서는 플렉스 박스(Flexbox)와 미디어 쿼리(Media Query)를 이용해서 화면의 너비에 알아서 반응하는 사이드바를 만들어보겠습니다. 웹페이지 마크업 예제로 목차 영역과 기사 영역으로 이루어진 간단한 웹페이지의 구조를 HTML로 작성해보겠습니다.\n<main> 엘리먼트 아래에 목차 영역을 <aside> 엘리먼트로 기사 영역을 <article> 엘리…","timeToRead":4,"fields":{"slug":"/css-responsive-sidebar/","tags":["CSS","Flexbox","Media Query","responsive"]},"frontmatter":{"title":"CSS로 반응형 사이드바 스타일하기","date":"May 22, 2021"}},{"excerpt":"다크 모드(dark mode)는 야간에 눈을 편안하게 하고 작업의 집중도를 높을 수 있도록 시스템 전반에 어두운 색생 체계를 적용해주는 운영 체제의 기능입니다.\n2018년에 macOS Mojave에 처음으로 소개된 다크 모드는 현재 Windows 10을 비롯하여 많은 운영 체제에서 지원하는데요.\n이에 따라 점점 많은 애플리케이션과 웹사이트가 운영 체제의 다크 모드에서 어울리는 어두운 계열의 스타일을 추가하고 있는 추세입니다. 라이트 모드 스타일링 예전에는 웹사이트를 스타일할 때 전반적으로 밝은 배경색에 어두운 글자색을 사용하는 것…","timeToRead":4,"fields":{"slug":"/css-prefers-color-scheme/","tags":["CSS","Media Query","CSS Variables"]},"frontmatter":{"title":"CSS 미디어 쿼리 prefers-color-scheme (다크 모드)","date":"May 15, 2021"}},{"excerpt":"파이썬에서 리스트(list)를 콘솔에 출력할 때 보통 print() 함수를 사용하게 되는데요.\n예를 들어, 10개의 숫자를 담고 있는 간단한 리스트는 다음과 같이 출력할 수 있습니다. 하지만 리스트가 많은 양의 데이터를 담고 있거나 리스트의 구조가 복잡할 경우에는 이런 식으로 출력하면 상당히 보기가 어려워지죠? 이번 포스팅에서는 복잡한 리스트를 보기 좋게 출력하는 몇 가지 방법에 대해서 알아보겠습니다. for 루프 for 문을 사용하여 루프를 돌면서 리스트의 각 원소를 여러 줄에 나누어서 출력해보겠습니다. 어떤가요? 훨씬 보기게 …","timeToRead":3,"fields":{"slug":"/python-lists-print/","tags":["Python","list"]},"frontmatter":{"title":"[파이썬] 복잡한 리스트 보기 좋게 출력하기","date":"May 8, 2021"}},{"excerpt":"웹사이트에서 정말 흔하게 접할 수 있는 성배(Holy Grail) 레이아웃은 한 때 개발자 사이에서 제대로 구현하기 어렵기로 악명이 높았었는데요.\nFlexbox와 CSS Grid가 보편화되면서 이제는 옛말이 되어 가고 있는 것 같습니다. 이번 포스팅에서는 CSS의 최신 기술을 이용하여 어떻게 성배 레이아웃을 구현할 수 있는지 알아보도록 하겠습니다. 기본 구조 성배 레이아웃은 일반적으로 5개의 영역으로 구성이 되는데요.\n회면 최상단에 각각 헤더(header)와 풋터(footer) 영역이 위치하고, 그 사이의 영역이 다시 네비게이션(…","timeToRead":3,"fields":{"slug":"/css-holy-grail-layout/","tags":["CSS","Layout","Flexbox","Grid"]},"frontmatter":{"title":"[CSS] 성배 (Holy Grail) 레이아웃 (Flexbox, Grid)","date":"May 1, 2021"}},{"excerpt":"버튼은 웹 에서 사용자와 상호 작용에 있어서 핵심이 되는 요소로서 하나의 웹 애플리케이션에서도 여러 종류의 버튼이 필요하기 마련입니다. 이번 포스팅에서는 다앙한 크기와 형태의 버튼을 표현하기 위해 사용할 수 있는 React로 컴포넌트를 함께 개발해보도록 하겠습니다. 컴포넌트 함수 우선 disabled와 children prop을 인자로 받고 아무 스타일링없이 단순히 <button> HTML 엘리먼트를 반환하는 간단한 컴포넌트 함수를 작성합니다. 지금부터 React에서 Styled Components 라이브러리를 사용해서 이 버튼 …","timeToRead":3,"fields":{"slug":"/react-button-component/","tags":["JavaScript","CSS","React","CSS-in-JS","StyledComponents","button","CSS Variables"]},"frontmatter":{"title":"React로 버튼 컴포넌트 만들기","date":"Apr 24, 2021"}},{"excerpt":"이번 포스팅에서는 Styled Components로 전역 스타일(global style)을 정의하는 방법에 대해서 알아보겠습니다. Styled Components 자체에 대한 자세한 설명은 관련 포스팅를 참고 바랍니다. 컴포넌트 레벨 스타일링 React와 Styled Components로 웹 개발을 하다보면 대부분의 경우 컴포넌트 레벨에서 스타일을 하게 됩니다.\nReact가 컴포넌트 기반 자바스크립트 라이브러리라는 것을 감안해보면 너무나 자연스러운 현상일 것입니다. 예를 들어, 다음 <BlogPost/> React 컴포넌트는 St…","timeToRead":3,"fields":{"slug":"/styled-components-global-style/","tags":["JavaScript","React","CSS","style","CSS-in-JS","StyledComponents"]},"frontmatter":{"title":"Styled Components 전역 스타일링 (Global Style)","date":"Apr 17, 2021"}},{"excerpt":"이번 포스팅에서는 추가 컨텐츠를 삽입하기 위해서 사용되는 ::before과 ::after에 대해서 알아보겠습니다. Pseudo Element ::before과 ::after는 CSS에서 소위 pseudo element라고 하는데요.\n일반적인 CSS 선택자(selector)로는 지정할 수 없는 미세한 영역을 선택하기 위해서 사용됩니다.\n본 포스팅에서 다룰 ::before과 ::after뿐만 아니라 ::first-letter, ::first-line, ::selection, ::marker 등 CSS에는 다양한 pseudo eleme…","timeToRead":3,"fields":{"slug":"/css-before-after/","tags":["CSS","selectors"]},"frontmatter":{"title":"[CSS] ::before / ::after","date":"Apr 10, 2021"}},{"excerpt":"웹 개발을 하다보면 주어진 공간보다 더 많은 양의 컨텐츠를 보여줘야 하는 경우가 생기는데요.\nCSS에서는 overflow 속성을 통해서 주어진 공간이 모자라 넘치는 컨텐츠를 어떻게 보여줄지를 제어합니다. 이번 포스팅에서는 크기가 제한된 영역에서 많은 양의 컨텐츠를 보여줄 때 유용한 CSS의 overflow 속성에 대해서 알아보겠습니다. visible 먼저 overflow 속성을 별도로 명시해주지 않았을 때 적용되는 기본값인 visible에 대해서 살펴보겠습니다. 긴 기사의 컨텐츠를 고정된 크기의 박스 안에서 보여줘야하는 경우를 예…","timeToRead":4,"fields":{"slug":"/css-overflow/","tags":["CSS","overflow"]},"frontmatter":{"title":"CSS의 overflow 속성 사용법","date":"Apr 4, 2021"}},{"excerpt":"이번 포스팅에서는 화면의 한 곳에 고정되어 있는 UI를 구현할 때 사용되는 CSS의 고정 배치(fixed positioning)에 대해서 알아보도록 하겠습니다. Fixed Position CSS의 고정 배치(fixed positioning)를 사용하면 브라우저의 전체 화면(viewport)을 기준으로 HTML 요소를 배치할 수 있습니다.\nCSS의 position 속성은 HTML 요소가 어떻게 배치되는가를 결정하는데, 이 속성의 값을 fixed로 지정해주면 고정 배치가 적용됩니다. HTML 문서 상에서 고정 배치가 적용된 요소는 부…","timeToRead":2,"fields":{"slug":"/css-position-fixed/","tags":["CSS","position","fixed","HTML"]},"frontmatter":{"title":"CSS의 fixed position을 통한 HTML 요소의 위치 고정","date":"Apr 3, 2021"}},{"excerpt":"웹사이트에서 부연적인 정보를 선택적으로 보여주긴 위한 수단으로 툴팁(tooltip)이 많이 사용됩니다.\n예를 들어, 아래 웹페이지에서 HTML과 CSS위에 마우스 포인터를 올려놓으면 각 용어가 무엇의 약자인지가 표시됩니다. 이번 포스팅에서는 CSS의 absolute position를 응용해서 간단한 툴팁을 구현하는 방법에 대해서 알아보겠습니다. absolute position에 대한 기본적인 특징과 작동 매커니즘은 대해서는 관련 포스팅를 참고 바랍니다. HTML 마크업 먼저 툴팁 구현을 위한 HTML 코드를 작성해보도록 하겠습니다…","timeToRead":2,"fields":{"slug":"/css-position-absolute-tooltip/","tags":["CSS","position","absolute"]},"frontmatter":{"title":"CSS의 absolute position으로 툴팁(tooltip) 구현하기","date":"Mar 27, 2021"}},{"excerpt":"이번 포스팅에서는 CSS에서 상속의 개념과 기본적으로 CSS 상속을 어떻게 활용하는지 알아보겠습니다. CSS의 상속 CSS에도 다른 프로그래밍 언어들처럼 상속(Inheritance)이라는 개념이 있는데요.\n하위 엘리먼트에서 어떤 CSS 속성을 명시하지 않은 경우, 기본적으로 상위 엘리먼트에 적용된 스타일이 하위 엘리먼트에도 적용되는 것을 뜻합니다. 예를 들어, 다음와 같은 간단한 HTML 코드를 예를 들어 생각해보겠습니다. 여기서 section 태그의 color 속성을 설정해주는 스타일 적용하면 어떻게 될까요? 파란 글자색이 <s…","timeToRead":3,"fields":{"slug":"/css-inheritance/","tags":["CSS","inheritance"]},"frontmatter":{"title":"CSS의 상속(Inheritance)","date":"Mar 20, 2021"}},{"excerpt":"다양한 디바이스들이 웹브라우징을 지원하면서 뷰포트(viewport) 너비에 따라 유연하게 컨텐츠를 배치하는 기술이 점점 중요해지고 있습니다.\n이번 포스팅에서는 이러한 반응형 웹디자인의 기본이되는 CSS의 미디어 쿼리(Media Query)에 대해서 살펴보겠습니다. 기본 문법 미디어 쿼리는 CSS에서 어떤 스타일을 선택적으로 적용하고 싶을 때 사용합니다.\n다른 프로그래밍 언어의 if 조건문과 비슷한 개념이라고 생각하시면 이해가 쉬우실 겁니다. @media 키워드로 시작하는 미디어 쿼리의 문법 구조는 아래와 같습니다. 스타일 부분에는…","timeToRead":3,"fields":{"slug":"/css-media-queries/","tags":["CSS","responsive","Media Query"]},"frontmatter":{"title":"CSS 미디어 쿼리 (Media Query) 사용법","date":"Mar 13, 2021"}},{"excerpt":"테스트를 작성하다보면 다양한 테스트 데이터에 대해서 동일한 테스트 코드를 돌리고 싶을 때가 있죠?\n이러한 테스팅 기법을 보통 파라미터화(parameterized) 테스팅이라고 하는데요. 이번 글에서는 Jest에서 제공하는 test.each()와 describe.each() 함수를 사용하여 파라미터화 테스트를 하는 방법에 대해서 배워보겠습니다. 파라미터화(parameterized) 테스트 간단한 실습을 위해 2개의 문자열의 인자로 받아 애너그램(anagram) 여부를 반환해주는 함수를 작성해볼까요? 이제 위 함수에 대한 테스트를 작…","timeToRead":5,"fields":{"slug":"/jest-each/","tags":["JavaScript","library","Jest","testing"]},"frontmatter":{"title":"Jest로 파라미터화 테스트하기: test.each(), describe.each() ","date":"Mar 7, 2021"}},{"excerpt":"이번 포스팅에서는 네임 스페이스를 들여다보고 싶을 때 요긴하게 쓸 수 있는 dir() 내장 함수에 대해서 알아보겠습니다. 네임 스페이스와 dir() 함수 파이썬에는 다른 언어와 비슷하게 소위 네임 스페이스(name space)라는 개념이 있는데요.\n변수명이나 함수명 그리고 클래스의 이름을 언어 차원에서 관리해주는 매커니즘이라고 생각하시면 편할 것 같습니다. dir()은 네임 스페이스에 등록되어 있는 모든 이름들을 리스트로 반환해주는 파이썬의 내장 함수입니다. 예를 들어, 변수 A와 B를 선언 후 dir() 함수를 호출해보겠습니다.…","timeToRead":3,"fields":{"slug":"/python-dir/","tags":["Python"]},"frontmatter":{"title":"[파이썬] 내장 함수 dir 사용법","date":"Mar 4, 2021"}},{"excerpt":"파이썬 3.6에서 소위 f-string이라고 불리는 문자열을 좀 더 쉽게 포맷팅하기 위한 새로운 방법이 추가되었는데요.\n이번 포스팅에서는 간결하고 읽기 편한 문법으로 많은 파이썬 개발자들에게 사랑받고 있는 이 f-string에 대해서 살펴보겠습니다. 기본 문법 파이썬에서 문자열은 아시는 것처럼 홈 따옴표나 쌍 따움표를 이용해서 나타내죠? 이러한 일반적인 문자열 앞에 f 또는 F 문자만 붙여주면 f-string이 됩니다. 변수 치환 중괄호(brace)을 사용하면 f-string 안 에 파이썬의 표현식(expression)을 삽입할 …","timeToRead":3,"fields":{"slug":"/python-f-strings/","tags":["Python","f-string"]},"frontmatter":{"title":"파이썬의 f-string으로 문자열 포맷팅하기","date":"Feb 27, 2021"}},{"excerpt":"React 컴포넌트에 ref prop을 넘겨서 그 내부에 있는 HTML 엘리먼트에 접근을 하게 해주는 forwardRef() 함수에 대해서 알아보겠습니다. HTML 엘리먼트의 ref prop React에서 ref prop은 HTML 엘리먼트의 직접 접근하기 위해서 사용됩니다. 예를 들어, 아래 <Field/> 컴포넌트에서는 useRef() 훅(hook) 함수로 생성한 inputRef 객체를 <input/> 엘리먼트의 ref prop으로 넘기고 있습니다.\n이렇게 해주면 inputRef 객체의 current 속성에 <input/> 엘…","timeToRead":6,"fields":{"slug":"/react-forward-ref/","tags":["JavaScript","React","hook","useRef"]},"frontmatter":{"title":"[React] forwardRef 사용법","date":"Feb 20, 2021"}},{"excerpt":"React로 웹 애플리케이션을 개발하다 보면 간혹 React 컴포넌트가 아닌 HTML 엘리먼트에 직접 접근해서 DOM API를 이용해서 제어해야 할 필요가 있는데요.\n이번 포스팅에서는 이럴 때 유용하게 사용할 수 있는 React의 독특한 prop인 ref 에 대해서 알아보도록 하겠습니다. ref prop React의 ref prop은 HTML 엘리먼트의 레퍼런스를 변수에 저장하기 위해서 사용합니다. 예를 들어, 다음과 같이 <input> 엘리먼트에 ref prop으로 inputRef라는 변수를 넘기게 되면, 우리는 이 inputR…","timeToRead":3,"fields":{"slug":"/react-refs/","tags":["JavaScript","React","hook","useRef"]},"frontmatter":{"title":"[React] ref로 HTML 엘리먼트에 접근/제어하기","date":"Feb 13, 2021"}},{"excerpt":"많은 프로그래밍 언어들에서 i, j, k와 같은 소위 인덱스(index) 변수를 증가시키면서 for 루프를 돌리지요?\n하지만 파이썬에서는 enumerate()라는 내장 함수를 통해 이러한 인덱스 변수를 사용하지 않고 루프를 돌리는 방식이 선호되며 이런 코딩 스타일을 소위 Pythonic, 즉 파이썬 답다고 하죠. 이번 글에서는 파이썬의 enumerate() 함수에 대해서 알아보도록 하겠습니다. for 루프 먼저 파이썬에서 for 문을 사용해서 루프를 돌리는 가장 기본적인 방법부터 짚고 넘어가겠습니다. 파이썬에서는 for 루프는 기…","timeToRead":5,"fields":{"slug":"/python-enumerate/","tags":["Python","BIF","for","enumerate"]},"frontmatter":{"title":"파이썬의 enumerate() 내장 함수로 for 루프 돌리기","date":"Feb 1, 2021"}},{"excerpt":"마치 옷의 지퍼(zipper)처럼 두 그룹의 데이터를 서로 엮어주는 파이썬의 내장 함수 zip()에 대해서 알아보도록 하겠습니다. zip() 기본 문법 zip() 함수는 여러 개의 순회 가능한(iterable) 객체를 인자로 받고, 각 객체가 담고 있는 원소를 튜플의 형태로 차례로 접근할 수 있는 반복자(iterator)를 반환합니다.\n설명이 좀 어렵게 들릴 수도 있는데요. 간단한 예제를 보면 이해가 쉬우실 겁니다. 위 코드를 보면 numbers 리스트와 letters 리스트를 zip() 함수에 인자로 넘겨서 호출 후에, for …","timeToRead":3,"fields":{"slug":"/python-zip/","tags":["Python","BIF","zip"]},"frontmatter":{"title":"파이썬의 zip() 내장 함수로 데이터 엮기","date":"Jan 31, 2021"}},{"excerpt":"웹 페이지 상에서 많은 양의 데이터를 일목요연하게 보여주기 위해서 테이블(table) UI가 많이 사용됩니다.\n정렬이나 검색을 지원하는 완성도 있는 테이블 UI를 직접 개발하려면 생각했던 것보다 구현이 복잡해지는 경우가 많은데요.\nReact Table은 React로 테이블 UI를 간단하게 구현할 수 있도록 도와주는 라이브러리 입니다. 이 번 포스팅에서는 React Table을 이용하여 정렬과 검색을 지원하는 테이블 UI를 구현해보도록 하겠습니다. 테이블 데이터 생성 본인의 React 프로젝트에 npm으로 랜덤 데이터를 생성해주는 …","timeToRead":7,"fields":{"slug":"/react-table/","tags":["JavaScript","React","table","useMemo"]},"frontmatter":{"title":"React Table로 테이블 UI 구현하기","date":"Jan 23, 2021"}},{"excerpt":"웹 페이지에서 많은 양의 데이터를 일목요연하게 보여주기 위해서 테이블(table) UI가 많이 사용됩니다.\nReact로 완성도 있는 테이블 컴포넌트를 개발하려면 이외로 고려할 부분이 많아서 생각보다 많은 시간과 노력이 들어가게 되는데요.\n이번 포스팅에서는 Material UI를 이용하여 좀 더 손쉽게 테이블 UI를 구현해보도록 하겠습니다. Material UI의 기본적인 셋업에 대한 부분은 관련 포스팅를 참고 바랍니다. 필요한 컴포넌트 HTML을 사용해서 테이블의 열과 행의 골격을 만들 때, <table> 엘리먼트 뿐만 아니라, …","timeToRead":5,"fields":{"slug":"/material-ui-tables/","tags":["MaterialUI","JavaScript","React","table","useState"]},"frontmatter":{"title":"Material UI의 Table 컴포넌트","date":"Jan 16, 2021"}},{"excerpt":"많은 Node.js 프로젝트에서 환경 변수를 좀 더 효과적으로 관리하기 위해서 dotenv라는 라이브러리를 사용하고 있습니다.\n이번 포스팅에서는 환경 변수를 파일에 저장해놓고 접근할 수 있게 도와주는 dotenv 라이브러리에 대해서 알아보겟습니다. dotenv 패키지 설치 npm 패키지 매니저를 이용하여 dotenv 라이브러리를 Node.js 프로젝트에 설치합니다. .env 파일 작성 dotenv 라이브러리는 아무 설정을 하지 않으면 현재 디렉토리에 위치한 .env 파일로 부터 환경 변수를 읽어오는데요.\n.env 파일을 생성하고,…","timeToRead":9,"fields":{"slug":"/js-dotenv/","tags":["JavaScript","Node.js","env"]},"frontmatter":{"title":"dotenv로 환경 변수를 .env 파일로 관리하기","date":"Jan 12, 2021"}},{"excerpt":"여러 환경에 동일한 애플리케이션을 배포하려면 환경 변수(environment variable)라는 것을 사용해야하는데요. 이번 포스팅에서는 환경 변수에 대한 기본 개념을 설명드리고 Node.js에서는 어떻게 환경 변수에 접근하고 설정할 수 있는지에 대해서 알아보겠습니다. 환경 변수란? 먼저 환경 변수(environment variable)가 무엇인지 간단하게 개념부터 짚고 넘어가면 좋을 것 같아요. 일반적으로 우리는 코드 베이스는 하나만 관리하고, 개발, 테스트, 운영 등 여러 환경에 애플리케이션을 배포하는데요.\n어느 환경에 배포…","timeToRead":5,"fields":{"slug":"/js-node-process-env/","tags":["JavaScript","Node.js","env"]},"frontmatter":{"title":"Node.js에서 환경 변수 다루기 (process.env)","date":"Jan 10, 2021"}},{"excerpt":"React 앱을 개발하다보면 네트워크를 통해 REST API나 GraphQL API를 호출하여 원격에 있는 데이터를 가져와야 하는 일이 빈번하게 생기는데요.\n이번 포스팅에서는 React 훅 함수를 이용해서 원격 API를 깔끔하게 호출하는 방법에 대해서 알아보겠습니다. useEffect()로 원격 데이터 가져오기 보통 원격 API를 호출하는 작업은 컴포넌트 랜더링을 막지않기 위해서 비동기로 처리하기 경우가 대부분인데요.\n이러한 Side Effect 처리를 위해 React에서는 useEffect 훅 함수를 제공하고 있습니다. 예를 들…","timeToRead":5,"fields":{"slug":"/react-hooks-use-fetch/","tags":["JavaScript","React","hook","async"]},"frontmatter":{"title":"React에서 원격 API 호출하기","date":"Jan 4, 2021"}},{"excerpt":"이번 포스팅에서는 React에서 웹 스토리지를 사용해서 컴포넌트의 상태를 유지시키는 방법에 대해서 살펴보겠습니다. useState()로 유실되는 상태 관리하기 React에서 제공하는 useState() 훅 함수를 사용하면 컴포넌트의 상태를 간편하게 관리할 수 있는데요. 예를 들어, 버튼 클릭 횟수에 대한 상태 관리가 필요한 간단한 카운터 컴포넌트를 작성해보겠습니다. 너무 당연한 얘기겠지만 페이지를 새로 고침하는 순간 기존의 count 상태값은 사라집니다.\n만약에 이 컴포넌트의 상태값을 웹 스토리지를 이용해서 유지시키고 싶다면 어떻…","timeToRead":3,"fields":{"slug":"/react-hooks-use-web-storage/","tags":["JavaScript","React","hook","WebStorage"]},"frontmatter":{"title":"React에서 웹 스토리지 사용하기","date":"Jan 2, 2021"}},{"excerpt":"웹 개발을 하다보면 <script> 요소를 이용해서 HTML 문서 안에 자바스크립트 코드를 삽입하는 경우가 필연적으로 생기기 마련인데요.\n이번 글에서는 이렇게 정말 자주 사용하게 되는 <script> 요소를 좀 더 효과적으로 사용하는 방법에 대해서 알아보겠습니다. script 요소의 위치 혹시, 브라우저가 <script> 요소를 어떻게 처리하는지 생각해보신 적이 있으신가요?\n당연한 얘기처럼 들리기시겠지만 브라우저는 HTML 문서를 처리하다가 <script> 요소를 만나면 src 속성에 명시된 경로의 파일을 내려받아 자바스크립트 코…","timeToRead":6,"fields":{"slug":"/js-script-defer-async/","tags":["HTML","JavaScript","script"]},"frontmatter":{"title":"script 요소의 defer과 async 속성을 통한 효과적인 스크립트 로딩","date":"Dec 30, 2020"}},{"excerpt":"웹 애플리케이션을 개발할 때 브라우저 상에서 유저가 발생시키는 이벤트에 애플리케이션이 예상대로 반응하는지 어떻게 테스트할 수 있을까요?\n사람이 직접 브라우저에서 해당 애플리케이션을 열고 어떤 내용을 입력하거나 특정 버튼을 클릭하면서 수동 테스트를 해야한다면 매우 비효율적일 것입니다.\n이번 포스팅에서는 유저와 애플리케이션의 상호 작용을 검증하기 위한 테스트 코드를 작성하는 방법에 대해서 알아보겠습니다. 예제 컴포넌트 우선 테스트 대상이 될 간단한 React 컴포넌트 하나를 작성해보도록 하겠습니다. 아래 <LoginForm/> 컴포넌…","timeToRead":5,"fields":{"slug":"/testing-library-user-agent/","tags":["JavaScript","testing","React","Jest","testingLibrary"]},"frontmatter":{"title":"유저 이벤트 테스트 (@testing-library/user-event)","date":"Dec 22, 2020"}},{"excerpt":"이번 포스팅에서는 Jest를 이용해서 스냅샷(snapshot) 테스트를 하는 방법에 대해서 알아보겠습니다. Jest에 대한 기본적인 설치 및 사용 방법은 관련 포스팅를 참고하시길 바랍니다. 스냅샷 테스팅 스냅샷 테스팅(snapshot testing)이란 어떤 기능의 예상 결과를 미리 정확히 포착해두고 실제 결과에 비교하는 테스트 기법입니다.\n테스트 대상 기능의 구현이 변경되어 실제 결과과 스냅샷을 떠놓은 예상 결과와 달라질 경우 해당 테스트 케이스는 실패하게 되는데요.\n이럴 경우, 다시 새로운 스냅샷을 떠서 기존 스냅샷을 교체하는…","timeToRead":7,"fields":{"slug":"/jest-snapshot/","tags":["JavaScript","library","Jest","testing"]},"frontmatter":{"title":"Jest로 스냅샷(snapshot) 테스트하기","date":"Dec 16, 2020"}},{"excerpt":"requests는 파이썬으로 HTTP 통신이 필요한 프로그램을 작성할 때 가장 많이 사용되는 라이브러리입니다.\n특히 원격에 있는 API를 호출할 때 유용하게 사용할 수 있는데요.\n이번 포스팅에서는 requests 라이브러리를 사용하는 방법에 대해서 알아보겠습니다. 패키지 설치 파이썬의 패키지 매니저인 pip를 이용해서 requests 패키지을 설치합니다. 설치가 잘 되었는지 파이썬 인터프리터를 실행하여 확인해봅니다. requests 라이브러리로 구글에 접속을 해보니 상태 코드 200이 응답이 되는 것을 볼 수 있습니다. 🎉 API…","timeToRead":6,"fields":{"slug":"/python-requests/","tags":["Python","HTTP","API"]},"frontmatter":{"title":"파이썬에서 requests 라이브러리로 원격 API 호출하기","date":"Dec 12, 2020"}},{"excerpt":"이번 포스팅에서는 useMemo() 함수와 더불어 성능 최적화에 사용되는 React의 useCallback() hook 함수에 대해서 알아보겠습니다. useMemo에 대한 내용은 관련 포스팅를 참고하시기 바랍니다. 함수 메모이제이션 useCallback()은 함수를 메모이제이션(memoization)하기 위해서 사용되는 hook 함수입니다.\n첫번째 인자로 넘어온 함수를, 두번째 인자로 넘어온 배열 내의 값이 변경될 때까지 저장해놓고 재사용할 수 있게 해줍니다. 예를 들어, 어떤 React 컴포넌트 함수 안에 함수가 선언이 되어 있…","timeToRead":6,"fields":{"slug":"/react-hooks-use-callback/","tags":["JavaScript","React","hook"]},"frontmatter":{"title":"React Hooks: useCallback 사용법","date":"Dec 6, 2020"}},{"excerpt":"코딩을 하다 보면 여러 가지 이유로 프로그램의 실행을 잠시 멈추거나 일정 시간동안 실행을 지연시키고 싶을 때가 있습니다.\n예를 들어, 자바에서는 Thread.sleep() 함수, 파이썬에서는 time.sleep() 함수를 사용해서 이렇게 의도된 지연을 줄 수가 있습니다.\n다른 프로그래밍 언어들에서는 이러한 API를 쉽게 찾아볼 수 있는데요.\n자바스크립트에서는 어떻게 프로그램의 실행을 일정 시간동안 지연시킬 수 있을까요? setTimeout() 함수 자바스크립트 API에서 다른 언어에서 제공하는 sleep 함수와 그나마 가장 유사한…","timeToRead":5,"fields":{"slug":"/js-sleep/","tags":["JavaScript","async","await","promise","setTimeout","sleep"]},"frontmatter":{"title":"자바스크립트에서 프로그램의 실행을 지연시키기 (sleep)","date":"Nov 28, 2020"}},{"excerpt":"React에서 컴포넌트의 상태 관리를 위해 기본적으로 가장 많이 쓰이는 hook은 setState() 함수인데요.\n좀 더 복잡한 상태 관리가 필요한 React 컴포넌트에서는 setReducer() hook 함수를 사용할 수 있습니다. React Hooks 중 하나인 setState() 함수에 대한 설명은 관련 포스팅를 참고 바랍니다. Redux 패턴 기본적으로 useReducer() hook 함수는 다음과 같은 형태로 사용을 합니다. reducer 함수는 현재 상태(state) 객체와 행동(action) 객체를 인자로 받아서 새로…","timeToRead":3,"fields":{"slug":"/react-hooks-use-reducer/","tags":["JavaScript","React","hook"]},"frontmatter":{"title":"React Hooks: useReducer 사용법","date":"Nov 21, 2020"}},{"excerpt":"자바스크립트로 코딩을 하다보면 한 번쯤 듣게 되는 용어가 클로저(closure)입니다.\n기술 면접 같은데서 자주 물어보는 질문이기도 한데요.\n이번 포스팅에서는 이 알쏭달쏭한 클로저에 대해서 한 번 얘기해보려고 합니다. 클로저란? 클로저에 대해서 얘기를 하려면 일단 클로저가 도대체 어떤 개념인지에 알아야겠죠?\n클로저는 일반적으로 어떤 함수가 자신의 내부가 아닌 외부에서 선언된 변수에 접근하는 것을 뜻합니다. 다음과 같이 미국 달러를 대한민국 원으로 환전해주는 간단한 함수를 예를 들어 설명해보겠습니다.\n이 함수는 미국 달러(usd)를…","timeToRead":6,"fields":{"slug":"/js-closures/","tags":["JavaScript","setTimeout"]},"frontmatter":{"title":"[자바스크립트] 클로저(closure) 바로알기","date":"Nov 15, 2020"}},{"excerpt":"Git의 pre-commit 훅(hook)은 우리가 작성한 코드를 커밋할 때 마다 자동으로 특정 작업을 실행해줍니다.\n많은 프로젝트들이 이를 통해 포맷터(formatter)를 실행하여 코드 스타일을 통일하고, 린터(linter)를 실행하여 코드에 잠재하고 있는 문제들을 찾아냅니다. 이번 포스팅에서는 Git의 pre-commit hook을 편리하게 사용할 수 있도록 도와주는 pre-commit라는 도구에 대해서 알아보겠습니다. 설치 pre-commit은 자신의 컴퓨터에 파이썬이 설치가 되어 있다면 파이썬의 패키지 매니저인 pip를 …","timeToRead":5,"fields":{"slug":"/pre-commit/","tags":["Git","hook","JavaScript","Python"]},"frontmatter":{"title":"pre-commit 도구로 Git Hook 사용하기","date":"Nov 7, 2020"}},{"excerpt":"JavaScript, API, Markup를 근간으로 하는 JAM stack이 모던 웹 개발의 새로운 트랜드가 되고 있습니다.\n이에 따라, 예전처럼 서버 단에서 대신 API를 호출해주기 보다는 클라이언트 단에서 직접 API를 호출하는 경우가 많아지고 있습니다.\n(이렇게 브라우저에서 직접 비동기로 HTTP 통신을 하는 것을 한 때 소위 Ajax라고도 일컬었죠…) 이번 포스팅에서는 원격 API를 간편하게 호출할 수 있도록 브라우저에서 제공하는 fetch() 함수에 대해서 살펴보겠습니다. 라이브러리? 원격 API 호출하면 제일 먼저 떠…","timeToRead":5,"fields":{"slug":"/js-window-fetch/","tags":["JavaScript","Promise","async","JSON","HTTP","API"]},"frontmatter":{"title":"자바스크립트의 fetch() 함수로 원격 API 호출하기","date":"Nov 2, 2020"}},{"excerpt":"React Hooks 중에서 useState()나 useEffect() 처럼 많이 쓰이지는 않지만 가끔 나와서 햇갈리게 하는 녀석이 있습니다.\n바로 useRef() 훅(hook) 함수인데요.\n이번 포스팅에서는 useRef() 함수가 왜 필요하고, 언제 사용하는지에 대해서 알아보겠습니다. 상태 변경 -> 컴포넌트 재 랜더링 React 컴포넌트는 기본적으로 내부 상태(state)가 변할 때 마다 다시 랜더링(rendering)이 됩니다. 예를 들어, 아래 <Counter/> 컴포넌트의 버튼을 5번 클릭하면 count 상태값은 5번 바…","timeToRead":5,"fields":{"slug":"/react-hooks-use-ref/","tags":["JavaScript","React","hook","setInterval"]},"frontmatter":{"title":"React Hooks: useRef 사용법","date":"Nov 1, 2020"}},{"excerpt":"정렬된 데이터를 검색할 때 가장 널리 사용되는 이진 검색(binary search)에 대해서 알아보겠습니다. 알고달레에서 코딩 테스트/인터뷰 준비에 좀 더 특화된 컨텐츠를 만나보세요! 📝 기본 개념 책으로된 영어 사전(요즘은 거의 안 쓰죠? 😓)에서 단어를 찾거나 지역 업소록에서 상호명을 어떻게 찾으시나요?\n수백, 수천 페이지가 되는 이러한 책을 맨 첫 페이지부터 한 장씩 넘기면서 찾으시는 분들은 아마 없으실 것입니다.\n보통은 대강 중간 쯤 어딘가를 어림잡아서 페이지를 펼쳐본 후에 찾으려는 단어나 업소명과 비교하면서 검색 범위를 …","timeToRead":6,"fields":{"slug":"/search-binary/","tags":["algorithm","search","Python","Java"]},"frontmatter":{"title":"[알고리즘] 빠른 선택 (Quick Select) 알고리즘","date":"Oct 28, 2020"}},{"excerpt":"자바스크립트로 웹 개발을 하다보면 아무리 간단한 애플리케이션이라도 데이터를 어딘가에 저장해야 할 일이 생깁니다.\n보통 이럴 때 데이터베이스(DB) 서버나 클라우드(Cloud) 플랫폼에 데이터를 저장하거나 경우가 많을 것입니다. 하지만 저장해야할 데이터가 별로 중요하지 않거나, 유실되도 무방할 데이터라면 서버 단에 데이터를 저장하는 것이 낭비일 수가 있습니다.\n이번 포스팅에서는 클라이언트 단, 즉 브라우저 상에 데이터를 저장할 수 있는 기술인 웹 스토리지에 대해서 알아보겠습니다. 로컬 스토리지 vs. 세션 스토리지 웹 스토리지(we…","timeToRead":4,"fields":{"slug":"/js-web-storage/","tags":["JavaScript","WebStorage","JSON"]},"frontmatter":{"title":"[자바스크립트] 웹 스토리지 (localStorage, sessionStorage) 사용법","date":"Oct 24, 2020"}},{"excerpt":"리액트(React)는 보통 HTML과 매우 흡사한 JSX 코드로 작성하는 경우가 대부분인데요.\n이 JSX 때문에 리액트를 좋아하는 사람도 많지만 반면에 이 JSX 때문에 리액트를 싫어한다는 분들도 많이 보게 됩니다. 이번 포스팅에서는 이렇게 말도 많고 탈도 많은 리액트의 JSX와 JSX를 변환해주는 Babel에 대해서 알아보도록 하겠습니다. 왜 React를 임포트할까? 리액트를 처음 사용해 본 자바스크립트 개발자라면 한 번 쯤 이러한 생각을 해보신 적이 있으실 겁니다. 내 코드에 React를 사용하는 곳이 없는데 왜 React를 …","timeToRead":6,"fields":{"slug":"/react-jsx/","tags":["JavaScript","React","Babel"]},"frontmatter":{"title":"[React] JSX와 Babel","date":"Oct 21, 2020"}},{"excerpt":"JSX 문법으로 코드를 작성하다보면 리액트(React)가 어디까지나 자바스크립트 라이브러리는 사실을 잊어버리기 쉬운 것 같습니다.\n이번 포스팅에서는 리액트 API를 JSX 없이 날 것 그대로 자바스크립트로 사용하면서 리액트가 어떻게 작동하는지 알아보겠습니다. JavaScript Library 리액트(React)를 비롯하여 최근에 많이 사용되는 프론트엔드(frontend) 라이브러리들은 기본적으로 자바스크립트로 HTML 엘리먼트를 동적으로 생성하여 DOM에 추가하는 방식을 취합니다.\n따라서, 이러한 모던(modern)한 라이브러리로…","timeToRead":4,"fields":{"slug":"/react-api/","tags":["JavaScript","React"]},"frontmatter":{"title":"React API를 날 것으로 사용해보기","date":"Oct 19, 2020"}},{"excerpt":"사전(dictionary)은 파이썬에서 리스트(list)와 더불어 가장 널리 사용되는 내장 자료형입니다.\n하지만 너무 기본적인 기능이다 보니 오히려 이 중요한 자료형의 사용법을 제대로 익히지 않고 넘어가기 쉬운 것 같아요. 이번 포스팅에서는 파이썬에서 사전을 어떻게 사용하는지에 대해서 차근차근 알아보도록 하겠습니다. 참고로 리스트(list)에 대해서는 별도의 포스팅에서 아주 자세히 다루고 있습니다! 사전의 특징 해시 테이블(hash table)이라는 자료구조를 기반으로 하는 사전은 키(key)와 값(value)으로 이루어진 여러 …","timeToRead":6,"fields":{"slug":"/python-dictionary/","tags":["Python","dictionary","BIF"]},"frontmatter":{"title":"파이썬 사전(dictionary) 완벽 가이드","date":"Oct 17, 2020"}},{"excerpt":"CSS 트랜지션(transition)은 어떤 엘리먼트에 스타일의 변화가 일정 시간에 걸쳐서 부드럽게 나타나도록 할 때 사용합니다. 기본 사용법 CSS에서 트랜지션과 관련된 속성은 다음과 같은데 처음에는 좀 복잡하게 느껴질 수도 있습니다. transition: 아래 4가지 속성을 한 번에 지정 가능 transition-property: 트랜지션을 적용할 속성 이름 transition-duration: 스타일 변화가 일어나는 기간 (s: 초, ms: 밀리초) transition-timing-function: 스타일 변화을 일으키는 방…","timeToRead":3,"fields":{"slug":"/css-transitions/","tags":["CSS"]},"frontmatter":{"title":"CSS 트랜지션(transition)","date":"Oct 10, 2020"}},{"excerpt":"git add는 작업 디렉토리(working directory) 상의 변경 내용을 스테이징 영역(staging area)에 추가하기 위해서 사용하는 Git 명령어입니다. git commit vs. git add git add 명령어는 다음 변경(commit)을 기록할 때까지 변경분을 모아놓기 위해서 사용합니다. 따라서, git commit 명령어를 통해 명시적으로 기록을 남기기 전까지는 아무리 git add 명령어를 많이 실행해도 Git 저장소의 변경 이력에는 어떤 영향도 주지 않습니다. git status git add 명령어를…","timeToRead":3,"fields":{"slug":"/git-add/","tags":["Git","CLI"]},"frontmatter":{"title":"git add 기본 개념/사용법","date":"Oct 4, 2020"}},{"excerpt":"많은 프로그래밍 언어에서 주어진 여러 값 중에서 최소값 또는 최대값을 반환하는 기능을 제공합니다.\n예를 들어 파이썬(Python)은 min(), max() 내장 함수를 제공하고, 자바(Java)는 Math 클래스에서 min(), max() 정적 메서드를 제공합니다.\n자바스크립트(JavaScript)에서도 마찬가지로 Math.min(), Math.max() 함수를 통해 같은 기능을 사용할 수 있습니다. 흥미롭게도 CSS에서도 동일한 기능을 하는 min()과 max() 함수가 존재하는데요.\n이번 포스팅에서는 반응형 웹디자인을 할 때 …","timeToRead":3,"fields":{"slug":"/css-min-max/","tags":["CSS","responsive"]},"frontmatter":{"title":"CSS 함수 - min(), max()","date":"Oct 3, 2020"}},{"excerpt":"git init는 새로운 Git 저장소(repository)를 생성할 때 사용하는 Git 명령어 입니다. Git 사용할 때 보통 다른 사람이 이미 생성해 놓은 Git 원격 저장소를 git clone 명령어를 통해 내려받는 경우가 많고, 직접 Git 저장소를 생성하더라도 프로젝트 초기에 딱 한 번만 사용하기 때문에 생소하게 느껴질 수도 있는 명령어입니다. 하지만 저처럼 모든 개인 프로젝트를 항상 Git으로 버전 관리를 하는 분들에게는 의외로 자주 사용하게 되는 명령어 입니다. 실습 디렉토리 준비 일단 Git으로 버전 관리를 하고 싶…","timeToRead":4,"fields":{"slug":"/git-init/","tags":["Git"]},"frontmatter":{"title":"git init 명령어로 Git 저장소 생성하기","date":"Sep 26, 2020"}},{"excerpt":"웹 접근성(accessibility)을 준수하는 드롭다운(dropdown)를 구현하는 것은 생각보다 쉽지 않은 일입니다. 사실 가장 쉬운 방법은 지난 포스팅에서 소개했던 것처럼 HTML의 <select> 엘리먼트를 사용하는 것인데요.\n<select> 엘리먼트를 사용하면 내부에 있는 <option> 엘리먼트에 커스텀 스타일을 적용할 방법이 없기 때문에 스타일링에 한계가 있습니다. 그래서 여러 가지 엘리먼트를 이용해서 직접 드롭다운를 만드는 경우가 많은데요.\n이 때, 시각적으로는 원하는 모습의 UI를 얻을지 몰라도, 웹 접근성 측면에…","timeToRead":4,"fields":{"slug":"/react-downshift/","tags":["JavaScript","React","library","a11y"]},"frontmatter":{"title":"[React] Downshift로 드롭다운(dropdown) 구현","date":"Sep 20, 2020"}},{"excerpt":"자바스크립트를 이용하여 웹페이지 상에서 사용자의 키보드 입력을 감지하여 처리하는 방법에 대해서 알아보겠습니다. 키보드 이벤트 타입 키보드 이벤트(Keyboard Event)는 사용자가 키를 누르거나 키를 놓을 때 발생합니다.\n키를 누를 때는 keydown 타입의 이벤트가 발생하고, 키를 놓을 때는 keyup 타입의 이벤트가 발생합니다.\n(예전에는 keypress라는 이벤트 타입도 사용되었으나, 현재는 deprecated되어 권장되지 않으므로 다루지 않겠습니다.) 키보드 이벤트는 DOM 상에서 창(window)이나 문서(docume…","timeToRead":3,"fields":{"slug":"/js-key-events/","tags":["JavaScript","event"]},"frontmatter":{"title":"[자바스크립트] 키보드 이벤트 (keydown/keyup)","date":"Sep 12, 2020"}},{"excerpt":"이번 포스팅에서는 파이썬의 정적(static) 메서드와 클래스(class) 메서드에 대해서 알아보겠습니다. 인스턴스(instance) 메서드 정적(static) 메서드와 클래스(class) 메서드에 대해서 살펴보기 전에 가장 기본이 되는 인스턴스(instance) 메서드에 대해서 먼저 짚고 넘어가는 게 좋을 것 같습니다. 클래스에 아무 데코레이터(decorator) 없이 메서드를 선언하면 해당 메서드는 인스턴스 메서드로 취급이 되며, 첫번째 매개 변수로 클래스의 인스턴스가 넘어오게 됩니다.\n이 첫번째 매개 변수의 이름은 보통 관행…","timeToRead":4,"fields":{"slug":"/python-class-methods-vs-static-methods/","tags":["Python"]},"frontmatter":{"title":"[파이썬] 정적(static) 메서드와 클래스(class) 메서드","date":"Sep 6, 2020"}},{"excerpt":"CSS로 웹사이트의 레이아웃을 잡다보면 브라우저 화면 맨 중앙에 어떤 HTML 요소를 배치해야할 경우가 자주 생기지요? 이번 글에서는 CSS의 Flexbox나 Grid를 활용하여 얼마나 쉽게 HTML 요소를 브라우저 화면에 중앙에 위치시킬 수 있는지 알아보겠습니다. 기본 HTML/CSS 중앙에 위치시킬 컨텐츠(content) 요소와 이 요소를 감싸는 래퍼(wrapper)요소에 대한 HTML 마크업을 하겠습니다. 그 다음 각 요소를 구분하기 쉽도록 CSS로 약간의 스타일을 해주겠습니다. 여기서 주의 깊게 보실 부분이 바로 래퍼 요소…","timeToRead":2,"fields":{"slug":"/css-centering/","tags":["HTML","CSS","Flexbox","Grid"]},"frontmatter":{"title":"CSS로 화면 중앙에 HTML 요소 배치하기 (Flexbox/Grid)","date":"Sep 4, 2020"}},{"excerpt":"CSS를 사용하다 보면 정말 간단한 정렬이 생각처럼 되지 않아서 애를 먹는 경우가 있습니다.\n특히 초보자들이 많이 겪는 문제가 HTML 요소(element)를 우측으로 정렬하는 것입니다. HTML 웹페이지의 레이아웃에서 HTML 요소를 우측으로 정렬해야 하는 대표적인 경우는 헤더 영역입니다.\n예를 들어, 다음과 같이 사이트명과 네비게이션으로 이루어진 간단한 헤더를 생각해보겠습니다. <h1> 요소와 <nav> 요소가 같은 줄에 나란히 배치될 수 있도록, CSS의 display 속성값을 변경해주겠습니다. 지금부터 <nav> 요소로 마…","timeToRead":4,"fields":{"slug":"/css-align-right/","tags":["HTML","CSS","Flexbox","Grid","position"]},"frontmatter":{"title":"CSS로 HTML 요소 우측 정렬하기 (Flexbox/Grid)","date":"Aug 29, 2020"}},{"excerpt":"드롭다운(dropdown), 리스트박스(listbox), 콤보박스(combobox), 등 여러 가지 이름으로 불리우는 HTML의 <select> 엘리먼트와 CSS를 이용하여 아래와 같이 만들어보겠습니다. HTML 작성 사실 웹에서 드롭다운를 구현하는 방법은 여러 가지가 있지만, 본 포스팅에서는 가장 기본적인 HTML의 <select> 엘리먼트를 사용하도록 하겠습니다.\n웹 접근성(accessibility)을 위해서 <label> 엘러먼트도 추가한 후에 <select> 엘리먼트와 연결을 해줍니다.\n이렇게 해주면 <label> 영역뿐만…","timeToRead":3,"fields":{"slug":"/css-selects/","tags":["CSS","HTML","select","a11y"]},"frontmatter":{"title":"CSS 드롭다운 스타일링 가이드 - (HTML <select> 요소)","date":"Aug 23, 2020"}},{"excerpt":"HTML과 CSS를 이용하여 다음과 같은 웹에서 흔히 볼 수 있는 버튼을 만들어보도록 하겠습니다. HTML 작성 먼저 4가지 종류(기본, 성공, 오류, 경고)의 버튼에 대한 HTML을 작성합니다. 디폴트 스타일 제거 대부분의 브라우저는 User Agent Style이라고 불리는 디폴트(default) 스타일을 버튼에 적용해줍니다.\n아무 스타일을 적용하지 않더라도 <button/> 엘리먼트가 시각적으로 버튼처럼 보이게 하기 위함인데요.\n아이러니하게도 커스텀 스타일을 적용할 때는 이러한 브라우저 별로 조금씩 상이한 이 디폴트 스타일이…","timeToRead":3,"fields":{"slug":"/css-buttons/","tags":["HTML","CSS","button","CSS Variables"]},"frontmatter":{"title":"CSS 버튼 스타일링 - <button>","date":"Aug 15, 2020"}},{"excerpt":"이번 포스팅에서는 플렉스박스(Flexbox)와 미디어쿼리(media query)를 사용하여 반응형 네비게이션을 만들어보도록 하겠습니다. 네비게이션 1 아래 HTML 코드는 여느 웹사이트에서나 흔히 볼 수 있는 젼형적인 네비게이션입니다.\n화면의 너비가 좁은 모바일 화면에서는 메뉴를 세로로 표시하고, 화면의 너비가 넓은 데스크탑에서는 메뉴가 가로로 표시하는 경우가 많은데요. 모바일 스타일 반응형 디자인을 할 때는 모바일 우선으로 스타일을 적용하는 것이 여러 가지 측면에서 좋은 관행으로 알려져있습니다. 먼저 <ul/> 엘리먼트를 Fle…","timeToRead":5,"fields":{"slug":"/css-flexbox-navigation/","tags":["CSS","Flexbox","responsive","Media Query"]},"frontmatter":{"title":"CSS 플렉스박스 반응형 네비게이션","date":"Aug 8, 2020"}},{"excerpt":"양식(form)은 사용자로 부터 데이터를 입력 받기 위해 웹애플리케이션에서 필수적인 요소임에도 불구하고, 리액트(React)로 직접 구현을 해보면 생각보다 고려해야 부분이 많다는 것을 느끼게 됩니다.\n이번 포스팅에서는 React Hook를 이용해서 좀 더 깔끔하게 양식 UI를 구현하는 방법에 대해서 알아보겠습니다. 상태 관리 코드 분리하기 기본적으로 하나의 <form/> 여러 개의 <input/>, <select/>, <textarea/>으로 구성됩니다.\n이렇게 사용자가 입력해야 값이 많아질수록 양식은 내부적으로 많은 상태를 가지…","timeToRead":6,"fields":{"slug":"/react-forms-with-hooks/","tags":["JavaScript","React","hook","form","useState","useEffect"]},"frontmatter":{"title":"양식(form) UI에 React Hook 적용하기","date":"Aug 3, 2020"}},{"excerpt":"양식(form)은 웹 애플리케이션에서 사용자로 부터 데이터를 입력 받기 위해 필수적인 UI 요소이죠?\n그런데 리액트(React)로 직접 양식 UI를 구현해보면 처음에 생각했던 것보다 고려해야 할 부분이 많다는 것을 깨닫게 되는데요. 이번 포스팅에서는 비밀번호를 변경하기 위한 전형적인 양식 UI를 React 컴포넌트로 구현하면서 어떤 부분에 신경을 써서 프로그래밍을 해야 하는지 알아보겠습니다! JSX 마크업 먼저 하나의 입력란과 제출 버튼으로 구성된 간단한 양식에 대한 마크업을 작성해보겠습니다.\n<form/> 부모 엘리먼트 아래에 …","timeToRead":5,"fields":{"slug":"/react-forms/","tags":["JavaScript","React","hook","form","useState"]},"frontmatter":{"title":"React로 양식(form) UI 구현하기","date":"Aug 1, 2020"}},{"excerpt":"optional chaining을 지원하기 위해서 ES2020에서 추가된 문법인 ?. 연산자에 대해서 알아보도록 하겠습니다. . 연산자를 통한 속성값 접근의 문제점 그동안 자바스크립트에서는 주로 . 연산자(chaining)를 사용해서 객체의 속성값에 접근했었습니다. 간단한 예로, user 객체의 name 속성의 first 속성값은 다음과 같이 접근할 수 있습니다. 하지만 이렇게 여러 단계로 이루어진 객체를 탐색할 때는 항상 TypeError가 발생할 확률이 생깁니다. 이를 방지하기 위해서 일반적으로 다음과 같은 방어 로직을 넣게 …","timeToRead":2,"fields":{"slug":"/js-optional-chaining/","tags":["JavaScript","ES6","ES2020"]},"frontmatter":{"title":"[ES2020] ?. 연산자 - Optional Chaining","date":"Jul 26, 2020"}},{"excerpt":"nullish coalescing을 지원하기 위해서 ES2020에서 추가된 문법인 ?? 연산자에 대해서 알아보도록 하겠습니다. || 연산자를 통한 기본값 처리의 문제점 그동안 자바스크립트에서는 주로 || 연산자(logical OR)를 사용해서 기본값 처리를 해왔는데, 이 방법은 한 가지 맹점이 있었습니다. 간단한 예로, options 객체를 인자로 받는 다음 isEnabled 함수를 생각해보겠습니다. 의도했던 대로 enabled 속성값이 undefined이거나 null일 때, 기본값인 true를 리턴합니다. 하지만 enabled …","timeToRead":3,"fields":{"slug":"/js-nullish-coalescing/","tags":["JavaScript","ES6","ES2020"]},"frontmatter":{"title":"[ES2020] ?? 연산자 - Nullish Coalescing","date":"Jul 25, 2020"}},{"excerpt":"어떤 언어를 사용하든지 프로그래밍을 하면서 날짜와 시간 처리는 피하기 어려운 부분입니다.\n파이썬은 내장 모듈인 datetime을 통해서 어떻게 날짜와 시간 데이터를 처리를 지원하고 있는지 알아보겠습니다. timedelta datetime 내장 모듈의 timedelta 클래스는 기간을 표현하기 위해서 사용됩니다. timedelta 클래스의 생성자는 주, 일, 시, 분, 초, 밀리 초, 마이크로 초를 인자로 받습니다. timedelta 객체는 내부적으로 일, 초, 마이크로 초 단위만 저장하기 때문에 위와 같이 해당 정보만 표시됩니다.…","timeToRead":6,"fields":{"slug":"/python-datetime/","tags":["Python","datetime","timedelta","timezone","date","time"]},"frontmatter":{"title":"파이썬의 datetime 모듈로 날짜/시간 처리하기","date":"Jul 18, 2020"}},{"excerpt":"파이썬은 버전 3.4부터 다른 언어들 처럼 enum(enumeration, 이넘) 타입을 지원하고 있습니다.\nenum은 일반적으로 서로 관련이 있는 여러 개의 상수의 집합을 정의할 때 사용되는데요.\nenum 클래스를 사용하면 인스턴스의 종류를 제한할 수 있기 때문에 견고한 프로그램을 작성하는데 도움이 됩니다. 클래스 타입 정의 간단한 예로, 웹에서 사용되는 대표적인 3개의 기술(HTML, CSS, JS)을 나타내는 enum 클래스를 작성해보겠습니다.\nenum 내장 모듈로 부터 불러온 Enum 클래스를 확장하여 Skill 타입을 만…","timeToRead":4,"fields":{"slug":"/python-enum/","tags":["Python","enum"]},"frontmatter":{"title":"파이썬 enum 타입 사용법","date":"Jul 11, 2020"}},{"excerpt":"자바스크립트 프로젝트의 규모가 커지면 디렉토리 구조도 복잡해지기 마련입니다.\n혹시 다음과 같은 코드 때문에 해당 모듈을 찾으려고 상위 디렉토리를 하나씩 짚어가며 올라가다가 스트레스 받으신 적이 있으신가요? 😝 상대 경로 Node.js에서 내무 모듈을 불러올 때 가장 흔히 사용되는 방법은 상대 경로를 사용하는 것입니다. 위에서 보시는 것 처럼 상대 경로를 사용해서 모듈을 불러오면 모듈이 어느 경로에 위치하는지 파악하기가 난해해지는 경우가 생깁니다.\n뿐만 아니라, 이 자바스크립트 파일을 다른 디렉토리로 옮기려면 상대 경로를 그에 따라…","timeToRead":3,"fields":{"slug":"/js-babel-resolver/","tags":["JavaScript","ES6","Node.js","Babel","CLI"]},"frontmatter":{"title":"Babel로 별칭 경로 설정하기 (Module Resolver)","date":"Jul 5, 2020"}},{"excerpt":"ES6(ES2105) 이상의 최신 자바스크립트 문법으로 작성된 코드가 노드JS(Node.js)에서 실행이 안 되서 애를 먹는 경우가 종종 있는데요.\n이번 포스팅에서는 자바스크립트 트랜스파일러(Transpiler)인 Babel을 이용하여 이 문제를 깔끔하게 해결해보겠습니다. 개발자들이 실행 환경에 구애받지 않고 항상 최신 문법의 자바스크립트로 코딩할 수 있도록 도와주는 유용한 도구인 바벨(Babel)에 대해서는 별도 포스팅을 참고바랍니다. Node.js에서 ES6 코드 실행 오류 먼저 간단한 예제 프로젝트를 하나를 만들겠습니다. j…","timeToRead":6,"fields":{"slug":"/js-babel-node/","tags":["JavaScript","ES6","ESM","Node.js","Babel","CLI"]},"frontmatter":{"title":"Babel로 Node.js에서 ES6 코드 실행하기","date":"Jul 1, 2020"}},{"excerpt":"Flexbox(플렉스박스)를 이용한 반응형 웹디자인이 대중화되면서 CSS에서 Flexbox의 존재감이 점점 커지고 있습니다.\n이번 포스팅에서는 Flexbox를 이해하기 위해서 꼭 필요한 핵심 개념과 자주 사용되는 속성에 대해서 살펴보겠습니다. Flexbox 구성 요소 Flexbox는 일반적으로 하나의 Flex container와 여러 개의 Flex item으로 구성됩니다.\n따라서, Flexbox를 사용할 때 마크업과 스타일은 대략 다음과 같은 형태를 띠게 됩니다. 여러 개의 내부 엘리먼트를 담고 있는 외부 엘리먼트에 display…","timeToRead":4,"fields":{"slug":"/css-flexbox/","tags":["CSS","Flexbox"]},"frontmatter":{"title":"CSS 플렉스박스(Flexbox) 이해하기","date":"Jun 28, 2020"}},{"excerpt":"큐(queue)는 선입선출, FIFO(First In First Out) 기반의 매우 유명한 자료구조입니다. 큐를 사용하면 데이터를 추가한 순서대로 제거할 수 있기 때문에 비동기 메세징(asynchronous messaging), 스트리밍(streaming), 너비 우선 탐색(breath first search) 등 소프트웨어 개발에서 널리 응용되고 있습니다. 이번 포스팅에서는 파이썬에서 큐 자료구조를 어떻게 사용할 수 있는지 알아보도록 하겠습니다. list 파이썬에서 큐를 사용하는 가장 간단한 방법은 범용 자료구조인 list를 …","timeToRead":4,"fields":{"slug":"/python-queue/","tags":["Python","list","queue"]},"frontmatter":{"title":"파이썬에서 큐(queue) 자료구조 사용하기","date":"Jun 27, 2020"}},{"excerpt":"타입 힌트(type hint)를 언어 차원에서 지원하기 위해서 파이썬 버전 3.5에서 typing 모듈이 스탠더드 라이브러리에 추가되었습니다.\n이번 포스팅에서는 typing 모듈을 사용해서 파이썬 코드에 타입 어노테이션을 추가하는 방법에 대해서 알아보겠습니다. 파이썬의 타입 어노테이션에 대한 자세한 설명은 관련 포스팅를 참고 바랍니다. List, Dict, Tuple, Set 타입 어노테이션을 사용하다 보면 리스트, 사전, 튜플, 세트와 같은 파이썬 내장 자료구조에 대한 타입을 명시해야 할 때가 있습니다.\n이럴 때는 typing …","timeToRead":3,"fields":{"slug":"/python-typing/","tags":["Python","파이썬","Mypy","typing","TypeAnnotation","TypeHint"]},"frontmatter":{"title":"[파이썬] typing 모듈로 타입 표시하기","date":"Jun 13, 2020"}},{"excerpt":"Material UI에서 기본적으로 제공하는 컴포넌트를 그대로 사용해도 훌륭하지만 약간씩 스타일을 변경하고 싶을 때가 있습니다.\n이번 포스팅에서는 Material UI에 사용자가 정의한 스타일을 적용하는 방법에 대해서 알아보겠습니다. Material UI의 기본적인 셋업에 대한 부분은 관련 포스팅를 참고 바랍니다. CssBaseline 컴포넌트 어떤 브라우저를 돌아가느냐에 상관없이 일괄적인 스타일을 적용되려면, CSS를 전역에서 정규화(normalize)시켜주는 것이 권장됩니다.\n이를 위해서 우선 <CssBaseline /> 컴포…","timeToRead":3,"fields":{"slug":"/material-ui-styles/","tags":["MaterialUI","JavaScript","자바스크립트","React","리액트"]},"frontmatter":{"title":"Material UI 스타일링","date":"Jun 7, 2020"}},{"excerpt":"파이썬 버전 3.5에 추가된 타입 어노테이션(type annotation) 덕분에 파이썬에서도 Mypy와 같은 도구를 통해서 타입 체크가 가능해졌습니다. 파이썬의 타입 어노테이션에 대한 자세한 설명은 관련 포스팅를 참고바라겠습니다. 타입 어노테이션 / 타입 체크 파이썬과 같이 동적(dynamic) 프로그래밍 언어에서 정적(static) 타입 체크가 왠 말이냐고 생각하시는 분들이 있으실 것 같습니다.\n파이썬의 동적 타입 처리는 유연함은 일회성 스크립트나 소규모의 애플리케이션을 빠르게 개발할 때는 큰 장점으로 작용합니다.\n하지만 애플…","timeToRead":3,"fields":{"slug":"/python-mypy/","tags":["Python","파이썬","Mypy","typing","TypeCheck"]},"frontmatter":{"title":"파이썬 타입 체크 - Mypy","date":"Jun 6, 2020"}},{"excerpt":"Docker Compose는 여러 개의 컨테이너(container)로 구성된 애플리케이션을 관리하기 위한 간단한 오케스트레이션(Orchestration) 도구입니다.\n여러 개의 컨테이너로 구성된 Docker Compose 애플리케이션 내에서 컨테이너 간의 통신은 어떻게 이루어질까요? Docker 네트워크에 대해서 생소하신 분들은 관련 포스팅를 통해 먼저 기본 개념을 파악하시기를 권장드립니다. Docker Compose 설정법이나 커맨드가 생소하신 분들은 아래 포스팅를 먼저 읽고 돌아오시기를 추천드립니다. Docker Compose…","timeToRead":7,"fields":{"slug":"/docker-compose-networks/","tags":["Docker","도커","Compose","container","컨테이너","network","네트워크","docker-compose.yml"]},"frontmatter":{"title":"Docker Compose 네트워크","date":"Jun 4, 2020"}},{"excerpt":"웹페이지의 레이아웃을 잡을 때 컨텐츠를 화면 중앙에 위치시키기나 격자로 배치해야 할 때가 많이 있습니다.\nMaterial UI의 <Container/>와 <Grid/> 컴포넌트를 사용하면 이러한 웹페이지 레이아웃을 매우 쉽고 간단하게 잡을 수 있습니다. Material UI의 기본적인 셋업에 대한 부분은 관련 포스팅를 참고 바랍니다. Container 컴포넌트 <Container/> 컴포넌트는 컨텐츠를 좌우에 적당한 간격을 두고 화면 중앙에 위치시킬 때 사용합니다.\n최대 너비만을 제한하는 fluid 모드와 항상 동일한 너비를 강제…","timeToRead":2,"fields":{"slug":"/material-ui-containers-grids/","tags":["MaterialUI","JavaScript","자바스크립트","React","리액트"]},"frontmatter":{"title":"Material UI의 Container, Grid 컴포넌트","date":"Jun 1, 2020"}},{"excerpt":"Docker Compose는 여러 개의 컨테이너(container)로 구성된 애플리케이션을 관리하기 위한 간단한 오케스트레이션(Orchestration) 도구입니다.\n이번 포스팅에서는 Compose 애플리케이션을 터미널에서 제어하기 위해 사용되는 Docker Compose 커맨드에서 대해서 알아보겠습니다. -f 옵션 Docker Compose는 기본적으로 커맨드가 실행하는 디렉토리에 있는 docker-compose.yml 또는 docker-compose.yaml를 설정 파일로 사용합니다.\n다른 이름이나 경로의 파일을 Docker …","timeToRead":4,"fields":{"slug":"/docker-compose/","tags":["Docker","도커","Compose","container","컨테이너","image","이미지","Dockerfile","docker-compose.yml","CLI"]},"frontmatter":{"title":"Docker Compose 커맨드 사용법","date":"May 30, 2020"}},{"excerpt":"파이썬 버전 3.5에 추가된 타입 어노테이션(type annotation) 또는 타입 힌트(type hint)가 점점 많은 파이썬 프로젝트에서 사용되고 있는 추세입니다.\n정적(static) 프로그래밍 언어에서 흔히 볼 수 있는 타입 체킹(type checking)도 아니고 파이썬의 타입 힌팅(type hinting)는 도대체 무엇일까요? 파이썬은 동적 프로그래밍 언어 동적(dynamic) 프로그래밍 언어인 파이썬에서는 인터프리터(interpreter)가 코드를 실행하면서 타입(type)을 추론하여 체크합니다.\n또한 파이썬에서 변수…","timeToRead":5,"fields":{"slug":"/python-type-annotations/","tags":["Python","파이썬","typing","TypeAnnotation","TypeHint"]},"frontmatter":{"title":"파이썬 타입 어노테이션/힌트","date":"May 29, 2020"}},{"excerpt":"Docker Compose를 이용하면 여러 개의 컨테이너(container)로 구성된 애플리케이션을 하나의 파일에 정의해놓고 한 번에 올리거나 내릴 수 있습니다.\n이러한 편리함 때문에 Docker Compose는 특히 로컬 개발 환경이나 테스트 자동화 환경에서 간단한 컨테이너 오케스트레이션(Container Orchestration) 도구로 많이 사용되고 있는데요.\n이번 포스팅에서는 Docker Compose 설정에 사용되는 docker-compose.yml을 작성하는 방법에 대해서 알아보겠습니다. 파일 위치 / 기본 구조 Doc…","timeToRead":3,"fields":{"slug":"/docker-compose-file/","tags":["Docker","도커","Compose","container","컨테이너","image","이미지","Dockerfile","docker-compose.yml"]},"frontmatter":{"title":"Docker Compose 설정 방법","date":"May 28, 2020"}},{"excerpt":"CommonJS를 모듈 시스템을 채택했던 Node.js에서는 import, export와 같은 ES 모듈을 사용하려면 Babel과 같은 트랜스파일러(transpiler)를 사용했어야 했는데요.\nNode.js 버전 13.2부터 ES 모듈 시스템에 대한 정식 지원이 시작됨에 따라 다른 도구 없이 Node.js에서 손쉽게 ES 모듈을 사용할 수 있게 되었습니다. 🎉 Node.js의 ES 모듈 지원 ES 모듈(ES Modules)은 ES6/ES2015의 일부로 도입되어 현재 자바스크립트의 표준 모듈 시스템으로 서서히 자리 잡아가고 있습니…","timeToRead":4,"fields":{"slug":"/js-node-es-modules/","tags":["JavaScript","Node.js","ES6","ESM","import","export"]},"frontmatter":{"title":"Node.js에서 ES 모듈(import/export) 사용하기","date":"May 23, 2020"}},{"excerpt":"데코레이터(decorator)를 사용하면 함수를 수정하지 않고도 유연하게 함수에 특정 동작을 추가하거나 작동 방식을 바꿀 수 있습니다. 간단한 데코레이터 작성해보기 \"Hi!\"를 콘솔에 출력하는 say_hi()라는 함수를 작성하고 호출해보겠습니다. 다음으로 함수 호출 전/후로 \"before\"과 \"after\"를 출력해주는 매우 간단한 데코레이터 함수 decorate()를 작성해보겠습니다. decorate() 함수는 함수를 인자로 받으며, 내부에 wrapper()라는 함수를 선언하고 있습니다.\n그리고 wrapper() 함수는 decor…","timeToRead":4,"fields":{"slug":"/python-decorators/","tags":["Python","파이썬","decorator","데코레이터"]},"frontmatter":{"title":"[파이썬] 데코레이터 기본 사용법","date":"May 18, 2020"}},{"excerpt":"파이썬에 내장되어 있는 property() 함수와 @property 데코레이터에 대해서 알아보겠습니다. 필드명 사람의 이름, 성, 나이 데이터를 담기 위한 간단한 클래스를 하나 작성해보겠습니다.\n아래 Person 클래스는 이름 first_name, last_name, age 이렇게 3개의 필드로 이루어져 있습니다. Person 클래스의 인스턴스를 생성 후에, 현재 필드 값을 읽거나 새로운 필드 값 쓰는 것은 매우 자유롭습니다. 이렇게 필드명을 사용해서 객체의 내부 데이터에 접근하는 것은 편리하지만, 해당 데이터는 외부로 부터 무방…","timeToRead":4,"fields":{"slug":"/python-property/","tags":["Python","파이썬","property"]},"frontmatter":{"title":"[파이썬] property 사용법 (함수/데코레이터)","date":"May 17, 2020"}},{"excerpt":"웹페이지의 UI를 구현하다 보면 서로 관련이 있는 여러 개의 컴포넌트를 시각적으로 하나의 그룹처럼 묶어주는 컴포넌트가 필요합니다.\n이렇게 관련된 여러 컴포넌트를 보기 쉽게 도와주는 Material UI의 <Paper/>와 <Card/> 컴포넌트에 대해서 알아보겠습니다. Material UI의 기본적인 셋업에 대한 부분은 관련 포스팅를 참고 바랍니다. Paper 컴포넌트 먼저 살펴볼 <Paper/> 컴포넌트는 마치 포스팅잇처럼 화면에서 도드라져 보이는 효과를 제공합니다. elevation, outlined 이렇게 2가지 형태를 사용…","timeToRead":2,"fields":{"slug":"/material-ui-papers-cards/","tags":["MaterialUI","JavaScript","자바스크립트","React","리액트"]},"frontmatter":{"title":"Material UI의 Paper, Card 컴포넌트","date":"May 16, 2020"}},{"excerpt":"이번 포스팅에서는 collections 모듈의 OrderedDict 클래스에 대해서 알아보겠습니다. OrderedDict 파이썬 3.6 이전에서는 사전에 데이터를 삽입된 순서대로 데이터를 획득할 수가 없었습니다.\n따라서 다음과 같이 무작위 순서로 데이터를 얻게 되는 일이 빈번했었는데요. 대신에 collections 모듈의 OrderedDict 클래스를 사용하면 데이터의 순서를 보장받을 수 있었습니다. 하지만 파이썬 3.6 부터는 기본 사전(dict)도 OrderedDict 클래스와 동일하게 동작하기 때문에 이러한 용도로 Order…","timeToRead":2,"fields":{"slug":"/python-collections-ordered-dict/","tags":["Python","파이썬","dict","사전","dictionary","collections","OrderedDict"]},"frontmatter":{"title":"[파이썬] collections 모듈의 OrderedDict 클래스 사용법","date":"May 14, 2020"}},{"excerpt":"최근에 많은 Django 프로젝트가 Docker를 이용해서 컨테이너(container) 기반으로 개발되고 테스트, 배포되고 있습니다.\n이번 포스팅에서는 Docker Compose이용해서 PostgreSQL를 데이터베이스로 사용하는 Django 애플리케이션을 셋업해보도록 하겠습니다. Docker를 처음 접하시는 분들은 관련 포스팅를 참고하시어 먼저 본인 컴퓨터에서 Docker에 설치하시기 바랍니다. requirements.txt 파이썬에서는 보통 프로젝트에서 필요한 패키지를 requirements.txt 파일에 등록해놓고, 패키지 …","timeToRead":9,"fields":{"slug":"/docker-compose-django/","tags":["Docker","Compose","container","컨테이너","image","이미지","mount","마운트","Dockerfile","Python","Django","PostgreSQL"]},"frontmatter":{"title":"Docker Compose로 Django 프로젝트 셋업","date":"May 9, 2020"}},{"excerpt":"Docker 컨테이너(container)에 쓰여진 데이터는 기본적으로 컨테이너가 삭제될 때 함께 사라지게 됩니다.\nDocker에서 돌아가는 많은 애플리케이션이 컨테이너의 생명 주기와 관계없이 데이터를 영속적으로 저장을 해야하는데요.\n뿐만 아니라 많은 경우 여러 개의 Docker 컨테이너가 하나의 저장 공간을 공유해서 데이터를 읽거나 써야합니다. 이렇게 Docker 컨테이너의 생명 주기와 관계없이 데이터를 영속적으로 저장할 수 있도록 Docker는 두가지 옵션을 제공하는데요.\n첫번째는 Docker 볼륨(volume), 두번째는 바인…","timeToRead":6,"fields":{"slug":"/docker-volumes-bind-mounts/","tags":["Docker","도커","volume","볼륨","mount","마운트","container","컨테이너","CLI"]},"frontmatter":{"title":"Docker 컨테이너에 데이터 저장 (볼륨/바인드 마운트)","date":"May 8, 2020"}},{"excerpt":"마크다운(Markdown)은 경량화된 마크업 언어로 구조적인 텍스트의 편집 용도로 여러 가지 도구에서 사용되고 있습니다.\n대표적인 사례인 Github의 경우, 확장된 형태의 마크다운을 지원하고 있기 때문에 이슈(issue)나 PR(pull reqeust)를 생성할 때 쉽게 접해볼 수 있습니다. 이번 포스팅에서는 Markdown 형태의 텍스트를 HTML 형태의 택스트로 변환하는 방법에 대해서 살펴보겠습니다. Unified, Remark, Rehype remark는 마크다운을 처리할 때 사용하는 라이브러리이고, rehype은 HTML…","timeToRead":3,"fields":{"slug":"/unified-remark-rehype/","tags":["JavaScript","자바스크립트","Markdown","HTML","unified","remark","rehype"]},"frontmatter":{"title":"Markdown을 HTML로 변환 (unified, remark, rehype)","date":"May 2, 2020"}},{"excerpt":"Docker 컨테이너(container)는 격리된 환경에서 돌아가기 때문에 기본적으로 다른 컨테이너와의 통신이 불가능합니다.\n하지만 여러 개의 컨테이너를 하나의 Docker 네트워크(network)에 연결시키면 서로 통신이 가능해집니다.\n이번 포스팅에서는 컨테이너 간 네트워킹이 가능하도록 도와주는 Docker 네트워크에 대해서 알아보도록 하겠습니다. 네트워크 조회 Docker 네트워크의 기본은 내 컴퓨터에서 어떤 네트워크가 생성되어 있는지를 아는 것일 겁니다.\ndocker network ls 커맨드를 사용하면 현재 생성되어 있는 …","timeToRead":9,"fields":{"slug":"/docker-networks/","tags":["Docker","도커","network","네트워크","container","컨테이너","CLI"]},"frontmatter":{"title":"Docker 네트워크 사용법","date":"Apr 26, 2020"}},{"excerpt":"사용자로 부터 정보를 입력 받는 양식(form) UI의 경우 <input/> 또는 <select/>, <textarea/>와 같은 HTML 엘리먼트가 많이 사용됩니다.\n이러한 입력 엘리먼트는 브라우저마다 다른 스타일로 표현되고, 기본 스타일은 그대로 사용하기에는 너무 단조롭기 때문에 CSS를 이용해서 커스텀 스타일을 해주는 것이 일반적일 것입니다. Material UI는 이러한 입력 엘리먼트를 이미 예쁘게 디자인된 React 컴포넌트 형태로 제공을 해주기 때문에 우리는 그냥 편리하게 갔다 쓰기만 하면 됩니다.\n이번 포스팅에서는 M…","timeToRead":4,"fields":{"slug":"/material-ui-text-fields/","tags":["MaterialUI","JavaScript","자바스크립트","React","리액트"]},"frontmatter":{"title":"Material UI의 TextField 컴포넌트","date":"Apr 25, 2020"}},{"excerpt":"Docker CLI 도구는 Docker 컨테이너(container)의 효과적인 관리를 위해서 다양한 커맨드(command)를 제공합니다.\n이번 포스팅에서는 자주 쓰이는 커맨드 위주로 어떻게 Docker 컨테이너를 효과적으로 제어할 수 있는지 알아보도록 하겠습니다. 컨테이너 조회 가장 먼저 살펴볼 docker ps 커맨드는 Docker 컨테이너를 조회를 위해 사용되며 기본적으로 실행 중인 컨테이너 목록이 출력됩니다. -a 옵션을 사용하면 현재 중지되어 있는 컨테이너까지 함께 출력됩니다. -s 옵션을 사용하면 각 컨테이너의 디스크 사…","timeToRead":6,"fields":{"slug":"/docker-containers/","tags":["Docker","도커","container","컨테이너","Dockerfile","CLI"]},"frontmatter":{"title":"Docker 컨테이너 관련 커맨드 사용법","date":"Apr 24, 2020"}},{"excerpt":"우리는 파이썬으로 코딩을 하면서 데이터를 담아두기 위해서 여러 가지 방법을 사용합니다. 리스트(list), 튜플(tuple), 사전(dictoinary), 네임드 튜플(namedtuple), 세트(set), 프로즌 세트(frozen set)와 같은 내장 자료구조는 사용하기 간편하다는 장점이 있습니다.\n반면에 클래스(class)를 이용해서 데이터를 담아두면 type-safe해지기 때문에 프로그램 실행 중에 오류가 발생할 확률이 적어진다는 장점이 있습니다. 파이썬 3.7에서 dataclasses라는 매우 매력적인 모듈이 표준 라이브러…","timeToRead":8,"fields":{"slug":"/python-dataclasses/","tags":["Python","파이썬","dataclasses","데이터 클래스"]},"frontmatter":{"title":"[파이썬] 데이터 클래스 사용법 (dataclasses 모듈)","date":"Apr 21, 2020"}},{"excerpt":"Docker를 사용하면서 가장 자주 접하는 커맨드는 단연 컨테이너를 실행하기 위해서 쓰이는 docker run일 것입니다.\ndocker run 커맨드는 상당히 여러 가지 옵션을 통해 다양한 방식으로 컨테이너를 실행할 수 있도록 해줍니다.\n이번 포스팅에서는 이중에서 자주 쓰이는 옵션 위주로 dockr run 커맨드를 어떻게 사용하는지 알아보겠습니다. 기본 포맷 docker run 커맨드의 기본 포맷은 다음과 같습니다. 여기서 이미지 식별자는 필수이며 이미지 ID나 리파지토리(repository):태그(tag)를 사용할 수 있습니다.…","timeToRead":5,"fields":{"slug":"/docker-run/","tags":["Docker","도커","container","컨테이너","Dockerfile","CLI"]},"frontmatter":{"title":"docker run 커맨드 사용법","date":"Apr 19, 2020"}},{"excerpt":"React 앱을 개발할 때 Material UI와 같은 컴포넌트 라이브러리를 사용하는 이유 중 하나는 버튼과 같이 너무 기본적인 컴포넌트를 직접 구현하는데 들어가는 시간과 노력을 절약하기 위함일 것입니다. 일반적으로 버튼은 UI에서 사용자의 명령을 받아드리는 창구 역할을 하고, 여러 페이지에 거쳐서 다양한 형태로 사용됩니다.\n따라서 단순히 사용자 경험 뿐만 아니라 해당 서비스의 전체적인 브랜드 이미지에도 큰 영향을 줄 수 있습니다. 이번 포스팅에서는 이렇게 생각보다 상당히 중요할 수 있는 버튼을 Material UI에서 제공하는 …","timeToRead":3,"fields":{"slug":"/material-ui-buttons/","tags":["MaterialUI","JavaScript","자바스크립트","React","리액트"]},"frontmatter":{"title":"Material UI의 버튼 컴포넌트","date":"Apr 18, 2020"}},{"excerpt":"지난 포스팅에서는 Material UI의 <Typography/> 컴포넌트를 사용하여 텍스트를 표현하는 방법에 대해서 알아보았습니다.\n이번 포스팅에서는 텍스트와 더불어 UI에서 감초같은 역할을 하는 아이콘을 Material UI에서 어떻게 사용할 수 있는지 알아보도록 하겠습니다. Material UI의 기본적인 셋업에 대한 부분은 관련 포스팅를 참고 바랍니다. Material Icons Material UI는 @material-ui/icons 패키지를 통해서 1,000 여종의 SVG 아이콘을 제공하고 있습니다.\n그래서 아이콘을 엄…","timeToRead":3,"fields":{"slug":"/material-ui-icons/","tags":["MaterialUI","icon","아이콘","JavaScript","자바스크립트","React","리액트"]},"frontmatter":{"title":"Material UI 아이콘 사용하기","date":"Apr 17, 2020"}},{"excerpt":"Material UI는 현재 가장 많이 쓰이고 있는 React UI 컴포넌트 라이브러리 중에 하나입니다.\n많은 React UI 컴포넌트 라이브러리는 기존에 있는 CSS 라이브러리를 기반으로 만들어지는 경우가 많습니다.\nReact Bootstrap이 대표적인 예인데요.\n이러한 React 라이브러리는 근간이 되는 CSS 라이브러리에 대한 이해나 경험이 없는 경우 여러모로 사용하기 불편한 경우가 많습니다. 하지만 Material UI는 여타 React UI 컴포넌트 라이브러리와 달리 처음부터 React로 만들어졌기 때문에 많은 개발자들…","timeToRead":3,"fields":{"slug":"/material-ui-typography/","tags":["MaterialUI","typography","JavaScript","자바스크립트","React","리액트"]},"frontmatter":{"title":"Material UI 소개 및 Typography 컴포넌트 사용법","date":"Apr 16, 2020"}},{"excerpt":"Docker CLI 도구는 Docker 이미지(image)의 효과적인 관리를 위해서 다양한 커맨드(command)를 제공합니다.\n이번 포스팅에서는 자주 쓰이는 커맨드 위주로 어떻게 Docker 이미지를 제어할 수 있는지 알아보도록 하겠습니다. 이미지 조회 docker images 커맨드는 이미지를 조회할 때 사용됩니다. 인자를 넘기지 않고 이 커맨드를 호출하면 전체 이미지 목록을 출력해줍니다. 특정 리파지토리(repository)에 해당하는 이미지만 필터링해서 보고 싶을 때는, 리파지토리를 인자로 넘겨주면 됩니다. 태그까지 인자로…","timeToRead":4,"fields":{"slug":"/docker-images/","tags":["Docker","도커","image","이미지","Dockerfile","CLI"]},"frontmatter":{"title":"Docker 이미지 관련 커맨드 사용법","date":"Apr 12, 2020"}},{"excerpt":"Docker가 대중화되면서 많은 프로젝트들이 개발 환경을 컨테이너화(containerization)시키고 있습니다.\n이러한 프로젝트의 최상위 디렉터리에서는 항상 Dockerfile이 위치하게 되며, 따라서 Dockerfile 이해하는 것은 그 프로젝트의 개발 환경이 어떻게 구성되는지 이해하는 첫걸음입니다. Dockerfile은 Docker 이미지(image)가 어떤 단계를 거쳐 빌드(build)되야 하는지를 담고있는 텍스트 파일입니다.\nDocker는 Dockerfile에 나열된 명령문을 차례대로 수행하여 이미지를 생성해줍니다. 이…","timeToRead":7,"fields":{"slug":"/dockerfile/","tags":["Docker","도커","container","컨테이너","image","이미지","Dockerfile"]},"frontmatter":{"title":"Dockerfile에서 자주 쓰이는 명령어","date":"Apr 7, 2020"}},{"excerpt":"최근에 많은 NodeJS 프로젝트들이 Docker를 이용해서 개발되고 있습니다.\n이번 포스팅에서는 NodeJS로 간단한 Express 서버 애플리케이션을 작성해보고, Docker를 이용해서 이 애플리케이션을 어떻게 컨테이너화(containerized) 할 수 있는지에 대해서 알아보도록 하겠습니다. 실습 프로젝트 환경 구성 원하는 위치에 디렉터리를 생성하고, 그 안에 package.json 파일을 생성합니다. (컴퓨터에 NodeJS가 설치가 안 되어 있다면 먼저 NodeJS를 다운로드 받아 설치해야 합니다.) 그 다음, npm을 통…","timeToRead":8,"fields":{"slug":"/docker-nodejs/","tags":["Docker","도커","container","컨테이너","image","이미지","mount","마운트","Dockerfile","Node.js","Express"]},"frontmatter":{"title":"Docker를 이용한 NodeJS 개발","date":"Apr 5, 2020"}},{"excerpt":"개발자에게 Docker란? Docker는 쉽게 말해서 컨테이너(container)를 돌려주는 엔진(engine)이라고 생각할 수 있는데요.\n2013년 출시 후 꾸준히 인기를 얻어온 Docker는 이제는 개발자들도 모르면 불편할 정도로 대중화가 되어 버린 것 같습니다.\n하지만 아직도 많은 개발자들이 업무에서 Docker를 매일 사용하고 있음에도 불구하고, Docker를 시스템 또는 DevOps 엔지니어만을 위한 도구로 여기거나, Docker 직접 다루는 것을 회피하다가, 문제가 생겼을 때 스스로 해결을 하지 못해서 곤혼스러워하는 개…","timeToRead":4,"fields":{"slug":"/docker/","tags":["Docker","도커","container","컨테이너","image","이미지"]},"frontmatter":{"title":"Docker 시작하기 (개념/설치)","date":"Apr 4, 2020"}},{"excerpt":"reduce 함수 파이썬의 functools 내장 모듈의 reduce() 함수는 여러 개의 데이터를 대상으로 주로 누적 집계를 내기 위해서 사용합니다. 기본 문법은 다음과 같은데요. 기본적으로 초기값을 기준으로 데이터를 루프 돌면서 집계 함수를 계속해서 적용하면서 데이터를 누적하는 방식으로 작동합니다. 여기서, 집계 함수는 두개의 인자를 받아야 하는데요. 첫번째 인자는 누적자(accumulator), 두번째 인자는 현재값(current value)가 넘어오게 됩니다.\n누적자는 함수 실행의 시작부터 끝까지 계속해서 재사용되는 값이고…","timeToRead":5,"fields":{"slug":"/python-functools-reduce/","tags":["Python","파이썬","functools","reduce","FP","FunctionalPrograming"]},"frontmatter":{"title":"파이썬 reduce 함수 사용법","date":"Mar 22, 2020"}},{"excerpt":"함수형 프로그래밍에서 데이터 필터링(filtering) 작업을 할 때 반복문 대신에 함수 호출로 처리하는 경우가 많은데요.\n이번 포스팅에서는 파이썬의 filter() 함수를 사용하여 특정 조건을 충족하는 요소만 추출하는 방법에 대해서 알아보겠습니다. filter 내장 함수 파이썬의 내장 함수인 filter()는 여러 개의 데이터로 부터 일부의 데이터만 추려낼 때 사용하는데요.\n따라서, 여러 개의 데이터를 담고 있는 리스트(list)나 튜플(tuple)을 대상으로 주로 사용하는 함수입니다. 사용 방법은 매우 간단한데요. 기본 문법은…","timeToRead":4,"fields":{"slug":"/python-filter/","tags":["Python","BIF","filter","comprehensions","FP"]},"frontmatter":{"title":"파이썬의 filter 내장 함수로 데이터 추출하기","date":"Mar 21, 2020"}},{"excerpt":"함수형 프로그래밍에서 데이터 맵핑(mapping) 작업을 할 때 반복문 대신에 함수 호출로 처리하는 경우가 많은데요.\n이번 포스팅에서는 파이썬의 map() 함수를 사용하여 여러 데이터를 한 번에 변환하는 방법에 대해서 알아보겠습니다. map 내장 함수 파이썬의 내장 함수인 map()는 여러 개의 데이터를 한 번에 다른 형태로 변환하기 위해서 사용하는데요.\n따라서, 여러 개의 데이터를 담고 있는 리스트(list)나 튜플(tuple)을 대상으로 주로 사용하는 함수입니다. 사용 방법은 매우 간단한데요. 기본 문법은 다음과 같습니다. m…","timeToRead":4,"fields":{"slug":"/python-map/","tags":["Python","BIF","map","comprehensions","FP"]},"frontmatter":{"title":"파이썬의 map 내장 함수로 데이터 변환하기","date":"Mar 21, 2020"}},{"excerpt":"Immutability (불변성) 최근 소프트웨어 개발 트랜드를 보면 프로그래밍 언어에 관계없이 불변(imuutable) 데이터 타입의 사용을 권장하는 추세입니다.\n여러 가지 이유가 있겠지만 메모리의 가격이 계속해서 싸지면서 데이터를 복제하는 대신에 변경하는 것이 더 이상 큰 이점으로 여겨지지 않고 있습니다.\n반면에, 데이터를 변경하는 것에 대한 리스크는 멀티 쓰레드 기반의 동시/병렬 프로세싱 기법이 발달하면서 점점 더 커지고 있습니다.\n즉, 여러 쓰레드가 동시에 데이터를 변경할 경우, 소프트웨어가 어떻게 동작할지 예측이 어렵고 …","timeToRead":5,"fields":{"slug":"/python-immutable-datatypes/","tags":["Python","immutability","불변성","tuple","튜플","frozenset","namedtuple"]},"frontmatter":{"title":"파이썬의 불변(immutable) 자료구조 - tuple, frozenset, namedtuple","date":"Mar 15, 2020"}},{"excerpt":"가짜 데이터 소프트웨어를 개발하다 보면, 특히 시제품(prototype)을 개발하거나, 단위 테스트를 작성할 때 가짜 데이터가 필요할 때가 있습니다.\n이럴 때, 직접 가짜 데이터를 하드코딩(hard-coding)할 수도 있겠지만, 좀 더 쉽고 빠르게 가짜 데이터를 얻을 수 있는 방법이 있어서 소개드리려고 합니다.\n바로, Faker라는 라이브러리인데요. Faker를 사용하면 가짜 데이터를 정말 너무 간단하게 생성할 수 있습니다. 👍 패키지 설치 패키지 임포트 가짜 이름 생성 name() 메서드를 사용하면 간단하게 가짜 이름을 생성할…","timeToRead":4,"fields":{"slug":"/python-faker/","tags":["Python","testing","faker"]},"frontmatter":{"title":"파이썬으로 가짜 데이터 생성하기 - Faker","date":"Mar 14, 2020"}},{"excerpt":"지난 포스팅에서 파이썬의 logging 내장 모듈을 이용해서 정말 기본적인 로깅 방법에 대해서 살펴보았습니다.\n이번 포스팅에서는 애플리케이션 규모가 커짐에 따라 어떻게 효과적으로 로깅을 설정해야 하는지에 대해서 다뤄보도록 하겠습니다. 핵심 컴포넌트 로깅 설정을 제대로 하기 위해서는 먼저 로깅 시스템을 구성하는 핵심 컴포넌트를 이해하는 것이 중요합니다. 먼저 가장 로깅 시스템의 가장 근간이 되는 로거(logger)는 로그 메시지를 남기기 위해서 우리가 직접 사용하는 프로그래밍 인터페이스를 제공합니다.\n우리는 로거를 통해서 debug…","timeToRead":6,"fields":{"slug":"/python-logging-config/","tags":["Python","logging","logger","Hander","Formatter"]},"frontmatter":{"title":"파이썬 로깅 설정 - logger, handler, formatter","date":"Mar 7, 2020"}},{"excerpt":"여러 환경에 파이썬 애플리케이션을 배포하려면 환경 변수라는 것을 이용해야하는데요.\n이번 포스팅에서는 파이썬에서 환경 변수에 어떻게 접근하고 설정할 수 있는지에 대해서 알아보겠습니다. 환경 변수란? 먼저 환경 변수(environment variable)가 무엇인지 간단하게 짚고 넘어가면 좋을 것 같은데요.\n환경 변수는 운영 체제(operating system) 수준에서 설정되는 변수로, 주로 애플레케이션 수준에서 설정하기가 불가능하거나 어려운 값들을 환경 변수로 관리하는 경우가 많죠. 환경 변수를 이용하면 애플리케이션 코드를 수정하…","timeToRead":5,"fields":{"slug":"/python-os-environ/","tags":["Python","env"]},"frontmatter":{"title":"파이썬에서 환경 변수 다루기 (os.environ)","date":"Feb 29, 2020"}},{"excerpt":"Subscription GraphQL에는 query와 mutation 그리고 subscription 이렇게 총 3가지 operation type이 있습니다.\n이 중에 query는 데이터 조회를 위해서 필수적으로 사용되고, mutation은 데이터 변경을 위해서 많이 사용되고 있습니다.\nquery와 mutation 대비 다소 생소한 subscription은 주로 실시간(real-time) 애플리케이션을 구현하기 위해서 사용되는데요.\nsubscription도 기본적으로 query처럼 데이터를 조회를 위해서 사용되지만 작동 방식에서 큰…","timeToRead":4,"fields":{"slug":"/graphql-react-apollo-subscriptions/","tags":["자바스크립트","JavaScript","GraphQL","Subscription","Apollo","ApolloHooks","React"]},"frontmatter":{"title":"[GraphQL] React Apollo로 Subscription 호출","date":"Feb 23, 2020"}},{"excerpt":"Subscription GraphQL에는 query와 mutation 그리고 subscription 이렇게 총 3가지 operation type이 있습니다.\n이 중에 query는 데이터 조회를 위해서 필수적으로 사용되고, mutation은 데이터 변경을 위해서 많이 사용되고 있습니다.\nquery와 mutation 대비 다소 생소한 subscription은 주로 실시간(real-time) 애플리케이션을 구현하기 위해서 사용되는데요.\nsubscription도 기본적으로 query처럼 데이터를 조회를 위해서 사용되지만 작동 방식에서 큰…","timeToRead":5,"fields":{"slug":"/graphql-apollo-server-subscriptions/","tags":["JavaScript","GraphQL","Subscription","Apollo","ApolloServer","PubSub","setInterval"]},"frontmatter":{"title":"[GraphQL] Apollo Server로 Subscription 구현","date":"Feb 22, 2020"}},{"excerpt":"지난 포스팅에서 unittest.mock 모듈의 Mock 또는 MagicMock 클래스를 사용하여 기본적인 mocking을 하는 방법에 대해서 알아보았습니다.\n이번 포스팅에서는 실전에서 더 많이 쓰이는 unittest.mock 모듈의 patch() 데코레이터를 이용하여 단위 테스트를 좀 더 세련되게 작성하는 방법에 대해서 알아보겠습니다. patching? mocking? unittest.mock 모듈의 patch() 데코레이터를 이용하면 특정 모듈의 함수나 클래스를 가짜(mock) 객체, 좀 더 엄밀히 말하면, MagicMock …","timeToRead":4,"fields":{"slug":"/python-unittest-mock-patch/","tags":["Python","파이썬","testing","mocking","unittest","patch","requests"]},"frontmatter":{"title":"[파이썬] 테스트 모킹 - patch","date":"Feb 15, 2020"}},{"excerpt":"float 타입 파이썬의 float 기본 타입은 대부분의 다른 프로그래밍 언어들처럼 소수를 내부적으로 이진수의 형태로 저장합니다. (컴퓨터라는 기계는 결국에 0 또는 1로 모든 데이터를 저장히기 때문이죠…)\n예를 들어, 십진 소수 0.875을 float 타입으로 저장하면 이진 소수인 0.111의 형태가 됩니다 (1/2 + 1/4 + 1/8). 하지만 불행이도 모든 십진 소수가 이와 같이 딱 떨어지게 이진 소수의 형태로 표현될 수 있는 것은 아닙니다.\n예를 들어, 십진 소수 0.895를 이진 소수로 변환해보면 0.1110010100…","timeToRead":2,"fields":{"slug":"/python-float-decimal/","tags":["Python","파이썬","float","decimal"]},"frontmatter":{"title":"파이썬 소수 연산 - float 타입과 decimal 모듈","date":"Feb 14, 2020"}},{"excerpt":"본 포스팅의 내용을 문제없이 이해하려면 파이썬의 기본 테스팅에 대한 선수 지식이 필요합니다. 해당 지식이 부족하신 분들은 관련 포스팅를 먼저 읽고 돌아오시는 것을 추천드립니다. Mocking이란? 단위 테스트를 작성하다보면 데이터베이스 또는 외부 API에 의존하는 코드를 테스트해야 할 일이 필연적으로 생기기 마련입니다.\n운영 환경 대비 제약이 많은 테스트 환경에서는 실제 데이터베이스와 연동하거나 실제 외부 API를 호출하기가 불가능한 경우가 많습니다.\n가령 가능하더라도, 이렇게 외부 서비스에 의존하는 테스트는 해당 서비스에 문제가…","timeToRead":6,"fields":{"slug":"/python-unittest-mock/","tags":["Python","파이썬","testing","mocking","unittest","Mock","MagicMock"]},"frontmatter":{"title":"[파이썬] 테스트 모킹 - unittest.mock","date":"Feb 7, 2020"}},{"excerpt":"logging 내장 모듈 외부 라이브러리가 없더라도 대부분의 애플리케이션에서는 파이썬에 내장되어 있는 logging 모듈만으로도 충분히 로깅이 가능합니다.\nlogging 내장 모듈은 파이썬만 설치되어 있다면 다음과 같이 인터프리터에서도 간단히 임포트해서 사용해볼 수 있습니다. 심각도 별 로깅 logging 모듈은 5단계의 심각도 따라 다른 메서드를 제공하고 있습니다.\n기본적으로 이 중 하나의 메서드에 로깅할 메시지를 인자로 넘겨서 호출하면 로그가 남습니다. 위 프로그램을 실행해보면 다음과 같이 debug와 info를 제외하고 로그…","timeToRead":3,"fields":{"slug":"/python-logging/","tags":["Python","logging","logger"]},"frontmatter":{"title":"파이썬 기본 로깅 - logging 내장 모듈","date":"Feb 2, 2020"}},{"excerpt":"파이썬의 패키지 매니저 대부분의 프로그래밍 언어들은 자체적으로 패키지 관리 도구(package manager)를 제공하고 있습니다.\n자바의 Maven, 자바스크립트의 npm처럼 파이썬에서는 pip라는 매우 간단한 패키지 관리 도구가 있는데요.\n다른 언어의 패키지 매니저와 비교했을 때 부족한 부분들이 많다고 느끼실 겁니다. 일단 기본적으로 패키지 설치가 전역으로(global) 설치되기 때문에 한 컴퓨터 상에서 여러 파이썬 프로젝트에 걸쳐 작업을 하기가 힘들고,\n프로젝트 별로 설치가 필요한 패키지를 정의하는 방식도 어디는 requir…","timeToRead":7,"fields":{"slug":"/python-pipenv/","tags":["Python","pip","pipenv","venv"]},"frontmatter":{"title":"Pipenv를 사용한 파이썬 가상 환경과 패키지 관리","date":"Jan 22, 2020"}},{"excerpt":"코드 스타일 파이썬과 같이 사용차층이 넓은 범용 프로그래밍 언어의 경우, 개발자들이 선호하는 코드 스타일이 다양해지게 됩니다.\n개인 프로젝트에서는 자신이 선호에 따라 어떤 방식으로 코드를 포맷팅하든지 코드가 돌아가기면 하면 큰 상관이 없지만,\n협업 프로젝트에서는 이러한 개발자 간의 사소한 코드 스타일 차이로 불필요한 감정 싸움이 발생하기도 합니다. 예를 들어, 똑같은 문자열을 표현하기 위해서 개발자 A는 홑따옴표를 사용하고 싶은데, 개발자 B는 쌍따옴표를 사용하고 싶습니다.\n만약에 개발자 A가 작성한 코드를 나중에 개발자 B가 수…","timeToRead":5,"fields":{"slug":"/python-black/","tags":["Python","파이썬","Black","CodeStyle","VSCode","Git"]},"frontmatter":{"title":"Black으로 파이썬 코드 스타일 통일하기","date":"Jan 18, 2020"}},{"excerpt":"이번 포스팅에서는 의존성 충돌없이 파이썬 개발을 할 수 있도록 도와주는 매우 유용한 도구인 venv 내장 모듈에서 대해서 알아보겠습니다. 의존성 충돌 문제 하나의 컴퓨터 상에서 Python으로 개발된 여러 개의 프로젝트 돌리는 경우 프로젝트 간에 의존성(dependency) 충돌이 발생하기 쉬운데요. 예를 들어서 프로젝트 A에서 Django 패키지 3.x 버전을 사용하는데, 프로젝트 B에서 Django 패키지를 4.x 버전을 사용하고 있다면,\n둘 중 하나의 프로젝트에서는 Django 앱을 실행할 때 오류가 발생할 가능성이 높습니다…","timeToRead":6,"fields":{"slug":"/python-venv/","tags":["Python","venv","pip"]},"frontmatter":{"title":"파이썬의 venv 모듈로 가상 환경 사용하기","date":"Jan 12, 2020"}},{"excerpt":"2020년 파이썬 2 지원 종료 파이썬 2는 2020년 1월 1일부로 공식적으로 지원이 중료되었으며, 버전 2.7 이후로는 더 이상 업데이트가 되지 않습니다. (참고: https://pythonclock.org)\n하지만 Mac의 경우, 아직도 파이썬 2가 기본 실행 환경(runtime/interpreter)로 사용되고 있어서, 파이썬 3를 사용하려면 추가 설치가 필요한 실정입니다. macOS에 내장된 파이썬의 정확한 버전과 바이너리 파일의 위치는 다음과 같이 확인하실 수 있습니다. Mac에서 파이썬 3 설치 Mac의 패키지 매니저…","timeToRead":5,"fields":{"slug":"/python-pyenv/","tags":["Python","pyenv","Mac","Homebrew"]},"frontmatter":{"title":"여러 버전의 파이썬 관리하기 (pyenv)","date":"Jan 11, 2020"}},{"excerpt":"Storybook이란? 스토리북(Storybook)은 한 문장으로 정의가 어려울 정도로 다양한 방식으로 사용되고 있는 UI 컴포넌트 개발 도구입니다.\n단순히 회사의 UI 라이브러리를 내부 개발자들을 위해 문서화(documentation)하기 위해서 사용할 수 있고, 외부 공개용 디자인 시스템(Design System)을 개발하기 위한 기본 플랫폼으로도 사용할 수 있습니다. 스토리북(Storybook)을 기본 구성 단위는 스토리(Story)이며 하나의 UI 컴포넌트는 보통 하나 이상의 Story를 가지게 됩니다.\n각 Story는 해…","timeToRead":4,"fields":{"slug":"/storybook/","tags":["JavaScript","자바스크립트","React","Storybook","Vue","Angular"]},"frontmatter":{"title":"Storybook 소개 / 기본 사용법","date":"Jan 5, 2020"}},{"excerpt":"파이썬에서도 자바스크립트처럼 비동기로 작동하는 코드를 짤 수 있을까요? 이번 글에서는 파이썬에 내장된 asyncio 모듈을 통해 비동기 프로그래밍을 어떻게 수행하는지에 대해서 알아보겠습니다. 동시 프로그래밍의 패러다임의 변화 전통적으로 동시 프로그래밍(concurrent programming)은 여러 개의 쓰레드(thread)를 활용하여 이루어졌는데요.\n하지만 쓰레드를 이용해서 직접 코딩을 해보신 분이라면 겪어보셨겠지만, thread safe한 프로그램을 작성하는 것은 생각보다 쉬운 일이 아닙니다.\n게다가 싱글 코어 프로세서에서 …","timeToRead":7,"fields":{"slug":"/python-asyncio/","tags":["Python","async","await","asyncio","cuncurrent","동시성"]},"frontmatter":{"title":"파이썬의 asyncio를 통한 비동기 프로그래밍","date":"Jan 2, 2020"}},{"excerpt":"최근에는 아이디와 비밀번호 입력없이도 구글이나 페이스북과 같은 대형 플랫폼을 통해서 로그인 할 수 있는 서비스들을 많이 볼 수 있습니다.\n이번 포스팅에서는 이렇게 사용자 인증을 다른 서비스에 위임하기 위해서 사용되는 프로토콜인 OpenID Connect에 대해서 알아보겠습니다. OpenID Connect란? 예전에는 사용자 데이터를 서비스에서 직접 관리하는 경우가 많았지만, 개인 정보가 유출되는 보안 사고가 잇달아 발생함에 따라, 요즘에는 사용자 데이터를 자체적으로 보관하는 것 자체가 부담스러운 작업이 되어가고 있습니다. 이 때문…","timeToRead":4,"fields":{"slug":"/google-oidc/","tags":["JavaScript","security","authentication","OIDC","OpenID Connect","OAuth","OAuth2.0","구글 API","Google API","JWT","React","리액트"]},"frontmatter":{"title":"구글 OpenID Connect 사용법","date":"Dec 29, 2019"}},{"excerpt":"검색과 지메일, 연락처, 캘린더, 드라이브, 포토, 유튜브 등 우리는 거의 매일 구글의 서비스를 이용하면서 살고 있다고 해도 과언이 아니죠?\n구글은 이렇게 다양한 제품에 걸쳐서 관리되고 있는 데이터를 사용자의 허락을 받고 접근할 수 있도록 Google APIs를 제공하고 있는데요. 이번 글에서는 OAuth 2.0을 통해 사용자의 동의를 구하고 구글 API를 호출하는 방법에 대해서 알아보겠습니다. OAuth 2.0이란? 먼저 OAuth 2.0이 생소하신 분을 위해서, 과연 OAuth 2.0가 무엇인지 간단하게 개념부터 짚고 가겠습니…","timeToRead":6,"fields":{"slug":"/google-oauth/","tags":["JavaScript","security","authorization","OAuth","OAuth2.0","구글 API","Google API","JWT","React","리액트"]},"frontmatter":{"title":"OAuth 2.0으로 구글 API 호출하기","date":"Dec 15, 2019"}},{"excerpt":"git push는 원격 저장소(remote repository)에 코드 변경분을 업로드하기 위해서 사용하는 Git 명령어 입니다. git commit vs. git push git commit 명령어는 로컬 저장소(local repository)에 코드 변경 이력을 남기기 위해서 사용됩니다.\n여기서 로컬 저장소란 git clone 명령어를 통해서 내 컴퓨터에 복제해둔 원격 저장소의 복사본을 의마합니다.\n따라서, git commit를 통해 로컬 저장소에 아무리 많은 코드 변경 이력을 남기더라도 원격 저장소에서는 알 길이 없습니다.\n…","timeToRead":3,"fields":{"slug":"/git-push/","tags":["Git","CLI"]},"frontmatter":{"title":"git push 사용법/팁","date":"Dec 7, 2019"}},{"excerpt":"간단한 시간 데이터를 처리하기 위해서 사용되는 파이썬의 내장 모듈인 time에 대해서 알아보도록 하겠습니다. Epoch Time 파이썬의 time 내장 모듈은 주로 epoch time(Unix time, POSIX time)을 다룰 때 사용합니다.\nepoch time은 UTC(GMT+0) 기준으로 1970년 1월 1일 0시 0분 0초부터의 경과 시간을 나타내는데 흔히 timestamp라고 불리기도 합니다. 인간이 사용하는 사용하는 날짜와 시간에는 시간대(time zone), 일광절약타임(date light saving), 윤년/윤…","timeToRead":6,"fields":{"slug":"/python-time/","tags":["Python","time","sleep","epoch","timestamp"]},"frontmatter":{"title":"파이썬의 time 모듈로 시간 데이터 다루기","date":"Nov 30, 2019"}},{"excerpt":"JSON은 JavaScript Object Notation의 약자로서 데이터를 문자열의 형태로 나타내기 위해서 사용되는데요.\n이름이 암시하듯 JSON은 원래 자바스크립트에서 파생되었지만 현재는 프로그래밍 언어와 무관하게 거의 표준으로 자리잡아 특히 이종의 시스템 간에 원격으로 데이터를 주고 받을 때 많이 사용되고 있습니다. 이번 포스팅에서는 파이썬에서 JSON 형태의 데이터를 처리하기 위해서 사용되는 내장 모듈인 json에 대해서 알아보도록 하겠습니다. loads() 함수: JSON 문자열을 Python 객체로 변환 JSON 문자…","timeToRead":4,"fields":{"slug":"/python-json/","tags":["Python","JSON"]},"frontmatter":{"title":"파이썬의 json 모듈로 JSON 데이터 다루기","date":"Nov 23, 2019"}},{"excerpt":"파이썬에서는 내장 함수인 open()을 이용해서 다른 언어에 비해서 매우 간단하게 파일 입출력 처리를 할 수 있습니다. 파일에 데이터 쓰기 먼저 파일에 데이터를 쓰는 방법에 대해서 알아보겠습니다.\n아래 colors 배열에 들어있는 문자열 3개를 colors.dat 파일에 쓰려고 합니다. 파일을 열 때는 기본적으로 with 문을 통해 open() 내장 함수를 호출하는 것이 권장됩니다.\nwith 문을 사용하지 않을 경우, 파일 닫기를 스스로 해줘야 해서 불필요하게 코드가 지저분해지기 때문입니다. open() 내장 함수는 첫번째 인자로…","timeToRead":2,"fields":{"slug":"/python-open/","tags":["Python","File","IO","open","read","write"]},"frontmatter":{"title":"[파이썬] open() 함수를 이용한 파일 입출력","date":"Nov 16, 2019"}},{"excerpt":"자바스크립트 프로젝트에서 개발을 하다보면 package-lock.json 또는 yarn.lock, pnpm-lock.yaml과 같은 파일을 자주 접하게 되죠?\n간혹 개발자들이 이 파일의 변경 사항을 커밋하지 않아서 문제가 되거나, 심지어 무심코 지웠다가 낭패를 보는 경우를 종종 볼 수 있는데요.\n이번 포스팅에서는 사실 매우 중요한 용도를 위해서 사용되는 패키지 잠금 파일(package locks)에 대해서 알아보도록 하겠습니다. 자바스크립트 패키지 매니저 우선 현재 자바스크립트에서 사용되고 있는 패키지 매니저에 대해서 간단히 짚고…","timeToRead":7,"fields":{"slug":"/js-package-locks/","tags":["JavaScript","Node.js","npm","yarn"]},"frontmatter":{"title":"패키지 잠금 파일 (package-lock.json, yarn.lock)","date":"Nov 9, 2019"}},{"excerpt":"어느 언어로 코딩을 하든 단위 테스트는 신뢰할 수 있는 애플리케이션을 개발하기 위해서 필수적으로 습득해야하는 기술입니다.\n파이썬에서는 내장 모듈인 unittest을 통해서 다른 라이브러리 없이 비교적 간단하게 단위 테스트를 작성할 수 있습니다. unittest 모듈 unittest 모듈은 Java의 JUnit, JavaScript의 Jest 또는 Mocha와 같은 단위 테스트 프레임워크입니다.\n다만 다른 언어와 달리 기본적으로 언어에 내장되어 있기 때문에 파이썬만 설치가 되어 있다면 바로 모듈을 불러와서(import) 사용할 수 …","timeToRead":4,"fields":{"slug":"/python-unittest-testcase/","tags":["Python","파이썬","testing","unittest","TestCase","단위 테스트"]},"frontmatter":{"title":"[파이썬] 단위 테스트의 기본 (unittest)","date":"Nov 2, 2019"}},{"excerpt":"대부분의 자바스크립트 개발자들은 자신의 프로젝트에 주로 다른 패키지를 설치 후 사용하기 위해서 npm(Node Package Manager)을 사용합니다.\n이것이 가능한 이유는 고맙게도 다른 개발자들이 어딘가에서 우리가 사용하는 패키지를 열심히 npm에 배포해주고 있기 때문입니다.\n오늘은 한번 이러한 개발자의 입장이 되어 자신이 직접 개발한 자바스크립트 패키지를 npm에 배포하는 방법에 대해서 공부해보겠습니다. npm 저장소 npm을 사용해보신 분이라면 한 번쯤 npm 사이트에 들어가보셨을 것입니다.\n보통 이미 사용하고 있는 패키…","timeToRead":8,"fields":{"slug":"/js-npm-publish/","tags":["JavaScript","Node.js","npm","npm login","npm whoami","npm info","npm publish","npm unpublish"]},"frontmatter":{"title":"자바스크립트 패키지 발행하기 (npm publish)","date":"Oct 27, 2019"}},{"excerpt":"개발자들이 실행 환경에 구애받지 않고 항상 최신 문법의 자바스크립트로 코딩할 수 있도록 도와주는 유용한 도구인 바벨(Babel)에 대해서 알아보겠습니다. 자바스크립트 개발자의 딜레마 자바스크립트 언어의 문법은 빠르게 진화하고 있지만, 정작 자바스크립트 코드를 실행해주는 환경은 이를 받쳐주지 못하는 경우가 많습니다.\n예를 들어, 브라우저의 경우 종류가 워낙 다양해서 어떤 브라우저가 어떤 스펙을 지원하는지 일일이 파악하기가 힘들 정도이고,\n노드(NodeJS)의 경우에도 버젼별로 지원하는 언어 문법이 다르기 때문에 브라우저만큼은 아니지…","timeToRead":6,"fields":{"slug":"/js-babel/","tags":["JavaScript","ES6","Node.js","Babel"]},"frontmatter":{"title":"바벨(Babel 7) 기본 사용법","date":"Oct 26, 2019"}},{"excerpt":"지난 포스팅에서 jest.fn()과 jest.spyOn() 함수를 어떻게 사용하는지 배웠습니다.\n이번 포스팅에서는 Jest에서 제공하는 또 다른 모킹 함수인 jest.mock()를 활용해서 좀 더 다양한 상황에서 모킹을 해보도록 하겠습니다. 자바스크립트 모듈 먼저 자바스크립트에서 모듈이 무엇인지에 대해서 간단하게 개념만 짚고 넘어가겠습니다.\n모듈이란 어떤 코드를 다른 자바스크립트 파일에서 불러오기 편하도록 하나의 파일에 모아둔 것을 뜻하는데요.\n프로젝트의 규모가 커지면 모든 자바스크립트 코드를 하나의 파일에 두기 어렵기 때문에, …","timeToRead":7,"fields":{"slug":"/jest-mock-modules/","tags":["JavaScript","library","Jest","testing","Mock","mocking"]},"frontmatter":{"title":"Jest의 jest.mock()을 이용한 모듈 모킹","date":"Oct 19, 2019"}},{"excerpt":"서버 애플리케이션을 개발할 때 사용자 사용자 인증(authentication)과 인가(Authorization)는 데이터 보안을 위해서 매우 핵심적인 기능입니다.\n따라서 GraphQL API를 설계하거나, GraphQL 서버를 개발할 때도 사용자 인증/인가 부분에 대해서 여러 가지 고려가 필요합니다.\n이번 포스팅에서는 Apllo Server를 이용하여 GraphQL 서버의 사용자 인증과 인가를 구현해보도록 하겠습니다. HTTP 인증 방식 HTTP 인증 방법에는 여러 가지가 있는데, GraphQL 스팩에서는 어떤 특별한 인증 방법을…","timeToRead":8,"fields":{"slug":"/graphql-apollo-server-auth/","tags":["자바스크립트","JavaScript","GraphQL","Apollo","ApolloServer","authentication","인증","authorization","인가"]},"frontmatter":{"title":"GraphQL 서버의 사용자 인증/인가 (Apollo Server Authentication/Authorization)","date":"Oct 14, 2019"}},{"excerpt":"GraphQL 서버에서 클라이언트로 부터 요청받은 쿼리(Query)나 뮤테이션(Mutation)을 실행하다가 오류가 발생할 수 있습니다.\n이런 경우, GraphQL 서버에서 해당 오류에 대한 정보를 응답해줘야 클라이언트에서도 그에 상응하는 화면 처리를 할 수가 있을 것입니다. 이번 포스팅에서는 Apollo Server로 개발된 GraphQL 서버에서 어떻게 오류 처리를 해야하는지 알아보도록 하겠습니다. 오류 발생 시 응답 결과 GraphQL 서버에서 오류가 발생할 경우, Apollo Server는 HTTP 응답 바디의 errors…","timeToRead":8,"fields":{"slug":"/graphql-apollo-server-errors/","tags":["자바스크립트","JavaScript","GraphQL","Apollo","ApolloServer","ErrorHandling","오류 처리"]},"frontmatter":{"title":"GraphQL 서버의 오류 처리 (Apollo Server Error handling)","date":"Oct 12, 2019"}},{"excerpt":"React Hooks 중 하나인 useMemo 함수를 왜/언제/어떻게 써야하는지 알아보겠습니다. Memoization useMemo 함수에 대해서 알아보기 전에 알고리즘 시간에 자주 나오는 메모이제이션(memoization) 개념에 대해서 잠깐 짚고 넘어가겠습니다.\nmemoization이란 기존에 수행한 연산의 결과값을 어딘가에 저장해두고 동일한 입력이 들어오면 재활용하는 프로그래밍 기법을 말합니다.\nmemoization을 절적히 적용하면 중복 연산을 피할 수 있기 때문에 메모리를 조금 더 쓰더라도 애플리케이션의 성능을 최적화할 …","timeToRead":7,"fields":{"slug":"/react-hooks-use-memo/","tags":["JavaScript","React","hook"]},"frontmatter":{"title":"React Hooks: useMemo 사용법","date":"Oct 5, 2019"}},{"excerpt":"자바스크립트 개발자들 간에 선호하는 코딩 스타일이 다를 수 있죠?\n예를 들어, 개발자 A는 문자열을 쌍따옴표(\")로 감싸줘야 한다고 주장하는 반면에, 개발자 B는 홑따옴표(')를 사용해야 된다고 주장합니다.\n이러한 두 개발자가 한 팀에서 일하면 코드 리뷰 중에 이러한 사소한 코딩 스타일 차이로 키보드 배틀이 일어나는 걸 보게 되죠… 😅 그런데 대게 이런 코딩 스타일에 대한 논쟁은 정답이 없을 분더러, 괜히 소모적인 자존심 싸움으로 번지기 쉬워서 팀워크와 생산성에 나쁜 영향을 줄 수 있습니다.\n이번 글에서는 협업 프로젝트에서 이러한…","timeToRead":6,"fields":{"slug":"/js-prettier/","tags":["JavaScript","Prettier","Format","ESLint"]},"frontmatter":{"title":"코드 포맷팅은 그냥 Prettier에게 맡기세요","date":"Sep 29, 2019"}},{"excerpt":"웹팩에서 자주 사용되는 플러그인인 DefinePlugin과 EnvironmentPlugin에 대해서 알아보도록 하겠습니다. 관련 포스팅 웹팩에 대한 지식이나 경험이 전혀 없으신 분들을 아래 포스팅를 먼저 읽어보시면 따라오시기가 좀 더 수월하실 겁니다. 웹팩(Webpack) 기본 사용법 (CLI) 웹팩(Webpack) 기본 설정법 (Entry/Output/Loader/Plugins) 웹팩(Webpack) 개발 편의 기능 실습 프로젝트 셋업 먼저 실습 프로젝트를 만들겠습니다. 새로운 디렉터리에 NPN 프로젝트를 만든 후, 웹팩과 웹팩…","timeToRead":6,"fields":{"slug":"/webpack-plugins-define-environment/","tags":["JavaScript","자바스크립트","Webpack","웹팩","webpack-dev-server"]},"frontmatter":{"title":"웹팩(Webpack) DefinePlugin, EnvironmentPlugin 사용법","date":"Sep 28, 2019"}},{"excerpt":"최근에 가장 많이 쓰이는 자바스크립트 린터(linter)인 ESLint에서 대해서 알아보겠습니다. Lint? ESLint? 프로그래밍에서 린트(lint)라는 개념이 생소한 분들을 위해서 lint가 무엇인지에 대해서 먼저 짚고 넘어가겠습니다.\n린트(lint)는 소스 코드에 문제가 있는지 탐색하는 작업을 의미하며, 린터(linter)는 이 작업을 도와주는 소프트웨어 도구를 의미합니다.\n자바스크립트와 같이 컴파일 과정이 없는 인터프리터 언어의 경우, 런타임 에러가 발생할 확률이 높기 때문에, 이 린트 작업을 통해 사전에 에러를 최대한 …","timeToRead":6,"fields":{"slug":"/js-eslint/","tags":["JavaScript","ESLint","Lint","Linter","lint-staged","husky"]},"frontmatter":{"title":"ESLint로 소스 코드에 숨어있는 문제 찾기","date":"Sep 22, 2019"}},{"excerpt":"지난 두 개의 포스팅에 걸쳐서 React Router를 이용해서 React 앱에서 라우팅을 하는 방법을 알아보았습니다. React Router로 라우팅 하기 React Router로 중첩 라우팅 하기 이번 포스팅에서는 그 동안 배운 라우팅 방법을 기반으로 React 앱에서 어떻게 React Router를 이용해서 사용자 인증을 구현할 수 있는지 살펴보도록 하겠습니다. 인증이 필요없는 컴포넌트 로그인 하기 전까지는 모든 기능을 차단하는 앱이 있지만, 더 많은 경우에는, 인증없이도 접근 가능한 영역이 있기 마련입니다.\n예를 들어, 홈…","timeToRead":8,"fields":{"slug":"/react-router-authentication/","tags":["JavaScript","자바스크립트","React","리액트","ReactRouter","authentication","인증","login","로그인","logout","로그아웃"]},"frontmatter":{"title":"React Router로 사용자 인증하기 (로그인/로그아웃)","date":"Sep 21, 2019"}},{"excerpt":"지난 포스팅에서는 Apollo Hooks라는 새로운 방법을 통해 React 앱에서 어떻게 GraphQL API를 호출할 수 있는지 간단히 살펴보았습니다.\n이번 포스팅에서는 지난 포스팅에서 다뤘던 useQuery() 함수 뿐만 아니라 useMuation() 함수까지 사용해서 간단한 노트(Note) 앱을 React로 작성해보도록 하겠습니다. Apollo Hooks가 생소하신 분들은 아래 포스팅를 통해 먼저 기본 개념을 잡으시고 이 포스팅로 돌아오시기를 추천드립니다. [GraphQL/React] Apollo Hooks 소개/사용법 기존…","timeToRead":6,"fields":{"slug":"/graphql-react-apollo-hooks-example/","tags":["JavaScript","자바스크립트","GraphQL","Apollo","ApolloClient","ApolloHooks","React","리액트","useQuery","useMutatino"]},"frontmatter":{"title":"[GraphQL/React] Apollo Hooks로 React 앱 개발하기","date":"Sep 14, 2019"}},{"excerpt":"지난 달, Apollo Client에서 공개되어 현재 뜨거운 반응을 얻고 있는 Apollo Hooks에 대해서 알아보겠습니다. Apollo Client가 생소하신 분들은 아래 포스팅를 먼저 보시고 이 포스팅로 돌아오시는 것을 추천드립니다. [GraphQL] Apollo Client 사용법 Apollo Hooks? Apollo Hooks는 Apollo Client로 React 앱을 개발할 때, GraphQL API를 호출할 수 있는 새로운 방법입니다.\n기존에는 react-apollo 패키지에서 제공하는 <Query/>나 <Mutat…","timeToRead":4,"fields":{"slug":"/graphql-react-apollo-hooks/","tags":["JavaScript","자바스크립트","GraphQL","Apollo","ApolloClient","ApolloHooks","React","리액트","useQuery"]},"frontmatter":{"title":"[GraphQL/React] Apollo Hooks 소개/사용법","date":"Sep 7, 2019"}},{"excerpt":"지난 포스팅에서 SchemaLink를 이용하여 서버 없이 클라이언트에서 GraphQL API를 호출하는 방법에 대해서 알아보았습니다.\n이번 포스팅에서는 로컬에서 직접 스키마를 작성하지 않고 원격 서버로 부터 스키마를 가져오는 몇 가지 방법에 대해서 알아보겠습니다. 패키지 설치 예제 프로젝트에서 필요한 GraphQL과 Apollo Client 관련 패키지를 설치하고 시작하겠습니다.\n여기서 graphql-tools 패키지가 가장 중요한데, 스키마 생성을 위해 makeExecutableSchema(), introspectSchema()…","timeToRead":6,"fields":{"slug":"/graphql-apollo-remote-schemas/","tags":["자바스크립트","JavaScript","GraphQL","Apollo","ApolloClient","graphql-tools"]},"frontmatter":{"title":"[GraphQL] 원격 서버로 부터 스키마 가져오기","date":"Aug 31, 2019"}},{"excerpt":"GraphQL 서버 없이도 클라이언트에서 GraphQL API를 호출할 수 있도록 도와주는 Aollo Client의 SchemaLink에 대해서 알아보겠습니다. 일반적인 Apollo Client 생성 일반적으로 Apollo Client를 사용할 때는 다음과 같이 GraphQL 서버로 HTTP 요청을 보내기 위해서 HttpLink를 사용합니다. 이렇게 HttpLink를 사용할 때는 반드시 연동할 GraphQL API의 endpoint를 가진 GraphQL Server가 어딘가에 떠 있어야 합니다. Apollo Client를 이용해서…","timeToRead":4,"fields":{"slug":"/graphql-apollo-link-schema/","tags":["JavaScript","자바스크립트","GraphQL","Apollo","ApolloClient","apollo-link-schema"]},"frontmatter":{"title":"[GraphQL] SchemaLink 사용법 - 서버없는 클라이언트","date":"Aug 24, 2019"}},{"excerpt":"GraphQL API를 호출할 때 사용하는 클라이언트 라이브러리인 Apollo Client에 대해서 알아보겠습니다. 기본적으로 HTTP 기반으로 동작하는 GraphQL API를 호출할 때 반드시 Apollo Client와 같은 전용 클라이언트 라이브러리가 필요한 것은 아닙니다.\nGraphQL API를 별다른 라이브러리 없이 최대한 간단하게 호출하는 방법에 대해서 관련 포스팅를 참고바라겠습니다. 패키지 설치 프로젝트에 Apollo Client를 사용할 때 필요한 5개의 패키지를 설치합니다. pacakge.json 이 중, apoll…","timeToRead":4,"fields":{"slug":"/graphql-apollo-client/","tags":["자바스크립트","JavaScript","GraphQL","Apollo","ApolloClient","apollo-link-http"]},"frontmatter":{"title":"[GraphQL] Apollo Client 사용법","date":"Aug 17, 2019"}},{"excerpt":"지난 포스팅에서 React Router로 기본적인 라우팅 방법을 다루었습니다.\n이번 포스팅에서는 React Router로 중첩 라우팅을 구현하는 방법에 대해서 알아보겠습니다. 중첩 라우팅이란? 중첩 라우팅(Nested Routing)이란 라우팅 맵핑을 최상위 컴포넌트 뿐만 아니라 여러 개의 컴포넌트에 걸쳐서 단계별로 정의하는 라우팅 기법입니다. 예를 들어, 브라우저의 주소 창에 https://www.your-site.com/users라고 입력되었을 때, 유저 목록 페이지가 표시되고, https://www.your-site.com/…","timeToRead":7,"fields":{"slug":"/react-router-nested/","tags":["JavaScript","자바스크립트","React","리액트","ReactRouter","match","location","history"]},"frontmatter":{"title":"React Router로 중첩 라우팅 하기","date":"Aug 10, 2019"}},{"excerpt":"Apollo Client를 사용하여 GraphQL API를 호출하는 React 컴포넌트를 테스트하는 방법에 대해서 알아보겠습니다. 예제 컴포넌트 작성 Apollo Client를 사용하여 GraphQL API를 호출하는 매우 간단한 React 컴포넌트를 작성해보겠습니다.\n아래 PingPong 컴포넌트는 GraphQL 서버에 ping이라는 쿼리를 호출합니다.\n서버로부터 응답이 올 때까지는 Loading...라는 메시지를 렌더링합니다.\n만약에, 서버로 부터 에러가 응답되면 Error!라는 메시지를 렌더링합니다.\n마지막으로 서버로 부터 …","timeToRead":4,"fields":{"slug":"/graphql-react-apollo-testing/","tags":["JavaScript","자바스크립트","GraphQL","Apollo","ApolloClient","MockedProvider"]},"frontmatter":{"title":"[GraphQL] Apollo Client를 사용하는 React 컴포넌트 테스트하기 (MockedProvider)","date":"Aug 3, 2019"}},{"excerpt":"HTML5가 등장한지 몇년이 흘렀음에도 불구하고, 아직까지도 <div> 태그로만 마크업된 웹사이트를 많이 접하곤 합니다.\n하지만 이렇게 오로지 <div> 태그로만 마크업된 웹페이지는 시각적으로는 아름다울지 몰라도 여러 가지 측면에서 문제가 있을 수 있습니다. 시멘틱 마크업이란? <div> 태그는 보통 웹페이지에서 화면의 특정 영역에 스타일을 적용하거나, 전체 화면 레이아웃을 잡는데 자주 사용이 됩니다.\n그래서 웹사이트에서 다음과 같은 <div> 태그가 사용되는 것을 어렵지 않게 접할 수 있습니다. 사실 HTML5에서 이러한 화면 …","timeToRead":7,"fields":{"slug":"/html-semantic-markup/","tags":["HTML","Semantic","시멘틱","header","footer","section","article","asdie","nav","div"]},"frontmatter":{"title":"[HTML] 시멘틱 마크업","date":"Jul 27, 2019"}},{"excerpt":"PropTypes는 React에서 타입 체크를 위해서 사용되는 라이브러리입니다.\n이 번 포스팅에서는 PropTypes를 이용해서 React 컴포넌트의 prop에 대한 타입 정의와 기본값 설정을 하는 방법에 대해서 알아보겠습니다. 패키지 설치 PropTypes 라이브러리는 prop-types이라는 패키지 이름을 가지고 있는데요.\n기본적으로 react 패키지에 내장이 되어 있기 때문에, React만 설치되어 있다면 별도로 설치할 필요가 없습니다. 예제 컴포넌트 PropTypes를 어떻게 사용하는지 보여드리기 위해서 먼저 예제 컴포넌트…","timeToRead":5,"fields":{"slug":"/react-prop-types/","tags":["JavaScript","자바스크립트","React","리액트","PropTypes"]},"frontmatter":{"title":"PropTypes로 React 입력 타입 체크하기","date":"Jul 20, 2019"}},{"excerpt":"지난 포스팅에서 외부 라이브러리 없이 CSS 만으로 React 컴포넌트를 스타일링하는 방법을 알아보았습니다.\n이번 포스팅에서는 대표적인 CSS-in-JS 라이브러리인 Styled Components를 사용해서 React 컴포넌트를 스타일링하는 방법을 살펴보겠습니다. CSS in JS? 먼저 CSS in JS의 개념을 짚고 넘어가겠습니다.\nCSS in JS는 스타일 정의를 CSS 파일이 아닌 JavaScript로 작성된 컴포넌트에 바로 삽입하는 스타일 기법입니다. 기존에 웹사이트를 개발할 때는 HTML과 CSS, JavaScript…","timeToRead":6,"fields":{"slug":"/react-styled-components/","tags":["JavaScript","React","CSS","style","CSS-in-JS","StyledComponents"]},"frontmatter":{"title":"Styled Components로 React 컴포넌트 스타일하기","date":"Jul 14, 2019"}},{"excerpt":"Apollo Client는 GrpahQL API를 호출하기 위해 사용되는 라이브러리입니다.\n이번 포스팅에서는 React 앱에서 Apollo Client를 사용하여 GraphQL API를 호출하는 방법에 대해서 알아보겠습니다. 사실, GraphQL API를 호출할 때, 반드시 Apollo Client와 같은 전용 클라이언트가 필요한 것은 아닙니다.\nGraphQL API를 별다른 라이브러리 없이 최대한 간단하게 호출하는 방법에 대해서는 아래에 따로 포스팅해놓았으니 참고바랍니다. 관련 포스팅: GraphQL API 간단하게 호출하기 그…","timeToRead":3,"fields":{"slug":"/graphql-react-apollo-client/","tags":["JavaScript","자바스크립트","React","리액트","GraphQL","Apollo","ApolloClient"]},"frontmatter":{"title":"[GraphQL] Apollo Client로 React 앱 개발하기","date":"Jul 13, 2019"}},{"excerpt":"React 공식 레퍼런스에 따르면 React에서는 명확한 스타일링 가이드를 제공하지 않는데요. React does not have an opinion about how styles are defined. 그도 그럴 것이 현재 CSS 기술 자체가 사용되는 방식이 워낙 다양하기 때문에 React에서 꼭 찝어 어느 방식을 따르라고 얘기하기가 조심스러울 것입니다. 그래서 이번 포스팅에서는 React 컴포넌트를 별도의 CSS-in-JS 라이브러리 없이 순수하게 CSS로만 스타일하는 가장 기본적인 방법을 알아보겠습니다. Inline Styl…","timeToRead":4,"fields":{"slug":"/react-styling/","tags":["JavaScript","자바스크립트","React","리액트","CSS","style","스타일","CSS Modules"]},"frontmatter":{"title":"React 컴포넌트 CSS 스타일링 기본","date":"Jul 7, 2019"}},{"excerpt":"GraphQL 서버를 개발할 때도 여느 Rest API 서버와 마찬가지로 테스트의 중요성의 아무리 강조해도 지나치지 않습니다.\n이번 포스팅에서는 Apollo Server로 개발된 GraphQL 서버에 대한 테스트를 작성하는 방법에 대해서 알아보도록 하겠습니다. 기존에 Apollo Server를 이용해서 GraphQL 서버를 개발하신 적이 없으신 분들은 관련 포스팅를 먼저 보시고 GraphQL 서버 프로젝트를 생성하시기 바랍니다. 프로젝트 설정 Apollo Server에서는 GraphQL 서버의 테스트를 돕기 위해 apollo-se…","timeToRead":5,"fields":{"slug":"/graphql-apollo-server-testing/","tags":["자바스크립트","JavaScript","GraphQL","Apollo","ApolloServer","apollo-server-testing"]},"frontmatter":{"title":"GraphQL 서버 테스트 방법 (Apollo Server Testing)","date":"Jul 6, 2019"}},{"excerpt":"React Testing Library(RTL)라는 테스팅 라이브러리가 React 개발자들의 입소문을 타고 점점 인기가 올라가고 있습니다.\n이번 포스팅에서는 최근 React에서 테스팅 트랜드와 패러다임을 바꾸고 있는 React Testing Library에서 다뤄보도록 하겠습니다. React Testing Library 소개 React Testing Library는 Behavior Driven Test(행위 주도 테스트) 방법론이 대두 되면서 함께 주목 받기 시작한 테스팅 라이브러리 입니다.\n행위 주도 테스트는 기존에 관행이던 I…","timeToRead":8,"fields":{"slug":"/react-testing-library/","tags":["JavaScript","testing","React","Jest","testingLibrary"]},"frontmatter":{"title":"React Testing Library 사용법","date":"Jun 29, 2019"}},{"excerpt":"React를 이용해서 SPA(Single Page Application)을 개발할 때 흔히 겪는 어려움 중에 하나가 웹페이지 라우팅입니다.\n이번 포스팅에서는 React Router라는 라이브러리를 사용해서 SPA에서 라우팅을 하는 방법에 대해서 알아보겠습니다. 간단한 라우팅 구현 기본적으로 SPA는 index.html 파일에 div 엘리먼트만 하나 두고, 자바스크립트로 모든 부분을 동적으로 랜더링하는 구조를 취합니다.\n그리고 화면의 전체 또는 일부를 브라우저에서 발생하는 이벤트에 따라서 동적으로 갱신할 수 있기 때문에 인터랙티브 …","timeToRead":7,"fields":{"slug":"/react-router-basic/","tags":["JavaScript","자바스크립트","React","리액트","ReactRouter"]},"frontmatter":{"title":"React Router로 라우팅 하기","date":"Jun 23, 2019"}},{"excerpt":"가장 널리 알려진 알고리즘 중의 하나인 피보나치(Fibonacci) 알고리즘에 대해서 알아보겠습니다. 알고달레에서 코딩 테스트/인터뷰 준비에 좀 더 특화된 컨텐츠를 만나보세요! 📝 피보나치 수열 피보나치 수열에서는 첫 번째 항은 0, 두 번째 항은 1, 그 다음부터는 바로 전 두 항의 숫자의 합이 현재 항의 값이 됩니다.\n따라서 피보나치나 수열은 다음과 같은 모습을 가지게 됩니다. 재귀 알고리즘 피보나치 수열을 구현하는 가장 흔한 알고리즘은 재귀(recursion)를 사용하는 것입니다. 이 재귀 알고리즘의 시간과 공간 복잡도는 모…","timeToRead":3,"fields":{"slug":"/algorithm-fibonacci/","tags":["algorithm","알고리즘","Python","파이썬"]},"frontmatter":{"title":"피보나치 알고리즘","date":"Jun 19, 2019"}},{"excerpt":"Font Awesome은 웹에서 아이콘이 필요할 때 가장 많이 사용되는 라이브러리 중에 하나입니다.\n이번 포스팅에서는 React 앱에서 Font Awesome을 사용하는 방법에 대해서 알아보도록 하겠습니다. React와 무관한 Font Awesome 자체에 대한 설명은 관련 포스팅를 참고 바랍나다. Font Awesome 5의 SVG 지원 Font Awesome 4 대비 Font Awesome 5의 가장 강력한 부분은 SVG 기반 아이콘을 지원한다는 것입니다.\n즉, 기존에 웹폰트를 기반으로 하는 <i/> 태그 대신에 SVG 기반인…","timeToRead":3,"fields":{"slug":"/react-font-awesome/","tags":["JavaScript","React","FontAwesome","icon"]},"frontmatter":{"title":"React에서 Font Awesome 사용하기","date":"Jun 15, 2019"}},{"excerpt":"Side Effect 처리를 위해 React Hooks에서 제공되는 setEffect() 함수에 대해서 알아보도록 하겠습니다. Side Effect란? React 컴포넌트가 화면에 렌더링된 이후에 비동기로 처리되어야 하는 부수적인 효과들을 흔히 Side Effect라고 일컽습니다.\n대표적인 예로 어떤 데이터를 가져오기 위해서 외부 API를 호출하는 경우, 일단 화면에 렌더링할 수 있는 것은 먼저 렌더링하고 실제 데이터는 비동기로 가져오는 것이 권장됩니다.\n요청 즉시 1차 렌더링을 함으로써 연동하는 API가 응답이 늦어지거나 응답이…","timeToRead":3,"fields":{"slug":"/react-hooks-use-effect/","tags":["JavaScript","React","hook"]},"frontmatter":{"title":"React Hooks: useEffect 사용법","date":"May 18, 2019"}},{"excerpt":"컴포넌트의 상태 관리를 위해 React Hooks에서 제공되는 setState() 함수에 대해서 알아보도록 하겠습니다. this.state - 클래스 기반 상태 관리 React Hooks가 나오기 전에는 컴포넌트의 상태 관리를 하려면 클래스 기반 React 컴포넌트를 작성해야 했습니다.\n대표적으로 상태 관리가 필요한 경우인, 사용자 입력 양식을 위한 컴포넌트를 작성한다고 생각해보겠습니다. 아래 예제 코드는 사용자의 이름과 이메일을 입력받기 위한 전형적인 React 컴포넌트입니다.\n클래스 컴포넌트의 this.state 필드에 이름과…","timeToRead":2,"fields":{"slug":"/react-hooks-use-state/","tags":["JavaScript","React","hook"]},"frontmatter":{"title":"React Hooks: useState 사용법","date":"Apr 20, 2019"}},{"excerpt":"Font Awesome은 웹에서 아이콘이 필요할 때 가장 많이 사용되는 라이브러리 중에 하나입니다.\nFont Awesome 5가 출시된지 시간이 꽤 흘렀음에도 불구하고, 아직까지도 Font Awesome 4가 많이 사옹되고 있습니다.\n여러 가지 이유가 있겠지만 저는 개인적으로 Font Awesome가 일부 아이콘들을 유료화하는 과정에서 다소 복잡해진 부분이 없지 않은 것 같습니다.\n하지만 Font Awesome에서 이전 버전에 대한 공식 지원을 중단했기 때문에 최소한 프로젝트에서는 가급적 최신 버전을 쓰는 것이 권장됩니다. 이번 …","timeToRead":4,"fields":{"slug":"/font-awesome/","tags":["CSS","JavaScript","FontAwesome","icon"]},"frontmatter":{"title":"Font Awesome 5 사용법 (ver 4 포함)","date":"Mar 16, 2019"}},{"excerpt":"이번 포스팅에서는 데이터의 개수를 셀 때 매우 유용한 파이썬의 collections 모듈의 Counter 클래스에 대해서 알아보겠습니다. Counter 기본 사용법 collections 모듈의 Counter 클래스는 별도 패키지 설치 없이 파이썬만 설치되어 있다면 다음과 같이 임포트해서 바로 사용할 수 있습니다. Counter 생성자는 여러 형태의 데이터를 인자로 받는데요.\n먼저 중복된 데이터가 저장된 배열을 인자로 넘기면 각 원소가 몇 번씩 나오는지가 저장된 객체를 얻게 됩니다. Counter 생성자에 문자열을 인자로 넘기면 각…","timeToRead":4,"fields":{"slug":"/python-collections-counter/","tags":["Python","파이썬","dict","사전","dictionary","collections","Counter"]},"frontmatter":{"title":"파이썬 collections 모듈의 Counter 사용법","date":"Mar 10, 2019"}},{"excerpt":"올인원(All-in-one) 테스팅 프레임워크 Jest를 사용하면 다른 라이브러리 설치 없이 바로 소위 mocking 기능을 쓸 수 있는데요.\n그런데 여기서 mocking을 한국어로 뭐라고 번역해야 모르겠네요. 😅\n주변에서 보면 “모킹”으로 그냥 영어를 차용해서 쓰고 있는 것 같습니다. mocking 이란? 먼저 mocking이 생소하신 분들을 위해서 mocking 대한 기본 개념부터 잡고 들어가는 게 좋을 것 같습니다.\nmocking은 단위 테스트를 작성할 때, 해당 코드가 의존하는 부분을 가짜(mock)로 대체하는 기법을 말하…","timeToRead":5,"fields":{"slug":"/jest-fn-spy-on/","tags":["JavaScript","library","Jest","testing","Mock","mocking"]},"frontmatter":{"title":"Jest의 jest.fn(), jest.spyOn()를 이용한 함수 모킹","date":"Mar 9, 2019"}},{"excerpt":"리액트 앱을 개발하다보면 모든 컴포넌트에 어떤 값을 props으로 넘기고 싶은 데이터가 필요할 때가 있습니다.\n다시 말해, 어떤 컴포넌트 트리 내에서 최상위 컴포넌트 부터 최말단 컴포넌트에 걸쳐 전역(global)으로 관리해야 할 데이터가 필요한 상황이 되겠네요. 이번 포스팅에서는 React Context를 활용하여 리액트 앱에서 전역 데이터를 관리하는 방법에 대해서 알아보도록 하겠습니다. React Context 없이 개발하기 먼저 React Context 없이 props만을 이용해서 어떻게 전역 데이터를 여러 컴포넌트에 걸쳐서…","timeToRead":6,"fields":{"slug":"/react-context/","tags":["JavaScript","React","context"]},"frontmatter":{"title":"React Context 사용법","date":"Feb 23, 2019"}},{"excerpt":"파이썬의 내장 자료구조인 사전(dictionary)를 사용하다 보면 어떤 키(key)에 대한 값(value)이 없는 경우에 대한 처리를 해야할 때가 많죠?\n이번 포스팅에서는 이러한 경우 일반적으로 어떻게 처리하는지 살펴보고, 관련해서 파이썬에서 제공하는 몇 가지 접근법을 알아보도록 하겠습니다. 일반적인 사전 기본값 처리 그럼 파이썬에서 사전을 다룰 때 어떤 경우에 기본값 처리가 필요한지 간단한 실습을 통해 알아보겠습니다.\n단어가 주어졌을 때 각 알파벳에 대한 글자의 수를 세어서 사전에 저장해주는 함수를 작성해볼께요. 그럼 이 함수…","timeToRead":5,"fields":{"slug":"/python-collections-defaultdict/","tags":["Python","dict","dictionary","setdefault","collections","defaultdict"]},"frontmatter":{"title":"파이썬 사전의 기본값 처리 (collections.defaultdict)","date":"Feb 10, 2019"}},{"excerpt":"이번 포스팅에서는 Apollo Server를 이용하여 매우 간단하게 GraphQL 서버를 개발해보도록 하겠습니다.\n기존에 GraphQL 서버를 한 번도 개발해보신 적인 없으신 분들께 도움이 되었으면 합니다. 프로젝트 생성 원하는 디렉터리(ex. my-server)에 index.js 파일을 생성합니다.\n그리고 NPN 초기화 명령어를 실행하면 package.json 파일이 생성됩니다. 패키지 설치 Apollo Server를 사용하기 위해서 패키지 두개를 설치합니다. 참고로 apollo-server는 Apollo에서 제공하는 패키지이며…","timeToRead":3,"fields":{"slug":"/graphql-apollo-server/","tags":["JavaScript","자바스크립트","GraphQL","Apollo","ApolloServer"]},"frontmatter":{"title":"Apollo Server를 이용한 초간단 GraphQL 서버 개발","date":"Feb 9, 2019"}},{"excerpt":"테스트를 작성하다보면 모든 테스트 함수에서 공통적으로 필요한 공통 로직이 필요할 때가 있습니다.\n이번 포스팅에서는 Jest를 이용해서 이렇게 테스트 전이나 후에 항상 실행되야 하는 코드를 작성하는 방법에 대해서 알아보겠습니다. 테스트 대상 코드 데이터베이스에 접근하는 코드에 대한 테스트를 작성한다는 가정 하에, 다음과 같이 간단한 예제 코드를 작성해보겠습니다. 임의의 데이터베이스 역할을 하는 모듈로서 사용자 데이터를 저장하기 위한 users 배열을 가지고 있습니다. data 모듈에 저장되어 있는 users 배열에 사용자 데이터를 …","timeToRead":6,"fields":{"slug":"/jest-before-after/","tags":["JavaScript","library","Jest","testing"]},"frontmatter":{"title":"Jest로 테스트 전/후 처리하기","date":"Feb 2, 2019"}},{"excerpt":"지난 포스팅에서 Jest로 기본적인 테스트 코드 작성하는 방법에 대해서 알아보았습니다.\n자바스크립트 언어 특상 상 실제 프로젝트에서는 비동기(Asynchronous)로 돌아가는 코드를 테스트해야 할 일이 많은데요.\nJest Runner가 비동기 코드에 대한 테스트라는 사실을 인지할 수 있도록 테스트를 작성해주지 않으면 예상치 못했던 테스트 결과에 당황할 수가 있습니다.\n이번 포스팅에서는 이러한 비동기 코드에 대한 테스트를 작성할 때 흔히 하는 실수들과 적절한 대응 방법에 대해서 알아보겠습니다. 콜백 함수 테스트 먼저 콜백 함수를 …","timeToRead":9,"fields":{"slug":"/jest-async/","tags":["JavaScript","library","Jest","testing","setTimeout"]},"frontmatter":{"title":"Jest로 비동기 코드 테스트 작성하기","date":"Jan 26, 2019"}},{"excerpt":"Jest는 페이스북에서 만들어서 React와 더불어 많은 자바스크립트 개발자들에게 사랑받고 있는 테스팅 라이브러리입니다.\n출시 초기에는 프론트엔드에서 주로 쓰였지만 최근에는 백엔드에서도 기존의 자바스크립트 테스팅 라이브러리를 대체하고 있습니다. Jest: All-in-one 테스팅 라이브러리 페이스북에서는 Jest를 단순한 테스팅 라이브러리가 아닌 “테스팅 프레임워크”라고 부르는 만큼 기존 자바스크립트 테스팅 라이브러리와는 차별점이 있습니다.\nJest 이전에는 자바스크립트 코드를 테스트하라면 여러 가지 테스팅 라이브러리를 조합해서…","timeToRead":7,"fields":{"slug":"/jest-basic/","tags":["JavaScript","library","Jest","testing"]},"frontmatter":{"title":"Jest로 기본적인 테스트 작성하기","date":"Jan 12, 2019"}},{"excerpt":"파이썬에서 힙(heap)이나 우선순위 큐(PriorityQueue)를 사용하다 보면 다음과 같은 에러를 만날 수 있습니다. 이번 포스팅에서는 위 에러를 해결하는 방법에 대해서 알아보록 하겠습니다. 객체 정렬 기준 힙과 우선순위 내부적으로 이진 트리를 이용해서 데이터를 정렫된 상태로 유지하고 있습니다.\n그런데 이 정렬이라는 게 가능하려면 원소 간의 대소 비교가 가능해야합니다.\n예를 들어, 숫자나 문자와 같은 기본형 데이터는 대소 비교가 간단합니다.\n1보다 2가 크고, a보다 b가 크다는 것은 일반적으로 알려진 사실이기 때문에 자료구…","timeToRead":3,"fields":{"slug":"/python-lt-not-supported/","tags":["Python","파이썬","heapq","heap","힙","queue","큐","PriorityQueue","우선순위 큐"]},"frontmatter":{"title":"[파이썬] TypeError: < not supported","date":"Jan 6, 2019"}},{"excerpt":"반응형 웹디자인이 대두되면서 점점 많은 웹사이트들이 em과 rem라고 불리는 CSS 단위를 이용해서 스타일링이 되고 있습니다.\n이번 포스팅에서는 em과 rem 단위가 실제로 브라우저에서 어떻게 동작하는지 정확히 알고 좀 더 적재적소에 사용하는 방법에 대해서 알아보도록 하겠습니다. 상대 단위란? 상대(relative) 단위란 고정되지 않고 어떤 기준에 따라서 유동적으로 바뀔 수 있는 길이를 나타내는 단위입니다. 본 포스팅에서 다룰 em과 rem을 포함해 %, vw, vh 등이 대표적인 CSS의 상대 단위입니다. 반면 절대(absol…","timeToRead":5,"fields":{"slug":"/css-em-rem/","tags":["CSS","스타일","em","rem"]},"frontmatter":{"title":"CSS 상대 단위 - em과 rem","date":"Dec 29, 2018"}},{"excerpt":"데이터를 정렬된 상태로 저장하기 위해서 사용하는 파이썬의 PriorityQueue(우선순위 큐)에 대해서 알아보겠습니다. 우선순위 큐 자료구조 우선순위 큐는 데이터를 추가한 순서대로 제거하는 선입선출(FIFO) 특성을 가진 일반적인 큐의 자료구조와 달리,\n데이터 추가는 어떤 순서로 해도 상관이 없지만, 제거될 때는 가장 작은 값을 제거하는 독특한 특성을 지닌 자료구조입니다.\n이 말은 내부적으로 데이터를 정렬된 상태로 보관하는 메커니즘이 있다는 뜻이고, 좀 더 구체적으로 얘기하면 heapq 모듈을 통해 구현되어 있습니다. 파이썬의 …","timeToRead":2,"fields":{"slug":"/python-priority-queue/","tags":["Python","queue","PriorityQueue"]},"frontmatter":{"title":"파이썬의 우선순위 큐(PriorityQueue) 사용법","date":"Dec 23, 2018"}},{"excerpt":"데이터를 정렬된 상태로 저장하기 위해서 사용하는 파이썬의 heapq(힙큐) 내장 모듈에 대해서 알아보겠습니다. 힙 자료구조 heapq 모듈은 이진 트리(binary tree) 기반의 최소 힙(min heap) 자료구조를 제공합니다.\n자바에 익숙하신 분이라면 PriorityQueue 클래스를 생각하시면 이해가 쉬우실 것 같습니다. min heap을 사용하면 원소들이 항상 정렬된 상태로 추가되고 삭제되며, min heap에서 가장 작은값은 언제나 인덱스 0, 즉, 이진 트리의 루트에 위치합니다.\n내부적으로 min heap 내의 모든 …","timeToRead":7,"fields":{"slug":"/python-heapq/","tags":["Python","heapq","heap","힙"]},"frontmatter":{"title":"파이썬의 heapq 모듈로 힙 자료구조 사용하기","date":"Dec 15, 2018"}},{"excerpt":"이전 두 개의 포스팅를 통해서 기존에 자바스크립트로 어떻게 비동기 처리 코드를 작성해왔는지에 대해서 살펴보았습니다.\n이번 포스팅에서는 좀 더 개선된 방식으로 비동기 처리를 할 수있도록 도와주는 async/await에 대해서 알아보도록 하겠습니다.\nasync/await를 제대로 시용하려면 Callback과 Promise에 대한 이해가 무엇보다 중요하오니 아래 포스팅도 참고 바라겠습니다. [자바스크립트] 비동기 처리 1부 - Callback [자바스크립트] 비동기 처리 2부 - Promise Promise를 통한 비동기 코딩 먼저 P…","timeToRead":5,"fields":{"slug":"/js-async-async-await/","tags":["JavaScript","자바스크립트","async","비동기","Promise","프라미스","ES7","ES2017","async/await"]},"frontmatter":{"title":"[자바스크립트] 비동기 처리 3부 - async/await","date":"Dec 1, 2018"}},{"excerpt":"많은 분들이 자바스크립트 공부를 하시다가 프라미스(Promise)에 때문에 그만 두시곤 합니다.\n이번 포스팅에서는 자바스크립트에서 비동기 처리를 위해 굉범위하게 사용되는 Promise에 대해서 알아보겠습니다. 콜백 함수를 통한 비동기 처리의 문제점 ES6에서 Promise가 도입되어 지금처럼 널리 사용되기 이전에는 주로 콜백 함수를 다른 함수의 인자로 넘겨서 비동기 처리를 코딩을 했었습니다.\n예를 들어, 다음 코드를 보시면 findUserAndCallBack() 함수를 호출할 때, 두번째 인자로 콜백 함수가 넘어갑니다.\n그리고 f…","timeToRead":8,"fields":{"slug":"/js-async-promise/","tags":["JavaScript","async","비동기","Promise","ES6","setTimeout"]},"frontmatter":{"title":"[자바스크립트] 비동기 처리 2부 - Promise","date":"Nov 24, 2018"}},{"excerpt":"자바스크립트의 콜백 함수와 비동기 함수애 대해서 혼란스러워 하시는 분들이 주변에 많은 것 같아서 개념 정리를 해보고자 합니다.\n이번 포스팅에서는 실제 프로젝트에서 자주 접할 수 있는 유저 데이터 조회 시나리오를 통해 콜백 함수를 이용한 비동기 처리에 대해서 알아보겠습니다. 콜백 함수 유저 ID를 인자로 받아 DB나 API 연동 없이 임의의 유저 객체를 리턴하는 findUser()라는 함수를 작성해보겠습니다. 결과 위와 같이 우리가 흔히 생각하는 일반적인 함수란 입력(파라미터)이 있고 출력(리턴값)이 있습니다. 하지만 자바스크립트에…","timeToRead":5,"fields":{"slug":"/js-async-callback/","tags":["JavaScript","자바스크립트","async","비동기","Callback","콜백","setTimeout"]},"frontmatter":{"title":"[자바스크립트] 비동기 처리 1부 - Callback","date":"Nov 17, 2018"}},{"excerpt":"자바와 같이 객체 지향 언어를 사용하여 프로그래밍을 하다보면 객체들을 정렬해야하는 경우가 생깁니다.\n예를 들면, 온라인 게임 서비스에서 게이머들을 높은 점수 순으로 보여주는 게이머 랭킹 페이지를 생각해볼 수 있겠습니다. 정렬 대상 클래스 먼저, 각 게이머의 정보를 표현하기 위해 다음과 같은 간단한 클래스를 생각해보겠습니다. 그리고 5 명의 게이머가 담고 있는 리스트를 생성하였습니다. 자, 이제 이 게이머 리스트를 점수 기준으로 어떻게 정렬할 수 있을까요? Chloe 가 일등이기 때문에 리스트의 맨 앞으로 나와야하고, Alice 는…","timeToRead":5,"fields":{"slug":"/java-comparable-comparator/","tags":["Java","Java8","Comparator","Comparable"]},"frontmatter":{"title":"[Java] 객체 정렬하기 1부 - Comparable vs Comparator","date":"Oct 13, 2018"}},{"excerpt":"자바에서 최소나 최대 원소를 찾을 흔히 사용되는 3가지 코딩 스타일에 대해서 알아보겠습니다. Loop 제일 먼저 반복문을 통해 각 원소에 하나씩 접근해서 최대값을 구하는 다음과 같은 고전적인 코드를 생각해볼 수 있습니다. 반복문(for)을 이용해서 지속적으로 변수(max)에 새로운 값을 할당하는 방식이 전형적인 명령형 프로그래밍(Imperative programming) 스타일을 따르고 있습니다.\n많은 프로그래머들에게 가장 익숙한 방법이지만, 고수준의 비지니스 로직 중간에 이러한 저수준의 코드가 들어가게 되면 가독성에 나쁜 영향을…","timeToRead":3,"fields":{"slug":"/java-min-max/","tags":["Java","Java8","Collections","스트림","Stream","Functional Programmking","함수형 프로그래밍","min","max"]},"frontmatter":{"title":"[Java] 최소/최대 원소 구하기 (Loop/Collections/Stream)","date":"Oct 6, 2018"}},{"excerpt":"웹페이지 상의 모든 엘리먼트는 하나의 박스의 개념으로 모델링 할 수 있습니다.\n이 박스 모델이라고 불리는 컨셉은 CSS의 근간이 되기 때문에 반드시 이해하고 있어야 합니다. Box Model 이란? 우리가 웹페이지에 배치하는 모든 HTML 엘리먼트는 3개의 층을 가진 사각형 구조의 형태를 띠고 있습니다. box-model 가장 외곽의 층을 margin 영역이라고 부르는데, 보통 주변에 위치한 다른 엘리먼트와의 상하좌우 간격을 두기 위해서 쓰입니다.\n그 바로 아래 층을 border 영역이라고 부르는데, 경계선을 그리기 위해서 쓰이며…","timeToRead":5,"fields":{"slug":"/css-box-model/","tags":["CSS","BoxModel","padding","border","margin"]},"frontmatter":{"title":"CSS 박스 모델과 box-sizing 속성","date":"Sep 29, 2018"}},{"excerpt":"CSS의 display 속성에서 inline과 block의 차이를 정확히 알고 사용하고 계신가요? 😄\n이 둘을 합쳐놓은 inline-block이라는 녀석은 또 뭘까요? 😅 이번 포스팅에서는 display 속성에서 가장 근간이되지만 은근히 많은 분들이 헷갈려하시는 inline과 block 그리고 inline-block에 대해서 알아보도록 하겠습니다. inline display 속성이 inline으로 지정된 엘리먼트는 전후 줄바꿈 없이 한 줄에 다른 엘리먼트들과 나란히 배치됩니다.\n대표적인 inline 엘리먼트로 <span>이나 <a…","timeToRead":3,"fields":{"slug":"/css-display-inline-block/","tags":["CSS","display","inline","block","inline-block"]},"frontmatter":{"title":"CSS의 display 속성: inline, block, inline-block","date":"Sep 22, 2018"}},{"excerpt":"Java9에서는 기존 Java8 때 부터 있었던 Stream 클래스의 iterate() 메서드를 오버로드(overload)한 신규 메서드가 추가되었습니다. 이번 포스팅에서는 Stream 클래스의 정적 메서드인 iterate()에 대해서 얘기해보고자 합니다. 메서드 이름이 암시하듯 iterate()는 어떤 연산을 반복적으로 수행할 때 사용되는 메서드이며, 명령형 프로그래밍(imperative programming)에서 for나 while과 같은 루프문으로 해결하던 코드를 함수형 프로그래밍(functional programming) …","timeToRead":2,"fields":{"slug":"/java9-stream-iterate/","tags":["Java","Java9","JDK9","Stream","FP","스트림","iterate"]},"frontmatter":{"title":"Java9에서 강화된 Stream 클래스의 iterate 정적 메서드","date":"Sep 1, 2018"}},{"excerpt":"Java9에서 Optoinal 클래스에 몇가지 유용한 메서드들이 추가되었습니다. 이번 포스팅에서는 이 새로운 메서드들을 어떻게 활용할 수 있는지 살펴보겠습니다. Java8에서 추가되었던 Optional의 좀 더 기본적인 사용법은 아래 포스팅를 참고바랍니다. 자바8 Optional 1부: 빠져나올 수 없는 null 처리의 늪 자바8 Optional 2부: null을 대하는 새로운 방법 자바8 Optional 3부: Optional을 Optional답게 or() 메서드 Optional 객체가 담고 있는 값에 접근할 때, 비어있는 경우…","timeToRead":6,"fields":{"slug":"/java9-optional/","tags":["Java","자바","자바9","Java9","JDK9","Java8","Optional"]},"frontmatter":{"title":"Java9에서 추가된 Optional 기능 소개","date":"Aug 26, 2018"}},{"excerpt":"좀 더 간결한게 불변 컬렉션을 생성할 수 있도록 Java9에서 List, Set, Map 인터페이스에 새로운 팩토리 메서드들이 추가되었습니다. 불변 컬렉션이란? 불변(Immutable) 컬렉션(Collection)은 아이템 추가, 수정, 제거가 불가능합니다. 따라서 신규 아이템을 추가하거나 기존 아이템을 수정또는 제거하려고 하면 java.lang.UnsupportedOperationException이 발생합니다. 컬렉션이 생성된 후에 변경되기를 원하지 않는 경우에 사용하며, 의도치 않은 컬렉션 변경을 예방에 도움이 됩니다. 불변 …","timeToRead":3,"fields":{"slug":"/java9-immutable-collections/","tags":["Java","Java9","JDK9","Immutable","Collection","List","Set","Map"]},"frontmatter":{"title":"Java9의 불변 컬렉션 생성","date":"Aug 18, 2018"}},{"excerpt":"2018년 8월 10일 Vue CLI 3가 정식 릴리즈되었습니다. Github 릴리즈 페이지: https://github.com/vuejs/vue-cli/releases Evan You의 포스팅: https://medium.com/the-vue-point/vue-cli-3-0-is-here-c42bebe28fbb Vue CLI는 React의 create-react-app처럼 Vue 프로젝트를 손쉽게 만들 수 있도록 도와주는 커맨드 라인 도구 입니다. 이번 포스팅에서는 Vue CLI 3 사용법에 대해서 간단하게 알아보도록 하겠습니다…","timeToRead":7,"fields":{"slug":"/vue-cli3/","tags":["JavaScript","자바스크립트","VueJS","Vue CLI","Vue CLI 3"]},"frontmatter":{"title":"Vue CLI 3 사용법","date":"Aug 12, 2018"}},{"excerpt":"GraphQL API를 별다른 라이브러리 없이 최대한 간단하게 호출하는 방법에 대해서 알아보겠습니다. 아래에 소개된 방법들로 GraphQL API 호출하는 방법에 대한 감을 잡는데 도움이 되셨으면 좋겠습니다. 내장 Web UI 많은 GraphQL 서비스는 GraphiQL이나 Playground와 같은 내장 UI를 제공합니다. 예를 들어, 가짜 데이터를 응답해주는 FakerQL의 경우 브라우저에서 열어보면 Playground가 나옵니다. 좌측 패널에 다음과 같이 쿼리를 입력하고 중간에 있는 실행 버튼을 누릅니다. 그러면 우측 패널에…","timeToRead":2,"fields":{"slug":"/graphql-quick-call/","tags":["JavaScript","자바스크립트","GraphQL","graphql-request"]},"frontmatter":{"title":"GraphQL API 간단하게 호출하기","date":"Aug 5, 2018"}},{"excerpt":"웹팩은 자바스크립트 개발자들이 좀 더 쾌적한 개발 경험을 할 수 있도록 여러 가지 개발 편의 기능을 제공합니다. 이번 포스팅에서는 웹팩을 사용하면서 개발 편의성을 개선시킬 수 방법에 대해서 알아보겠습니다. 관련 포스팅 웹팩에 대한 지식이나 경험이 전혀 없으신 분들을 아래 포스팅를 먼저 읽어보시면 따라오시기가 좀 더 수월하실 겁니다. 웹팩(Webpack) 기본 사용법 (CLI) 웹팩(Webpack) 기본 설정법 (Entry/Output/Loader/Plugins) 실습 프로젝트 먼저 실습 프로젝트를 만들겠습니다. 새로운 디렉터리를 …","timeToRead":7,"fields":{"slug":"/webpack-development/","tags":["JavaScript","자바스크립트","Webpack","웹팩","webpack-dev-server"]},"frontmatter":{"title":"웹팩(Webpack) 개발 편의 기능","date":"Jul 21, 2018"}},{"excerpt":"React나 Vue, Angular와 같은 자바스크립트 프레임워크를 기반으로 프로젝트를 하다보면 webpack.config.js라는 파일과 자주 마주치게 됩니다. 바로 웹팩 설정 파일인데요. 이번 포스팅에서는 이 설정 파일을 기본으로 한 웹팩 기본 설정법에 대해서 알아보도록 하겠습니다. 웹팩에 대한 기본 개념이나 사용법을 모르시는 분은 지난 포스팅를 먼저 읽어보시면 더 따라가기 쉬우실 겁니다. 설정 파일 웹팩을 사용할 때 반드시 설정 파일이 필요하지는 않지만, 대부분의 경우에는 설정 파일을 사용합니다. 왜냐하면 터미널에서 웹팩 커…","timeToRead":8,"fields":{"slug":"/webpack-config/","tags":["JavaScript","자바스크립트","Webpack","웹팩","Entry","Output","Loader","Plugins","webpack.config.js","style-loader","css-loader","clean-webpack-plugin"]},"frontmatter":{"title":"웹팩(Webpack) 기본 설정법 (Entry/Output/Loader/Plugins)","date":"Jul 15, 2018"}},{"excerpt":"자바스크립트 프레임워크로 React를 사용하든 Vue를 사용하든 Angular를 사용하든 항상 웹팩(Webpack)이라는 녀셕을 만나게 됩니다.\n보통 구글링해서 겨우 필요한 설정만 바꾸면서 사용하고 했었는데 이 번에 시간을 내서 웹팩에서 대해 한 번 공부를 해보았습니다. 웹팩(Webpack)은 기본적으로 자바스크립트 모듈 번들러(JavaScript Module Bundler)이며 웹 개발을 도와주는 엄청나게 많은 부가 기능을 가지고 있습니다.\n간단한 예제 프로젝트를 통해서 웹팩의 필요성을 느껴보고 기본적인 사용법에 대해서 알아보도…","timeToRead":8,"fields":{"slug":"/webpack-basics/","tags":["JavaScript","자바스크립트","Webpack","웹팩","webpack-cli"]},"frontmatter":{"title":"웹팩(Webpack) 기본 사용법 (CLI)","date":"Jul 7, 2018"}},{"excerpt":"enumerate() 내장 함수에 리스트를 넘기면 next() 메서드가 index와 value로 이뤄진 튜플을 반환합니다. 따라서 다음과 같이 for 루프를 돌릴 때 enumerate()를 조합해서 사용하면 인덱스와 값을 동시에 접근할 수 있습니다. 추가로, enumerate() 내장 함수를 호출할 때 start 파라미터를 사용하면 0이 아닌 다른 시작 번호를 사용할 수 있습니다.","timeToRead":1,"fields":{"slug":"/python-for-index/","tags":["Python","for","index"]},"frontmatter":{"title":"[파이썬] for 루프에서 인덱스 얻기","date":"Jun 30, 2018"}},{"excerpt":"파이썬에 기본적으로 내장되어 있는 데이터베이스인 sqlite3 모듈를 사용하는 방법에 대해서 알아보겠습니다. 데이터베이스 접속 sqlite3 내장 모듈을 임포트 후에 connect 메서드를 통해 커넥션 객체를 생성합니다. 메모리 DB 접속 (일회성) 파일 DB 접속 테이블 생성 커서 객체를 받아와서 execute 메서드로 CREATE TABLE 쿼리를 전송합니다. 데이터 삽입 마찬가지로 커서 객체로 작업합니다. 기본 String Query 사용 Parameter: Tuple 사용 Named Parameter: Dictionary …","timeToRead":2,"fields":{"slug":"/python-sqlite3/","tags":["Python","sqlite3"]},"frontmatter":{"title":"[파이썬] sqlite3 모듈 사용법","date":"Jun 23, 2018"}},{"excerpt":"파이썬에 내장된 random 모듈은 랜덤 숫자를 생성 뿐만 아니라 다양한 랜덤 관련 함수를 제공합니다. 모듈 임포트 우선 random 모듈을 사용하려면 임포트해야 합니다. random() 함수 0부터 1사이의 랜덤 실수를 리턴합니다. uniform() 함수 2개의 숫자 사이의 랜덤 실수를 리턴합니다. randint() 함수 2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) randrange() 함수 range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 …","timeToRead":2,"fields":{"slug":"/python-random/","tags":["Python","random"]},"frontmatter":{"title":"파이썬의 random 모듈로 무작위 데이터 다루기","date":"Jun 16, 2018"}},{"excerpt":"이전 포스팅에서 AWS CLI의 aws s3 커맨드를 사용하는 방법에 대해서 살펴보았습니다. 이번 포스팅에서는 aws s3api 커맨드를 통해서 Amazon S3를 좀 더 세밀하게 제어하는 방법에대해서 알아보도록 하겠습니다. S3 버킷의 Region 확인 종종 본인이 생성한 S3 버킷이 속한 Region이 어디인지 햇갈릴 때가 있습니다. 이럴 때는 aws s3api get-bucket-location 커맨드를 통해서 Region을 알아낼 수 있습니다. S3 버킷의 Life Cycle 설정 Amazon S3에 저장되어 있는 파일들의…","timeToRead":5,"fields":{"slug":"/aws-cli-s3api/","tags":["AWS","CLI","S3","Simple Storage Service"]},"frontmatter":{"title":"AWS CLI로 Amazon S3 다루기 - 2","date":"Jun 10, 2018"}},{"excerpt":"이번 포스팅에서는 파이썬에서 진수를 다루는 여러 가지 방법에 대해서 알아보겠습니다. 다른 진수의 형태로 숫자를 표현하기 파이썬에서는 기본적으로 10진수 형태로 숫자를 표현하기 때문에 다른 진수의 형태로 숫자를 표현하려면 다음과 같이 숫자 앞에 접두어를 붙여줘야 합니다. 2진수: 0b 8진수: 0o 16진수: 0x 해당 진수에서 허용하는 범위에서 벗어난 숫자를 사용하면 SyntaxError가 발생하니 주의해야 합니다. 숫자에서 다른 진수의 문자열로 변환하기 파이썬은 bin(), oct(), hex()라는 내장 함수를 제공합니다. 이…","timeToRead":4,"fields":{"slug":"/python-int-bases/","tags":["Python","BIF","진수","진법","Binary"]},"frontmatter":{"title":"파이썬에서 2진수, 8진수, 16진수 다루기","date":"Jun 2, 2018"}},{"excerpt":"Amazon S3는 AWS에서 제공하는 클라우드 스토리지 서비스입니다. AWS CLI를 이용하면 간편하게 S3 버킷을 제어하고 S3 오브젝트에 접근할 수 있으며, Unix의 파일 시스템 커맨드와 매우 유사해서 배우기도 쉽습니다. 이 번 포스팅에서는 자주 사용되는 AWS CLI의 Amazon S3 관련 커맨드을 살펴보도록 하겠습니다. 버킷 생성하기 Amazon S3에 데이터를 저장하려면 먼저 버킷(Bucket)을 생성해야 합니다. 버킷은 Amazon S3에서 파일 시스템의 최상위 디렉터리나 드라이브 정도의 역할을 하는 저장 단위 개…","timeToRead":6,"fields":{"slug":"/aws-cli-s3/","tags":["AWS","CLI","S3","Simple Storage Service"]},"frontmatter":{"title":"AWS CLI로 Amazon S3 다루기 - 1","date":"May 27, 2018"}},{"excerpt":"DynamoDB는 AWS에서 제공하는 관리형 NoSQL 데이터베이스 서비스입니다. AWS CLI를 이용하면 간편하게 DynamoDB 테이블을 제어하고 테이터에 접근할 수 있습니다. 이 번 포스팅에서는 자주 사용되는 AWS CLI의 DynamoDB 관련 커맨드을 살펴보도록 하겠습니다. 테이블 생성하기 아직 본인 AWS 계정에 DynamoDB 테이블이 없으신 분들은 일단 테이블부터 생성하셔야 합니다. 예제로 과일 정보를 저장하기 위해서 Fruits 테이블을 생성해보겠습니다. aws dynamodb create-table 커맨드를 사용…","timeToRead":7,"fields":{"slug":"/aws-cli-dynamodb/","tags":["AWS","CLI","DynamoDB","DDB","다이나모DB"]},"frontmatter":{"title":"AWS CLI로 DynamoDB 다루기","date":"May 19, 2018"}},{"excerpt":"Amazon Web Services(AWS)에 접근을 하기위해서는 필수적으로 인증 절차를 필요로 합니다. 사람이 직접 터미널 상에서 AWS CLI를 통해서 접근하든, 애플리케이션이 AWS SDK를 통해서 접근하든지, 적절한 방법을 통해 인증을 받지 않으면 AWS로 부터 정상적인 응답을 얻을 수 없습니다. 본 포스팅에서는 AWS CLI를 통해서 간단하게 AWS 인증 정보를 설정하는 방법에 대해서 알아보도록 하겠습니다. 인증 정보 개념 AWS도 기본적으로 일반적인 웹사이트처럼 아이디와 비밀번호와 같은 인증 정보를 사용자로 부터 받아 …","timeToRead":5,"fields":{"slug":"/aws-cli-configure/","tags":["AWS","CLI","Authentication"]},"frontmatter":{"title":"AWS CLI로 인증 정보 (Access Key ID, Secret Access Key) 관리하기","date":"May 13, 2018"}},{"excerpt":"fixed position을 이용해서 스크롤에 해도 따라가지 않고 항상 화면 상단에 고정되어 있는 메뉴바를 만들어보겠습니다. fixed position의 특징 CSS의 position 속성은 엘리먼트가 브라우저 화면에 어떻게 배치되는가를 결정합니다.\n어떤 엘리먼트의 position 속성을 fixed로 지정해줄 경우, 해당 엘리먼트는 부모 엘리먼트로 부터 완전히 독립되어 브라우저 화면(viewport) 상에서 어디든지 원하는 위치에 자유롭게 배치시킬 수 있게 됩니다.\n뿐만 아니라, 브라우저 화면을 스크롤했을 때도 영향을 받지 않기 …","timeToRead":4,"fields":{"slug":"/css-position-fixed-navigation/","tags":["CSS","position","fixed","header","navigation","메뉴바"]},"frontmatter":{"title":"CSS의 fixed position으로 메뉴바 상단 고정","date":"May 6, 2018"}},{"excerpt":"자바스크립트에서 의외로 객체의 복제가 쉽지 않을 수 있습니다. 예를 들어 다음과 같은 객체가 있다고 해보겠습니다. 자바스크립트에서 객체(object)란 속성(property)의 집합으로 생각할 수 있습니다. 속성은 키(key)와 값(value)를 가집니다. 자바스크립트에서 키는 항상 문자열인데 반해, 값은 위와 같이 모든 데이터형이 될 수 있다는 특징을 가지고 있습니다. 참조 할당 객체를 복제할 때 초보자들이 가장 많이 하는 실수는 다음과 같이 = 연산자를 통해 새로운 변수에 복사할 객체를 할당하는 것입니다. 위 코드는 동일한 객…","timeToRead":4,"fields":{"slug":"/js-objects-clone/","tags":["JavaScript","자바스크립트","clone","shallow clone","deep clone","JSON"]},"frontmatter":{"title":"자바스크립트 객체 복제 방법","date":"Apr 29, 2018"}},{"excerpt":"지난 포스팅에서 absolute position의 기본적인 특징과 작동 매커니즘에 대해서 살펴보았습니다.\n이번 포스팅에서는 absolute position를 응용해서 이미지 위에 캡션을 겹치는 방법에 대해서 알아보겠습니다. 기본 이미지 캡션 배치 웹페이지 상의 이미지에 캡션을 넣을 때는 보통 HTML5에서 도입된 <figure/>와 <figcpation/> 태그를 사용합니다. CSS의 position 속성을 건드리지 않으면 이미지와 캡션은 서로의 영역을 침범하지 않고 위아래로 차례대로 배치됩니다. absolute position …","timeToRead":3,"fields":{"slug":"/css-position-absolute-image-caption/","tags":["CSS","position","absolute","image","caption"]},"frontmatter":{"title":"CSS의 absolute position으로 이미지 캡션 겹치기","date":"Apr 21, 2018"}},{"excerpt":"특정 HTML 요소를 상위 요소를 기준으로 배치시키기 위해서 사용하는 absolute position에 대해서 알아보겠습니다. HTML 요소 배치 관련 CSS 속성 CSS의 position 속성은 요소가 브라우저 화면에 어떻게 배치되는가를 결정합니다.\n기본값은 static이며 relative나 absolute, fixed 등으로 변경이 가능하죠.\n이번 포스팅에서 그 중에서도 가장 다루기 까다로운 absolute에 대해서 알아보려고 하는데요. position 속성을 static이 아닌 다른 값으로 설정했을 때, 함께 사용하는 포지셔…","timeToRead":4,"fields":{"slug":"/css-position-absolute/","tags":["CSS","position","absolute"]},"frontmatter":{"title":"CSS의 absolute position 작동 메커니즘 이해","date":"Apr 14, 2018"}},{"excerpt":"ES6(ES2105) 이상의 최신 자바스크립트 문법으로 작성된 코드가 노드JS(NodeJS)에서 실행이 안 되는 경우가 종종있습니다. 이럴 경우 어쩔 수 없이 예전 자바스크립트 문법으로 코드를 재작성하기도 하는데요. 이번 포스팅에서는 자바스크립트 Transpiler인 Babel을 이용하여 이 문제를 해결해보겠습니다. NodeJS에서 ES6 코드 실행 오류 먼저 간단한 예제 프로젝트를 하나를 만들겠습니다. babel-test라는 디렉터리에 NPM 패키지를 생성합니다. 이제 다음과 같이 매우 간단한 자바스크립트 코드를 작성해보겠습니다…","timeToRead":5,"fields":{"slug":"/js-babel6-node/","tags":["JavaScript","ES6","Node.js","Babel","CLI"]},"frontmatter":{"title":"Node.js로 ES6 코드 실행하기 (Babel6)","date":"Apr 14, 2018"}},{"excerpt":"자바스크립트 개발을 하다보면 require나 import 키워드를 통해 외부 라이브러리를 불러오는 코드를 자주 보게 됩니다.\nrequire는 Node.js에서 예전부터 사용되고 있는 CommonJS의 키워드이고, import는 ES6(ES2015)에서 새롭게 도입되어 현재 자바스크립트 생태계에서 표준이 되어가고 있는 키워드입니다.\n두 개의 키워드 모두 하나의 파일에서 다른 파일의 코드를 불러온다는 동일한 목적을 가지고 있지만, 비슷한듯 약간씩 다른 문법 때문에 개발자들을 혼란스럽게 하기도 하죠. 예를 들어, 위 두 코드는 Expr…","timeToRead":5,"fields":{"slug":"/js-module-import/","tags":["JavaScript","자바스크립트","ES6","ESM","import","export","export default"]},"frontmatter":{"title":"자바스크립트 ES 모듈 내보내기/불러오기 (import)","date":"Apr 7, 2018"}},{"excerpt":"자바스크립트 개발을 하다보면 require나 import 키워드를 통해 외부 라이브러리를 불러오는 코드를 자주 보게 됩니다.\nrequire는 Node.js에서 예전부터 사용되고 있는 CommonJS의 키워드이고, import는 ES6(ES2015)에서 새롭게 도입되어 현재 자바스크립트 생태계에서 표준이 되어가고 있는 키워드입니다.\n두 개의 키워드 모두 하나의 파일에서 다른 파일의 코드를 불러온다는 동일한 목적을 가지고 있지만, 비슷한듯 약간씩 다른 문법 때문에 개발자들을 혼란스럽게 하기도 하죠. 예를 들어, 위 두 코드는 Expr…","timeToRead":4,"fields":{"slug":"/js-module-require/","tags":["JavaScript","Node.js","CommonJS","import","exports","module.exports","require"]},"frontmatter":{"title":"자바스크립트 CommonJS 모듈 내보내기/불러오기 (require)","date":"Apr 1, 2018"}},{"excerpt":"백엔드 개발을 하든 프론트엔드 개발을 하든 자바스크립트 프로젝트에서 npm(Node Package Manager)을 사용하는 것은 거의 필수적이죠?\n이번 포스팅에서는 실무에서 자주 사용되는 npm 커맨드들에 대해서 살펴보겠습니다. 프로젝트 생성 npm init 커맨드를 사용하면 현재 디렉터리에 npm 기반으로 프로젝트를 생성할 수 있습니다. 커맨드를 실행하면 패키지 이름, 버전, 설명 등등을 입력하게 됩니다. 프로젝트를 생성할 때 이러한 정보들을 일일이 입력하는 게 귀찮게 느껴질 수 있습니다. 이 때는 --yes나 -y 옵션을 주…","timeToRead":7,"fields":{"slug":"/js-npm-cli/","tags":["JavaScript","Node.js","npm","npx","CLI"]},"frontmatter":{"title":"자주 사용되는 npm 커맨드 정리 (+npx)","date":"Mar 3, 2018"}},{"excerpt":"자바8 Time API의 Instant 클래스는 시간을 타임스탬프로 다루기 위해서 사용합니다. 타임스탬프는 UTC 기준으로 1970년 1월 1일 0시 0분 0초를 숫자 0으로 정하고 그로 부터 경과된 시간을 양수 또는 음수로 표현합니다. 타임스탬프는 인간에게는 직관적이지 않은 시간의 표현 방법이지만 고전적으로 기계에게는 매우 친화적인 방법으로 현재까지 널리 사용되어 왔습니다. 일단 시간을 표현하기 위해서 별도의 타입없이 기본 데이터 타입으로 표현이 가능한데다가, 타임존이 UTC로 고정되어 있기 때문에 타임스탬프가 어느 타임존 기준…","timeToRead":4,"fields":{"slug":"/java8-instant/","tags":["Java","Java8","Date","Time","Instant","Timestamp"]},"frontmatter":{"title":"[Java8 Time API] Instant 사용법","date":"Dec 23, 2017"}},{"excerpt":"자바8에 추가된 Time 패키지에는 Duration과 Period라는 상당히 비슷해 보이는 2개의 클래스가 있습니다. 이 두개의 클래스는 둘 다 시간의 길이을 나타내기 위해서 사용되는데요. Duration은 두 “시간” 사이의 간격을 나타내는 반면에 Period는 두 “날짜” 사이의 간격을 나타낸다는 차이점이 있습니다. 이 게 무슨 말인지 예제를 통해서 살펴보도록 하겠습니다. Duration 먼저 Duration 클래스는 두 시간 사이의 간격을 초나 나노 초 단위로 나타냅니다. 다음 예제는 10시 35분 40초와 10시 36분 5…","timeToRead":4,"fields":{"slug":"/java8-duration-period/","tags":["Java","Java8","Date","Time","Duration","Peroid","ChronoUnit"]},"frontmatter":{"title":"[Java8 Time API] Duration과 Period 사용법 (+ChronoUnit)","date":"Dec 17, 2017"}},{"excerpt":"Java8에서 추가된 ZonedDateTime 사용법에 대해서 알아보겠습니다. ZonedDateTime는 LocalDateTime과 달리 타임존 또는 시차 개념을 가지고 있는 클래스입니다. ZonedDateTime ZonedDateTime 클래스는 타임존 또는 시차 개념이 필요한 날짜와 시간 정보를 나타내기 위해서 사용됩니다. public 생성자를 제공하지 않기 때문에 객체를 생성할 때는 now()나, of()와 같은 정적 메소드를 사용하도록 설계되어 있습니다. 제 PC의 타임존이 LA로 세팅이 되어 있어서, 인자없이 ZonedD…","timeToRead":6,"fields":{"slug":"/java8-zoned-date-time/","tags":["Java","Java8","Date","Time","ZonedDateTime"]},"frontmatter":{"title":"[Java8 Time API] ZonedDateTime 사용법","date":"Dec 10, 2017"}},{"excerpt":"이번 포스팅에서는 Java8 Date/Time API의 LocalDate과 LocalTime 그리고 LocalDateTime 사용법에 대해서 알아보겠습니다. 이 3개의 클래스는 모두 타임존 개념을 가지고 있지 않기 때문에 타임존에 따른 시간 변환이 불가능하다는 공통점을 가지고 있습니다. LocalDate LocalDate 클래스는 타임존 개념이 필요없는 날짜 정보를 나타내기 위해서 사용됩니다. 대표적으로 적용이 가능한 사례는 ‘생일’을 떠올릴 수 있을 것 같습니다. 보통 우리가 생일을 얘기할 때는 타임존 개념을 넣지 않기 때문입니…","timeToRead":4,"fields":{"slug":"/java8-local-date-time/","tags":["Java","Java8","자바8","Date","Time","LocalDate","LocalTime","LocalDateTime"]},"frontmatter":{"title":"[Java8 Time API] LocalDate, LocalTime, LocalDateTime 사용법","date":"Dec 3, 2017"}},{"excerpt":"시장에 출시되는 디바이스들의 화면들이 점점 다양해지면서 다양한 크기의 화면에 똑똑하게 반응하는 웹디자인이 중요해지고 있습니다.\n이번 포스팅에서는 CSS의 미디어 쿼리(Media Query)와 float 속성을 이용해서 반응형 레이아웃을 잡는 방법에 대해서 알아보겠습니다. 웹페이지 마크업 CSS로 스타일할 예제 사이트의 전체 웹페이지를 HTML5에서 추가된 시멘택 태그를 활용해서 마크업하도록 하겠습니다.\n먼저, 헤더 영역은 <header/> 태그로 감싸고, 사이트명에는 <h2/> 태그, 메뉴바에는 <nav> 태그를 적용합니다. 메인…","timeToRead":5,"fields":{"slug":"/css-responsive-layouts/","tags":["CSS","responsive","Layout","Media Query","float","clearfix"]},"frontmatter":{"title":"CSS로 반응형 레이아웃 스타일하기","date":"Nov 25, 2017"}},{"excerpt":"이번 포스팅에서는 가장 유명한 정렬 알고리즘 중 하나인 퀵 정렬(Quick Sort)에 대해서 알아보겠습니다. 알고달레에서 코딩 테스트/인터뷰 준비에 좀 더 특화된 컨텐츠를 만나보세요! 📝 기본 컨셉 병합 정렬과 마찬가지로 퀵 정렬도 분할 정복 (Devide and Conquer) 기법과 재귀 알고리즘을 이용한 정렬 알고리즘입니다. 쉬운 이해를 위해서 다음과 같이 1부터 7까지 총 7개의 숫자가 들어있는 배열을 기준으로 설명하겠습니다. 항상 정 가운데를 기준으로 분할을 하는 병합 정렬과 달리, 퀵 정렬은 흔히 피봇(pivot)이라…","timeToRead":6,"fields":{"slug":"/sort-quick/","tags":["algorithm","sort","Quick Sort","퀵 정렬","Python","Java"]},"frontmatter":{"title":"[알고리즘] 퀵 정렬 - Quick Sort (Python, Java)","date":"Nov 18, 2017"}},{"excerpt":"대표적인 O(logN) 알고리즘인 병합 정렬(Merge Sort)에 대해서 알아보겠습니다. 알고달레에서 코딩 테스트/인터뷰 준비에 좀 더 특화된 컨텐츠를 만나보세요! 📝 기본 컨셉 병합 정렬은 분할 정복 (Devide and Conquer) 기법과 재귀 알고리즘을 이용해서 정렬 알고리즘입니다.\n즉, 주어진 배열을 원소가 하나 밖에 남지 않을 때까지 계속 둘로 쪼갠 후에 다시 크기 순으로 재배열 하면서 원래 크기의 배열로 합칩니다. 예를 들어, 다음과 같이 1부터 8까지 총 8개의 숫자가 들어있는 배열에 있다고 가정해보겠습니다. 먼…","timeToRead":4,"fields":{"slug":"/sort-merge/","tags":["algorithm","sort","Merge Sort","병합 정렬","Python","Java"]},"frontmatter":{"title":"[알고리즘] 병합 정렬 - Merge Sort (Python, Java)","date":"Nov 11, 2017"}},{"excerpt":"선택 정렬, 거품 정렬과 더불어 대표적인 O(N^2) 정렬 알고리즘인 삽입 정렬(Insertion Sort)에 대해서 알아보겠습니다. 알고달레에서 코딩 테스트/인터뷰 준비에 좀 더 특화된 컨텐츠를 만나보세요! 📝 기본 컨셉 삽입 정렬은 한마디로 표현하면 정렬 범위를 1칸씩 확장해나가면서 새롭게 정렬 범위에 들어온 값을 기존 값들과 비교하여 알맞은 자리에 꼽아주는 알고리즘입니다. 예를 들어, 다음과 같이 1부터 5까지 총 5개의 숫자가 들어있는 배열에 있다고 가정해보겠습니다. 맨 처음에는 첫번째 2개의 값만 정렬 범위에 포함시키고 …","timeToRead":6,"fields":{"slug":"/sort-insertion/","tags":["algorithm","sort","Insertion Sort","삽입 정렬","Python","Java"]},"frontmatter":{"title":"[알고리즘] 삽입 정렬 - Insertion Sort (Python, Java)","date":"Nov 4, 2017"}},{"excerpt":"선택 정렬(Slection Sort)과 더불어 대표적인 O(N^2) 정렬 알고리즘인 거품 정렬(Bubble Sort)에 대해서 알아보겠습니다. 알고달레에서 코딩 테스트/인터뷰 준비에 좀 더 특화된 컨텐츠를 만나보세요! 📝 기본 컨셉 거품 정렬은 큰 그림에서 보았을 때 뒤에서 부터 앞으로 정렬을 해나가는 구조를 가지고 있습니다.\n즉, 맨 뒷자리에 제일 큰 값을 제일 뒤로 보내고, 제일 큰 값 바로 앞에 두번째로 큰 값을 보냅니다.\n이를 위해 배열 내의 값들을 앞뒤로 서로 비교해서 자리를 바꾸는 작업을 지속적으로 수행해야 합니다.\n이…","timeToRead":6,"fields":{"slug":"/sort-bubble/","tags":["algorithm","sort","Bubble Sort","거품 정렬","Python","Java"]},"frontmatter":{"title":"[알고리즘] 거품 정렬 - Bubble Sort (Python, Java)","date":"Oct 28, 2017"}},{"excerpt":"정렬 알고리즘 중에서 가장 직관적이고 쉽게 구현이 가능한 선택 정렬(Selection Sort)에 대해서 알아보겠습니다. 알고달레에서 코딩 테스트/인터뷰 준비에 좀 더 특화된 컨텐츠를 만나보세요! 📝 기본 아이디어 선택 정렬은 알고리즘에 대해 배워본 적이 없는 사람도 쉽게 생각해낼 수 있는 정렬 알고리즘입니다. 왜냐하면 우리가 일상에서 무언가를 크기 순으로 나열할 때 흔히 사용되는 사고 방식이기 때문입니다. 예를 들어, 위와 같이 키를 알고 있는 네 친구들을 키 순으로 세우려면, 우선 4명의 키를 모두 비교하여 키가 제일 작은 1…","timeToRead":5,"fields":{"slug":"/sort-selection/","tags":["algorithm","sort","Selection Sort","선택 정렬","Python","Java"]},"frontmatter":{"title":"[알고리즘] 선택 정렬 - Selection Sort (Python, Java)","date":"Oct 21, 2017"}},{"excerpt":"맥이나 리눅스 터미널에서 현재 실행 중인 프로세스를 확인하기 위해서 사용되는 ps 커맨드에 대해서 알아보록 하겠습니다. 무옵션 옵션없이 ps 커맨드를 실행하면 현재 사용자의 세션에서 실행 중인 프로세스를 출력해줍니다.\n첫번째 칼럼에서 프로세스의 식별자인 프로세스 아이디를 확인할 수 있으며 마지막 칼럼에서 실행 중인 커맨드를 확인할 수 있습니다. -e 옵션 -e (everything) 옵션을 사용하면 현재 사용자 뿐만 아니라 다른 사용자들이 실행하고 있는 모든 프로세스까지 포함해서 출력해줍니다. -f 옵션 -f (full-forma…","timeToRead":3,"fields":{"slug":"/shell-command-ps/","tags":["Mac","Linux","terminal","Shell","CLI","sh","ps","맥","리눅스","터미널","쉘","커맨드"]},"frontmatter":{"title":"ps 쉘 커맨드 사용법","date":"Oct 14, 2017"}},{"excerpt":"맥이나 리눅스 터미널에서 가장 자주 사용하는 커맨드 중에 하나인 ls에 대해서 알아보도록 하겠습니다. ls는 파일이나 디펙토리 목록을 나열하기 위해서 사용하는 리눅스 커맨드입니다. 파일과 디렉터리 나열하기 단순히 현재 디렉터리 내의 어떤 파일과 디렉터리가 있는지를 보려면 터미널에 ls라고 입력합니다. 기본적으로는 알파벳 순으로 나옵니다. 확장자 여부로 파일과 디렉터리를 유추할 수 있지만 좀 더 명확하게 파일과 디렉터리가 구분되었으면 좋겠습니다. 파일과 디렉터리 구분하기 -F 옵션을 사용하면 디렉터리 이름 뒤에는 / 기호가 붙습니다…","timeToRead":6,"fields":{"slug":"/shell-command-ls/","tags":["Mac","Linux","terminal","Shell","CLI","sh","ls","맥","리눅스","터미널","쉘","커맨드"]},"frontmatter":{"title":"ls 쉘 커맨드 사용법","date":"Oct 7, 2017"}},{"excerpt":"스프링 부트 애플리케이션 구동 시점에 특정 코드 실행 시키기기 위해서 2가지 인터페이스를 제공하고 있습니다. CommandLineRunner CommandLineRunner 인터페이스는 구동 시점에 실행되는 코드가 자바 문자열 아규먼트 배열에 접근해야할 필요가 있는 경우에 사용합니다.\n다음과 같이 CommandLineRunner 인터페이스를 구현한 클래스에 @Component 어노테이션을 선언해두면 컴포넌트 스캔이되고 구동 시점에 run 메소드의 코드가 실행됩니다. 테스트 jar 파일로 패키징된 애플리케이션을 실행시킬 때 abc와…","timeToRead":2,"fields":{"slug":"/spring-boot-runners/","tags":["Java","Spring","스프링","SpringBoot","스프링부트","ApplicationRunner","CommandLineRunner"]},"frontmatter":{"title":"스프링 부트 구동 시점에 특정 코드 실행 시키기 (CommandLineRunner & ApplicationRunner)","date":"Aug 27, 2017"}},{"excerpt":"본 포스팅에서는 스프링 부트의 내장 서버를 설정하는 방법에 대해서 알아보겠습니다. 애플리케이션 설정 파일 스프링 부트 프로젝트의 src/main/resources 디렉터리를 보시면 application.properties나 applicaiton.yml 파일을 찾으실 수 있으실 겁니다.\n(없으신 경우 새로운 applicaiton.yml 파일을 만드시면 됩니다.) 포트와 컨텍스트 패스 변경 스프링 부트의 내장 서버는 디플트로 포트는 8080을 사용하고 컨텍스트 패스는 /를 사용하고 있습니다.\n포트를 8081로 바꾸고 컨텍스트 패스를 …","timeToRead":2,"fields":{"slug":"/spring-boot-embedded-server-config/","tags":["Java","Spring","스프링","SpringBoot","스프링부트"]},"frontmatter":{"title":"스프링 부트 내장 서버 설정 (포트, 컨텍스트 패스)","date":"Aug 20, 2017"}},{"excerpt":"본 포스팅에서는 스프링 부트의 내장 서버를 바꾸는 방법에 대해서 알아보도록 하겠습니다. 메이븐 설정 파일(pom.xml)만 조금씩 수정해주면 다양한 내장 서버를 사용해볼 수 있습니다. Tomcat 스프링 부트는 디플트 내장 서버로 Tomcat을 사용하고 있습니다. 따라서 특별한 설정없이 Web Starter 의존성만 추가해주면 됩니다. 바로 스프링 부트 애플리케이션을 실행하면 Tocmat 내장 서버가 올라갑니다. Jetty 스프링 부트의 내장 서버로 Tomcat 대신에 Jetty를 사용해보겠습니디. 먼저 Web Starter에 기…","timeToRead":2,"fields":{"slug":"/spring-boot-embedded-server-change/","tags":["Java","Spring","스프링","SpringBoot","스프링부트","Tomcat","톰켓","Jetty","제티","Undertow","언더토우"]},"frontmatter":{"title":"스프링 부트 내장 서버 바꾸기","date":"Aug 13, 2017"}},{"excerpt":"스프링 부트 프로젝트를 만드는데는 여러 가지 자동화된 방법이 있습니다. Eclipse나 IntelliJ와 같은 코드 에디터에서 제공하는 프로젝트 생성 마법사를 이용할 수 있고,\nSPRING INITIALIZR 웹사이트에서 생성해준 프로젝트의 압축 파일을 다운로드 받을 수도 있으며, Spring CLI 도구를 이용하여 터미널에서 커맨드 한 줄을 날릴 수도 있습니다. 하지만 스프링 부트를 본격적으로 시작할 분이 아니라면 이런 도구를 설치하는 게 부담스럽거나 번거롭게 느껴질 수 있습니다.\n본 포스팅에서는 이러한 도구의 도움없이 아무 것…","timeToRead":3,"fields":{"slug":"/spring-boot-quick-start-without-tools/","tags":["Java","Spring","스프링","SpringBoot","스프링부트"]},"frontmatter":{"title":"도구 없이 스프링 부트 프로젝트 만들기","date":"Aug 6, 2017"}},{"excerpt":"이번 포스팅에서는 많이 알려지지는 않았지만 알아두면 유용한 Lombok 어노테이션에 대해서 알아보겠습니다. 빌더 자동 생성 다수의 필드를 가지는 복잡한 클래스의 경우, 생성자 대신에 빌더를 사용하는 경우가 많은데요.\n빌더 패턴을 직접 작성해보면 코딩량이 의외로 상당함을 깨닫게 됩니다. 이 때, @Builder 어노테이션을 사용하면 자동으로 해당 클래스에 빌더를 추가해주기 때문에 매우 편리합니다. 컬렉션으로 된 필드에는 @Singular 어노테이션을 선언해주면 모든 원소를 한 번에 넘기지 않고 원소를 하나씩 추가할 수 있습니다. 로…","timeToRead":3,"fields":{"slug":"/lombok-useful-annotations/","tags":["Java","Lombok"]},"frontmatter":{"title":"[자바] 알아두면 유용한 Lombok 어노테이션","date":"Jun 24, 2017"}},{"excerpt":"Lombok 라이브러리에서 제공하는 어노테이션 중에서 자주 사용되는 어노테이션 위주로 살펴보도록 하겠습니다. 접근자/설정자 자동 생성 제일 먼저 살펴볼 어노테이션은 @Getter와 @Setter 입니다.\n아마 Lombok에서 가장 많이 사용되는 어노테이션일 텐데요.\n예를 들어, xxx라는 필드에 선언하면 자동으로 getXxx()(boolean 타입인 경우, isXxx())와 setXxx() 메소드를 생성해줍니다. 위와 같이 특정 필드에 어노테이션을 붙여주면, 다음과 같이 자동으로 생성된 접근자와 설정자 메소드를 사용할 수 있어서 …","timeToRead":4,"fields":{"slug":"/lombok-popular-annotations/","tags":["Java","Lombok"]},"frontmatter":{"title":"[자바] 자주 사용되는 Lombok 어노테이션","date":"Jun 18, 2017"}},{"excerpt":"자바에서 리스트를 순회하는 4가지 방법에 대해서 알아봅시다. 다음와 같이 5가지 과일 문자열을 담고 있는 리스트를 순회하면서 원소를 하나씩 출력해보겠습니다. 전통적인 For 루프 그냥 평범한 For 루프문을 사용하여 마치 배열을 순회하는 것과 동일한 방식으로 순회할 수 있습니다. 하지만 이 방법은 E get(int index) 메소드를 가지는 List 타입의 객체 대상으로만 사용할 수 있습니다.\n상위 타입인 Collection이나 Set과 같은 이종 타입의 객체 대상으로는 사용이 불가한 방법입니다. Iterator 위의 대안 중 …","timeToRead":1,"fields":{"slug":"/how-to-traverse-list-in-java/","tags":["Java","Java8","Collections"]},"frontmatter":{"title":"[자바] 리스트를 순회하는 방법","date":"Jun 11, 2017"}},{"excerpt":"리스트를 순회하면서 특정 원소를 삭제하고 싶을 때가 있습니다. 예를 들어, 다음과 같이 알파벳과 숫자가 섞여있는 리스트가 있다고 가정해봅시다. 저는 이 리스트에서 숫자인 원소들은 모두 삭제하고 싶습니다. ConcurrentModificationException 발생 가장 먼저 떠오르는 방법은 boolean remove(Object o) 메소드를 사용하는 것입니다.\nfor 루프를 돌면서 해당 원소가 숫자인지 체크 후에 숫자이면 remove 메소드를 호출합니다. 하지만 위 코드는 다음과 같은 ConcurrentModificationE…","timeToRead":3,"fields":{"slug":"/how-to-remove-from-list-in-java/","tags":["Java","Java8","Collections"]},"frontmatter":{"title":"[자바] 컬렉션에서 원소 삭제하기 (ConcurrentModificationException 피하면서)","date":"Jun 4, 2017"}},{"excerpt":"자바6에서 추가된 NavigableSet에 대해서 알아보도록 하겠습니다. NavigableSet은 SortedSet을 확장한 인터페이스입니다. 따라서 기존 SortedSet 대비 추가된 기능 위주로 살펴보는 게 좋을 것 같습니다. 객체 생성 자바에서 제공하는 NavigableSet 인터페이스의 대표적인 구현 클래스는 TreeSet 입니다. 따라서 TreeSet 객체를 생성 후에, NavigableSet 타입 변수에 할당하기면 하면 됩니다. 역순 접근: descendingIterator, descendingSet SortedSet을…","timeToRead":3,"fields":{"slug":"/java-navigable-set/","tags":["Java","Java6","Collections"]},"frontmatter":{"title":"[자바] NavigableSet 사용법","date":"May 28, 2017"}},{"excerpt":"SortedSet 사용법에 대해서 알아보록 하겠습니다. SortedSet은 원소들이 정렬되어 있는 Set입니다.\n따라서 SortedSet 하여금 객체 간 대소 비교가 가능한 상황을 만들어줘야 합니다.\n여기서 “객체 간 대소 비교가 가능한 상황”이란 다음 2가지로 생각해볼 수 있습니다. Comparable 인터페이스를 구현하고 있는 클래스의 객체를 원소로 사용 Comparator 인터페이스를 구현한 대소 판단을 위한 로직을 SortedSet 객체 생성 시에 넘김 본 포스팅에서는 Comparable 인터페이스를 구현하고 있는 Stri…","timeToRead":2,"fields":{"slug":"/java-sorted-set/","tags":["Java","Java6","Collections"]},"frontmatter":{"title":"[자바] SortedSet 사용법","date":"May 21, 2017"}},{"excerpt":"ES2015는 자바스크립트의 근간이 되는 함수에도 여러 가지 변화를 가져왔습니다.\n이번 포스팅에서는 그 중 기본 매개변수(Default Parameters)에 대해서 알아보도록 하겠습니다. 매개변수를 무시한 함수 호출 다음과 같이 사용자의 아이디의 배열을 매개변수를 받아서 사용자의 상세 정보를 돌려주는 함수가 있다고 가정해봅시다. 아래와 같이 정상적인 배열을 넘기면 함수는 예상하는 것처럼 잘 돌아갑니다. 하지만 다음과 같이 인자 없이도 위 함수를 호출하면 어떻게 될까요? 문법이 엄격한 다른 언어라면 분명히 함수 호출이 불가능했을텐…","timeToRead":3,"fields":{"slug":"/js-es2015-default-parameters/","tags":["JavaScript","자바스크립트","ES6"]},"frontmatter":{"title":"[ES2015] 기본 매개변수 (Default Parameters)","date":"Mar 5, 2017"}},{"excerpt":"이번 포스팅에서는 ES2015에서 let과 함께 자바스크립트에 추가된 const 사용법에 대해서 알아보도록 하겠습니다. let 사용법에 대해서는 아래 포스팅들을 참고바라겠습니다. let으로 변수 선언하기 1 let으로 변수 선언하기 2 매직 넘버 아래 코드에서 findUser 함수는 안자로 받은 id 값이 100보다 작은지 여부에 따라서 로직이 분기되어 있습니다.\n그리고 id 값이 100보다 큰 경우, 가짜 사용자 객체를 생성 후, name 속성값의 길이가 50보다 큰지 여부에 따라 다시 한 번 로직이 분기되고 있습니다. 예제와 …","timeToRead":3,"fields":{"slug":"/js-es2015-const/","tags":["JavaScript","자바스크립트","ES6"]},"frontmatter":{"title":"[ES2015] const로 상수 선언하기","date":"Feb 26, 2017"}},{"excerpt":"이전 포스팅에서 ES2015의 let 키워드에서 대해서 알아보았습니다.\n이번 포스팅에서는 for 문에서 let이 어떻게 사용될 수 있는지 살펴보겠습니다. 예제 코드 다음 코드는 사용자 아이디를 받아 가짜 사용자를 담든 후 콜백 함수를 호출하는 비동기 함수입니다.\n마치 DB 연동처럼 setTimeout 함수를 이용하여 1초의 지연을 주었습니다. setTimeout() 함수에 대한 좀 더 자세한 내용은 관련 포스팅을 참고바랍니다. 그리고 아래 코드는 사용자 아이디의 배열을 받아 여러 사용자의 정보를 출력해주는 함수입니다.\nfindUs…","timeToRead":3,"fields":{"slug":"/js-es2015-let-in-for/","tags":["JavaScript","ES6","setTimeout"]},"frontmatter":{"title":"[ES2015] let으로 변수 선언하기 2","date":"Feb 19, 2017"}},{"excerpt":"본 포스팅에서는 ES2015를 통해 자바스크립트에 추가된 let 키워드에 대해서 알아보도록 하겠습니다. 문제의 코드 먼저 다음 예제 코드를 살펴보시죠. findUser 함수는 사용자 아이디가 0보다 크면 성공 메시지를 출력하고 아니면 실패 메시지를 출력합니다.\n그리고 if-else 문을 빠져나온 후, 실패 메시지를 다시 한 번 출력하고 있습니다. 자, 그럼 다음과 같이 1을 인자로 이 함수를 호출하면 마지막에 출력하는 실패 메시지는 뭐라고 출력이 될까요? 다음과 같이 오류가 발생하지 않고 undefined가 출력이 됩니다! 첫 개…","timeToRead":3,"fields":{"slug":"/js-es2015-let/","tags":["JavaScript","자바스크립트","ES6"]},"frontmatter":{"title":"[ES2015] let으로 변수 선언하기 1","date":"Feb 12, 2017"}},{"excerpt":"많은 자바스크립트 강좌에서 가급적 var 대신에 let이나 const 키워드를 사용하여 변수를 선언하라고 가이드하고 있는데요. 본 포스팅에서는 var의 어떤 문제점 때문에 그런건지 알아보도록 하겠습니다. 아리송한 코드 먼저 다음 코드를 살펴보도록 하겠습니다.\n무엇이 출력이 될지 예상이 되시나요? 첫번째 console.log(n)에서 오류가 발생할 것 같기도 하고, 1과 2가 출력될 것 같기도 한데요.\n의외로 정답은 다음과 같습니다. 왜 이런 예상치못한 결과가 얻어지는 걸까요?\n원인은 var 키워드를 사용할 경우, 변수 Hoisti…","timeToRead":4,"fields":{"slug":"/js-var-issues/","tags":["JavaScript","Hoisting","setTimeout"]},"frontmatter":{"title":"[자바스크립트] var를 사용할 때 발생하는 문제들","date":"Feb 5, 2017"}},{"excerpt":"멋진 테스트 코드를 작성하도록 돕는 AssertJ 라이브러리에 대해서 알아봅시다. AssertJ의 장점 메소드 체이닝을 지원하기 때문에 좀 더 깔끔하고 읽기 쉬운 테스트 코드를 작성할 수 있습니다. 개발자가 테스트를 하면서 필요하다고 상상할 수 있는 거의 모든 메소드를 제공합니다. 라이브러리 의존성 설정 Java8 이상 기반 프로젝트는 3.x 버전을, Java7 이하 기반 프로젝트는 2.x 버전을 사용하셔야 합니다. Gradle Java8 Java7 Maven AssertJ 메소드 임포트 다음과 같이 정적 임포트를 하면 Asser…","timeToRead":3,"fields":{"slug":"/assertj/","tags":["Java","Test","AssertJ"]},"frontmatter":{"title":"AssertJ 소개","date":"Jan 22, 2017"}},{"excerpt":"Optional을 좀 더 Java8 API 설계자의 의도에 맞게 쓰는 방법에 대해서 알아봅시다. 이전 포스팅를 통해서 Optional에 대해서 소개드렸습니다.\n또한 Optional을 Optional답지 않게 사용할 경우, 어떤 부작용이 발생하는지도 살펴보았는데요.\n이 번 포스팅에서는 어떻게 코드를 작성해야 Optional을 Optional답게 쓸 수 있는지 알아보도록 하겠습니다. Stream처럼 사용하기 Optional을 제대로 사용하려면, Optional을 최대 1개의 원소를 가지고 있는 특별한 Stream이라고 생각하시면 좋습…","timeToRead":6,"fields":{"slug":"/java8-optional-effective/","tags":["Java","Java8","FP","Optional","Stream"]},"frontmatter":{"title":"자바8 Optional 3부: Optional을 Optional답게","date":"Jan 15, 2017"}},{"excerpt":"Java8의 Optional API를 통해 어떻게 null 처리를 할 수 있는지 알아봅시다. 이전 포스팅를 통해 Java8 이 전에는 얼마나 null 처리가 고통스러웠는지 살펴보았습니다.\n그리고 문제의 본질이 null 참조를 통해 “값의 부재”를 표현하는 자바 언어의 초기 설계에 기인한다라는 것도 말미에 언급하였습니다. null 관련 문제 돌아보기 이 전 포스팅의 예제 코드를 통해 살펴본 null과 관련된 문제들을 크게 2가지로 요약됩니다. 런타임에 NPE(NullPointerException)라는 예외를 발생시킬 수 있습니다. …","timeToRead":6,"fields":{"slug":"/java8-optional-after/","tags":["Java","Java8","FP","Optional","Stream"]},"frontmatter":{"title":"자바8 Optional 2부: null을 대하는 새로운 방법","date":"Jan 8, 2017"}},{"excerpt":"Java8이 나오기 이 전에는 얼마나 힘들게 null 처리를 했었는지 살펴봅시다. null 창시자가 스스로 인정한 null 탄생의 실수 우선 null이라는 개념은 언제 누구에 의해 만들어졌을까요?\nnull 참조는 1965년에 Tony Hoare라는 영국의 컴퓨터 과학자에 의해서 처음으로 고안되었습니다.\n당시 그는 “존재하지 않는 값”을 표현할 수 있는 가장 편리한 방법이 null 참조라고 생각했다고 합니다.\n하지만 나중에 그는 그 당시 자신의 생각이 “10억불 짜리 큰 실수”였고, null 참조를 만든 것을 후회한다고 토로하였습니…","timeToRead":4,"fields":{"slug":"/java8-optional-before/","tags":["Java","Java8","FP","Optional","Stream"]},"frontmatter":{"title":"자바8 Optional 1부: 빠져나올 수 없는 null 처리의 늪","date":"Jan 1, 2017"}},{"excerpt":"본 포스팅는 오라클 자바 튜토리얼의 What Is a Socket?를 번역하였습니다. 소켓 통신 일반적으로 서버는 특정 포트가 바인딩된 소켓를 가지고 특정 컴퓨터 위에서 돌아갑니다.\n해당 서버는 클라이언트의 연결 요청을 소켓을 통해 리스닝하면서 그냥 기다릴 뿐이죠. 클라이언트는 서버가 떠 있는 머신의 호스트네임과 서버가 리스닝하고 있는 포트 번호를 알고 있습니다.\n따라서 클라이언트는 이 호스트 네임과 포트를 통해서 서버와 연결을 시도하게 됩니다.\n또한 클라이언트는 서버 상대로 자신을 식별시켜주기 위해서 연결동안 사용될 로컬 포트에…","timeToRead":2,"fields":{"slug":"/what-is-a-socket/","tags":["Java","Socket","network"]},"frontmatter":{"title":"소켓이란 무엇인가?","date":"Dec 18, 2016"}},{"excerpt":"본 포스팅는 Dead Code Rising의 Java 8: No more loops를 번역하였습니다. 이전 포스팅통해 자바의 판도를 바꿀 자바8의 새로운 함수형 기능들에 대해서 살펴보았습니다.\n자바 개발자들에게는 새로운 세상이 열렸으며, 이제 우리가 그 새로운 세상에 적응해야 할 때 입니다. 이번 포스팅에서는 전통적인 반복문에 대한 몇가지 대안들에 대해서 알아보겠습니다.\n자바8의 새로운 함수형 기능의 훌륭한 점은 어떻게 실행하는지 대신에 무엇이 실행되야 할지를 명시할 수 있다는 것입니다.\n이런 측면에서 반복문이 탈락되게 됩니다.\n…","timeToRead":4,"fields":{"slug":"/java8-no-more-loops/","tags":["Java","Java8","Stream","FP","translation"]},"frontmatter":{"title":"자바8: 반복문에서 벗어나기","date":"Dec 4, 2016"}},{"excerpt":"본 포스팅는 오라클 웹사이트에 Ted Neward가 기고한 Java 8: Lambdas, Part 1를 번역하였습니다. 메소드 참조 (Method Reference) 지금까지 다룬 모든 람다는 사용 시점에 람다를 정의하는 익명 리터럴이였습니다.\n이는 1회성 행위를 위해서는 훌륭하지만, 이 행위가 여러 곳에서 사용되어야 하는 상황에서는 별로입니다.\n예를 들어 다음 Person 클래스를 생각해봅시다. (지금은 부적절한 캡슐화에 대해서는 무시하시죠.) Person 객체를 SortedSet에 저정하거나 어떤 형태로든 리스트 내에서 정렬될…","timeToRead":6,"fields":{"slug":"/java8-lambdas-part1-3/","tags":["Java","Java8","Lambda","FP","translation"]},"frontmatter":{"title":"자바8: 람다 1부 - 메소드 참조, 가상 확장 메소드, 결론","date":"Nov 27, 2016"}},{"excerpt":"본 포스팅는 오라클 웹사이트에 Ted Neward가 기고한 Java 8: Lambdas, Part 1를 번역하였습니다. 자바8은 그런한 코드 블록을 쉽게 작성하게 하기위해 설계된 몇몇 새로운 언어 기능들을 도입합니다.\n그 중에서 가장 중요한 기능은 구어체로 클로저또는 익명 함수라고 일켣는 람다식입니다.\n(클로저라고 불리는 이유는 잠시 후 논의할 것입니다.)\n이것들에 하나 씩 다뤄봅시다. 람다식 람다식은 기본적으로 나중에 실행하는 메서드의 구현을 간결하게 기술하는 방법에 불과합니다.\n예를 들어 그러므로 일람 2와 같이 Runnabl…","timeToRead":8,"fields":{"slug":"/java8-lambdas-part1-2/","tags":["Java","Java8","Lambda","FP","translation"]},"frontmatter":{"title":"자바8: 람다 1부 - 람다식, 타입 추론, 어휘 범위","date":"Nov 20, 2016"}},{"excerpt":"본 포스팅는 오라클 웹사이트에 Ted Neward가 기고한 Java 8: Lambdas, Part 1를 번역하였습니다. 자바8의 람다 표현식 알아보기 자신이 선택한 프로그래밍 언어나 플랫폼의 새로운 출시 소식보다 소프트웨어 개발자를 흥분시키는 일이 있을까?\n자바 개발자들도 예외는 아니다. 사실, 오히려 자바 개발지들 더욱 새로운 출시에 대해 간절했을지도 모릅니다.\n왜냐하면 자바를 만들었던 Sun이 그랬던 것 처럼 자바도 쇠퇴의 길을 걷지 않을까 생각했던 게 그리 오래 전 일이 아니기 때문이죠. 죽을 고비를 겪고 나면 다시 주어진 …","timeToRead":4,"fields":{"slug":"/java8-lambdas-part1-1/","tags":["Java","Java8","Lambda","FP","translation"]},"frontmatter":{"title":"자바8: 람다 1부 - 서문, 배경","date":"Nov 13, 2016"}},{"excerpt":"배열을 사용하는 이유? 3개의 과일 이름을 변수에 저장하려면 다음과 같이 3개의 변수를 사용할 것이다. 하지만 만약에 저장한 과일 이름이 300개라면? 위와 같이 일일이 하나 하나의 변수에 저장하기 힘들 것이다.\n배열을 이용하면 하나의 변수에 여러 가지 값을 저장할 수 있고, 색인(Index)을 통해 이 값에 접근할 수 있다. 새로운 배열 생성 하기 기본적으로 대괄호 기호인 배열 리터럴(literal)을 이용해서 배열을 생성한다.\n배열 리터럴 내에서는 공백이나 줄바꿈은 중요하지 않으므로 각 엘리먼트의 길이기 길 경우 가독성을 위해…","timeToRead":3,"fields":{"slug":"/js-array-basic/","tags":["JavaScript","array"]},"frontmatter":{"title":"자바스크립트 배열 기본 사용법","date":"Nov 6, 2016"}},{"excerpt":"본 포스팅는 오라클 자바 튜토리얼의 Synchronization와 Thread Interference, Memory Consistency Errors, Synchronized Methods, Intrinsic Locks and Synchronization, Atomic Access를 번역하였습니다. 쓰레드는 주로 필드들이 가리키고 있는 객체 참조를 공유함으로써 서로 통신합니다.\n이는 굉장히 효율적 통신 방법이지만, 쓰레드 간섭(thread interference)과 메모리 일관성 오류(memory consistency errors…","timeToRead":10,"fields":{"slug":"/synchronization/","tags":["Java","Concurrency","Synchronization","Thread Interference","Memory Consistency Errors","Intrinsic Locks and Synchronization","Atomic Access"]},"frontmatter":{"title":"동기화 (Synchronization)","date":"Oct 2, 2016"}},{"excerpt":"본 포스팅는 오라클 자바 튜토리얼의 Pausing Execution with Sleep와 Interrupts, Joins, The SimpleThreads Example를 번역하였습니다. Sleep으로 실행 중지하기 Thread.sleep() 메소드는 현재 쓰레드가 일정 기간동안 실행을 중지시킵니다.\n이것은 해당 애플리케이션 또는 시스템 상에서 돌고 있는 다른 애플리케이션 내의 다른 쓰레드들에게 프로세서를 이용 가능하도록 만들기 위한 효율적인 방법입니다.\nsleep() 메소드는 다음 예제와 같이 속도 조절을 위해서도 사용될 수 있…","timeToRead":5,"fields":{"slug":"/sleep-interrupt-join/","tags":["Java","Concurrency","Thread"]},"frontmatter":{"title":"자바 쓰레드 Sleep & Intterupt & Join","date":"Sep 25, 2016"}},{"excerpt":"본 포스팅는 오라클 자바 튜토리얼의 Thread Objects와 Defining and Starting a Thread를 번역하였습니다. 쓰레드 객체 모든 쓰레드는 Thread 클래스의 인스턴스와 관계를 갖습니다.\n동시 애플리케이션(concurrent application)을 개발하기 위해서 쓰레드 객체를 사용하는데는 두 가지 기본 전략이 있습니다. 쓰레드의 생성과 관리를 직접 제어하기 위해서, 애플리케이션이 비동기 작업이 필요할 때 마다 단순히 Thread 클래스의 인스턴스를 만들 수 있습니다. 응용 프로그램으로 부터 쓰레드 관…","timeToRead":2,"fields":{"slug":"/threads/","tags":["Java","Concurrency","Process","Thread"]},"frontmatter":{"title":"자바 쓰레드","date":"Sep 18, 2016"}},{"excerpt":"본 포스팅는 오라클 자바 튜토리얼의 Processes and Threads를 번역하였습니다. 동시 프로그래밍(Concurrent Programming)에는 프로세스와 쓰레드, 이 두가지 기본 실행단위가 있습니다.\n자바 프로그래밍 언어에서는 동시 프로그래밍은 주로 쓰레드와 관련이 있지만 프로세스 또한 중요합니다. 컴퓨터는 보통 여러 개의 활성화된 프로세스와 쓰레드를 가지고 있습니다.\n이것은 심지어 동시에 하나의 쓰레드 밖에 실제로 처리할 수 없는 싱글 코어를 가진 시스템에서도 마찬가지입니다.\n싱글 코어의 처리 시간은 운영체제의 시분…","timeToRead":1,"fields":{"slug":"/procthread/","tags":["Java","Concurrency","Process","Thread"]},"frontmatter":{"title":"프로세스와 쓰레드","date":"Sep 11, 2016"}},{"excerpt":"자바에서 쓰레드를 작성하는 2가지 방법에 대해서 알아보겠습니다. Thread 클래스 확장하기 첫번째 방법으로 java.lang.Thread 클래스를 확장할 수 있습니다.\nThread 클래스에는 상당히 많은 메소드가 있는데요.\n그 중에서 run() 이라는 메소드만 오버라이드해주면 됩니다. 쓰레드마다 수행 시간을 다르게 하여 현실과 비슷한 상황을 연출하고 싶었습니다.\n그래서 Thread.sleep() 메서드를 이용해여 1초 이상 6초 미만의 랜덤 딜레이를 주었습니다.\n그리고 각 쓰레드의 시작과 종료 시점에 Thread.currentT…","timeToRead":3,"fields":{"slug":"/java-thread-runnable/","tags":["Java","Multithreading","멀티쓰레드","Thread","쓰레드"]},"frontmatter":{"title":"자바: Thread 클래스와 Runnable 인터페이스","date":"Sep 4, 2016"}}]}},"pageContext":{}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}