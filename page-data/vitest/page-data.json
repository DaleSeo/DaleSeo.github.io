{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/vitest/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/jest-class-mocks/"},"frontmatter":{"title":"Jest를 이용한 클래스 모킹과 테스팅"}},"node":{"html":"<p>Vite가 <a href=\"/?tag=Webpack\">Webpack</a>을 대체하는 차세대 번들러(bundler)로 부상하면서, 더불어 자매 제품인 Vitest도 <a href=\"/?tag=Jest\">Jest</a>를 위협하면서 자바스크립트 생태계에서 입지를 넓혀가고 있습니다.\n이번 포스팅에서는 차세대 테스팅 프레임워크로 각광받고 있는 Vitest에 대해서 살펴보는 시간을 가져보겠습니다.</p>\n<h2 id=\"vitest란\" style=\"position:relative;\"><a href=\"#vitest%EB%9E%80\" aria-label=\"vitest란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vitest란?</h2>\n<p><a href=\"https://vitest.dev/\">Vitest</a>는 Vite를 기반으로 작동하는 테스팅 프레임워크입니다.\n예전에 나왔던 Jest처럼 테스트 실행뿐만 아니라 모킹(mocking)과 스냅샷(snapshot)을 지원하며, Jest와 호환되는 API를 제공하고 있어서 Jest를 써보신 분이라면 어렵지 않게 Vitest를 쓸 수 있습니다.</p>\n<p>Jest 대비 Vitest의 강점은 바로 간소화된 설정과 그로 인한 뛰어난 개발자 경험 (Developer Experience, DX)입니다.\nJest를 사용할 때는 프로젝트의 빌드(build) 설정과 테스트 설정을 따로 해줘야하는 복잡함과 불편함이 있었습니다.\n예를 들어, 프로젝트의 빌드 과정에서 애플리케이션 코드가 <a href=\"/?tag=Babel\">Babel</a>을 통해 트랜스파일(transpile)이 되다면, 테스트 코드를 상대로도 동일한 변환이 일어나도록 Jest에 별도로 설정을 해줘야 했습니다.</p>\n<p>하지만 Vitest는 테스트 코드만을 위한 별도의 설정 없이, Vite를 통해 프로젝트의 기본 빌드 설정을 그대로 이용할 수 있습니다.\nVitest만 단독으로 쓸 수도 있지만, Vitest 진가는 Vite 프로젝트에서 사용했을 때 느낄 수 있습니다.</p>\n<h2 id=\"vitest-설치\" style=\"position:relative;\"><a href=\"#vitest-%EC%84%A4%EC%B9%98\" aria-label=\"vitest 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vitest 설치</h2>\n<p>Vitest는 npm 패키지 저장소에 <code>vitest</code>라는 이름으로 올라와 있습니다.\nVitest는 애플리케이션 실행에 필요한 의존성이 아니므로 개발 의존성으로 설치해야 합니다.</p>\n<p><a href=\"/?tag=Node.js\">Node.js</a>를 사용하는 프로젝트에서는 터미널에서 <code>npm</code> 명령어를 사용하여 Vitest를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> vitest</code></pre></div>\n<p>차세대 자바스크립트 런타임인 <a href=\"/?tag=Bun\">Bun</a>을 사용하는 프로젝트에서는 <code>bun</code> 명령어를 사용해서 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> vitest</code></pre></div>\n<p>이제 <code>npx</code>로 <code>vitest</code> 명령어를 실행할 수 있는데요.\n터미널에서 다음과 같이 버전이 확인되면 정상적으로 설치가 된 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx vitest <span class=\"token parameter variable\">--version</span>\nvitest/1.0.4 darwin-arm64 node-v18.17.0</code></pre></div>\n<blockquote>\n<p>npx나 npm 명령어에 대한 자세한 설명은 <a href=\"/js-npm-cli/\">관련 포스팅</a>를 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"npm-스크립트-추가\" style=\"position:relative;\"><a href=\"#npm-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B6%94%EA%B0%80\" aria-label=\"npm 스크립트 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm 스크립트 추가</h2>\n<p>프로젝트의 <code>package.json</code> 파일을 열고 Vitest를 실행해주는 세개의 스크립트를 추가해줍니다.\n첫 번째 <code>test</code> 스크립트는 Vitest를 감시(watch) 모드로 실행해주고, 두 번째 <code>test:run</code> 스크립트는 Vitest를 일회성으로 실행해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vitest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test:run\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vitest run\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 자주 사용하게 되는 테스팅 관련 스크립트를 <code>package.json</code> 파일에 등록해주면,\n프로젝트에 참여하고 있는 모든 개발자들이 Vitest 명령어 사용법을 정확히 몰라도 쉽게 Vitest를 실행할 수 있습니다.</p>\n<h2 id=\"테스트-코드-실행\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%8B%A4%ED%96%89\" aria-label=\"테스트 코드 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 코드 실행</h2>\n<p>그럼 한 번 간단한 테스트 코드를 작성하고 Vitest로 실행해볼까요?</p>\n<p><code>first.test.js</code>라는 파일을 생성하고, 그 안에 다음과 같이 입력합니다.</p>\n<div class=\"gatsby-code-title\">first.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expect<span class=\"token punctuation\">,</span> test <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vitest\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 is 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그 다음 터미널에 <code>npm run test</code>나 <code>bun run test</code> 실행해보면 초록색 글씨로 테스트가 통과했다고 나올 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token operator\">></span> vitest-temp@1.0.0 <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">></span> vitest\n\n\n DEV  v1.0.4 /Users/daleseo/Temp/vitest-temp\n\n ✓ first.test.js <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   ✓ <span class=\"token number\">1</span> is <span class=\"token number\">1</span>\n\n Test Files  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      Tests  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   Start at  <span class=\"token number\">11</span>:17:24\n   Duration  122ms <span class=\"token punctuation\">(</span>transform 9ms, setup 0ms, collect 5ms, tests 1ms, environment 0ms, prepare 34ms<span class=\"token punctuation\">)</span>\n\n\n PASS  Waiting <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes<span class=\"token punctuation\">..</span>.\n       press h to show help, press q to quit</code></pre></div>\n<p>Vitest는 Jest와 달리 Vite처럼 기본적으로 감시(watch) 모드로 실행이 됩니다.\n따라서 테스트 코드가 변경될 때 마다 테스트가 재실행됩니다.</p>\n<p>예를 들어, <code>toBe()</code> 함수에 앞에 <code>not.</code>을 붙여볼까요?</p>\n<div class=\"gatsby-code-title\">first.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expect<span class=\"token punctuation\">,</span> test <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vitest\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 is 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 즉시 테스트가 재실행되어 결과로 실패가 나오는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> RERUN  first.test.js x3\n\n ❯ first.test.js <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   × <span class=\"token number\">1</span> is <span class=\"token number\">1</span>\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Tests <span class=\"token number\">1</span> ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  first.test.js <span class=\"token operator\">></span> <span class=\"token number\">1</span> is <span class=\"token number\">1</span>\nAssertionError: expected <span class=\"token number\">1</span> not to be <span class=\"token number\">1</span> // Object.is equality\n ❯ first.test.js:4:17\n      <span class=\"token number\">2</span><span class=\"token operator\">|</span>\n      <span class=\"token number\">3</span><span class=\"token operator\">|</span> test<span class=\"token punctuation\">(</span><span class=\"token string\">\"1 is 1\"</span>, <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token number\">4</span><span class=\"token operator\">|</span>   expect<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.not.toBe<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token operator\">|</span>                 ^\n      <span class=\"token number\">5</span><span class=\"token operator\">|</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token number\">6</span><span class=\"token operator\">|</span>\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>/1<span class=\"token punctuation\">]</span>⎯\n\n Test Files  <span class=\"token number\">1</span> failed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      Tests  <span class=\"token number\">1</span> failed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   Start at  <span class=\"token number\">12</span>:05:44\n   Duration  10ms\n\n\n FAIL  Tests failed. Watching <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes<span class=\"token punctuation\">..</span>.\n       press h to show help, press q to quit</code></pre></div>\n<p>테스트 실행을 중단하고 싶다면 <code>Ctrl + C</code>를 눌러서 빠져나올 수 있습니다.</p>\n<p>테스트를 일회성으로 실행하고 싶다면 <code>npm run test:run</code>을 실행하면 됩니다.\n이 테스트 실행 방법은 주로 CI 환경에서 테스트를 실행할 때 활용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run test:run\n\n<span class=\"token operator\">></span> vitest-temp@1.0.0 test:run\n<span class=\"token operator\">></span> vitest run\n\n\n RUN  v1.0.4 /Users/daleseo/Temp/vitest-temp\n\n ✓ first.test.js <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   ✓ <span class=\"token number\">1</span> is <span class=\"token number\">1</span>\n\n Test Files  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      Tests  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   Start at  <span class=\"token number\">12</span>:08:46\n   Duration  154ms <span class=\"token punctuation\">(</span>transform 12ms, setup 0ms, collect 5ms, tests 1ms, environment 0ms, prepare 47ms<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"설정-파일\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC\" aria-label=\"설정 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정 파일</h2>\n<p>Vitest의 설정은 명령어를 실행할 때 옵션으로 넘길 수도 있지만, 설정 파일을 이용하면 좀 더 편리하게 설정할 수 있습니다.</p>\n<p>Vite 프로젝트에서는 기존 <code>vite.config.ts</code> 파일에 <code>test</code> 항목만 추가하면 됩니다.</p>\n<div class=\"gatsby-code-title\">vite.config.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/// &lt;reference types=\"vitest\" /></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vitest만 단독으로 사용하는 경우에는 <code>vitest.config.ts</code> 파일에 설정을 하면 됩니다.</p>\n<div class=\"gatsby-code-title\">vitest.config.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vitest/config\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vite가 지원하는 다양한 설정에 대해서는 추후 별도 포스팅을 통해서 정리해드리도록 하겠습니다.\n본 포스팅에는 자주 사용되는 두 가지 설정만 살펴볼게요.</p>\n<h2 id=\"필터링-설정\" style=\"position:relative;\"><a href=\"#%ED%95%84%ED%84%B0%EB%A7%81-%EC%84%A4%EC%A0%95\" aria-label=\"필터링 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필터링 설정</h2>\n<p>Vite는 프로젝트 내에 모든 테스트 파일을 찾아서 테스트를 실행해주는데요.\n별다른 설정을 하지 않으면 기본적으로 파일명에 <code>.test.</code>나 <code>.spec.</code>이 포함되어 있는 모든 자바스크립트와 타입스크립트 파일 및 JSX 파일까지 테스트 파일로 인식합니다.</p>\n<p>만약에 특정 테스트 파일만 실행하고 싶은 경우에는 <code>npm test &#x3C;파일명 이나 경로></code>를 입력하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token builtin class-name\">test</span> first\n\n<span class=\"token operator\">></span> vitest-temp@1.0.0 <span class=\"token builtin class-name\">test</span>\n<span class=\"token operator\">></span> vitest first\n\n\n DEV  v1.0.4 /Users/daleseo/Temp/vitest-temp\n\n ✓ first.test.js <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   ✓ <span class=\"token number\">1</span> is <span class=\"token number\">1</span>\n\n Test Files  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      Tests  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   Start at  <span class=\"token number\">12</span>:10:23\n   Duration  143ms <span class=\"token punctuation\">(</span>transform 16ms, setup 0ms, collect 5ms, tests 1ms, environment 0ms, prepare 50ms<span class=\"token punctuation\">)</span>\n\n\n PASS  Waiting <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes<span class=\"token punctuation\">..</span>.\n       press h to show help, press q to quit</code></pre></div>\n<p><code>include</code> 설정을 통해서 Vitest가 테스트 파일을 찾을 때 포함시킬 경로를 명시할 수 있습니다.</p>\n<p>예를 들어, 어떤 프로젝트에서 테스트 파일을 <code>__test__</code> 디렉토리에 모아 놓고, 타입스크립트만 사용하며, 파일명에 <code>.spec.</code>이 포함되어야 한다면 다음과 같이, <a href=\"/glob-patterns/\">Glob 패턴</a>을 사용하여 설정해줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    include<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"__test__/*.spec.ts?(x)\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"전역-함수-설정\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%ED%95%A8%EC%88%98-%EC%84%A4%EC%A0%95\" aria-label=\"전역 함수 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 함수 설정</h2>\n<p>Jest를 쓰시다가 Vitest로 넘어와서 가장 불편해하시는 부분이 <code>expect</code>, <code>it</code>, <code>describe</code>, <code>test</code>와 같은 함수들을 <code>vitest</code> 패키지로 부터 불러와야 한다는 것인데요.</p>\n<p>이럴 때는 <code>globals</code> 옵션을 <code>trie</code>로 설정해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  test<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    globals<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 테스트 코드에서 <code>import</code> 문을 제거해보세요.\n테스트가 여전히 통과하는 것을 보실 수 있으실 것입니다.</p>\n<div class=\"gatsby-code-title\">first.test.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// import { expect, test } from \"vitest\";</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 is 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Vitest로 간단한 테스트를 실행해보고, Vitest를 어떻게 설정하는지 살펴보았습니다.\n본 포스팅이 Vitest를 처음 접하시는 분들에게 도움이 되었으면 좋겠습니다.</p>\n<blockquote>\n<p>Vitest에 연관된 포스팅은 <a href=\"/?tag=Vitest\">Vitest 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":6,"fields":{"slug":"/vitest/","tags":["JavaScript","library","Vitest","testing"]},"frontmatter":{"title":"Vitest 처음 시작하기","date":"Dec 20, 2023"}},"next":{"fields":{"slug":"/js-sqlite/"},"frontmatter":{"title":"자바스크립트에서 SQLite 데이터베이스 사용하기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}