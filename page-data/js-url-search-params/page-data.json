{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-url-search-params/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-location/"},"frontmatter":{"title":"자바스크립트로 웹 페이지 이동하는 방법"}},"node":{"html":"<p><a href=\"/js-url-api/\">지난 포스팅</a>에서는 URL API의 <code>URL</code>을 사용하여 좀 더 안전하게 웹 주소 다루는 방법에 대해서 살펴보았는데요.</p>\n<p>이번 포스팅에서는 URL API에서 제공하는 또 다른 유용한 기능인 <code>URLSearchParams</code>를 이용하여 웹 주소의 구성 요소 중에서도 가장 다루기 어려운 쿼리 문자열(Query String) 다루는 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"urlsearchparams-객체의-필요성\" style=\"position:relative;\"><a href=\"#urlsearchparams-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"urlsearchparams 객체의 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSearchParams 객체의 필요성</h2>\n<p>자바스크립트의 <code>URLSearchParams</code>에 대해서 본격적으로 배우기 전에 먼저 URL의 쿼리 문자열에 대해서 짚고 넘어가는 게 좋을 것 같아요.</p>\n<p>소위 검색 파라미터(search parameters)라고도 불리는 쿼리 문자열은 URL에서 경로명(pathname) 바로 다음에 나오는 <code>?</code> 기호로 시작하는 문자열인데요.\n비단 검색 뿐만 아니라 필터링(filter), 페이지네이션(pagination), 정렬(sort) 등 다양한 용도로 사용됩니다.\n보통 웹 서버에서는 URL의 쿼리 문자열을 분석하여 요청한 리소스를 응답하기 전에 다양한 추가 작업을 수행하게 됩니다.</p>\n<p>쿼리 문자열에는 <code>?key1=value1&#x26;key2=value2&#x26;...</code> 형태로 여러 개의 키와 값의 쌍을 <code>&#x26;</code> 기호로 구분하여 매개변수를 명시할 수 있는데요.\n매개변수의 개수가 많아지면 사람의 눈으로 읽기가 쉽지 않고 매개변수에 다국어나 특수 문자가 포함되어 있으면 인코딩도 신경을 써줘야 하죠.</p>\n<p>게다가 URL 명세에 따르면 쿼리 문자열은 <code>?key=value1&#x26;key=value2</code>와 같이 동일한 키에 여러 개의 값을 할당하는 것도 허용하는데요.\n이 부분도 처리할 때 경계 조건을 잘 고려하지 않으면 버그로 이어지기 쉽습니다.</p>\n<p>예전에는 자바스크립트에서 쿼리 문자열을 마치 일반 문자열을 다루다가 실수하는 경우가 많어요.\n그래서 버그가 발생하지 않으려면 적지 않은 노력과 주의가 필요했었죠.\n하지만 요즘에는 URL API에서 제공하는 <code>URLSearchParams</code>를 사용하여 좀 더 안전하게 쿼리 문자열을 다룰 수 있게 되었습니다.</p>\n<h2 id=\"urlsearchparams-객체의-생성\" style=\"position:relative;\"><a href=\"#urlsearchparams-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-label=\"urlsearchparams 객체의 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSearchParams 객체의 생성</h2>\n<p><code>URLSearchParams</code> 전역 객체의 생성자는 여러 형태의 값을 인자로 받을 수 있습니다.</p>\n<p>우선 파라미터의 키와 값의 쌍으로 이루어진 2차원 배열을 넘길 수 있고요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"draft\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또한 쿼리 문자열을 있는 그대로 문자열의 형태로 넘길 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?mode=dark&amp;page=1&amp;draft=false&amp;sort=email&amp;sort=date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>참고로 이 때는 맨 앞에 <code>?</code> 기호는 생략이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode=dark&amp;page=1&amp;draft=false&amp;sort=email&amp;sort=date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>뿐만 아니라 인자로 아무것도 넘기지 않고 우선 빈 객체를 생성한 후 아래에서 배울 메서드를 통해서 나중에 파라미터를 추가할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"urlsearchparams-객체의-속성\" style=\"position:relative;\"><a href=\"#urlsearchparams-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%86%8D%EC%84%B1\" aria-label=\"urlsearchparams 객체의 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSearchParams 객체의 속성</h2>\n<p><code>URLSearchParams</code> 객체에는 <code>size</code> 속성이 있는데요.\n이 속성을 통해 쿼리 문자열에 얼마나 많은 매개변수가 들어있는지 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode=dark&amp;page=1&amp;draft=false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre></div>\n<p>그런데 여기서 한 가지 주의할 부분은 동일한 키에 여러 개의 값이 주어진 경우, 값의 개수를 기준으로 <code>size</code> 속성이 계산된다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort=date&amp;sort=email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>따라서 유일한 키의 개수가 필요하시다면 <code>Set</code>을 이용해서 직접 구해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<blockquote>\n<p>자바스크립트에서 고유한 값들의 집합을 다루는 자료구조인 세트(Set)에 대해서는 <a href=\"/js-set/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"urlsearchparams-객체의-메서드\" style=\"position:relative;\"><a href=\"#urlsearchparams-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"urlsearchparams 객체의 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URLSearchParams 객체의 메서드</h2>\n<p><code>URLSearchParams</code> 객체를 사용하다 보면 결국 문자열로 다시 변환해야 할 일이 자주 생기는데요.\n이 때는 <code>toString()</code> 메서드를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"draft\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'mode=dark&amp;page=1&amp;draft=false'</span></code></pre></div>\n<p>위에 보시다시피 <code>toString()</code> 메서드는 쿼리 문자열 맨 앞에 붙는 <code>?</code> 기호는 생략하는데요.\n따라서 URL 문자열을 직접 만든는 경우에는 주의해야합니다.\n물론 <a href=\"/js-url-api/\">지난 포스팅</a>에서 배운 <code>URL</code> 객체를 사용하신다면 이런 부분에 대해서 걱정할 필요가 없겠죠?</p>\n<p><code>URLSearchParams</code> 객체는 쿼리 문자열의 매개변수를 읽거나 쓸 수 있도록 다양한 메서드를 제공하고 있습니다.</p>\n<p>우선 <code>append()</code> 메서드를 이용하여 파라미터를 하나씩 추가할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"draft\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'mode=dark&amp;page=1&amp;draft=false&amp;sort=email&amp;sort=date'</span></code></pre></div>\n<p>얼핏 보면 <code>append()</code>와 비슷해보이는 <code>set()</code>이라는 메서드도 있는데요.\n기존 파라미터 키에 새로운 값을 추가하는 <code>append()</code>와 달리 <code>set()</code>은 기존 값을 지워버리고 새로운 값을 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"draft\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'mode=dark&amp;page=1&amp;sort=date&amp;draft=false'</span></code></pre></div>\n<p>위에 보시면 <code>sort</code> 키의 값으로 두 번째 값으로 설정한 <code>date</code>만 있고, 첫 번째 값으로 설정한 <code>email</code>는 사라진 것을 볼 수 있습니다.</p>\n<p><code>URLSearchParams</code> 객체에 저장되어 있는 값을 읽을 때는 <code>get()</code>과 <code>getAll()</code> 메서드를 사용할 수 있는데요.\n하나의 키에 여러 개의 값이 저장되어 있을 때 <code>get()</code>은 첫 번째 값만 반환하는 반면에 <code>getAll()</code>은 모든 값을 배열로 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'dark</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'dark' ]</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ '1' ]</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"draft\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'false'</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'email'</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'email', 'date' ]</span></code></pre></div>\n<p>쿼리 문자열 안에서는 모든 값이 문자열로 취급되기 때문에 숫자 <code>1</code>인 아닌 문자열 <code>\"1\"</code>이 얻어지고, 불리언 <code>false</code>가 아닌 문자열 <code>\"false\"</code>가 얻어지는 부분 조심하시기 바랍니다.</p>\n<p><code>URLSearchParams</code> 객체에 저장되어 있는 파라미터는 <code>for...of</code> 문법을 사용하여 쉽게 순회할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> param <span class=\"token keyword\">of</span> searchParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token string\">'mode'</span>, <span class=\"token string\">'dark'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'page'</span>, <span class=\"token string\">'1'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'draft'</span>, <span class=\"token string\">'false'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'sort'</span>, <span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'sort'</span>, <span class=\"token string\">'date'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>구조 분해(Destructuring) 문법을 활용하면 원하는 키와 값을 다른 변수에 할당할 수도 있겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> searchParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mode: dark\npage: <span class=\"token number\">1</span>\ndraft: <span class=\"token boolean\">false</span>\nsort: email\nsort: <span class=\"token function\">date</span></code></pre></div>\n<p><code>URLSearchParams</code> 객체에서 파라미터를 삭제하고 싶을 때는 <code>delete()</code> 메서드를 사용하는데요.\n인자로 키를 넘기면 해당 키에 해당하는 모든 값이 함께 삭제됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"draft\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'mode=dark&amp;page=1&amp;sort=email&amp;sort=date'</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'mode=dark&amp;page=1'</span></code></pre></div>\n<p>단순히 특정 파라미터의 존재 여부를 알고 싶을 때는 <code>has()</code> 메서드를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>매개변수를 오름차순으로 정렬할 수도 있습니다.\n키가 1차 기준이 되고 값이 2차 기준이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsearchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'draft=false&amp;mode=dark&amp;page=1&amp;sort=date&amp;sort=email'</span></code></pre></div>\n<h2 id=\"url과-urlsearchparams-함께-사용\" style=\"position:relative;\"><a href=\"#url%EA%B3%BC-urlsearchparams-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9\" aria-label=\"url과 urlsearchparams 함께 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL과 URLSearchParams 함께 사용</h2>\n<p>기존의 URL의 쿼리 문자열을 접근하거나 조작하고 싶을 때는 <a href=\"/js-url-api/\">지난 포스팅</a>에서 배운 <code>URL</code> 객체와 함께 <code>URLSearchParams</code> 객체를 쓰면 유용한데요.\n<code>URL</code> 객체의 <code>search</code> 속성에는 쿼리 문자열이 문자열로 저장되어 있고, <code>searchParams</code> 속성에는 쿼리 문자열이 <code>URLSearchParams</code> 객체로 저장이 되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.org:8080/foo/bar?q=baz#bang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">;</span> <span class=\"token comment\">// '?q=baz'</span>\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">;</span> <span class=\"token comment\">// URLSearchParams {size: 1}</span>\n\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'baz'</span>\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nurl<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/foo/bar?q=updated&amp;r=2&amp;r=false#bang'</span></code></pre></div>\n<p>URL 객체의 <code>searchParams</code> 속성에 접근하여 위와 같이 쿼리 문자열을 간편하게 조작할 수 있습니다.</p>\n<p>한 가지 범하기 쉬운 실수는 새로운 <code>URLSearchParams</code> 객체를 바로 <code>URL</code> 객체의 <code>searchParams</code> 속성에 할당하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.org:8080/foo/bar?q=baz#bang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q=updated&amp;r=2&amp;r=false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/foo/bar?q=baz#bang'</span></code></pre></div>\n<p>위에 보시다시피 새로운 쿼리 문자열이 반영되지 않는데요.\n그 이유는 <code>URL</code> 객체의 <code>searchParams</code> 속성은 읽기 전용이기 때문입니다.\n따라서 <code>URL</code> 객체의 <code>searchParams</code> 속성을 읽은 후에 그 안에 들어있는 매개변수를 조작할 수는 있지만 아예 새로운 <code>URLSearchParams</code> 객체로 대체할 수는 없습니다.</p>\n<p>대신에 <code>URL</code> 객체 <code>search</code> 속성은 쓰기가 가능하기 때문에 아래와 같이 <code>URLSearchParams</code> 객체를 문자열로 변환한 후에 <code>URL</code> 객체 <code>search</code> 속성에 할당해주면 되겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.org:8080/foo/bar?q=baz#bang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span>search <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q=updated&amp;r=2&amp;r=false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nurl<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'https://example.org:8080/foo/bar?q=updated&amp;r=2&amp;r=false#bang'</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 자바스크립트로 쿼리 문자열을 다룰 때 아주 유용하게 쓸 수 있는 웹 표준 API인 <code>URLSearchParams</code>에 대해서 자세히 살펴보았습니다.</p>\n<p>본 포스팅에서 다룬 <code>URLSearchParams</code>를 잘 활용하셔서 쿼리 문자열을 좀 더 안전하게 다루시는데 도움이 되었으면 좋겠습니다.</p>","timeToRead":7,"fields":{"slug":"/js-url-search-params/","tags":["JavaScript","Node.js","API","URL"]},"frontmatter":{"title":"자바스크립트의 URLSearchParams로 쿼리 문자열 다루기","date":"Aug 7, 2023"}},"next":{"fields":{"slug":"/js-prettier-config/"},"frontmatter":{"title":"Prettier 상세 설정 가이드"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}