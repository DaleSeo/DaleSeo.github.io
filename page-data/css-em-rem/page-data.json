{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/css-em-rem/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-lt-not-supported/"},"frontmatter":{"title":"[파이썬] TypeError: < not supported"}},"node":{"html":"<p>반응형 웹디자인이 대두되면서 점점 많은 웹사이트들이 <code>em</code>과 <code>rem</code>라고 불리는 CSS 단위를 이용해서 스타일링이 되고 있습니다.<br>\n이번 포스트에서는 <code>em</code>과 <code>rem</code> 단위가 실제로 브라우저에서 어떻게 동작하는지 정확히 알고 좀 더 적재적소에 사용하는 방법에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"상대-단위란\" style=\"position:relative;\"><a href=\"#%EC%83%81%EB%8C%80-%EB%8B%A8%EC%9C%84%EB%9E%80\" aria-label=\"상대 단위란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상대 단위란?</h2>\n<p>상대(relative) 단위란 고정되지 않고 어떤 기준에 따라서 유동적으로 바뀔 수 있는 길이를 나타내는 단위입니다. 본 포스트에서 다룰 <code>em</code>과 <code>rem</code>을 포함해 <code>%</code>, <code>vw</code>, <code>vh</code> 등이 대표적인 CSS의 상대 단위입니다.</p>\n<p>반면 절대(absolute) 단위는 어떤 상황에서든 항상 고정된 길이를 나타내는 단위입니다. 대표적으로 예전부터 현재까지 많이 사용되는 <code>px</code>와 <code>pt</code>를 들 수 있고, <code>cm</code>나 <code>in</code>와 같은 실생활에서 많이 사용되는 단위들도 이 절대 단위에 범주에 속합니다.</p>\n<p>쉽게 말해, 실생활에서 <code>1cm</code>가 항상 <code>1cm</code>인 것처럼, <code>1px</code>는 항상 <code>1px</code>(=0.02645833cm)이지만, <code>1em</code>이나 <code>1rem</code>은 항상 고정된 길이를 나타나지 않고 대신 브라우저가 어떤 기준에 따라 계산을 하여 <code>px</code>로 변환을 해줍니다. 따라서 그 기준이 무엇인지를 파악하는 것이 <code>em</code>과 <code>rem</code>을 정확히 이해하는데 핵심이 됩니다.</p>\n<h2 id=\"em과-rem의-공통점\" style=\"position:relative;\"><a href=\"#em%EA%B3%BC-rem%EC%9D%98-%EA%B3%B5%ED%86%B5%EC%A0%90\" aria-label=\"em과 rem의 공통점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>em과 rem의 공통점</h2>\n<p>뭐 적어도 <code>px</code>나 <code>pt</code>와 같은 절대 단위를 쓰는 것 보다는 나을테니라는 생각으로 많은 분들이 <code>em</code>과 <code>rem</code>을 혼용해서 사용하시는 것 같습니다.<br>\n사실 브라우저에서 이 두 단위가 같은 길이로 계산될 때가 상당히 많고, 둘 중에 뭐를 쓰든 큰 차이가 나지 않아서 그럴 수도 있을 것입니다.</p>\n<p><code>em</code>과 <code>rem</code>은 둘 다 CCS의 <code>font-size</code> 속성 값에 비례해서 결정되는 상대 단위입니다.<br>\n예를 들어, <code>font-size: 16px</code>인 경우, 상대 단위는 브라우저에 의해서 다음과 같이 계산됩니다.</p>\n<ul>\n<li><code>0.5em = 16 px x 0.5 = 8px</code></li>\n<li><code>1em = 16 px x 1 = 16px</code></li>\n<li><code>2em = 16 px x 2 = 32px</code></li>\n<li><code>3em = 16 px x 3 = 48px</code></li>\n</ul>\n<p>여기서 <code>font-size</code>를 <code>20px</code>로 늘릴 경우, 상대 단위도 다음과 같이 비례해서 증가되게 됩니다.</p>\n<ul>\n<li><code>0.5em = 20 px x 0.5 = 10px</code></li>\n<li><code>1em = 20 px x 1 = 20px</code></li>\n<li><code>2em = 20 px x 2 = 40px</code></li>\n<li><code>3em = 20 px x 3 = 60px</code></li>\n</ul>\n<p>반대로 <code>font-size</code>를 <code>10px</code>로 줄일 경우, 상대 단위도 다음과 같이 비례해서 감소되게 됩니다.</p>\n<ul>\n<li><code>0.5em = 10 px x 0.5 = 5px</code></li>\n<li><code>1em = 10 px x 1 = 10px</code></li>\n<li><code>2em = 10 px x 2 = 20px</code></li>\n<li><code>3em = 10 px x 3 = 30px</code></li>\n</ul>\n<p>위와 <code>font-size</code> 값에 증감에 비례해서 유동적으로 길이가 결정되고 싶은 속성에 <code>em</code>이나 <code>rem</code> 단위를 사용해서 길이 지정을 해줄 수 있습니다.</p>\n<h2 id=\"em과-rem의-차이점\" style=\"position:relative;\"><a href=\"#em%EA%B3%BC-rem%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"em과 rem의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>em과 rem의 차이점</h2>\n<p><code>em</code>과 <code>rem</code> 단위의 기준은 <code>font-size</code> 속성 값이라고 했는데, 정확히 어디에 있는 <code>font-size</code> 속성 값인지에 따라 차이가 발생합니다.<br>\n<code>em</code>의 경우, 해당 단위가 사용되고 있는 요소의 <code>font-size</code> 속성 값이 기준이 됩니다.<br>\n반면에 <code>rem</code>에서 <code>r</code>은 <code>root</code>, 즉 최상위 요소를<code>font-size</code> 속성 값 의미합니다. HTML에서 최상위 요소는 <code>&#x3C;html></code> 입니다.<br>\n따라서 <code>rem</code> 경우, <code>html</code> 요소의 <code>font-size</code> 속성 값이 기준이 됩니다.</p>\n<p>예를 들어, 다음과 같이 <code>html</code> 요소의 <code>font-size</code> 속성 값이 <code>16px</code>이라고 가정해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 다음과 같이 <code>div</code> 요소가 스타일링 된다면 <code>width</code> 속성의 값은 <code>200px</code>이 됩니다.<br>\n왜냐하면 <code>em</code>은 해당 요소의 <code>font-size</code>에 비례해서 커지기 때문에 <code>div</code> 요소의 <code>font-size</code>인 <code>20px</code>에 <code>10</code>을 곱해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 10em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 200px */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 다음과 같이 <code>em</code> 대신에 <code>rem</code> 단위를 이용해서 <code>div</code> 요소가 스타일링 된다면 <code>width</code> 속성값은 <code>160px</code>이 됩니다.<br>\n왜냐하면 <code>rem</code>은 <code>html</code> 요소의 <code>font-size</code>가 <code>16px</code>이기 때문에, <code>16px</code>에 <code>10</code>을 곱해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 10rem<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 160px */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 말해, <code>rem</code> 단위를 사용하면 해당 요소의 <code>font-size</code> 속성 값은 전혀 중요하지 않게 됩니다.</p>\n<h2 id=\"font-size-상속괴-em-단위-계산\" style=\"position:relative;\"><a href=\"#font-size-%EC%83%81%EC%86%8D%EA%B4%B4-em-%EB%8B%A8%EC%9C%84-%EA%B3%84%EC%82%B0\" aria-label=\"font size 상속괴 em 단위 계산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>font-size 상속괴 em 단위 계산</h2>\n<p>자 그럼 여기서 퀴즈! <code>div</code> 요소에서 <code>font-size</code> 속성을 제거하면 어떻게 될까요?</p>\n<p><code>rem</code>의 경우 원래부터 해당 요소의 <code>font-size</code>를 무시하기 때문에 달라질 게 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 10rem<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 160px */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 <code>em</code>을 사용할 경우, 약간의 상상력이 필요합니다. 왜냐하면 없는 <code>font-size</code> 속성 값을 고려해야 하기 떄문입니다.<br>\n어떤 요소에 <code>font-size</code> 속성이 정의되지 않은 경우 부모의 <code>font-size</code> 값을 그대로 상속받게 됩니다.<br>\n따라서, 아까 <code>html</code> 요소의 <code>font-size</code>가 <code>16px</code>가 <code>div</code> 요소의 <code>font-size</code> 값이 되고, 결국 <code>width: 10em</code> 값은 <code>16px * 10 = 160px</code>로 계산됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 10em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 160px */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 만약에 <code>html</code> 요소와 이 <code>div</code> 사이에 다른 요소들이 층층이 끼어 있으면 어떻게 될까요? (실제 이런 경우가 훨씬 많겠죠?)<br>\n예를 들어 <code>header</code> 요소가 이 둘 사이에 있고, 이 <code>header</code> 요소의 <code>font-size</code>가 <code>30px</code>이라면, 이 <code>header</code> 요소를 부모로 가지는 <code>div</code> 요소의 <code>font-size</code>도 상속이 되어 <code>30px</code>이되서 <code>width</code> 값을 <code>300px</code>로 만들 것입니다.<br>\n이건 그나마 난데, 만약 이 <code>header</code> 요소의 <code>font-size</code>가 절대 단위가 아닌 상대 단위를 사용하고 있다면 어떨까요?<br>\n<code>heaer</code>의 <code>font-size</code>를 <code>2rem</code>이라고 한다면 <code>16px x 2 = 32px</code>로 계산될 것이고, <code>div</code> 요소의 <code>font-size</code>도 <code>32px</code>이되서 최종적으로 <code>width</code> 값이 <code>320px</code>이 될 것입니다.</p>\n<p>이 처럼, <code>em</code>을 사용할 때는 <code>font-size</code>가 <code>html</code> 요소부터 시작해 여러 상위 요소들을 거치면서 상속될 수 있기 때문에 실제 어떤 값으로 계산될지 예측하기가 복잡할 때가 있습니다.</p>\n<h2 id=\"그럼-em과-rem-중-어떤-걸\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9F%BC-em%EA%B3%BC-rem-%EC%A4%91-%EC%96%B4%EB%96%A4-%EA%B1%B8\" aria-label=\"그럼 em과 rem 중 어떤 걸 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그럼 em과 rem 중 어떤 걸?</h2>\n<p>많은 CSS 가이드들이 <code>em</code>을 사용해야만 하는 타당한 이유가 없는 경우라면 가급적 <code>rem</code>을 우선적으로 쓰도록 권고하고 있습니다. (특히 초보자들에게…)<br>\n왜냐하면 <code>em</code>의 경우 위에서 보았듯이 실제 몇 <code>px</code>로 변환될지에 영향을 주는 변수가 많아지기 때문에, <code>em</code>을 사용해서 스타일된 요소의 경우 재사용이 어렵고 유지보수가 힘들어지는 경향이 있기 때문입니다.</p>","timeToRead":5,"fields":{"slug":"/css-em-rem/","tags":["CSS","스타일","em","rem"]},"frontmatter":{"title":"CSS 상대 단위 - em과 rem","date":"Dec 29, 2018"}},"next":{"fields":{"slug":"/python-priority-queue/"},"frontmatter":{"title":"파이썬의 우선순위 큐(PriorityQueue) 사용법"}}}}}