{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/docker-run/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-dataclasses/"},"frontmatter":{"title":"[파이썬] 데이터 클래스 사용법 (dataclasses 모듈)"}},"node":{"html":"<p>Docker를 사용하면서 가장 자주 접하는 커맨드는 단연 컨테이너를 실행하기 위해서 쓰이는 <code>docker run</code>일 것입니다.\n<code>docker run</code> 커맨드는 상당히 여러가지 옵션을 통해 다양한 방식으로 컨테이너를 실행할 수 있도록 해줍니다.\n이번 포스트에서는 이중에서 자주 쓰이는 옵션 위주로 <code>dockr run</code> 커맨드를 어떻게 사용하는지 알아보겠습니다.</p>\n<h2 id=\"기본-포멧\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%8F%AC%EB%A9%A7\" aria-label=\"기본 포멧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 포멧</h2>\n<p><code>docker run</code> 커맨드의 기본 포멧은 다음과 같습니다. 여기서 이미지 식별자는 필수이며 이미지 ID나 리파지토리(repository):태그(tag)를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>옵션<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>이미지 식별자<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>명령어<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>인자<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"-d-옵션\" style=\"position:relative;\"><a href=\"#-d-%EC%98%B5%EC%85%98\" aria-label=\" d 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>-d 옵션</h2>\n<p>많은 경우 컨테이너를 백그라운드에서 실행해야 하는데요. 이 때는 <code>-d</code> 옵션을 사용하면 됩니다.\n<code>-d</code> 옵션을 사용하면 컨테이너가 detached 모드에서 실행되며, 실행 결과로 컨테이너 ID만을 출력합니다.\n예를 들어, <code>python:3.8-alpine</code> 이미지로 부터 <code>python -m http.server</code> 명령어를 백그라운드로 실행해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -d python:3.8-alpine python -m http.server\n0b920d2f561437418b8fdc0e9bcfdd4c9d634983ded18ba35a4dbae012753a72\n$ docker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n0e4fe552200f        python:3.8-alpine   <span class=\"token string\">\"python -m http.serv…\"</span>   <span class=\"token number\">5</span> seconds ago       Up <span class=\"token number\">4</span> seconds                            gifted_chaplygin</code></pre></div>\n<p><code>docker ps</code> 커맨드를 날려보니, 방금 백그라운드로 실행한 컨테이너가 보입니다.</p>\n<p>이 명령어를 <code>-d</code> 옵션없이 실행했다면, 해당 터미널에서 <code>Ctrl + C</code>를 눌러서 빠져나오는 순간 해당 컨테이너는 종료될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run python:3.8-alpine python -m http.server\n^CServing HTTP on <span class=\"token number\">0.0</span>.0.0 port <span class=\"token number\">8000</span> <span class=\"token punctuation\">(</span>http://0.0.0.0:8000/<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">..</span>.\n\nKeyboard interrupt received, exiting.\n$</code></pre></div>\n<h2 id=\"-it-옵션\" style=\"position:relative;\"><a href=\"#-it-%EC%98%B5%EC%85%98\" aria-label=\" it 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>-it 옵션</h2>\n<p><code>-i</code> 옵션과 <code>-t</code> 옵션은 같이 쓰이는 경우가 매우 많은데요. 이 두 옵션은 컨테이너를 종료하지 않은체로, 터미널의 입력을 계속해서 컨테이너로 전달하기 위해서 사용합니다.\n따라서, <code>-it</code> 옵션은 특히 컨테이너의 쉘(shell)이나 CLI 도구를 사용할 때 매우 유용하게 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it python:3.8-alpine\nPython <span class=\"token number\">3.8</span>.2 <span class=\"token punctuation\">(</span>default, Mar <span class=\"token number\">24</span> <span class=\"token number\">2020</span>, 02:56:01<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>GCC <span class=\"token number\">9.2</span>.0<span class=\"token punctuation\">]</span> on linux\nType <span class=\"token string\">\"help\"</span>, <span class=\"token string\">\"copyright\"</span>, <span class=\"token string\">\"credits\"</span> or <span class=\"token string\">\"license\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information.\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span>\nHi<span class=\"token operator\">!</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it python:3.8-alpine /bin/sh\n/ <span class=\"token comment\"># ls</span>\nbin    etc    lib    mnt    proc   run    srv    tmp    var\ndev    home   media  opt    root   sbin   sys    usr\n/ <span class=\"token comment\">#</span></code></pre></div>\n<h2 id=\"name-옵션\" style=\"position:relative;\"><a href=\"#name-%EC%98%B5%EC%85%98\" aria-label=\"name 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>—name 옵션</h2>\n<p>Docker 컨테이너를 제어할 때 컨테이너 ID를 사용하면 읽거나 기억하기가 어려워서 불편하게 느껴집니다.\n이럴 경우, <code>--name</code> 옵션을 사용해서 컨테이너에 이름을 부여해주면 해당 이름으로 컨테이너를 식별할 수 있습니다.</p>\n<p>아래 예제에서는 <code>my-server</code>라는 이름으로 컨테이너를 실행한 후에, <code>docker kill</code> 커맨드로 해당 컨테이너를 종료하거나, <code>docker rm</code> 커맨드로 해당 컨테이너를 삭제할 때 컨테이너 이름을 컨테이너 ID 대신에 사용하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -d --name my-server python:3.8-alpine python -m http.server\n7899108d467cc423e20a3d6cb250070baae01fa541b037707afbbe8d1e9e3000\n$ docker <span class=\"token function\">ps</span>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n7899108d467c        python:3.8-alpine   <span class=\"token string\">\"python -m http.serv…\"</span>   <span class=\"token number\">2</span> seconds ago       Up <span class=\"token number\">3</span> second                             my-server\n$ docker <span class=\"token function\">kill</span> my-server\nmy-server\n$ docker <span class=\"token function\">rm</span> my-server\nmy-server</code></pre></div>\n<h2 id=\"-e-옵션\" style=\"position:relative;\"><a href=\"#-e-%EC%98%B5%EC%85%98\" aria-label=\" e 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>-e 옵션</h2>\n<p>Docker 컨테이너의 환경변수를 설정하기 위해서는 <code>-e</code> 옵션을 사용합니다.\n또한, <code>-e</code> 옵션을 사용하면 Dockerfile의 <code>ENV</code> 설정도 덮어써지게 됩니다.</p>\n<p>아래 커맨드는 <code>FOO</code> 환경 변수를 <code>bar</code>로 세팅을 하고, 환경 변수를 출력하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -e <span class=\"token assign-left variable\">FOO</span><span class=\"token operator\">=</span>bar python:3.8-alpine <span class=\"token function\">env</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTNAME</span></span><span class=\"token operator\">=</span>92ebed448fb3\n<span class=\"token assign-left variable\">FOO</span><span class=\"token operator\">=</span>bar\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>C.UTF-8\n<span class=\"token assign-left variable\">GPG_KEY</span><span class=\"token operator\">=</span>E3FF2839C048B25C084DEBE9B26995E310250568\n<span class=\"token assign-left variable\">PYTHON_VERSION</span><span class=\"token operator\">=</span><span class=\"token number\">3.8</span>.2\n<span class=\"token assign-left variable\">PYTHON_PIP_VERSION</span><span class=\"token operator\">=</span><span class=\"token number\">20.0</span>.2\n<span class=\"token assign-left variable\">PYTHON_GET_PIP_URL</span><span class=\"token operator\">=</span>https://github.com/pypa/get-pip/raw/d59197a3c169cef378a22428a3fa99d33e080a5d/get-pip.py\n<span class=\"token assign-left variable\">PYTHON_GET_PIP_SHA256</span><span class=\"token operator\">=</span>421ac1d44c0cf9730a088e337867d974b91bdce4ea2636099275071878cc189e\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/root</code></pre></div>\n<h2 id=\"-p-옵션\" style=\"position:relative;\"><a href=\"#-p-%EC%98%B5%EC%85%98\" aria-label=\" p 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>-p 옵션</h2>\n<p><code>-p</code> 옵션은 호스트와 컨테이너 간의 포트(port) 배포(publish)/바인드(bind)를 위해서 사용되는데요.\n호스트(host) 컴퓨터에서 컨테이너에서 리스닝하고 있는 포트로 접속할 수 있도록 설정해줍니다.</p>\n<p>아래 커맨드는 컨테이너 내부에서 <code>8080</code> 포트로 리스닝하고 있는 HTTP 서버를 호스트 컴퓨터에서 <code>80</code> 포트로 접속할 수 있도록 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -d -p <span class=\"token number\">80</span>:8000 python:3.8-alpine python -m http.server</code></pre></div>\n<h2 id=\"-v-옵션\" style=\"position:relative;\"><a href=\"#-v-%EC%98%B5%EC%85%98\" aria-label=\" v 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>-v 옵션</h2>\n<p><code>-v</code> 옵션은 호스트와 컨테이너 간의 볼륨(volumn) 설정을 위해서 사용되는데요.\n호스트(host) 컴퓨터의 파일 시스템의 특정 경로를 컨테이너의 파일 시스템의 특정 경로로 마운트(mount)를 해줍니다.</p>\n<p>아래 커맨드는 호스트 컴퓨터의 현재 디렉토리를 컨테이너의 <code>/etc</code> 경로로 마운트한 후, 그 안에 있는 <code>test.txt</code> 파일의 내용을 출력하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> Hi <span class=\"token operator\">></span> test.txt\n$ docker run -v <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">`</span></span>:/etc python:3.8-alpine <span class=\"token function\">cat</span> /etc/test.txt\nHi</code></pre></div>\n<h2 id=\"-w-옵션\" style=\"position:relative;\"><a href=\"#-w-%EC%98%B5%EC%85%98\" aria-label=\" w 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>-w 옵션</h2>\n<p><code>-w</code> 옵션은 Dockerfile의 <code>WORKDIR</code> 설정을 덮어쓰기 위해서 사용됩니다.</p>\n<p>아래 커맨드는 컨테이너의 작업 디렉토리를 <code>/etc</code>로 변경하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -w /etc python:3.8-alpine <span class=\"token builtin class-name\">pwd</span>\n/etc</code></pre></div>\n<h2 id=\"--entrypoint-옵션\" style=\"position:relative;\"><a href=\"#--entrypoint-%EC%98%B5%EC%85%98\" aria-label=\"  entrypoint 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>--entrypoint</code> 옵션</h2>\n<p><code>--entrypoint</code> 옵션은 Dockerfile의 <code>ENTRYPOINT</code> 설정을 덮어쓰기 위해서 사용합니다.</p>\n<p>예를 들어, <code>python:3.8-alpine</code> 이미지로 부터 <code>python --version</code>을 실행하고 싶다면 다음과 같이 커맨드를 실행하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run --entrypoint python python:3.8-alpine --version\nPython <span class=\"token number\">3.8</span>.2</code></pre></div>\n<h2 id=\"rm-옵션\" style=\"position:relative;\"><a href=\"#rm-%EC%98%B5%EC%85%98\" aria-label=\"rm 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>—rm 옵션</h2>\n<p><code>--rm</code> 옵션은 컨테이너를 일회성으로 실행할 때 주로 쓰이는데요.\n컨테이너가 종료될 때 컨테이너와 관련된 리소스(파일 시스템, 볼륨)까지 깨끗이 제거해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run --rm -it wernight/funbox nyancat</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Docker 컨테이너를 실행하기 위해서 자주 사용되는 <code>docker run</code> 커맨드에 대해서 살펴보았습니다.\n<code>docker run</code> 커맨드에 대한 좀 더 자세한 내용은 아래 Docekr CLI 레퍼런스를 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/reference/run/\">Docker run reference</a></li>\n<li><a href=\"https://docs.docker.com/engine/reference/commandline/run/\">docker run</a></li>\n</ul>","timeToRead":5,"fields":{"slug":"/docker-run/","tags":["Docker","도커","Container","컨테이너","Dockerfile","CLI"]},"frontmatter":{"title":"docker run 커맨드 사용법","date":"Apr 19, 2020"}},"next":{"fields":{"slug":"/material-ui-button/"},"frontmatter":{"title":"Material UI의 버튼 컴포넌트"}}}}}