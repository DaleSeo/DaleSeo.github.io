{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/vite-react/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>이번 포스팅에서는 차세대 번들러인 Vite 사용하여 React 프로젝트를 생성하고 설정하는 방법에 대해서 알아보겠습니다.</p>\n<blockquote>\n<p>Vite에 대한 기초적인 내용에 대해서는 <a href=\"/vite/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고하세요.</p>\n</blockquote>\n<h2 id=\"cra--nextjs--vite\" style=\"position:relative;\"><a href=\"#cra--nextjs--vite\" aria-label=\"cra  nextjs  vite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRA 🆚 Next.js 🆚 Vite</h2>\n<p>오랫동안 React 프로젝트를 만들기 위해서 <a href=\"/create-react-app/\">Create React App</a>라는 CLI 도구가 사용되었습니다.\n<a href=\"https://2023.stateofreact.com/en-US/libraries/\">State of JS 2023</a> 설문 결과를 보시면 Create React App을 사용해봤다는 응답자가 90%가 넘을 정도로 CRA는 오랫동안 React 생태계에서 프로젝트를 생성하는 표준처럼 여겨졌습니다.</p>\n<p><img src=\"https://res.cloudinary.com/daleseo/image/upload/v1724114336/state-of-js-2023-libraries_hk3f98.png\" alt=\"state-of-js-2023-libraries\"></p>\n<p>하지만 CRA는 2022년 4월 이후로 업데이트가 전혀 없으며, React 공식 문서에서도 사라지면서 사실 상 폐기(deprecated) 수순을 밟고 있습니다.</p>\n<p>위 그래프에서 5위를 차지한 Next.js도 React 프로젝트를 만들기 위해서 많이 사용되는데요.\n하지만 Next.js는 프로젝트 생성 뿐만 아니라 라우팅, 데이터 패칭(fetching), Server-Side Rendering(SSR), Static Site Generation(SSG), 이미지 최적화 등 온갖 부가 기능을 지원하는 <a href=\"/meta-frameworks/\">메타 프레임워크</a>입니다.\n따라서 제대로 활용하려면 배워야할 것도 많고 CRA처럼 간단하게 React 프로젝트를 만들어 보는데는 적합한 도구가 아니죠.</p>\n<p>이러한 이유로 최근에 Vite가 CRA의 대안 기술로 부상하고 있습니다.\nVite를 사용하면 CRA처럼 간편하게 React 프로젝트를 만들 수 있을 뿐만 아니라, CRA보다 훨씬 빠르고 쾌적한 개발 서버를 사용할 수 있습니다.</p>\n<p>뿐만 아니라, CRA로 만든 프로젝트는 규모가 커지면 결국 돌이킬 수 없는 eject를 해야한다는 부담이 있었는데, Vite는 그런 걱정없이 소규모 프로젝트부터 대규모 프로젝트까지 범용적으로 쓸 수 있도록 설계되어 있습니다.</p>\n<h2 id=\"react-프로젝트-생성\" style=\"position:relative;\"><a href=\"#react-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"react 프로젝트 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 프로젝트 생성</h2>\n<p>우선 Vite를 사용하여 React 프로젝트를 생성해보도록 하겠습니다.</p>\n<p><a href=\"/?tag=Node.js\">Node.js</a>를 사용하신다면 터미널에서 <code>npm</code> 명령어를 사용하여 Vite 프로젝트를 시작할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> create vite@latest</code></pre></div>\n<p>차세대 자바스크립트 런타임인 <a href=\"/?tag=Bun\">Bun</a>을 사용하신다면 <code>bun</code> 명령어를 사용하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun create vite</code></pre></div>\n<p>위 명령어를 실행하면 프로젝트 3가지 질문이 나오는데요.\n프로젝트 이름은 <code>vite-react</code>라고 하고, 프레임워크는 <code>React</code>를 선택합니다.\n요즘 대부분의 React 프로젝트는 타입스크립트로 개발하는 추세이므로 variant는 <code>TypeScript</code>를 선택합니다.</p>\n<p>참고로 <code>TypeScript + SWC</code>를 선택하시면 타입스크립트의 내장 컴파일러인 TSC 대신에 <a href=\"/swc/\">SWC(Speedy Web Compiler)</a>를 사용하게 됩니다.\n대형 프로젝트에서는 빌드 속도의 향상을 기대할 수 있지만 소규모 프로젝트에서는 오히려 설정만 복잡해질 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">✔ Project name: … vite-react\n✔ Select a framework: › React\n✔ Select a variant: › TypeScript\n\nScaffolding project <span class=\"token keyword\">in</span> /Users/daleseo/Temp/vite-react<span class=\"token punctuation\">..</span>.\n\nDone. Now run:\n\n  <span class=\"token builtin class-name\">cd</span> vite-react\n  bun <span class=\"token function\">install</span>\n  bun run dev</code></pre></div>\n<blockquote>\n<p>다양한 자바스크립트 프로젝트 생성법에 대해서는 <a href=\"/js-npm-init/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"의존-패키지-설치\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"의존 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존 패키지 설치</h2>\n<p>앞에서 프로젝트를 생성하면 나오는 안내대로 프로젝트 폴더에 들어가서 패키지를 설치하도록 하겠습니다.\n(Node.js를 쓰신다면 <code>bun install</code> 대신에 <code>npm install</code>을 실행하시면 됩니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> vite-react\n$ bun <span class=\"token function\">install</span> v1.1.22-canary.96 <span class=\"token punctuation\">(</span>df33f2b2<span class=\"token punctuation\">)</span>\n\n+ @eslint/js@9.9.0\n+ @types/react@18.3.4\n+ @types/react-dom@18.3.0\n+ @vitejs/plugin-react@4.3.1\n+ eslint@9.9.0\n+ eslint-plugin-react-hooks@5.1.0-rc-fb9a90fa48-20240614\n+ eslint-plugin-react-refresh@0.4.10\n+ globals@15.9.0\n+ typescript@5.5.4\n+ typescript-eslint@8.2.0\n+ vite@5.4.2\n+ react@18.3.1\n+ react-dom@18.3.1\n\n<span class=\"token number\">195</span> packages installed <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>.68s<span class=\"token punctuation\">]</span></code></pre></div>\n<p>React 관련 패키지 뿐만 아니라 TypeScript를 선택했기 때문에 관련 패키지가 설치가 됩니다.\n또한, 자바스크립트에서 가장 많이 사용되는 린터(linter)인 <a href=\"/?tag=ESLint\">ESLint</a> 관련 패키지도 설치가 된 것을 볼 수 있습니다.</p>\n<p>다음과 같이 전형적인 React 프로젝트의 디렉토리 구조가 잡혀있는 것을 확인할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ tree <span class=\"token parameter variable\">-L</span> <span class=\"token number\">2</span> <span class=\"token parameter variable\">-I</span> node_modules\n<span class=\"token builtin class-name\">.</span>\n├── README.md\n├── bun.lockb\n├── eslint.config.js\n├── index.html\n├── package.json\n├── public\n│   └── vite.svg\n├── src\n│   ├── App.css\n│   ├── App.tsx\n│   ├── assets\n│   ├── index.css\n│   ├── main.tsx\n│   └── vite-env.d.ts\n├── tsconfig.app.json\n├── tsconfig.json\n├── tsconfig.node.json\n└── vite.config.ts\n\n<span class=\"token number\">4</span> directories, <span class=\"token number\">15</span> files</code></pre></div>\n<h2 id=\"개발-서버-구동\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C-%EC%84%9C%EB%B2%84-%EA%B5%AC%EB%8F%99\" aria-label=\"개발 서버 구동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발 서버 구동</h2>\n<p>개발자 입장에서 Vite가 가장 매력적인 이유는 무엇보다 말도 안 되게 빠르고 올라가고 실시간으로 코드 변경을 감시하여 반영해주는 개발 서버입니다.</p>\n<p>터미널에서 <code>bun run dev</code> 또는 <code>npm run dev</code> 명령어를 실행하면 개발 서버가 구동됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun run dev\n$ vite\n\n  VITE v5.4.2  ready <span class=\"token keyword\">in</span> <span class=\"token number\">430</span> ms\n\n  ➜  Local:   http://localhost:5173/\n  ➜  Network: use <span class=\"token parameter variable\">--host</span> to expose\n  ➜  press h + enter to show <span class=\"token builtin class-name\">help</span></code></pre></div>\n<p>이제 브라우저에서 <code>http://localhost:5173/</code>을 접속해보시면 Vite와 React 로고, 그 아래 카운터 버튼이 있는 웹사이트 하나가 뜰 것입니다.</p>\n<p>Vite의 개발 서버는 프로젝트 내의 소스 코드를 변경되면 눈 깜짝할 사이에 브라우저에 반영을 해줍니다.\n이러한 HMR(Hot Module Replacement) 기능은 Webpack이나 Parcel과 같은 기존 번들러도 지원했지만 Vite는 내부적으로 Go 언어로 작성된 esbuild를 사용하기 때문에 속도 체감이 크게 납니다.</p>\n<p>간단한 실습을 위해서 <code>src/App.tsx</code> 파일을 아래와 같이 수정한 후 저장해보세요.\n코드 편집기에서 파일을 저장하자 마자 수정분이 웹사이트에 반영이 되는 것을 볼 수 있으실 것입니다. 🏎️</p>\n<div class=\"gatsby-code-title\">src/App.tsx</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> reactLogo <span class=\"token keyword\">from</span> <span class=\"token string\">\"./assets/react.svg\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> viteLogo <span class=\"token keyword\">from</span> <span class=\"token string\">\"/vite.svg\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./App.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"https://vitejs.dev\"</span> target<span class=\"token operator\">=</span><span class=\"token string\">\"_blank\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>viteLogo<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"Vite logo\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"https://react.dev\"</span> target<span class=\"token operator\">=</span><span class=\"token string\">\"_blank\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>reactLogo<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"logo react\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"React logo\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Vite <span class=\"token operator\">+</span> React<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"card\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token punctuation\">{</span><span class=\"token comment\">/* count is {count} */</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          카운트는 <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> 입니다<span class=\"token punctuation\">.</span></span>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n          Edit <span class=\"token operator\">&lt;</span>code<span class=\"token operator\">></span>src<span class=\"token operator\">/</span>App<span class=\"token punctuation\">.</span>tsx<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>code<span class=\"token operator\">></span> and save to test <span class=\"token constant\">HMR</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token string\">\"read-the-docs\"</span><span class=\"token operator\">></span>\n        Click on the Vite and React logos to learn more\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"테스트-설정\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95\" aria-label=\"테스트 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 설정</h2>\n<p>개인 프로젝트나 시제품 프로토타이핑(prototyping)하시는 게 아니라면 테스트 코드를 작성하시는 게 바람직하겠죠?\n테스팅 프레임워크로 CRA 시절에는 <a href=\"/?tag=Jest\">Jest</a>를 많이 썼었는데, Vite로 넘어와서는 Vite와 찰딱 궁합인 <a href=\"/?tag=Vitest\">Vitest</a>를 많이 사용합니다.</p>\n<p>자 그럼 우선 Vitest와 더불어 프론트엔드 테스팅에 필요한 <a href=\"/?tag=testingLibrary\">Testing Library</a>를 설치하겠습니다.\n두 패키지 모두 애플리케이션 실행에 필요한 의존성이 아니므로 개발 의존성으로 설치해야 합니다.</p>\n<p><a href=\"/?tag=Node.js\">Node.js</a>를 사용하는 프로젝트에서는 터미널에서 <code>npm</code> 명령어를 사용하여 Vitest를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> vitest @testing-library/react @testing-library/user-event @testing-library/jest-dom happy-dom</code></pre></div>\n<p>차세대 자바스크립트 런타임인 <a href=\"/?tag=Bun\">Bun</a>을 사용하는 프로젝트에서는 <code>bun</code> 명령어를 사용해서 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> vitest @testing-library/react @testing-library/user-event @testing-library/jest-dom happy-dom\nbun <span class=\"token function\">add</span> v1.1.22-canary.96 <span class=\"token punctuation\">(</span>df33f2b2<span class=\"token punctuation\">)</span>\n\ninstalled vitest@2.0.5 with binaries:\n - vitest\ninstalled @testing-library/react@16.0.0\ninstalled @testing-library/user-event@14.5.2\ninstalled @testing-library/jest-dom@6.4.8\ninstalled happy-dom@15.0.0\n\n<span class=\"token number\">6</span> packages installed <span class=\"token punctuation\">[</span><span class=\"token number\">568</span>.00ms<span class=\"token punctuation\">]</span></code></pre></div>\n<p>그리고 <code>vite.config.ts</code>을 열고, 테스트 환경으로 <code>happy-dom</code>을 사용하도록 설정해줍니다.</p>\n<div class=\"gatsby-code-title\">vite.config.ts</div>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">/// &lt;reference types=\"vitest\" /></span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span>\n<span class=\"token keyword\">import</span> react <span class=\"token keyword\">from</span> <span class=\"token string\">'@vitejs/plugin-react'</span>\n\n<span class=\"token comment\">// https://vitejs.dev/config/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">react</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  test<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    environment<span class=\"token operator\">:</span> <span class=\"token string\">'happy-dom'</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 <code>src</code> 폴더 안에 <code>App.test.tsx</code> 파일을 생성하고 테스트 코드를 작성하겠습니다.\n화면에 “Vite + React”라를 제목이 잘 표시되고, 버튼을 클릭하면 카운트가 증가하는지 바뀌는지 검증합니다.</p>\n<div class=\"gatsby-code-title\">src/App.test.tsx</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> expect<span class=\"token punctuation\">,</span> test <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vitest\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"@testing-library/jest-dom/vitest\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> screen<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> userEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/user-event\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"heading\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> level<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveTextContent</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"Vite + React\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"카운트는 0 입니다.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"카운트는 1 입니다.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>npx</code> 또는 <code>bunx</code> 명령어를 사용하여 Vitest로 테스트를 실행하면 통과할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx vitest\n\n DEV  v2.0.5 /Users/daleseo/Temp/vite-react\n\n ✓ src/App.test.tsx <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   ✓ App\n\n Test Files  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      Tests  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   Start at  <span class=\"token number\">10</span>:04:54\n   Duration  368ms <span class=\"token punctuation\">(</span>transform 25ms, setup 0ms, collect 137ms, tests 26ms, environment 83ms, prepare 29ms<span class=\"token punctuation\">)</span>\n\n\n PASS  Waiting <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes<span class=\"token punctuation\">..</span>.\n       press h to show help, press q to quit</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bunx vitest\n\n DEV  v2.0.5 /Users/daleseo/Temp/vite-react\n\n ✓ src/App.test.tsx <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   ✓ App\n\n Test Files  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      Tests  <span class=\"token number\">1</span> passed <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   Start at  <span class=\"token number\">10</span>:05:30\n   Duration  309ms <span class=\"token punctuation\">(</span>transform 24ms, setup 0ms, collect 96ms, tests 25ms, environment 71ms, prepare 28ms<span class=\"token punctuation\">)</span>\n\n\n PASS  Waiting <span class=\"token keyword\">for</span> <span class=\"token function\">file</span> changes<span class=\"token punctuation\">..</span>.\n       press h to show help, press q to quit</code></pre></div>\n<h2 id=\"프로덕션-빌드\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%8D%95%EC%85%98-%EB%B9%8C%EB%93%9C\" aria-label=\"프로덕션 빌드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로덕션 빌드</h2>\n<p>Vite는 프로덕션(production) 빌드(build) 시에는 Rollup을 사용하여 상용 환경에 최적화된 번들을 생성해줍니다.\n때문에 Rollup의 오래 시간 축적된 풍부한 플러그인 생태계를 그대로 누릴 수 있다는 장점이 있습니다.</p>\n<p>웹사이트를 빌드하면 우선 타입스크립트로 컴파일(compile)한 후에 프로젝트의 최상위 경로에 <code>dist</code> 폴더가 생기고 그 안에 HTML, CSS, JS 파일이 생기는데요.</p>\n<p><a href=\"/?tag=Bun\">Bun</a>을 사용하신다면 터미널에서 <code>bun run build</code> 명령어를 실행하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun run build\n$ tsc <span class=\"token parameter variable\">-b</span> <span class=\"token operator\">&amp;&amp;</span> vite build\nvite v5.4.2 building <span class=\"token keyword\">for</span> production<span class=\"token punctuation\">..</span>.\n✓ <span class=\"token number\">34</span> modules transformed.\ndist/index.html                   <span class=\"token number\">0.46</span> kB │ gzip:  <span class=\"token number\">0.30</span> kB\ndist/assets/react-CHdo91hT.svg    <span class=\"token number\">4.13</span> kB │ gzip:  <span class=\"token number\">2.05</span> kB\ndist/assets/index-DiwrgTda.css    <span class=\"token number\">1.39</span> kB │ gzip:  <span class=\"token number\">0.72</span> kB\ndist/assets/index-4HOKWW29.js   <span class=\"token number\">143.20</span> kB │ gzip: <span class=\"token number\">46.12</span> kB\n✓ built <span class=\"token keyword\">in</span> 334ms</code></pre></div>\n<p>Node.js를 쓰신다면 터미널에서 <code>npm run build</code> 명령어를 실행하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run build\n\n<span class=\"token operator\">></span> vite-react@0.0.0 build\n<span class=\"token operator\">></span> tsc <span class=\"token parameter variable\">-b</span> <span class=\"token operator\">&amp;&amp;</span> vite build\n\nvite v5.4.2 building <span class=\"token keyword\">for</span> production<span class=\"token punctuation\">..</span>.\n✓ <span class=\"token number\">34</span> modules transformed.\ndist/index.html                   <span class=\"token number\">0.46</span> kB │ gzip:  <span class=\"token number\">0.30</span> kB\ndist/assets/react-CHdo91hT.svg    <span class=\"token number\">4.13</span> kB │ gzip:  <span class=\"token number\">2.05</span> kB\ndist/assets/index-DiwrgTda.css    <span class=\"token number\">1.39</span> kB │ gzip:  <span class=\"token number\">0.72</span> kB\ndist/assets/index-4HOKWW29.js   <span class=\"token number\">143.20</span> kB │ gzip: <span class=\"token number\">46.12</span> kB\n✓ built <span class=\"token keyword\">in</span> 347ms</code></pre></div>\n<p><code>dist</code> 폴더에 생성된 번들 파일들을 그대로 상용 서버에 올리면 웹사이트가 배포가 완료되게 됩니다.\n물론 실제 프로젝트에서는 직접 올리지 않고 CI/CD 도구를 통해서 배포를 자동화하겠죠?</p>\n<h2 id=\"프로덕션-프리뷰\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%8D%95%EC%85%98-%ED%94%84%EB%A6%AC%EB%B7%B0\" aria-label=\"프로덕션 프리뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로덕션 프리뷰</h2>\n<p>Vite를 통해서 개발 서버 기준이 아닌 최종 빌드된 번들 파일들을 기준으로 웹사이트를 돌려볼 수도 있습니다.\n배포 하기 전에 상용 환경에서 웹사이트가 어떻게 보일지 로컬 환경에서 확인해보고 싶을 때 유용합니다.</p>\n<p>터미널에서 <code>bun run preview</code> 또는 <code>npm run preview</code> 명령어를 실행하면 프로덕션 프리뷰를 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun run preview\n$ vite preview\n  ➜  Local:   http://localhost:4173/\n  ➜  Network: use <span class=\"token parameter variable\">--host</span> to expose\n  ➜  press h + enter to show <span class=\"token builtin class-name\">help</span></code></pre></div>\n<p>이제 브라우저에서 <code>http://localhost:4173/</code>을 열어보면 상용 환경에서 웹사이트가 어떻게 보일지 확인할 수 있을 것입니다. 🎉</p>\n<p>참고로 아까 전에 개발 서버로 웹사이트를 띄울 때는 <code>5173</code> 포트를 사용했었는데요.\n프로덕션 프리뷰를 할 때는 포트 충돌이 나지 않도록 <code>4173</code>을 기본 포트로 사용합니다.\n참 세심한 배려죠?</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 CRA 대신에 Vite를 사용해서 어떻게 React 프로젝트를 생성하고 설정하는지에 대해서 알아보았는데요.\n사실 Vite는 비단 React 뿐만 아니라 Vue, Svelte, Lit, Solid, Qwik 등 다른 프레임워크로 프로젝트를 만들 때도 널리 사용되고 있습니다.\n따라서 한 번 익혀두면 여러모로 쓸모가 많은 기술이니 이번 기회에 잘 숙지해두셨으면 좋겠습니다.</p>\n<blockquote>\n<p>Vite 연관된 포스팅은 <a href=\"/?tag=Vite\">Vite 태그</a>를 통해서 쉽게 만나보세요!</p>\n</blockquote>","timeToRead":9,"fields":{"slug":"/vite-react/","tags":["JavaScript","TypeScript","library","ESM","Vite","CLI"]},"frontmatter":{"title":"CRA 대신에 Vite로 React 프로젝트 시작하기","date":"Aug 12, 2024"}},"next":{"fields":{"slug":"/vscode-line-editing/"},"frontmatter":{"title":"VSCode 개발 생산성을 위한 줄 편집 단축키"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}