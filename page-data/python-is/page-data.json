{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/python-is/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/web-components/"},"frontmatter":{"title":"웹 컴포넌트 (Web Components)"}},"node":{"html":"<p>파이썬에서는 객체가 같은지 확인하기 위해서 <code>is</code> 연산자와 <code>==</code> 연산자, 이렇게 두 개의 연산자를 사용합니다.\n이 두 연산자의 차이점을 정확히 이해하지 않고 잘못 쓰시면 큰 낭패를 보실 수 잇는데요.</p>\n<p>이번 포스팅에서는 <code>is</code> 연산자와 <code>==</code> 연산자의 차이점에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"is-연산자---연산자\" style=\"position:relative;\"><a href=\"#is-%EC%97%B0%EC%82%B0%EC%9E%90---%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"is 연산자   연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>is 연산자 🆚 == 연산자</h2>\n<p>파이썬에서 <code>is</code> 연산자는 두 개의 객체가 메모리 상에서 같은 위치에 있는지 확인할 때 사용하는 연산자입니다.</p>\n<p>예를 들어, 숫자나 문자 간에 <code>is</code> 연산자로 비교해보면 참이 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1</span>\n<span class=\"token boolean\">True</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'a'</span> <span class=\"token keyword\">is</span> <span class=\"token string\">'a'</span>\n<span class=\"token boolean\">True</span></code></pre></div>\n<p>하지만, <a href=\"/python-list/\">리스트</a>나 <a href=\"/python-dictionary/\">사전</a>을 <code>is</code> 연산자로 비교해보면 거짓이 나오는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token boolean\">False</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">is</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token boolean\">False</span></code></pre></div>\n<p>그런데 <code>is</code> 연산자 대신에 <code>==</code> 연산자를 쓰면 참이 나오죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token boolean\">True</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token boolean\">True</span></code></pre></div>\n<p>이를 통해서 <code>is</code> 연산자를 쓰면 원치않는 결과를 얻을 수 있다는 것을 알 수 있습니다.</p>\n<p><code>is</code> 연산자와 <code>==</code> 연산자의 결과에서 왜 이러한 차이가 생길까요? 🤔</p>\n<h2 id=\"동일성과-동등성\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9D%BC%EC%84%B1%EA%B3%BC-%EB%8F%99%EB%93%B1%EC%84%B1\" aria-label=\"동일성과 동등성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동일성과 동등성</h2>\n<p>다른 프로그래밍 언어처럼 파이썬에도 동일성(Identity)와 동일성(Equality) 개념이 있는데요.\n동일성은 두 객체의 메모리 주소가 같음을 의미하고, 동일성은 두 객체의 값이 같음을 의미합니다.\n그런데 사실 엄밀히 얘기해서 동일성은 해당 객체의 <code>__eq__()</code> 메서드의 구현에 달려 있습니다.</p>\n<p>좀 극단적인 예로, <code>__eq__()</code> 메서드가 항상 참을 반환하도록 클래스를 하나 작성해볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AlwaysEqual</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>그리고 이 클래스의 객체를 하나 생성해보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> ae <span class=\"token operator\">=</span> AlwaysEqual<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>==</code> 연산자를 사용해서 이 객체를 다른 어떤 객체와 동등성 비교를 해도 결과가 참이 나오는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> ae <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ae <span class=\"token operator\">==</span> <span class=\"token string\">'a'</span>\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ae <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ae <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ae <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span>\n<span class=\"token boolean\">True</span></code></pre></div>\n<p>하지만 이 클래스로 새로운 객체 2개를 생성해서 <code>is</code> 연산자로 동일성 비교를 해보면 거짓이 나오는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> ae1<span class=\"token punctuation\">,</span> ae2 <span class=\"token operator\">=</span> AlwaysEqual<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> AlwaysEqual<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ae1 <span class=\"token keyword\">is</span> ae2\n<span class=\"token boolean\">False</span></code></pre></div>\n<p>즉, 이 두 객체는 메모리 상에서 서로 다른 위치에 있다는 얘기인데요.\n정확한 주소를 확인하시려면 각 객체를 상대로 파이썬의 내장 함수인 <code>id()</code>를 호출해보면 됩니다.\n(실제 메모리 주소는 저와 다르실 것 입니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>ae1<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4334519952</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>ae2<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4334520144</span></code></pre></div>\n<p>이번에는 객체를 생성해서 <code>ae1</code> 변수에 먼저 할당하고, <code>ae1</code> 변수에 할당되어 있는 객체를 <code>ae2</code> 변수에 할당해볼까요?\n이 두 변수를 <code>is</code> 연산자로 동일성 비교를 해보면 참이 나오는 것을 볼 수 잇습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> ae1 <span class=\"token operator\">=</span> AlwaysEqual<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ae2 <span class=\"token operator\">=</span> ae1\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ae1 <span class=\"token keyword\">is</span> ae2\n<span class=\"token boolean\">True</span></code></pre></div>\n<p>즉, 이 두 변수는 메모리 상에서 동일한 위치에 있는 객체를 가리키고 있다는 뜻입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>ae1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">4334520336</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>ae2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">4334520336</span></code></pre></div>\n<p>정확히 이해하셨는지 확인하기 위해서 마지막으로 한 가지 예를 더 들어볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b <span class=\"token operator\">=</span> a\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>이 3개의 리스트는 모두 같은 값을 갖기 때문에 <code>==</code> 연산자로 동등성 비교를 하면 모두 참이 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">==</span> b\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">==</span> c\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> c <span class=\"token operator\">==</span> a\n<span class=\"token boolean\">True</span></code></pre></div>\n<p>하지만 <code>is</code> 연산자로 동일성 비교를 하면 <code>a</code>와 <code>b</code> 간에만 참입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token keyword\">is</span> b\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b <span class=\"token keyword\">is</span> c\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> c <span class=\"token keyword\">is</span> a\n<span class=\"token boolean\">False</span></code></pre></div>\n<p>이해를 돕기 위해서 메모리의 모습을 시각화해보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">a → <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>주소<span class=\"token punctuation\">:</span> <span class=\"token number\">4334416064</span><span class=\"token punctuation\">)</span>\n  ↗\nb\n\nc → <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>주소<span class=\"token punctuation\">:</span> <span class=\"token number\">4334416960</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"언제-어떤-연산자를-써야할까\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%A0%9C-%EC%96%B4%EB%96%A4-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%EC%8D%A8%EC%95%BC%ED%95%A0%EA%B9%8C\" aria-label=\"언제 어떤 연산자를 써야할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언제 어떤 연산자를 써야할까?</h2>\n<p>코딩을 할 때 우리는 객체의 메모리 주소에 대해서 크게 관심이 없죠?\n하지만 객체의 값이 동일한지를 비교해야 할 때는 잦습니다.\n그렇기 때문에 <code>==</code> 연산자를 사용해야 하는 경우가 대부분입니다.</p>\n<p>하지만 PEP 8 스타일 가이드는 <code>True</code>, <code>False</code>, <code>None</code>과 비교할 때는 <code>is</code> 연산자를 쓰도록 권고합니다.\n왜냐하면 이 3개의 특수 객체는 항상 고정된 메모리 주소를 갖기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token keyword\">is</span> b\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4343746864</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4343746864</span></code></pre></div>\n<p>그렇다고 해서 <code>==</code> 연산자를 썼을 때 <code>is</code> 연산자를 썼을 때와 결과가 다르게 나오는 것은 아닙니다.\n단지 <code>is</code> 연산자를 사용하면 메모리 주소를 바로 비교하기 때문에 효율적이고 코드 가독성이 좋아집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">==</span> b\n<span class=\"token boolean\">True</span></code></pre></div>\n<p>린터(linter)를 쓰시다면 <code>is</code> 연산자를 써야하는 상황에서 <code>==</code> 연산자를 사용하면 다음과 같은 경고나 오류를 보실 수 있으실 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">E711 comparison to <span class=\"token boolean\">None</span> should be <span class=\"token string\">'if cond is None:'</span></code></pre></div>\n<p>특히, <code>if</code> 조건문 내에서 <code>==</code> 연산자로 <code>True</code>랑 비교하는 경우가 종종 볼 수 있는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># E712 comparison to True should be 'if cond is True:' or 'if cond:'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x is True'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 것보다는 <code>is</code> 연산자를 쓰는 게 좋고요</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> x <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x is True'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그냥 <code>if</code> 절 안에 변수만 놓으면 더 파이썬다운(Pythonic) 간단명료한 코드가 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x is True'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>같은 이치로 <code>False</code>와 비교할 때도 <code>not</code> 연산자를 활용하는 것이 좋겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># E712 comparison to False should be 'if cond is False:' or 'if not cond:'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> y <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y is False'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> y <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y is False'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> y<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y is False'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 <code>is</code> 연산자와 <code>==</code> 연산자가 어떻게 다르고 각 연산자를 언제 사용해야되는지에 대해서 알아보았습니다.\n객체가 동일한 메모리 주소를 참조하는지를 알아내야 할 때는 <code>is</code> 연산자를 사용해야하고, 객체의 값이나 <code>__eq__()</code> 메서드의 호출 결과를 기준으로 비교하려고 할 때는 <code>==</code> 연산자를 사용해야 합니다.</p>","timeToRead":5,"fields":{"slug":"/python-is/","tags":["Python","is","id"]},"frontmatter":{"title":"파이썬의 is 연산자와 == 연산자","date":"Aug 26, 2024"}},"next":{"fields":{"slug":"/vscode-command-palette/"},"frontmatter":{"title":"VSCode의 꽃 Command Palette 활용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}