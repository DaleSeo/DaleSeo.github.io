{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-hisotry-api/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>URL이 바뀔 때 마다 새로운 페이지를 서버로 요청하지 않는 SPA(Single Page Application)에서는 보통 클라이언트 단에서 라우팅(routing)을 하는데요.\n그래서 React, Svelte, Vue.js와 같은 대부분의 프론트엔드 프레임워크을 사용할 때는 이러한 클라이언트 단 라우팅을 지원하는 라이브러리와 함께 쓰는 경우가 많습니다.</p>\n<p>그런데 이러한 라우팅 라이브러리는 대부분은 내부적으로 자바스크립트의 History API를 사용하고 있다는 것을 알고 계셨나요?\n이번 글에서는 클라이언트 단 라우팅을 이해하는데 핵심적인 자바스크립트의 History API에 대해서 알아보겠습니다.</p>\n<h2 id=\"history-api란\" style=\"position:relative;\"><a href=\"#history-api%EB%9E%80\" aria-label=\"history api란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>History API란?</h2>\n<p>History API는 브라우저가 관리하는 세션 히스토리(session history), 즉 페이지 방문 이력을 제어하기 위한 웹 표준 API 입니다.\n여기서 세션은 브라우저마다 살짝 다를 수 있지만 보통 사용자가 새 창이나 탭을 열 때 생성되고 해당 창이나 탭을 닫을 때 소멸합니다.</p>\n<p>지금 이 포스팅을 보고 계신 브라우저에서 새 탭을 열어보시면 “뒤로 가기”와 “앞으로 가기” 버튼이 비활성화 되어 있을텐데요.\n이 것은 현재 세션 히스토리가 비어있다는 뜻이고 방문 이력을 하나도 없기 때문에 뒤로 가거나 앞으로 갈 페이지가 없다는 뜻입니다.</p>\n<p>자바스크립트에서 History API는 기본적으로 <code>history</code> 전역 객체를 통해서 사용해 볼 수 있으며 <code>window</code>나 <code>document</code> 전역 객체를 통해서도 접근할 수 있습니다.\n예를 들어서, 현재 세션에서 얼마나 많은 페이지를 방문했는지 알고 싶다면 다음과 같이 History API에서 제공하는 <code>length</code> 프로퍼티에 접근하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">history<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nwindow<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\ndocument<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<p>여러 페이지를 방문 후에 <code>history.length</code>를 확인해보시면 더 큰 숫자를 확인하실 수 있으실 겁니다.</p>\n<h2 id=\"히스토리-내-페이지-이동\" style=\"position:relative;\"><a href=\"#%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC-%EB%82%B4-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99\" aria-label=\"히스토리 내 페이지 이동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>히스토리 내 페이지 이동</h2>\n<p>History API가 제공하는 가장 기본적인 기능은 히스토리에 기록된 페이지 방문 이력을 따라 이동하는 것입니다.\n쉽게 말해서 사용자가 브라우저에서 뒤로 가기나 앞으로 가기를 하는 행위를 자바스크립트로 대신 해줄 수 있다고 생각하시면 될 것 같습니다.</p>\n<p>뒤로 가기 효과를 내고 싶다면 <code>back()</code> 메서드를 호출하면 되고, 앞으로 가기 효과를 내고 싶다면 <code>forward()</code> 메서드를 호출하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 뒤로 가기</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 앞으로 가기</span></code></pre></div>\n<p>History API에는 <code>go()</code>라는 <code>back()</code>과 <code>forward()</code>를 모두 대체할 수 있는 좀 더 범용적인 메서드도 있는데요.\n이 메서드는 정수를 인자로 받는데, <code>0</code>을 인자로 넘기면 현재 페이지를 새로 고침하는 효과가 납니다.\n인자로 음수를 넘기면 그 만큼 뒤로 가기가 되고 반대로 인자로 양수를 넘기마녀 그 만큼 앞으로 가기가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 뒤로 2번 가기</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 뒤로 1번 가기</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새로 고침</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 앞으로 1번 가기</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 앞으로 2번 가기</span></code></pre></div>\n<p>그런데 <code>history.back()</code>, <code>history.forward()</code>, <code>history.go()</code> 메서드는 SPA에서 잘 사용되지 않습니다.\n왜냐하면 이 3개의 메서드를 호출하면 브라우저는 해당 페이지를 리로드(reload)하게 되는데요.\n서문에서 말씀드렸듯이 SPA에서는 일반적으로 URL이 바뀌더라도 전체 페이지를 다시 로딩하지 않기 때문입니다.\n대신 업데이트가 필요한 부분만 클라이언트에서 다시 그리죠.</p>\n<h2 id=\"브라우저의-현재-url-조작\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%ED%98%84%EC%9E%AC-url-%EC%A1%B0%EC%9E%91\" aria-label=\"브라우저의 현재 url 조작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저의 현재 URL 조작</h2>\n<p>History API는 브라우저의 현재 URL 조작할 수 있도록 <code>pushState()</code>와 <code>replaceState()</code> 메서드를 제공하는데요.\n위에서 다룬 실제로 페이지가 이동하는 메서드와 다르게 이 2개의 메서드는 브라우저 주소 표시줄의 URL만 갱신되고 실제로 해당 페이지가 다시 불러오지는 않습니다.</p>\n<p>이러한 특징 때문에 <code>pushState()</code>와 <code>replaceState()</code> 메서드는 클라이언트 단 라우팅에서 핵심적인 역할을 하게 되는데요.\n왜냐하면 브라우저가 서버로 페이지를 재요청하지 않고 URL만 바꿔주니, 이 때 자바스크립트로 해당 URL에 맞게 페이지를 부분 업데이트할 수 있기 때문이죠.</p>\n<p>이 두 개의 메서드는 3개의 인자를 받으며 API가 직관적이지 않기로 악명이 높은데요.\n우선 첫 번째 인자는 이 URL에 연관된 상태 객체를 넘길 수 있습니다.\n이 상태 객체에 대한 부분은 다음 섹션에서 다룰 <code>PopState</code> 이벤트에 대해서 설명드릴 때 좀 더 알아보기로 하고요.</p>\n<p>두 번째 인자는 하위 호환성을 위해서 존재하나 현재는 사용되지 않기 때문에 그냥 빈 문자열을 넘기면 되고요.\n비로서 마지막 세 번째 인자에 변경할 URL을 넘길 수 있으면 절대 경로 상대 경로 모두 사용이 가능합니다.\n단, 보안상의 이유로 다른 출처(origin), 즉, 프로토콜, 호스트네임, 포트가 다른 URL을 사용할 수 없습니다.</p>\n<p><code>pushState()</code> 메서드와 <code>replaceState()</code> 메서드는 이름에서도 유추가 되듯이 세션 히스토리를 변경하는 방식에서 중요한 차이점이 있는데요.</p>\n<p><code>pushState()</code>는 인자로 넘어온 URL을 현재 페이지의 바로 다음 방문 기록으로 추가하고, 그 이후의 방문 이력을 있다면 모두 지워버립니다.\n따라서, <code>pushState()</code> 메서드를 호출 전과 호출 후를 도식화해보면 다음과 같은 모습이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// a -> b -> c -> d -> e</span>\n<span class=\"token comment\">//      👆 현재 페이지</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a -> b -> x</span>\n<span class=\"token comment\">//           👆 현재 페이지</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a -> b -> x</span>\n<span class=\"token comment\">//      👆 현재 페이지</span></code></pre></div>\n<p><code>pushState()</code> 메서드를 호출하면 원래 페이지는 이전 페이지로 보존이 되고 인자로 넘긴 URL이 현재 페이지가 됩니다.\n따라서 사용자가 브라우저에서 “뒤로 가기” 버튼을 눌러서 원래 페이지로 돌아가능 것이 가능합니다.\n하지만 “앞으로 가기” 버튼은 비활성화될 것입니다.</p>\n<p>반면에 <code>replaceState()</code>는 인자로 넘어온 URL로 현재 페이지를 완전히 덮어 써버리죠.\n대신에 현재 페이지 다음에 있는 방문 이력은 건들지 않습니다.\n마찬가지로 도식화를 해보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// a -> b -> c -> d -> e</span>\n<span class=\"token comment\">//      👆 현재 페이지</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a -> x -> c -> d -> e</span>\n<span class=\"token comment\">//      👆 현재 페이지</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a -> x -> c -> d -> e</span>\n<span class=\"token comment\">// 👆 현재 페이지</span></code></pre></div>\n<p><code>replaceState()</code> 메서드를 호출하면 원래 페이지가 인자로 넘긴 URL로 대체가 됩니다.\n따라서 사용자가 브라우저에서 “뒤로 가기” 버튼을 누르면 원래 페이지의 이전 페이지로 이동하게 됩니다.\n하지만 “앞으로 가기” 버튼을 누르면 여전히 다음 페이지로 이동할 수 있습니다.</p>\n<p>보사다시피 API가 직관적이지 않기 때문에 대부분의 라우팅 라이브러리는 이 부분을 깔끔하게 추상화시켜주고 있습니다.\n예를 들어, React Router v6 이전에는 <code>push()</code>와 <code>replace()</code>라는 메서드를 통해서 URL을 첫 번째 인자로 받고, 상태 객체를 두 번째 인자로 받았으며,\nReact Router v6부터는 <code>navigate()</code>라는 통합된 메서드를 통해서 <code>push</code> 또는 <code>replace</code> 여부를 옵션 인자로 받고 있습니다.</p>\n<h2 id=\"popstate-이벤트\" style=\"position:relative;\"><a href=\"#popstate-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"popstate 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PopState 이벤트</h2>\n<p>History API의 <code>pushState()</code> 또는 <code>replaceState()</code> 메서드를 사용하면 페이지 리로딩 없이 URL만 갱신함으로써 클라이언트 단에서 기본적인 라우팅이 가능해지는데요.\n사용자가 브라우저에서 뒤로 가기나 앞으로 가기를 하면 어떻게 될까요?\n이 때는 <code>back()</code>이나 <code>forward()</code> 메서드를 호출한 것처럼 브라우저가 페이지를 다시 불러오겠죠?\n그러면 SPA에서는 분명히 문제가 될 수 있을 것입니다.</p>\n<p>여기서 중요한 부분은 “뒤로 가기”나 “앞으로 가기” 버튼은 보통 브라우저의 주소 표시줄 좌측에 위치하잖아요?\n즉, 우리가 통제할 수 있는 페이지 상 밖에 있으며, 따라서 기본적으로 페이지 상에 있는 일반적인 버튼처럼 클릭(click) 이벤트를 감지할 수는 없습니다.</p>\n<p>이 재미있는 문제를 해결해주는 것이 바로 History API의 <code>PopStateEvent</code> 인데요.\n이 이벤트는 사용자가 브라우저에서 뒤로 가기나 앞으로 가기를 할 때 <code>window</code> 전역 객체에서 발생합니다.\n그러므로 우리는 자바스크립트로 이벤트 핸들러를 걸어서, 해당 URL에 부합하는 내용을 클라이언트에서 그려줄 수 있게 됩니다.</p>\n<p>이것이 바로 <code>pushState()</code> 또는 <code>replaceState()</code> 메서드가 첫 번째 인자로 상태 객체를 받는 결정적인 이유입니다.\n<code>PopStateEvent</code>를 처리하는 핸들러 함수의 매개 변수로 이 상태 객체가 넘어오기 때문에 우리는 이 것을 읽어서 적절한 처리를 할 수가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"popstate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이벤트에 들어 있는 상태 객체를 읽어서 클라이언트 단 라우팅 처리</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"클라이언트-단-라우팅-직접-구현해보기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EB%8B%A8-%EB%9D%BC%EC%9A%B0%ED%8C%85-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"클라이언트 단 라우팅 직접 구현해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트 단 라우팅 직접 구현해보기</h2>\n<p>지금까지 배운 History API를 사용해서 직접 클라이언트 단 라우팅을 구현해보면 어떨까요?</p>\n<p>우선 네비게이션을 위한 3개의 <code>&#x3C;button></code> 요소와 <code>&#x3C;h1></code> 요소로 이루어진 간단한 HTML 코드를 작성히겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>home<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>About<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>contact<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Contact<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>HOME<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그 다음 자바스크립트로 클라이언트 단에서 라우팅을 처리하기 위한 함수를 작성할께요.\n이 <code>route()</code> 함수는 상태 객체를 인자로 받고, 상태 객체 안에 담겨있는 <code>path</code>(경로) 속성을 읽어서 대문자로 변환한 후 <code>&#x3C;h1></code> 요소의 내용으로 설정합니다.\n따라서 이 함수를 호출하면 HTML에서 <code>&#x3C;h1></code> 요소의 내용이 바뀌는 효과가 나겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> h1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  h1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 3개의 버튼에 클릭 이벤트 핸들러를 설정해줄 차례인데요.\n사용자가 각 버튼을 클릭하면 브라우저의 주소 표시줄의 URL이 바뀔 수 있도록 <code>history.pushState()</code> 메서드를 호출해줍니다.\n첫 번째 인자에는 경로 정보가 담겨있는 상태 객체를 넘기고, 세 번째 인자로는 브라우저의 주소 표시줄에 표시할 경로를 문자열로 넘김니다.\n마지막으로 위에서 작성한 <code>route()</code> 함수에 동일한 상태 객체를 넘겨서 <code>&#x3C;h1></code> 요소의 내용이 바뀌게 해주겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"home\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"about\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"contact\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> path <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">route</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기까지만 해주면 사용자가 버튼을 클릭할 때는 <code>&#x3C;h1></code> 요소의 내용이 잘 변경이 될 거에요.\n하지만 브라우저에서 뒤로 가기나 앞으로 가기를 해보면 주소 표시줄의 URL만 바뀌고 <code>&#x3C;h1></code> 요소의 내용은 그대로 변하지 않을 것입니다.</p>\n<p>이 문제를 해결하기 위해서 윈도우에서 발생하는 <code>popstate</code> 이벤트를 감지해서 라우팅 처리해줄 건데요.\n위에서 <code>history.pushState()</code> 첫 번째 인자로 상태 객체를 넘겨주었기 때문에, 해당 페이지로 뒤로 가기나 앞으로 가기가 되면, 이벤트 핸들러에 매개 변수로 해당 상태 객체가 넘어오게 됩니다.\n따라서 우리는 이 상태 객체를 그대로 <code>route()</code> 함수에 인자로 넘겨주기만 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"popstate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">route</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>실제로 웹 개발에 많이 쓰이고 있는 라우팅 라이브러리의 코드를 읽어보시면 대부분 이러한 메커니즘으로 구현되어 있다는 것을 확인해보실 수 있으실 것입니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 코드는 아래에서 확인하고 직접 실행해보실 수 있습니다.\n코드펜에 들어가셔서 “Debug mode”에 들어가시면 실제로 브라우저의 주소 표시줄에서 URL이 변경되는 것 까지 볼 수 있으실 겁니다.</p>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"js-history-api-2\" src=\"https://codepen.io/daleseo/embed/JjwPBwv?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/daleseo/pen/JjwPBwv\">\n  js-history-api-2</a> by Dale Seo (<a href=\"https://codepen.io/daleseo\">@daleseo</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 자바스크립트의 History API가 클라이언트 단 라우팅을 구현하는데 어떻게 활용될 수 있는지 살펴보고 간단한 실습도 진행해보았습니다.</p>\n<p>실제 애플리케이션을 개발하실 때는 이미 많은 프로젝트에서 검증이 된 유명한 라우팅 라이브러리를 사용하실테니 이렇게 직접 라우팅을 구현할 일은 없으실 것입니다.\n하지만 라우팅 라이브러리가 내부적으로 어떻게 동작하시는지 이해하신다면 버그가 생겼을 때 디버깅이 용이해지고 나중에 다른 프론트엔드의 라우팅 라이브러리를 배울 때도 큰 도움이 될 것입니다.</p>","timeToRead":7,"fields":{"slug":"/js-hisotry-api/","tags":["JavaScript","Web","API","SPA","history"]},"frontmatter":{"title":"자바스크립트의 History API와 클라이언트 단 라우팅","date":"Aug 18, 2023"}},"next":{"fields":{"slug":"/js-array-concat/"},"frontmatter":{"title":"자바스크립트 배열 합치기: concat() 메서드, spread 연산자"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}