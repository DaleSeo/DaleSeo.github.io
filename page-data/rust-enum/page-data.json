{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/rust-enum/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/rust-from-into/"},"frontmatter":{"title":"Rust 기초: From과 Into 트레잇"}},"node":{"html":"<p>Rust에서 <a href=\"/rust-struct/\">구조체</a>가 데이터 구조를 표현하는 방법라면, 열거형은 선택지를 추상화하는데 특화된 자료형입니다.</p>\n<p>이 글에서는 Rust에서 열거형이 무엇이고 어떻게 사용하는지 예제와 함께 살펴보겠습니다.</p>\n<h2 id=\"열거형이란\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0%ED%98%95%EC%9D%B4%EB%9E%80\" aria-label=\"열거형이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거형이란?</h2>\n<p>열거형(Enum)은 여러 가지 가능한 값(variant) 중 하나만 가질 수 있는 사용자 정의(custom) 자료형(type)입니다.\n<code>enum</code> 키워드로 열거형의 이름을 붙이고, 중괄호 안에 모든 배리언트 이름을 나열하면 됩니다.</p>\n<p>예를 들어, 웹에서 발생할 수 있는 4가지 이벤트로 이루어진 열거형으로 다음과 같이 정의할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Event</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Click</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Focus</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Input</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> click <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Click</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> focus <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Focus</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Input</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>열거형의 배리언트는 <code>열거형명::배리언트명</code> 형식으로 접근할 수 있습니다.</p>\n<h2 id=\"데이터-할당\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%A0%EB%8B%B9\" aria-label=\"데이터 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 할당</h2>\n<p>열거형의 각 배리언트는 단순한 이름이 아닌 구조체나 튜플의 형태로 정의할 수도 있는데요.\n이렇게 하면 배리언트에 부가적인 데이터를 저장할 수 있게 되지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Event</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Click</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Focus</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Input</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> click <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Click</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> focus <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Focus</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Input</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"패턴-매칭\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%84%B4-%EB%A7%A4%EC%B9%AD\" aria-label=\"패턴 매칭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴 매칭</h2>\n<p>Rust에서 열거형은 패턴 매칭(Pattern Matching)을 통해서 그 진가를 발휘합니다.\n<code>match</code> 문을 통해서 각 베리언트에 해당하는 코드를 효과적으로 분기 처리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">handle</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> event <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Click</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"좌표 ({x}, {y})를 클릭했습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Focus</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포커스가 이동했습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Input</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{text}를 입력하였습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"키보드 키 {ch}를 눌렀습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>배리언트에 저장되어 있는 부가적인 데이터는 배리언트는 구조 분해 할당(Destructuring)을 통해서 읽어올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> click <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Click</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> focus <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Focus</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Input</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>click<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>focus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">좌표 <span class=\"token punctuation\">(</span><span class=\"token number\">30</span>, <span class=\"token number\">70</span><span class=\"token punctuation\">)</span>를 클릭했습니다.\n포커스가 이동했습니다.\nHello를 입력하였습니다.\n키보드 키 A를 눌렀습니다.</code></pre></div>\n<h2 id=\"메서드-추가\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B6%94%EA%B0%80\" aria-label=\"메서드 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드 추가</h2>\n<p>열거형을 이루고 있는 배리언트를 상대로 빈번하게 수행해야 하는 작업은 열거형에 메서드로 추가할 수 있습니다.</p>\n<p><code>impl</code> 키워드로 대상 열거체의 이름을 명시하고, 중괄호 안에 메서드를 일반 함수 정의하듯이 나열해주면 됩니다.\n메서드 안에서 인스턴스의 필드에 접근할 수 있도록, 첫 번째 매개변수인 <code>self</code>를 통해서 인스턴스 자신이 넘어오게 되어있습니다.</p>\n<p>예를 들어, 위에서 작성한 <code>handle()</code> 함수를 <code>Event</code> 열거형에 메서드로 추가해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Click</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"좌표 ({x}, {y})를 클릭했습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Focus</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"포커스가 이동했습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Input</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{text}를 입력하였습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"키보드 키 {ch}를 눌렀습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러면 이렇게 열거형의 베리언트를 상대로 메서드를 호출할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> click <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Click</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> focus <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Focus</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Input</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    click<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    focus<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    input<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    key<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 실습 코드는 <a href=\"https://play.rust-lang.org/?version=stable&#x26;mode=debug&#x26;edition=2024&#x26;code=enum+Event+%7B%0A++++Click+%7B+x%3A+i32%2C+y%3A+i32+%7D%2C%0A++++Focus%2C%0A++++Input%28String%29%2C%0A++++Keyboard%28char%29%2C%0A%7D%0A%0Aimpl+Event+%7B%0A++++fn+handle%28%26self%29+%7B%0A++++++++match+self+%7B%0A++++++++++++Event%3A%3AClick+%7B+x%2C+y+%7D+%3D%3E+println%21%28%22%EC%A2%8C%ED%91%9C+%28%7Bx%7D%2C+%7By%7D%29%EB%A5%BC+%ED%81%B4%EB%A6%AD%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4.%22%29%2C%0A++++++++++++Event%3A%3AFocus+%3D%3E+println%21%28%22%ED%8F%AC%EC%BB%A4%EC%8A%A4%EA%B0%80+%EC%9D%B4%EB%8F%99%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4.%22%29%2C%0A++++++++++++Event%3A%3AInput%28text%29+%3D%3E+println%21%28%22%7Btext%7D%EB%A5%BC+%EC%9E%85%EB%A0%A5%ED%95%98%EC%98%80%EC%8A%B5%EB%8B%88%EB%8B%A4.%22%29%2C%0A++++++++++++Event%3A%3AKeyboard%28ch%29+%3D%3E+println%21%28%22%ED%82%A4%EB%B3%B4%EB%93%9C+%ED%82%A4+%7Bch%7D%EB%A5%BC+%EB%88%8C%EB%A0%80%EC%8A%B5%EB%8B%88%EB%8B%A4.%22%29%2C%0A++++++++%7D%0A++++%7D%0A%7D%0A%0Afn+handle%28event%3A+%26Event%29+%7B%0A++++match+event+%7B%0A++++++++Event%3A%3AClick+%7B+x%2C+y+%7D+%3D%3E+println%21%28%22%EC%A2%8C%ED%91%9C+%28%7Bx%7D%2C+%7By%7D%29%EB%A5%BC+%ED%81%B4%EB%A6%AD%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4.%22%29%2C%0A++++++++Event%3A%3AFocus+%3D%3E+println%21%28%22%ED%8F%AC%EC%BB%A4%EC%8A%A4%EA%B0%80+%EC%9D%B4%EB%8F%99%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4.%22%29%2C%0A++++++++Event%3A%3AInput%28text%29+%3D%3E+println%21%28%22%7Btext%7D%EB%A5%BC+%EC%9E%85%EB%A0%A5%ED%95%98%EC%98%80%EC%8A%B5%EB%8B%88%EB%8B%A4.%22%29%2C%0A++++++++Event%3A%3AKeyboard%28ch%29+%3D%3E+println%21%28%22%ED%82%A4%EB%B3%B4%EB%93%9C+%ED%82%A4+%7Bch%7D%EB%A5%BC+%EB%88%8C%EB%A0%80%EC%8A%B5%EB%8B%88%EB%8B%A4.%22%29%2C%0A++++%7D%0A%7D%0A%0Afn+main%28%29+%7B%0A++++let+click+%3D+Event%3A%3AClick+%7B+x%3A+30%2C+y%3A+70+%7D%3B%0A++++let+focus+%3D+Event%3A%3AFocus%3B%0A++++let+input+%3D+Event%3A%3AInput%28String%3A%3Afrom%28%22Hello%22%29%29%3B%0A++++let+key+%3D+Event%3A%3AKeyboard%28%27A%27%29%3B%0A++++%0A++++click.handle%28%29%3B%0A++++focus.handle%28%29%3B%0A++++input.handle%28%29%3B%0A++++key.handle%28%29%3B%0A++++%0A++++handle%28%26click%29%3B%0A++++handle%28%26focus%29%3B%0A++++handle%28%26input%29%3B%0A++++handle%28%26key%29%3B%0A%7D%0A\">Rust Playgrond</a> 확인하시고 직접 실행해보실 수 있습니다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>Rust의 열거형은 선택지가 정해진 자료형을 정의하고 부가적인 데이터까지 저장할 수 있는 풍부한 추상화 수단입니다.\n특히 Rust의 패턴 매칭과 함께 활용하먄 매우 강력한 표현력을 갖추게 되죠.</p>","timeToRead":6,"fields":{"slug":"/rust-enum/","tags":["Rust"]},"frontmatter":{"title":"Rust 기초: 열거형(Enum) 사용법","date":"Jul 1, 2025"}},"next":{"fields":{"slug":"/rust-struct/"},"frontmatter":{"title":"Rust 기초: 구조체 (Structure) 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}