{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-apollo-remote-schemas/","result":{"pageContext":{"previous":{"fields":{"slug":"/graphql-react-apollo-hooks/"},"frontmatter":{"title":"[GraphQL/React] Apollo Hooks 소개/사용법"}},"node":{"html":"<p><a href=\"/graphql-apollo-link-schema\">지난 포스트</a>에서 <code>SchemaLink</code>를 이용하여 서버 없이 클라이언트에서 GraphQL API를 호출하는 방법에 대해서 알아보았습니다.\n이번 포스트에서는 로컬에서 직접 스키마를 작성하지 않고 원격 서버로 부터 스키마를 가져오는 몇 가지 방법에 대해서 알아보겠습니다.</p>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<p>예제 프로젝트에서 필요한 GraphQL과 Apollo Client 관련 패키지를 설치하고 시작하겠습니다.\n여기서 <code>graphql-tools</code> 패키지가 가장 중요한데, 스키마 생성을 위해 <code>makeExecutableSchema()</code>, <code>introspectSchema()</code>, <code>addMockFunctionsToSchema()</code>와 같은 함수를 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i apollo-client apollo-cache-inmemory apollo-link-http apollo-link-schema graphql graphql-tag graphql-tools</code></pre></div>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &quot;dependencies&quot;: {\n    &quot;apollo-cache-inmemory&quot;: &quot;1.6.3&quot;,\n    &quot;apollo-client&quot;: &quot;2.6.4&quot;,\n    &quot;apollo-link-http&quot;: &quot;1.5.15&quot;,\n    &quot;apollo-link-schema&quot;: &quot;1.2.3&quot;,\n    &quot;graphql&quot;: &quot;14.4.2&quot;,\n    &quot;graphql-tag&quot;: &quot;2.10.1&quot;,\n    &quot;graphql-tools&quot;: &quot;4.0.5&quot;\n  }</code></pre></div>\n<h2 id=\"원격-서버의-graphql-api-호출\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EA%B2%A9-%EC%84%9C%EB%B2%84%EC%9D%98-graphql-api-%ED%98%B8%EC%B6%9C\" aria-label=\"원격 서버의 graphql api 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원격 서버의 GraphQL API 호출</h2>\n<p>일반적으로 HTTP 프로토콜을 통해서 원격에 있는 서버로 Graph API를 호출할 때는 서버의 주소(uri)만 알면 됩니다.\n<code>createHttpLink()</code> 함수에 서버 주소를 인자로 넘겨 호출하면 <code>HttpLink</code> 객체가 리턴되고, 이 <code>HttpLink</code> 객체를 <code>ApolloClient()</code> 생성자에 넘기면 됩니다.</p>\n<p>예를 들어, 인터넷에 공개된 GraphQL API를 사용해서 대륙 데이터를 조회하는 쿼리를 호출해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-client\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InMemoryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-cache-inmemory\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createHttpLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-http\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    link<span class=\"token operator\">:</span> <span class=\"token function\">createHttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> <span class=\"token string\">\"https://countries.trevorblades.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    query<span class=\"token operator\">:</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      query {\n        continents {\n          code\n          name\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'continents:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>continents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 실행해보면 해당 서버와 연동하여 다음과 같이 7개 대륙의 데이터가 출력되는 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">continents:\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"AF\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Africa\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"AN\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Antarctica\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"AS\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Asia\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"EU\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Europe\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"NA\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"North America\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"OC\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Oceania\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span>,<span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"SA\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"South America\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"원격-서버로-부터-스키마-조회\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EA%B2%A9-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B6%80%ED%84%B0-%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%A1%B0%ED%9A%8C\" aria-label=\"원격 서버로 부터 스키마 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원격 서버로 부터 스키마 조회</h2>\n<p>클라이언트 단에서 서버에서 정의한 GraphQL 스키마를 모킹해야할 때가 종종 있습니다.\n대표적인 예로 서버 단에서 API 구현이 완료되지 않은 상황에서 클라이언트 개발을 진행해야할 경우가 있겠습니다.</p>\n<p>서버에서 스키마를 조회할 때는 <code>createHttpLink()</code> 함수를 서버 주소를 인자로 넘겨 호출하면 <code>HttpLink</code> 객체를 얻습니다.\n그 다음, <code>graphql-tools</code> 패키지에서 제공하는 <code>introspectSchema()</code> 함수에 이 <code>HttpLink</code> 객체를 인자로 넘겨 호출합니다.</p>\n<p>여기서, 이 <code>schema</code> 객체는 타입 정의(typeDefs)만 가지고 리졸버(resolvers)를 가지고 있지 않기 때문에, 모킹 리졸버 객체인 <code>mocks</code>를 생성합니다.\n그 다음, 역시 <code>graphql-tools</code> 패키지에서 제공하는 <code>addMockFunctionsToSchema()</code> 함수에 이 <code>schema</code>와 <code>mocks</code>를 인자로 넘겨 호출하면, 해당 스키마에 모킹 리졸버가 장착됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-client\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InMemoryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-cache-inmemory\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createHttpLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-http\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SchemaLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-schema\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> introspectSchema<span class=\"token punctuation\">,</span> addMockFunctionsToSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tools\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> <span class=\"token function\">createHttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> <span class=\"token string\">\"https://countries.trevorblades.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">introspectSchema</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">Query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">continents</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          code<span class=\"token operator\">:</span> <span class=\"token string\">\"Mocked Code\"</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mocked Name\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">addMockFunctionsToSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> schema<span class=\"token punctuation\">,</span> mocks <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    link<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SchemaLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    query<span class=\"token operator\">:</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      query {\n        continents {\n          code\n          name\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'continents:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>continents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 실행해보면 다음과 같이 모킹 리졸버의 리턴값이 콘솔에 출력되는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">continents:\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Mocked Code\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Mocked Name\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"원격-스키마로-부터-타입-정의-추출\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EA%B2%A9-%EC%8A%A4%ED%82%A4%EB%A7%88%EB%A1%9C-%EB%B6%80%ED%84%B0-%ED%83%80%EC%9E%85-%EC%A0%95%EC%9D%98-%EC%B6%94%EC%B6%9C\" aria-label=\"원격 스키마로 부터 타입 정의 추출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원격 스키마로 부터 타입 정의 추출</h2>\n<p>모킹 리졸버 대신에 정식으로 리졸버를 설정하고 싶은 경우에는 서버에서 조회한 스키마에서 문자열로된 타입 정의 부분을 추출해야 합니다.</p>\n<p><code>graphql/utilities</code> 패키지에서 제공하는 <code>printSchema()</code> 함수를 통해 원격 스키마로 부터 타입 정의 문자열(<code>typeDefs</code>)을 얻어올 수 있습니다.\n그 다음, <code>graphql-tools</code> 패키지에서 제공하는 <code>makeExecutableSchema()</code> 함수에 방금 얻은 <code>typeDefs</code>와 직접 구현한 <code>resolvers</code>를 넘겨서 호출하면 타입 정의와 리졸버를 모두 갖춘 실행 가능한 스키마를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-client\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InMemoryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-cache-inmemory\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createHttpLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-http\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SchemaLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-schema\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> introspectSchema<span class=\"token punctuation\">,</span> makeExecutableSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tools\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> printSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql/utilities\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> <span class=\"token function\">createHttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> <span class=\"token string\">\"https://countries.trevorblades.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> remoteSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">introspectSchema</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> <span class=\"token function\">printSchema</span><span class=\"token punctuation\">(</span>remoteSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">continents</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          code<span class=\"token operator\">:</span> <span class=\"token string\">\"Resolved Code\"</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">\"Resolved Name\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">makeExecutableSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    typeDefs<span class=\"token punctuation\">,</span>\n    resolvers\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    link<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SchemaLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    query<span class=\"token operator\">:</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      query {\n        continents {\n          code\n          name\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'continents:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>continents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드를 실행해보면 다음과 같이 리졸버에서 구현한 결과값이 콘솔에 출력되는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">continents:\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Resolved Code\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Resolved Name\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"로컬-파일에-스키마-다운로드\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC-%ED%8C%8C%EC%9D%BC%EC%97%90-%EC%8A%A4%ED%82%A4%EB%A7%88-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C\" aria-label=\"로컬 파일에 스키마 다운로드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬 파일에 스키마 다운로드</h2>\n<p>간혹 네트워크 연결이 불가능하여 미리 원격 서버로 부터 스키마를 다운로드 받아 로컬 파일에 저장해두고 사용해야 할 때가 있습니다.</p>\n<p>먼저, Apollo CLI의 <code>apollo schema:download</code> 커맨드를 이용하여 서버로 부터 스키마를 다운로드 받아 <code>schema.json</code> 파일에 저장합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx apollo schema:download --endpoint<span class=\"token operator\">=</span>https://countries.trevorblades.com schema.json</code></pre></div>\n<p>그 다음, <code>schema.json</code> 파일을 임포트 하고, <code>graphql/utilities</code> 패키지의 <code>buildClientSchema()</code> 함수를 통해 스키마를 얻고, <code>printSchema()</code> 함수를 통해 타입 정의 문자열을 추출합니다.\n그 이후 과정은 이전 섹션과 동일합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-client\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InMemoryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-cache-inmemory\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createHttpLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-http\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SchemaLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"apollo-link-schema\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> makeExecutableSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tools\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> printSchema<span class=\"token punctuation\">,</span> buildClientSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql/utilities\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> schemaFile <span class=\"token keyword\">from</span> <span class=\"token string\">\"./schema.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> clientSchema <span class=\"token operator\">=</span> <span class=\"token function\">buildClientSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> __schema<span class=\"token operator\">:</span> schemaFile<span class=\"token punctuation\">.</span>__schema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> <span class=\"token function\">printSchema</span><span class=\"token punctuation\">(</span>clientSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">continents</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          code<span class=\"token operator\">:</span> <span class=\"token string\">\"Local Code\"</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">\"Local Name\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">makeExecutableSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    typeDefs<span class=\"token punctuation\">,</span>\n    resolvers\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    link<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SchemaLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    query<span class=\"token operator\">:</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      query {\n        continents {\n          code\n          name\n        }\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'continents:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>continents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 실행해보면 다음과 같이 리졸버에서 구현한 결과값이 콘솔에 출력되는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">continents:\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"code\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Local Code\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Local Name\"</span>,<span class=\"token string\">\"__typename\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Continent\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h3>\n<iframe src=\"https://stackblitz.com/edit/graphql-apollo-remote-schemas?embed=1&file=index.js&view=editor\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>","timeToRead":6,"fields":{"slug":"/graphql-apollo-remote-schemas/","tags":["JavaScript","JS","GraphQL","Apollo","ApolloClient","graphql-tools"]},"frontmatter":{"title":"[GraphQL] 원격 서버로 부터 스키마 가져오기","date":"Aug 31, 2019"}},"next":{"fields":{"slug":"/graphql-apollo-link-schema/"},"frontmatter":{"title":"[GraphQL] SchemaLink 사용법 - 서버없는 클라이언트"}}}}}