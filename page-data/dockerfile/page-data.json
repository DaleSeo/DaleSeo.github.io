{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/dockerfile/","result":{"pageContext":{"previous":{"fields":{"slug":"/docker-images/"},"frontmatter":{"title":"Docker 이미지 관련 커맨드 사용법"}},"node":{"html":"<p>Docker가 대중화되면서 많은 프로젝트들이 개발 환경을 컨테이너화(containerization)시키고 있습니다.<br>이러한 프로젝트의 최상위 디렉토리에서는 항상 Dockerfile이 위치하게 되며, 따라서 Dockerfile 이해하는 것은 그 프로젝트의 개발 환경이 어떻게 구성되는지 이해하는 첫걸음입니다.</p>\n<p>Dockerfile은 Docker 이미지(image)가 어떤 단계를 거쳐 빌드(build)되야 하는지를 담고있는 텍스트 파일입니다.<br>Docker는 Dockerfile에 나열된 명령문을 차례대로 수행하여 이미지를 생성해줍니다.</p>\n<p>이번 포스트에서는 자주 쓰이는 명령어를 위주로 Dockerfile을 작성하는 방법에 대해서 알아보도록 하겠습니다.</p>\n<p><img src=\"https://i.imgur.com/HyThbHR.jpg\" alt=\"Dockerfile\"></p>\n<h2 id=\"dockerfile-포멧\" style=\"position:relative;\"><a href=\"#dockerfile-%ED%8F%AC%EB%A9%A7\" aria-label=\"dockerfile 포멧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile 포멧</h2>\n<p>하나의 Dockerfile은 기본적으로 다음과 같은 구조를 가진 여러 개의 명령문으로 구성되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># 주석(Comment)</span>\n명령어(INSTRUCTION) 인자(arguments)</code></pre></div>\n<p>각 명령문은 명령어로 시작하고 여러 개의 인자가 따라올 수 있으며, 해당 명령문에 대한 주석도 달 수 있습니다.<br>인자와 구분이 쉽도록 명령어는 모두 영문 대문자로 써주는 것이 관례입니다.</p>\n<h2 id=\"from-명령문\" style=\"position:relative;\"><a href=\"#from-%EB%AA%85%EB%A0%B9%EB%AC%B8\" aria-label=\"from 명령문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FROM 명령문</h2>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> &lt;이미지<span class=\"token punctuation\">></span>\n<span class=\"token keyword\">FROM</span> &lt;이미지<span class=\"token punctuation\">></span><span class=\"token punctuation\">:</span>&lt;태그<span class=\"token punctuation\">></span></code></pre></div>\n<p>하나의 Docker 이미지는 base 이미지부터 시작해서 기존 이미지위에 새로운 이미지를 중첩해서 여러 단계의 이미지 층(layer)을 쌓아가며 만들어집니다.</p>\n<p><code>FROM</code> 명령문은 이 base 이미지를 지정해주기 위해서 사용되는데, 보통 Dockerfile 내에서 최상단에 위치합니다.<br>base 이미지는 일반적으로 Docker Hub와 같은 Docker repository에 올려놓은 잘 알려진 공개 이미지인 경우가 많습니다.</p>\n<ul>\n<li>Ubuntu 최신 버전을 base 이미지로 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> ubuntu<span class=\"token punctuation\">:</span>latest</code></pre></div>\n<ul>\n<li>NodeJS 12를 base 이미지로 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>12</code></pre></div>\n<ul>\n<li>Python 3.8 (alpine 리눅스 기반)을 base 이미지로 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> python<span class=\"token punctuation\">:</span>3.8<span class=\"token punctuation\">-</span>alpine</code></pre></div>\n<h2 id=\"workdir-명령문\" style=\"position:relative;\"><a href=\"#workdir-%EB%AA%85%EB%A0%B9%EB%AC%B8\" aria-label=\"workdir 명령문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WORKDIR 명령문</h2>\n<p><code>WORKDIR</code> 명령문은 쉘(shell)의 <code>cd</code> 명령문처럼 컨테이너 상에서 작업 디텍토리로 전환을 위해서 사용됩니다.<br><code>WORKDIR</code> 명령문으로 작업 디렉토리를 전환하면 그 이후에 등장하는 모든 <code>RUN</code>, <code>CMD</code>, <code>ENTRYPOINT</code>, <code>COPY</code>, <code>ADD</code> 명령문은 해당 디렉토리를 기준으로 실행됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">WORKDIR</span> &lt;이동할 경로<span class=\"token punctuation\">></span></code></pre></div>\n<ul>\n<li><code>/usr/app</code>으로 작업 디렉토리 전환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">WORKDIR</span> /usr/app</code></pre></div>\n<h2 id=\"run-명령문\" style=\"position:relative;\"><a href=\"#run-%EB%AA%85%EB%A0%B9%EB%AC%B8\" aria-label=\"run 명령문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RUN 명령문</h2>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">RUN</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;커맨드>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;파라미터1>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;파라미터2>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">RUN</span> &lt;전체 커맨드<span class=\"token punctuation\">></span></code></pre></div>\n<p><code>RUN</code> 명령문은 마치 쉘(shell)에서 커맨드를 실행하는 것 처럼 이미지 빌드 과정에서 필요한 커맨드를 실행하기 위해서 사용됩니다.<br>쉘(shell)을 통해 거의 못하는 작업이 없는 것 처럼 <code>RUN</code> 명령문으로 할 수 있는 작업은 무궁무진하지만 보통 이미지 안에 특정 소트트웨어를 설치하기 위해서 많이 사용됩니다.</p>\n<ul>\n<li>curl 도구 설치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">RUN</span> apk add curl</code></pre></div>\n<ul>\n<li>npm 패키지 설치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">RUN</span> npm install <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>silent</code></pre></div>\n<ul>\n<li>pip 패키지 설치</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">RUN</span> pip install <span class=\"token punctuation\">-</span>r requirements.txt</code></pre></div>\n<h2 id=\"entrypoint-명령문\" style=\"position:relative;\"><a href=\"#entrypoint-%EB%AA%85%EB%A0%B9%EB%AC%B8\" aria-label=\"entrypoint 명령문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ENTRYPOINT 명령문</h2>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;커맨드>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;파라미터1>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;파라미터2>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">ENTRYPOINT</span> &lt;전체 커맨드<span class=\"token punctuation\">></span></code></pre></div>\n<p><code>ENTRYPOINT</code> 명령문은 이미지를 컨테이너로 띄울 때 항상 실행되야 하는 커맨드를 지정할 때 사용합니다.<br><code>ENTRYPOINT</code> 명령문은 Docker 이미지를 마치 하나의 실행 파일처럼 사용할 때 유용합니다.<br>왜냐하면 컨테이너가 뜰 때 <code>ENTRYPOINT</code> 명령문으로 지정된 커맨드가 실행되고, 이 커맨드로 실행된 프로세스가 죽을 때, 컨테이너로 따라서 종료되기 때문입니다.</p>\n<ul>\n<li>npm start 스크립트 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"npm\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>Django 서버 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"manage.py\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"runserver\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"cmd-명령문\" style=\"position:relative;\"><a href=\"#cmd-%EB%AA%85%EB%A0%B9%EB%AC%B8\" aria-label=\"cmd 명령문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CMD 명령문</h2>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;커맨드>\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"&lt;파라미터1>\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"&lt;파라미터2>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;파라미터1>\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"&lt;파라미터2>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">CMD</span> &lt;전체 커맨드<span class=\"token punctuation\">></span></code></pre></div>\n<p><code>CMD</code> 명령문은 해당 이미지를 컨테이너로 띄울 때 디폴트로 실행할 커맨드나, <code>ENTRYPOINT</code> 명령문으로 지정된 커맨드에 디폴트로 넘길 파라미터를 지정할 때 사용합니다.</p>\n<p><code>CMD</code> 명령문은 많은 경우, <code>ENTRYPOINT</code> 명령문과 함께 사용하게 되는데, <code>ENTRYPOINT</code> 명령문으로는 커맨드를 지정하고, <code>CMD</code> 명령문으로 디폴트 파리미터를 지정해주면 매우 유연하게 이미지를 실행할 수 있게 됩니다.</p>\n<p>예를 들어, <code>node</code> 커맨드로 디폴트로는 <code>index.js</code>를 실행하되, <code>docker run</code> 커맨드에 인자가 있는 경우, 해당 인자를 실행하고 싶은 경우, 다음과 같이 Dockerfile을 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>그러면 다음과 같이 <code>docker run</code> 커맨드의 인자 유무에 따라 <code>node</code> 커맨드로 다른 파일이 실행되게 할 수 있습니다.</p>\n<ul>\n<li><code>node index.js</code> 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run <span class=\"token builtin class-name\">test</span></code></pre></div>\n<ul>\n<li><code>node main.js</code> 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run <span class=\"token builtin class-name\">test</span> main.js</code></pre></div>\n<p><code>CMD</code> 명령문과 <code>RUN</code> 명령문이 햇갈릴 수가 있는데, <code>RUN</code> 명령문은 이미지 빌드 시 항상 실행되며, 한 Dockerfile에 여러 개의 <code>RUN 명령문</code>을 선언할 수 있습니다.<br>반면에, <code>CMD</code> 명령문은 이미지를 continaer로 띄울 때 딱 한 번 실행 기회를 가지게 되며, 이 기회마저도 <code>docker run</code> 커맨드에 인자를 넘길 경우 상실하게 됩니다.</p>\n<p>예를 들어, 다음과 같이 Dockerfile 파일에 <code>Hi</code>를 출력하는 <code>CMD</code> 명령문이 있을 때,</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>인자 없이 이미지를 실행하면 <code>Hi</code>가 출력되지만, 인자로 대신 실행될 커맨드를 넘기면 해당 인자가 출력되는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run <span class=\"token builtin class-name\">test</span>\nHi\n$ docker run <span class=\"token builtin class-name\">test</span> <span class=\"token builtin class-name\">echo</span> Bye\nBye</code></pre></div>\n<h2 id=\"expose-명령문\" style=\"position:relative;\"><a href=\"#expose-%EB%AA%85%EB%A0%B9%EB%AC%B8\" aria-label=\"expose 명령문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EXPOSE 명령문</h2>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">EXPOSE</span> &lt;포트<span class=\"token punctuation\">></span>\n<span class=\"token keyword\">EXPOSE</span> &lt;포트<span class=\"token punctuation\">></span>/&lt;프로토콜<span class=\"token punctuation\">></span></code></pre></div>\n<p><code>EXPOSE</code> 명령문은 네트워크 상에서 컨테이너로 들어오는 트래픽(traffic)을 리스닝(listening)하는 포트와 프로토콜를 지정하기 위해서 사용됩니다.<br>프로토콜은 TCP와 UDP 중 선택할 수 있는데 지정하지 않으면 TCP가 기본값으로 사용됩니다.</p>\n<p>여기서 주의할 점은 <code>EXPOSE</code> 명령문으로 지정된 포트는 해당 컨테이너의 내부에서만 유효하며, 호스트(host) 컴퓨터에서는 이 포트를 바로 접근을 할 수 있는 것은 아니라는 겁니다.<br>호스트 컴퓨터로부터 해당 포트로의 접근을 허용하려면, <code>docker run</code> 커맨드를 <code>-p</code> 옵션을 통해 호스트 컴퓨터의 특정 포트를 포워딩(forwarding)시켜줘야 합니다.</p>\n<ul>\n<li>80/TCP 포트로 리스닝</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">EXPOSE</span> 80</code></pre></div>\n<ul>\n<li>9999/UDP 포트로 리스닝</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">EXPOSE</span> 9999/udp</code></pre></div>\n<h2 id=\"copyadd-명령문\" style=\"position:relative;\"><a href=\"#copyadd-%EB%AA%85%EB%A0%B9%EB%AC%B8\" aria-label=\"copyadd 명령문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>COPY/ADD 명령문</h2>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">COPY</span> &lt;src<span class=\"token punctuation\">></span><span class=\"token punctuation\">...</span> &lt;dest<span class=\"token punctuation\">></span>\n<span class=\"token keyword\">COPY</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;src>\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">...</span> <span class=\"token string\">\"&lt;dest>\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code>COPY</code> 명령문은 호스트 컴퓨터에 있는 디렉토리나 파일을 Docker 이미지의 파일 시스템으로 복사하기 위해서 사용됩니다.<br>절대 경로와 상대 경로를 모두 지원하며, 상대 경로를 사용할 때는 이 전에 등장하는 <code>WORKDIR</code> 명령문으로 작업 디렉토리를 어디로 전환을 해놨는지 고려해야 합니다.</p>\n<ul>\n<li><code>package.json</code> 파일만 복사</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">COPY</span> package.json package.json</code></pre></div>\n<ul>\n<li>이미지를 빌드한 디렉토리의 모든 파일을 컨테이너의 <code>app/</code> 디렉토리로 복사</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">WORKDIR</span> app/\n<span class=\"token keyword\">COPY</span> . .</code></pre></div>\n<p><code>ADD</code> 명령문은 좀 더 파워풀한 <code>COPY</code> 명령문이라고 생각할 수 있습니다.<br><code>ADD</code> 명령문은 일반 파일 뿐만 아니라 압축 파일이나 네트워크 상의 파일도 사용할 수 있습니다.<br>이렇게 특수한 파일을 다루는 게 아니라면 <code>COPY</code> 명령문을 사용하는 것이 권장됩니다.</p>\n<h2 id=\"env-명령문\" style=\"position:relative;\"><a href=\"#env-%EB%AA%85%EB%A0%B9%EB%AC%B8\" aria-label=\"env 명령문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ENV 명령문</h2>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ENV</span> &lt;키<span class=\"token punctuation\">></span> &lt;값<span class=\"token punctuation\">></span>\n<span class=\"token keyword\">ENV</span> &lt;키<span class=\"token punctuation\">></span>=&lt;값<span class=\"token punctuation\">></span></code></pre></div>\n<p><code>ENV</code> 명령문은 환경 변수를 설정하기 위해서 사용합니다.<br><code>ENV</code> 명령문으로 설정된 환경 변수는 이미지 빌드 시에도 사용됨은 물론이고, 해당 컨테이너에서 돌아가는 애플리케이션도 접근할 수 있습니다.</p>\n<ul>\n<li><code>NODE_ENV</code> 환경 변수를 <code>production</code>으로 설정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ENV</span> NODE_ENV production</code></pre></div>\n<h2 id=\"arg-명령문\" style=\"position:relative;\"><a href=\"#arg-%EB%AA%85%EB%A0%B9%EB%AC%B8\" aria-label=\"arg 명령문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARG 명령문</h2>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ARG</span> &lt;이름<span class=\"token punctuation\">></span>\n<span class=\"token keyword\">ARG</span> &lt;이름<span class=\"token punctuation\">></span>=&lt;기본 값<span class=\"token punctuation\">></span></code></pre></div>\n<p><code>ARG</code> 명령문은 <code>docker build</code> 커맨드로 이미지를 빌드 시, <code>--build-arg</code> 옵션을 통해 넘길 수 있는 인자를 정의하기 위해 사용합니다.</p>\n<p>예를 들어, Dockerfile에 다음과 같이 <code>ARG</code> 명령문으로 <code>port</code>를 인자로 선언해주면,</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ARG</span> port</code></pre></div>\n<p>다음과 같이 <code>docker build</code> 커맨드에 <code>--build-arg</code> 옵션에 <code>port</code> 값을 넘길 수가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build --build-arg <span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token number\">8080</span> <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>인자의 디폴트값을 지정해주면, <code>--build-arg</code> 옵션으로 해당 인자가 넘어오지 않았을 때 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ARG</span> port=8080</code></pre></div>\n<p>설정된 인자 값은 다음과 같이 <code>${인자명}</code> 형태로 읽어서 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">CMD</span> start.sh <span class=\"token punctuation\">-</span>h 127.0.0.1 <span class=\"token punctuation\">-</span>p $<span class=\"token punctuation\">{</span>port<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"dockerignore-파일\" style=\"position:relative;\"><a href=\"#dockerignore-%ED%8C%8C%EC%9D%BC\" aria-label=\"dockerignore 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.dockerignore 파일</h2>\n<p>명령문은 아니지만 <code>.dockerignore</code> 파일도 알아두면 Dockerfile을 작성할 때 유용합니다.<br>Docker 이미지를 빌드할 때 제외 시키고 싶은 파일이 있다면, <code>.dockerignore</code> 파일에 추가해주면 됩니다.</p>\n<p>예를 들어, <code>.git</code> 디렉토리와 마크다운(markdown) 파일을 모두 제외 시키고 싶다면 다음과 같이 <code>.dockerignore</code> 파일을 작성해주면 됩니다.</p>\n<ul>\n<li>.dockerignore</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.git\n*.md</code></pre></div>\n<p>이렇게 설정을 해주면 Docker는 프로젝트 최상위 디렉토리에 위치하고 있는 markdown 파일들을 무사하게 되므로, <code>RUN</code>과 <code>CMD</code>, <code>COPY</code>와 같은 명령문이 해당 파일을 사용할 수 없게 됩니다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>지금까지 설명드린 Dockerfile의 명령어를 정리해보면 다음과 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>명령어</th>\n<th>용도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FROM</td>\n<td>base 이미지 설정</td>\n</tr>\n<tr>\n<td>WORKDIR</td>\n<td>작업 디렉토리 설정</td>\n</tr>\n<tr>\n<td>RUN</td>\n<td>이미지 빌드 시 커맨드 실행</td>\n</tr>\n<tr>\n<td>ENTRYPOINT</td>\n<td>이미지 실행 시 항상 실행되야 하는 커맨드 설정</td>\n</tr>\n<tr>\n<td>CMD</td>\n<td>이미지 실행 시 디폴트 커맨드 또는 파라미터 설정</td>\n</tr>\n<tr>\n<td>EXPOSE</td>\n<td>컨테이너가 리스닝할 포트 및 프로토콜 설정</td>\n</tr>\n<tr>\n<td>COPY/ADD</td>\n<td>이미지의 파일 시스템으로 파일 또는 디렉토리 복사</td>\n</tr>\n<tr>\n<td>ENV</td>\n<td>환경 변수 설정</td>\n</tr>\n<tr>\n<td>ARG</td>\n<td>빌드 시 넘어올 수 있는 인자 설정</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Dockerfile에서 자주 사용되는 명령어에 대해서 알아보았습니다.<br>이 정도만 명령문만 숙지하시면 왠만한 Dockerfile을 다루는데 큰 어려움이 발생하지 않을 것 입니다.<br>다른 명령문에 대한 내용은 <a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile reference</a>를 참고 바라겠습니다.</p>","timeToRead":7,"fields":{"slug":"/dockerfile/","tags":["Docker","도커","container","컨테이너","image","이미지","Dockerfile"]},"frontmatter":{"title":"Dockerfile에서 자주 쓰이는 명령어","date":"Apr 7, 2020"}},"next":{"fields":{"slug":"/docker-nodejs/"},"frontmatter":{"title":"Docker를 이용한 NodeJS 개발"}}}}}