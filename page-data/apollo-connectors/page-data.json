{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/apollo-connectors/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>현대 소프트웨어 개발에서 HTTP 기반 API를 생각하면 REST와 GraphQL, 이렇게 우리는 크게 두 가지 기술을 떠올립니다.</p>\n<p>역사가 오래된 REST는 비교적 간단한 백엔드 시스템이나 개발된 지 시간이 좀 지난 레거시 시스템에서 많이 사용되고 있습니다.\n반면에 GraphQL은 관계가 복잡한 데이터를 다루는 API를 개발하거나 BFF(Backend for Frontend) 또는 API Orchestration(오케스트레이션)을 위해 많이 채택되고 있습니다.</p>\n<p>만약 이 두 대표적인 API 기술을 유기적으로 통합할 수 있다면 얼마나 좋을까요?\n이번 포스팅에서는 이러한 서버 개발자들의 오랜 꿈을 현실로 만들어주는 Apollo Connector에 대해 알아보겠습니다.</p>\n<h2 id=\"apollo-connectors란\" style=\"position:relative;\"><a href=\"#apollo-connectors%EB%9E%80\" aria-label=\"apollo connectors란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apollo Connectors란?</h2>\n<p><img src=\"https://res.cloudinary.com/daleseo/image/upload/v1745019906/apollo-connectors.png\" alt=\"Apollo Connectors\"></p>\n<p><a href=\"https://www.apollographql.com/graphos/apollo-connectors\">​Apollo Connectors</a>는 오픈 소스 소프트웨어인 <a href=\"/?tag=ApolloServer\">Apollo Server</a>와 <a href=\"/?tag=ApolloClient\">Apollo Client</a>,\n그리고 엔터프라이즈 플랫폼인 <a href=\"https://www.apollographql.com/graphos\">Apollo GraphOS</a>로 유명한 기술 기업인 <a href=\"https://www.apollographql.com/\">Apollo GraphQL</a>에서 최근에 출시한 따끈따끈한 신기능입니다.</p>\n<p>​Apollo Connectors를 한 마디로 설명하자면 <strong>REST API를 GraphQL 서버없이 GraphQL API로 변환 및 통합</strong>할 수 있게 해주는 마법같은 도구라고 할 수 있겠는데요.</p>\n<p>예전에는 레거시 REST API를 GraphQL로 전환하려면 상당한 양의 코드를 작성해야했습니다.\nREST API 엔드포인트를 직접 호출하여 GraphQL의 타입(type)과 필드(field)로 일일이 맵핑하는 로직을 구현해줘야 했었죠.\n그래서 GraphQL이 좋은지 알면서도 마이그레이션 엄두를 못내는 경우가 있었습니다. 😢</p>\n<p>하지만 ​Apollo Connectors를 사용하면 REST API를 너무나 쉽고 빠르게 GraphQL API로 변환할 수 있습니다.\n새로운 GraphQL 서버를 구축하지 않고도 몇 줄의 스키마 선언만으로 REST API를 GraphQL로 바꿔버릴 수 있기 때문이죠. 🧙</p>\n<p>​Apollo Connectors의 가장 큰 장점은 기존 시스템을 대대적으로 개편하지 않고도 GraphQL을 점진적으로 도입할 수 있게 해준다는 것입니다.\n뿐만 아니라, 한 회사에서 두 가지 기술의 API를 운영하면서 발생하는 비용을 최소화할 수 있으며, 장기적으로 아키택쳐를 단순화하고 통합된 API 전략을 수립하는데 도움이 될 수 있습니다.</p>\n<h2 id=\"스키마-작성\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%9E%91%EC%84%B1\" aria-label=\"스키마 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스키마 작성</h2>\n<p>설명은 충분히 한 것 같으니 이제 본격적으로 함께 ​Apollo Connectors를 사용해보도록 할까요?</p>\n<p>우선 GraphQL API로 변환할 REST API가 필요한데요.\n외부에 공개되어 있는 전자 상거래 <a href=\"https://ecommerce.demo-api.apollo.dev/products\">REST API</a>로 실습을 진행하겠습니다.\n아래와 같은 형태로 가짜 상품 정보를 응답하는 API입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"products\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lunar Rover Wheels\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"createdAt\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1636742972000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"updatedAt\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1636742972000</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Designed for traversing the rugged terrain of the moon, these wheels provide unrivaled traction and durability. Made from a lightweight composite, they ensure your rover is agile in challenging conditions.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"slug\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lunar-rover-wheels\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token property\">\"tagId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"space\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Space\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token property\">\"tagId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"engineering\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Engineering\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token property\">\"tagId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rover\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Rover\"</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"category\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Engineering Components\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"availability\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AVAILABLE\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// (... 생략 ...)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"summary\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"total\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​Apollo Connectors는 GraphQL의 필드(field)나 타입(type)에 REST API의 엔드포인트(endpoint)를 연결할 수 있는 선언적(declarative) 방법을 제공하는데요.\nGraphQL 스키마 안에서 <code>@connect</code>와 <code>@source</code> 지시문을 통해서 GraphQL과 REST 간의 맵핑이 이뤄집니다.</p>\n<p><code>products.graphql</code> 파일을 생성하고 GraphQL 스키마를 작성하도록 하겠습니다.</p>\n<p>​Apollo Connectors는 <a href=\"https://www.apollographql.com/federation\">​Apollo Federation</a> 스펙을 기반으로 합니다.\n따라서 이 부분을 스카마 파일 제일 위에 명시해줘야 하고요.</p>\n<div class=\"gatsby-code-title\">products.graphql</div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">extend</span> <span class=\"token keyword\">schema</span>\n  <span class=\"token comment\"># Apollo Federation 스펙을 사용한다고 명시합니다.</span>\n  <span class=\"token directive function\">@link</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://specs.apollo.dev/federation/v2.10\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 다음 Apollo Connectors에서 제공하는 <code>@connect</code>와 <code>@source</code> 지시문을 불러옵니다.</p>\n<div class=\"gatsby-code-title\">products.graphql</div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">  <span class=\"token comment\"># @connect와 @source 지시문을 불러옵니다.</span>\n  <span class=\"token directive function\">@link</span><span class=\"token punctuation\">(</span>\n    <span class=\"token attr-name\">url</span><span class=\"token punctuation\">:</span> <span class=\"token description string\">\"<span class=\"token language-markdown\">https://specs.apollo.dev/connect/v0.1</span>\"</span>\n    <span class=\"token attr-name\">import</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@connect\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@source\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 <code>@source</code> 지시문을 통해서 연결할 REST API의 이름(name)과 기본 URL(baseUrl)을 명시해줍니다.</p>\n<div class=\"gatsby-code-title\">products.graphql</div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">  <span class=\"token comment\"># @source 지시문으로 REST API를 데이터 소스로 정의할 수 있습니다.</span>\n  <span class=\"token directive function\">@source</span><span class=\"token punctuation\">(</span>\n    <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token description string\">\"<span class=\"token language-markdown\">ecomm</span>\"</span>\n    <span class=\"token attr-name\">http</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">baseURL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://ecommerce.demo-api.apollo.dev/\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음으로 REST API에서 제공하는 상품 정보를 나타내는 타입을 정의합니다.\n실제 REST API의 응답을 보면 상품은 많은 필드로 구성이 되어 있는데요.\n저희는 최대한 간단한 실습을 위해서 그 중에서 3개의 필드만 포함해도 괜찮을 것 같습니다.</p>\n<div class=\"gatsby-code-title\">products.graphql</div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">ID</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n  <span class=\"token attr-name\">description</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마지막으로 GraphQL API에 모든 상품 목록을 요청할 수 있도록 <code>products</code> 쿼리(query)를 정의하겠습니다.\n<code>product</code> 필드 아래에 <code>@connect</code> 지시문을 사용하여 REST API 엔드포인트를 연결해줍니다.</p>\n<ul>\n<li><code>source</code>: <code>@source</code> 지시문으로 정의해둔 데이터 소스</li>\n<li><code>http</code>: 엔드포인트 (HTTP 방식, URL 경로)</li>\n<li><code>selection</code>: HTTP 응답에서 선택할 필드</li>\n</ul>\n<div class=\"gatsby-code-title\">products.graphql</div>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">products</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># @connect 지시문은 GraphQL 필드나 타입에 REST API 엔드포인트를 연결합니다.</span>\n    <span class=\"token directive function\">@connect</span><span class=\"token punctuation\">(</span>\n      <span class=\"token attr-name\">source</span><span class=\"token punctuation\">:</span> <span class=\"token description string\">\"<span class=\"token language-markdown\">ecomm</span>\"</span>\n      <span class=\"token attr-name\">http</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">GET</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/products\"</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token attr-name\">selection</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"\"\n      $.products {\n        id\n        name\n        description\n      }\n      \"\"\"</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자, 이렇게 <code>@connect</code>와 <code>@source</code> 지시문을 사용해서 GraphQL 스키마만 작성해주면 끝입니다.\n다른 프로그래밍 언어를 사용하여 별도의 GraphQL 서버 코드를 작성할 필요가 전혀 없습니다.</p>\n<h2 id=\"그래프-생성\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84-%EC%83%9D%EC%84%B1\" aria-label=\"그래프 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래프 생성</h2>\n<p>​Apollo Connectors 사용하려면 <a href=\"https://studio.apollographql.com/\">GraphOS Studio</a>에서 그래프(Graph)를 하나 만들어야 합니다.\n아직 계정이 없으신 분들은 계정을 만드시고 무료 플랜으로 바로 그래프를 생성할 수 있습니다.</p>\n<p><img src=\"https://res.cloudinary.com/daleseo/image/upload/v1745032523/apollo-connectors-graphos-studio-1.png\" alt=\"Apollo Connectors GraphOS 1\"></p>\n<p>그래프를 생성하면 나오는 <code>supergraph.yaml</code> 파일의 내용과 환경 변수, <code>rover dev</code> 명령어를 복사해둡니다.</p>\n<p><img src=\"https://res.cloudinary.com/daleseo/image/upload/v1745032541/apollo-connectors-graphos-studio-2.png\" alt=\"Apollo Connectors GraphOS 2\"></p>\n<div class=\"gatsby-code-title\">supergraph.yaml</div>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">federation_version</span><span class=\"token punctuation\">:</span> =2.10.0\n<span class=\"token key atrule\">subgraphs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">products</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">routing_url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//ignored\n    <span class=\"token key atrule\">schema</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span> products.graphql</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">APOLLO_KEY</span><span class=\"token operator\">=</span>service:Our-Connectors:••••••••••••••••••••••\n<span class=\"token assign-left variable\">APOLLO_GRAPH_REF</span><span class=\"token operator\">=</span>Our-Connectors:@main\nrover dev --supergraph-config supergraph.yaml</code></pre></div>\n<h2 id=\"그래프-실행\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84-%EC%8B%A4%ED%96%89\" aria-label=\"그래프 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래프 실행</h2>\n<p>터미널에서 그래프를 실행하려면 Apollo GraphQL에서 제공하는 CLI 도구인 <a href=\"https://www.apollographql.com/docs/rover\">Rover CLI</a>를 설치해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-sSL</span> https://rover.apollo.dev/nix/latest <span class=\"token operator\">|</span> <span class=\"token function\">sh</span></code></pre></div>\n<p>그 다음, 복사해둔 <code>APOLLO_KEY</code>와 <code>APOLLO_GRAPH_REF</code> 값을 환경 변수로 설정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">APOLLO_KEY</span><span class=\"token operator\">=</span>service:Our-Connectors:••••••••••••••••••••••\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">APOLLO_GRAPH_REF</span><span class=\"token operator\">=</span>Our-Connectors:@main</code></pre></div>\n<p>이제 복사해둔 <code>rover dev</code> 명령어를 통해서 그래프를 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ rover dev --supergraph-config supergraph.yaml\n\n** Notice: Changes <span class=\"token keyword\">in</span> This Release<span class=\"token operator\">!</span> **\nThis version includes significant updates to the <span class=\"token variable\"><span class=\"token variable\">`</span>rover dev<span class=\"token variable\">`</span></span> command.\nWe highly recommend reviewing the updated documentation to ensure a smooth experience.\nRead more: https://www.apollographql.com/docs/rover/commands/dev\n\nwarning: Do not run this <span class=\"token builtin class-name\">command</span> <span class=\"token keyword\">in</span> production<span class=\"token operator\">!</span> It is intended <span class=\"token keyword\">for</span> <span class=\"token builtin class-name\">local</span> development only.\n\nmerging supergraph schema files\nsupergraph config loaded successfully\nstarting a session with the <span class=\"token string\">'products'</span> subgraph\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> Watching /Users/daleseo/temp/my-graph-z4j7yc/products.graphql <span class=\"token keyword\">for</span> changes\ncomposing supergraph with Federation <span class=\"token number\">2.10</span>.0\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> Attempting to start router at http://localhost:4000.\nWARN: setting resource attributes is not allowed <span class=\"token keyword\">for</span> Apollo telemetry\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> Health check exposed at http://127.0.0.1:8088/health\nWARN: Connector debugging is enabled, this may expose sensitive information.\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> Your supergraph is running<span class=\"token operator\">!</span> <span class=\"token function\">head</span> to http://localhost:4000 to query your supergraph</code></pre></div>\n<p>브라우저에서 <code>http://localhost:4000/</code>에 접속하시면 변환된 GraphQL API를 테스트해볼 수 있는 Sandbox 웹사이트가 열릴 것입니다.</p>\n<p><img src=\"https://res.cloudinary.com/daleseo/image/upload/v1745035145/apollo-connectors-sandbox.png\" alt=\"Sandbox\"></p>\n<h2 id=\"실습-코드\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%8A%B5-%EC%BD%94%EB%93%9C\" aria-label=\"실습 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실습 코드</h2>\n<p>본 포스팅에서 작성한 GraphQL 스키마는 아래에서 직접 확인하고 실행해볼 수 있습니다.</p>\n<iframe src=\"https://codesandbox.io/p/devbox/fkm68s?embed=1&file=%2Fproducts.graphql\"\n     style=\"width:100%; height: 500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"apollo-connectors\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>지금까지 REST API를 GraphQL 서버없이 GraphQL API로 변환 및 통합할 수 있게 해주는 마법같은 도구인 Apollo Connectors에 대해서 살펴보았습니다.\n​Apollo Connectors 통해 최소한의 비용으로 REST API와 GraphQL API를 통합하시고 진정한 API Orchestration을 혜택을 누릴 수 있으셨으면 좋겠습니다.</p>\n<p>​Apollo Connectors에 대한 좀 더 배우시고 싶으신 분들께는 아래 Apollo GraphQL의 공식 문서를 추천드리겠습니다.</p>\n<ul>\n<li><a href=\"https://www.apollographql.com/docs/guides/rest/setup\">Start with a REST API</a></li>\n<li><a href=\"https://www.apollographql.com/docs/graphos/schema-design/connectors\">Apollo Connectors</a></li>\n</ul>","timeToRead":5,"fields":{"slug":"/apollo-connectors/","tags":["GraphQL","Apollo","ApolloConnectors"]},"frontmatter":{"title":"Apollo Connectors 소개와 사용법","date":"Apr 18, 2025"}},"next":{"fields":{"slug":"/should-we-give-up/"},"frontmatter":{"title":"AI 때문에 개발자의 꿈을 접어야 할까요❓🤔"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}