{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-node-fs/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-json/"},"frontmatter":{"title":"JSON.parse()와 JSON.stringify()"}},"node":{"html":"<p>이번 포스팅에서는 Node.js에서 파일 입출력 처리를 할 때 사용하는 <code>fs</code> 모듈에 대해서 알아보겠습니다.</p>\n<h2 id=\"fs모듈-불러오기\" style=\"position:relative;\"><a href=\"#fs%EB%AA%A8%EB%93%88-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" aria-label=\"fs모듈 불러오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fs모듈 불러오기</h2>\n<p><code>fs</code> 모듈은 Node.js에 내장되어 있어 있기 때문에 별도의 라이브러리 설치없이 바로 불러와서 사용할 수 있습니다.</p>\n<p>CommonJS 모듈 시스템을 사용하는 프로젝트에서는 <code>require</code> 키워드로 불러오고, ES 모듈 시스템을 사용하는 프로젝트에서는 <code>import</code> 키워드를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CommonJS Modules</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES Modules</span>\n<span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"비동기-함수-vs-동기-함수\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%95%A8%EC%88%98-vs-%EB%8F%99%EA%B8%B0-%ED%95%A8%EC%88%98\" aria-label=\"비동기 함수 vs 동기 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 함수 vs 동기 함수</h2>\n<p><code>fs</code> 모듈는 비동기(asynchronous) API와 동기(synchronous) API를 모두 제공하고 있습니다.\n띠라서 본인이 작성하는 프로그램의 성격을 고려하여 둘 중에 어떤 API가 적합한지 판단해야 합니다.</p>\n<p><code>fs</code> 모듈에서 제공하는 비동기 메서드는 미지막 인자로 콜백(callback) 함수를 받고 아무 값도 반환히지 않습니다.\n반면에 <code>fs</code> 모듈에서 제공하는 동기 메서드는 결과값을 반환(return)하며 예외(exception)를 일으킬 수 있습니다.\n동기 메서드의 이름은 <code>Sync</code>로 끝이 나기 때문에 쉽게 비동기 메서드인지 동기 메서드인지 구분이 가능합니다.</p>\n<blockquote>\n<p>자바스크립트의 비동기 처리의 개념이 없으시다면 <a href=\"http://localhost:8000/?tag=async\">관련 포스팅</a>을 먼저 읽어보시기를 추천드립니다.</p>\n</blockquote>\n<h2 id=\"디렉토리-생성하기\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"디렉토리 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디렉토리 생성하기</h2>\n<p>제일 먼저 <code>fs</code> 모듈을 이용해서 디렉토리를 만드는 방법에 대해서 알아보겠습니다.\n비동기로 디렉토리를 만들 때는 <code>mkdir()</code> 메서드를 사용합니다.</p>\n<p>예를 들어, <code>our-fs</code>라는 디렉토리를 생성하는 코드를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"our-fs\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>동일한 작업을 <code>mkdir()</code> 메서드의 동기 버전인 <code>mkdirSync()</code> 메서드를 사용해서 구현할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"our-fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 Node.js로 실행 후에 터미널에서 실제로 디렉토리가 생성되었는지 확인할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -d our-fs\nour-fs</code></pre></div>\n<h2 id=\"디렉토리-삭제하기\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-label=\"디렉토리 삭제하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디렉토리 삭제하기</h2>\n<p>비동기로 디렉토리를 삭제할 때는 <code>rmdir()</code> 메서드를 사용합니다.</p>\n<p>예를 들어, 방금 생성한 <code>our-fs</code>라는 디렉토리를 삭제하는 코드를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"our-fs\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>동일한 작업을 <code>rmdir()</code> 메서드의 동기 버전인 <code>rmdirSync()</code> 메서드를 사용해서 구현할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"our-fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 Node.js로 실행 후에 터미널에서 실제로 디렉토리가 삭제되었는지 확인할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -d our-fs\nls: our-fs: No such <span class=\"token function\">file</span> or directory</code></pre></div>\n<h2 id=\"파일에-데이터-쓰기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%93%B0%EA%B8%B0\" aria-label=\"파일에 데이터 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일에 데이터 쓰기</h2>\n<p><code>fs</code> 모듈은 비동기로 파일에 데이터를 쓸 수 있도록 <code>writeFile()</code> 메서드를 제공하고 있습니다.</p>\n<p>예를 들어, <code>test.dat</code>라는 파일에 <code>테스트</code>라는 문자열을 쓰는 코드를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> <span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token string\">\"테스트\"</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>동일한 작업을 <code>writeFile()</code> 메서드의 동기 버전인 <code>writeFileSync()</code> 메서드를 사용해서 구현할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  const <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">;</span>\n  const data <span class=\"token operator\">=</span> <span class=\"token string\">\"테스트\"</span><span class=\"token punctuation\">;</span>\n  fs<span class=\"token punctuation\">.</span>writeFileSync<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 Node.js로 실행 후에 터미널에서 실제로 파일에 데이터가 쓰여졌는지 확인할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.dat\n테스트%</code></pre></div>\n<p>한가지 주의할 점은 <code>writeFile()</code> 메서드를 사용하면 기존에 파일에 있던 데이터를 덮어쓴다는 것인데요.\n기존에 파일에 있던 데이터 뒤에 새로운 데이터를 추가하고 싶다면 대신에 <code>appendFile()</code> 또는 <code>appendFileSync()</code> 메서드를 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> <span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token string\">\"추가분\"</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  const <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">;</span>\n  const data <span class=\"token operator\">=</span> <span class=\"token string\">\"추가분\"</span><span class=\"token punctuation\">;</span>\n  fs<span class=\"token punctuation\">.</span>appendFileSync<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 Node.js로 실행 후에 터미널에서 실제로 파일의 기존 데이터에 새로운 데이터가 추가되었는지 확인할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.dat\n테스트추가분%</code></pre></div>\n<h2 id=\"파일로-부터-데이터-읽기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%B6%80%ED%84%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%BD%EA%B8%B0\" aria-label=\"파일로 부터 데이터 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일로 부터 데이터 읽기</h2>\n<p><code>fs</code> 모듈의 <code>readFile()</code> 메서드를 사용하면 비동기로 파일로 부터 데이터을 읽을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 주의할 점은 반드시 두번째 인자를 <code>\"utf8\"</code>로 명시하여 인코딩이 되도록 해줘야 한다는 것입니다.\n두번째 인자를 생략하면 콜백 함수의 <code>data</code> 인자로 문자열이 아닌 버퍼(buffer)가 넘어오기 때문에 육안으로 인식이 어렵습니다.</p>\n<p>동일한 작업을 <code>readFile()</code> 메서드의 동기 버전인 <code>readFileSync()</code> 메서드를 사용해서 구현해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 터미널에서 실행하면 다음과 같이 파일에 저장되어 있는 데이터가 출력될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">테스트추가분</code></pre></div>\n<h2 id=\"파일디렉토리-메타-정보-확인하기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EB%A9%94%ED%83%80-%EC%A0%95%EB%B3%B4-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"파일디렉토리 메타 정보 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일/디렉토리 메타 정보 확인하기</h2>\n<p><code>fs</code> 모듈이 제공하는 메서드 중에서 마지막으로 소개해드릴 메서드는 <code>stat()</code> 입니다.\n<code>stat()</code> 함수는 파일이나 디렉토리의 메타 정보를 확인할 때 사용합니다.</p>\n<p>예를 들어, 위에서 생성한 <code>test.dat</code> 파일의 대한 메타 정보를 출력하는 코드를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> stats</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      size<span class=\"token operator\">:</span> stats<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n      mtime<span class=\"token operator\">:</span> stats<span class=\"token punctuation\">.</span>mtime<span class=\"token punctuation\">,</span>\n      isFile<span class=\"token operator\">:</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>콜백 함수의 두번째 인자로 넘어오는 <code>stats</code> 객체를 통해 해당 파일이나 디렉토리에 대한 다양한 메타 정보에 접근할 수 있는데요.\n예제 코드에서는 파일 크기(<code>size</code>)와 수정 시간(<code>mtime</code>) 그리고 파일인지 디렉토리인지를 반환하는 <code>isFile()</code> 메서드를 호출해보았습니다.</p>\n<p>마찬가지로 <code>stat()</code> 메서드의 동기 버전인 <code>statSync()</code> 메서드를 사용해서 동일한 작업을 구현할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    size<span class=\"token operator\">:</span> stats<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n    mtime<span class=\"token operator\">:</span> stats<span class=\"token punctuation\">.</span>mtime<span class=\"token punctuation\">,</span>\n    isFile<span class=\"token operator\">:</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 터미널에서 실행하면 다음과 같이 파일의 메타 정보가 출력될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span> size: <span class=\"token number\">18</span>, mtime: <span class=\"token number\">2021</span>-11-13T03:14:37.596Z, isFile: <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 많이 쓰이는 기능 위주로 Node.js의 <code>js</code> 모듈을 어떻게 활용할 수 있는지 살펴보았습니다.</p>\n<p>비동기로 파일 입출력 처리를 할 때 <code>js</code> 모듈을 이용하면 소위 <a href=\"/js-async-callback\">콜백 지옥</a>에 빠질 수가 있습니다.\n따라서 최근에는 Promise를 이용하는 <code>js.promises</code> 모듈이 더 많이 사용되는 추세인데요.\n이 부분에 대해서 추후 포스팅를 통해서 다뤄보도록 하겠습니다.</p>","timeToRead":5,"fields":{"slug":"/js-node-fs/","tags":["JavaScript","Node.js","async","fs"]},"frontmatter":{"title":"Node.js의 fs 모듈로 파일 입출력 처리하기","date":"Nov 13, 2021"}},"next":{"fields":{"slug":"/js-node-path/"},"frontmatter":{"title":"Node.js의 path 모듈로 경로 다루기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}