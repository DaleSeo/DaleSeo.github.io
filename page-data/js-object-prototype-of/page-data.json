{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-object-prototype-of/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>자바스크립트에는 프로토타입(prototype)이라는 독특한 프로그래밍 패러다임을 가진 프로그래밍 언어입니다.\n클래스 기반 객체 지향 프로그래밍도 결국은 이 프로토타입을 통해서 가능하죠.</p>\n<p>이번 포스팅에서는 자바스크립트에서 객체의 프로토타입을 어떻게 다루는지에 대해서 알아보겠습니다.</p>\n<h2 id=\"__proto__-속성\" style=\"position:relative;\"><a href=\"#__proto__-%EC%86%8D%EC%84%B1\" aria-label=\"__proto__ 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>__proto__ 속성</h2>\n<p>자바스크립트에서 모든 객체는 자신의 프로토타입(prototype)을 <code>__proto__</code>라는 비밀 속성에 저장하고 있습니다.</p>\n<p>한 번 브라우저 콘솔에서 빈 객체를 생성한 후에 <code>__proto__</code> 속성을 확인해보세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러면 여러 가지 속성으로 이루어진 객체가 확인이 될 거에요.\n이 객체가 바로 빈 객체의 원형, 즉 프로토타입입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">constructor</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">hasOwnProperty</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">isPrototypeOf</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">propertyIsEnumerable</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">propertyIsEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">toLocaleString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">valueOf</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/* 그 밖에 다른 속성들 ... */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 한 가지 기억하실 점은 <code>__proto__</code>는 비밀 속성이며 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\">MDN 공식 문서</a> 현재 폐기된(deprecated) 속성이기 때문에 애플리케이션 코드에서 <code>__proto__</code> 속성을 직접적으로 참조하는 것은 권장되지 않습니다.</p>\n<p>웹 표준에 맞게 객체의 프로토타입에 접근하는 방법은 아래에서 자세히 다루도록 하겠습니다.</p>\n<h2 id=\"프로토타입-설정\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%84%A4%EC%A0%95\" aria-label=\"프로토타입 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 설정</h2>\n<p>객체의 프로토타입은 일반적으로 객체를 생성할 때 생성자 함수에 의해 설정됩니다.\n생성자 함수의 <code>prototype</code> 속성이 가리키고 있는 객체를, 그 생성자 함수로 생성한 객체의 <code>__proto__</code> 속성도 가리키게 되지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndate<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>이 것은 사용자가 정의한 클래스도 마찬가지입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>객체를 생성하면서 프로토타입을 설정하는 또 다른 방법은 <code>Object.create()</code> 정적(static) 메서드를 사용하는 것입니다.\n<code>Object.create()</code> 메서드로 객체를 생성할 때 인자로 프로토타입을 넘기면 반환된 객체의 프로토타입으로 설정됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndate<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>자주 쓰이는 방법은 아니지만, 중괄호(<code>{}</code>) 기호를 통해서 객체 리터럴(literal)을 만들 때는 <code>__proto__</code> 속성에 바로 해당 객체의 프로토타입을 지정해줄 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Name: Dale'</span>\nperson<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2 id=\"프로토타입-확인\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%ED%99%95%EC%9D%B8\" aria-label=\"프로토타입 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 확인</h2>\n<p>대부분의 브라우저에서 객체의 프로토타입은 <code>__proto__</code> 속성에 저장되어 있지만, 위에서 말씀드린 것과 같이 <code>__proto__</code> 속성에 바로 접근하는 것은 웹 표준이 아니라서 피해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌</span>\nproto <span class=\"token operator\">===</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>대신 <code>Object</code> 클래스의 <code>getPrototypeOf()</code> 정적 메서드에 객체를 인자로 넘기면 해당 객체의 프로토타입이 무엇인지 알아낼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\nproto <span class=\"token operator\">===</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>다양한 방법으로 생성한 날짜 객체를 상대로 <code>Object.getPrototypeOf()</code> 메서드를 테스트해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code>Object.getPrototypeOf()</code> 메서드를 연쇄적으로 호출하여 객체의 프로토타입 체인(prototype chain)을 탐색할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></code></pre></div>\n<p>날짜 객체의 <strong>프로토타입의 프로토타입</strong>은 <code>Object</code> 클래스의 <code>prototype</code> 속성과 동일한 것을 확인할 수 있습니다.</p>\n<h2 id=\"프로토타입-변경\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EB%B3%80%EA%B2%BD\" aria-label=\"프로토타입 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 변경</h2>\n<p>객체의 프로토타입을 변경할 때도 객체 외부에서 폐기된 <code>__proto__</code> 비밀 속성에 접근하는 것은 웹 표준에 위배됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌</span>\nperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Name: Dale'</span></code></pre></div>\n<p>대신 <code>Object</code> 클래스의 <code>setPrototypeOf()</code> 정적 메서드를 사용하여 객체의 프로토타입을 안전하게 변경할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\nperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Dale\"</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Name: Dale'</span></code></pre></div>\n<p><code>Object.setPrototypeOf()</code> 메서드를 통해서 이미 생성된 객체의 프로토타입을 변경한다는 것은 해당 객체의 상속 체계에 큰 양향을 주기 때문에 흔히 필요한 작업이 아니며 브라우저에 따라서 성능 이슈를 일으킬 수 있습니다.\n따라서 가급적 객체를 생성할 시점에 프로토타입을 설정해주는 것이 더 바람직한 코딩 관례로 여겨집니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 자바스크립트에서 객체의 프로토타입을 제어하는 다양한 방법에 대해서 살펴보았습니다.</p>\n<p>객체의 <code>__proto__</code> 비밀 속성에 저장되는 프로토타입을 <code>Object.getPrototypeOf()</code>와 <code>Object.setPrototypeOf()</code> 메서드를 통해서 웹 표준에 맞게 접근하는 방법을 배웠습니다.</p>","timeToRead":3,"fields":{"slug":"/js-object-prototype-of/","tags":["JavaScript","object","prototype"]},"frontmatter":{"title":"자바스크립트 객체의 프로토타입을 다루는 방법","date":"Jan 11, 2024"}},"next":{"fields":{"slug":"/js-object-has-own/"},"frontmatter":{"title":"자바스크립트 객체에 특정 속성이 있는지 확인하는 방법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}