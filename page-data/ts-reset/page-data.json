{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/ts-reset/","result":{"pageContext":{"previous":null,"node":{"html":"<p>우리가 버그가 없는 코드를 작성하기 위해서 사용하는 타입스크립트도 알고 보면 은근히 버그 투성이라는 것을 혹시 알고 계신가요?</p>\n<p>이번 포스팅에서는 많은 개발자들이 타입스크립트로 코딩하다가 겪게 되는 황당한 경우에 대해서 알아보고, 이러한 타입스크립트의 버그를 깔끔하게 고쳐주는 <code>ts-reset</code>이라는 라이브러리를 소개해드리려고 합니다.</p>\n<h2 id=\"배열의-includes-함수의-배신\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-includes-%ED%95%A8%EC%88%98%EC%9D%98-%EB%B0%B0%EC%8B%A0\" aria-label=\"배열의 includes 함수의 배신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열의 includes() 함수의 배신</h2>\n<p>배열에 특정 요소가 존재하는지를 확인하기 위해서 <code>includes()</code> 함수를 많이 사용하시죠?\n그런데 배열을 상대로 <code>as const</code>를 사용하여 읽기 전용(read-only)으로 만들어주면 <code>includes()</code> 함수를 사용할 때 황당한 일을 겪을 수 있는데요.</p>\n<p>예를 들어, 숫자 <code>1</code>, <code>2</code>, <code>3</code>이 들어있는 읽기 전용 배열을 상대로 숫자 <code>4</code>가 들어있는지 물어보면 다음과 같이 어처구니 없는 타입 에러가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🤯 Argument of type '4' is not assignable to parameter of type '1 | 2 | 3'.ts(2345)</span>\n<span class=\"token comment\">//      ^? (method) ReadonlyArray&lt;1 | 2 | 3>.includes(searchElement: 1 | 2 | 3, fromIndex?: number | undefined): boolean</span></code></pre></div>\n<p>타입스크립트가 추론한 <code>includes()</code> 함수의 타입을 보면 인자로 <code>1</code>과 <code>2</code>와 <code>3</code> 중 하나만 받도록 되어있는데요.\n이럴 거면 뭐하려 <code>includes()</code> 함수를 쓰나요? 항상 참이 나올꺼잖아요.</p>\n<p>논리적으로 생각을 해보면 <code>includes()</code> 함수에 <code>1</code>과 <code>2</code>와 <code>3</code> 외에 다른 숫자도 넘길 수 있어야 합니다.</p>\n<p>그런데 놀랍게도 <code>ts-reset</code> 라이브러리를 사용하면 이 문제가 아주 자연스럽게 고쳐집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🎉 false</span>\n<span class=\"token comment\">//      ^? (method) ReadonlyArray&lt;1 | 2 | 3>.includes(searchElement: number, fromIndex?: number | undefined): boolean (+1 overload)</span></code></pre></div>\n<h2 id=\"배열의-indexof와-lastindexof의-배신\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-indexof%EC%99%80-lastindexof%EC%9D%98-%EB%B0%B0%EC%8B%A0\" aria-label=\"배열의 indexof와 lastindexof의 배신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열의 indexOf()와 lastIndexOf()의 배신</h2>\n<p>배열의 <code>indexOf()</code>와 <code>lastIndexOf()</code> 함수도 <code>includes()</code>와 비슷한 문제가 있는데요.\n읽기 전용 배열을 상대로 호출하면 배열에 들어있지 않는 값을 인수로 넘길 경우 예상치 못한 타입 에러가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😑 Argument of type '4' is not assignable to parameter of type '1 | 2 | 3'.ts(2345)</span>\n<span class=\"token comment\">//      ^? (method) ReadonlyArray&lt;1 | 2 | 3>.indexOf(searchElement: 1 | 2 | 3, fromIndex?: number | undefined): number</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😑 Argument of type '4' is not assignable to parameter of type '1 | 2 | 3'.ts(2345)</span>\n<span class=\"token comment\">//      ^? (method) ReadonlyArray&lt;1 | 2 | 3>.lastIndexOf(searchElement: 1 | 2 | 3, fromIndex?: number | undefined): number</span></code></pre></div>\n<p>이 문제 역시 프로젝트에 <code>ts-reset</code> 라이브러리만 설정해주면 알아서 교정이 됩니다.</p>\n<h2 id=\"배열의-filter-함수의-배신\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4%EC%9D%98-filter-%ED%95%A8%EC%88%98%EC%9D%98-%EB%B0%B0%EC%8B%A0\" aria-label=\"배열의 filter 함수의 배신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열의 filter() 함수의 배신</h2>\n<p>배열에서 특정 요건을 만족하는 요소를 추출하기 위해서 <code>filter()</code> 함수를 많이 사용하는데요.\n많은 개발자들이 <code>filter()</code> 함수를 사용해서 <code>undefined</code>나 <code>null</code>을 제거하더라도 타입에는 변함이 없다는 것을 깨닫고 당황하게 되죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"life\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"travel\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> validTags <span class=\"token operator\">=</span> tags<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"work\", \"life\", \"travel\"]</span>\n<span class=\"token comment\">//    ^? 😵 const validTags: (string | null | undefined)[]</span></code></pre></div>\n<p><code>filter()</code> 함수의 반환 타입에서 <code>undefined</code>나 <code>null</code>을 제거하려면 다음과 같이 type predicate을 사용해야하는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"life\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"travel\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> validTags <span class=\"token operator\">=</span> tags<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> tag <span class=\"token keyword\">is</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"work\", \"life\", \"travel\"]</span>\n<span class=\"token comment\">//    ^? const validTags: string[]</span></code></pre></div>\n<p>하지만 코딩하면서 매번 이렇게 해주는 게 상당히 번거로울 수 있으며 코드도 불필요하게 지저분해질 수 있죠.\n사실 논리적으로 따져보면 <code>validTags</code> 배열에는 <code>undefined</code>나 <code>null</code>이 남아있을 확률이 없는데 정말 이상하죠.</p>\n<p><code>ts-reset</code> 라이브러리를 사용하면 type predicate 없이도 의도했던 대로 타이핑이 되는 신기한 경험을 하실 수 있으실 거에요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Work\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Life\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Travel\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> validTags <span class=\"token operator\">=</span> tags<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"work\", \"life\", \"travel\"]</span>\n<span class=\"token comment\">//    ^? ✨ const validTags: string[]</span></code></pre></div>\n<h2 id=\"세트의-has-함수의-배신\" style=\"position:relative;\"><a href=\"#%EC%84%B8%ED%8A%B8%EC%9D%98-has-%ED%95%A8%EC%88%98%EC%9D%98-%EB%B0%B0%EC%8B%A0\" aria-label=\"세트의 has 함수의 배신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세트의 has() 함수의 배신</h2>\n<p><code>Set</code>은 데이터를 중복없이 저장하기 위해서 사용되는 자료 구조이며, <code>Set</code>의 <code>has()</code> 함수는 어떤 값이 현재 세트에 들어있는지를 확인하기 위해서 쓰입니다.\n그런데 이 <code>Set</code>의 <code>has()</code> 함수에 현재 세트에 들어있지 않은 값을 넘기면 다음과 같이 난감한 타입 에러와 마주하게 되는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> charSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😬 Argument of type '\"D\"' is not assignable to parameter of type '\"A\" | \"B\" | \"C\"'.ts(2345)</span>\n<span class=\"token comment\">//      ^? (method) Set&lt;\"A\" | \"B\" | \"C\">.has(value: \"A\" | \"B\" | \"C\"): boolean</span></code></pre></div>\n<p>아니 현재 세트가 담고있는 값만 인수로 넘길 수 있다면 뭐하러 <code>has()</code> 함수를 사용할까요?\n타입스크립트가 허용하는 값만 넘긴다면 어차피 항상 <code>true</code>가 반환될텐데요.</p>\n<p>이 문제도 <code>ts-reset</code> 라이브러리만 설정해주면 알아서 해결이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> charSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🎉 false</span>\n<span class=\"token comment\">//      ^? (method) Set&lt;\"A\" | \"B\" | \"C\">.has(value: string): boolean</span></code></pre></div>\n<h2 id=\"맵의-has-함수의-배신\" style=\"position:relative;\"><a href=\"#%EB%A7%B5%EC%9D%98-has-%ED%95%A8%EC%88%98%EC%9D%98-%EB%B0%B0%EC%8B%A0\" aria-label=\"맵의 has 함수의 배신 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맵의 has() 함수의 배신</h2>\n<p><code>Map</code>은 키와 값의 쌍의 데이터를 저장하기 위해서 사용되는 자료 구조이며, <code>Map</code>의 <code>has()</code> 함수는 어떤 키가 현재 맵에 들어잇는지를 확인하기 위해서 쓰입니다.\n그런데 이 <code>Map</code>의 <code>has()</code> 함수에 현재 세트에 들어있지 않은 키를 넘기면 <code>Set</code>과 유사한 타입 에러가 발생하는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> charSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 😮‍💨 Argument of type '\"D\"' is not assignable to parameter of type '\"A\" | \"B\" | \"C\"'.ts(2345)</span>\n<span class=\"token comment\">//      ^? (method) Map&lt;\"A\" | \"B\" | \"C\", \"a\" | \"b\" | \"c\">.has(key: \"A\" | \"B\" | \"C\"): boolean</span></code></pre></div>\n<p><code>has()</code> 함수에 이미 맵에 들어있는 키만 넘길 수 있다면 굳이 <code>has()</code> 함수를 사용할 이유가 없겠죠?</p>\n<p>이 버그도 <code>ts-reset</code> 라이브러리의 도움을 받아 고칠 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> charSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncharSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🥳 false</span>\n<span class=\"token comment\">//      ^? (method) Map&lt;\"A\" | \"B\" | \"C\", \"a\" | \"b\" | \"c\">.has(value: string): boolean</span></code></pre></div>\n<h2 id=\"jsonparse-함수의-위험성\" style=\"position:relative;\"><a href=\"#jsonparse-%ED%95%A8%EC%88%98%EC%9D%98-%EC%9C%84%ED%97%98%EC%84%B1\" aria-label=\"jsonparse 함수의 위험성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON.parse() 함수의 위험성</h2>\n<p>타입스크립트에서 <code>JSON</code> 내장 객체의 <code>parse()</code> 함수가 <code>any</code> 타입을 반환한다는 것을 알고 계셨나요?\n이 것은 타입 안전한(type-safe) 코드를 작성하는데 큰 문제가 될 수 있는데요.</p>\n<p>예를 들어, 다음 예제 코드를 보면 <code>JSON.parse()</code>의 반환 결과를 <code>user</code> 변수에 저장하고 있는데요.\n<code>user</code> 변수의 타입이 <code>any</code>가 되기 때문에 아무 속성이나 막 접근해도 아무런 타입 에러가 발생하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* 어떤 문자열 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    ^? const user:any</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🤨 타입 에러가 발생하지 않음</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">xyz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🤨 타입 에러가 발생하지 않음</span></code></pre></div>\n<p><code>JSON.parse()</code> 함수의 반환 타입이 <code>any</code> 대신에 <code>unknown</code>이었다면 어땠을까요?\n우리는 다음과 같이 적절히 type guard를 사용해서 좀 더 타입 안전한 코드를 작성했을 것입니다.\n이를 통해서 해당 객체에 존재하는 속성에만 접근할 수 있는 것이지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* 어떤 문자열 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    ^? const user:unknown</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> user <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> user <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"email\"</span> <span class=\"token keyword\">in</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 안전 ✅</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>ts-reset</code> 라이브러리는 위와 같이 <code>JSON.parse()</code> 함수가 <code>unknown</code> 타입을 반환해도록 해줍니다.</p>\n<blockquote>\n<p>자바스크립트에서 JSON 데이터를 다룰 때 사용되는 <code>JSON</code> 내장 객체에 대해서는 <a href=\"/js-json/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"fetch-함수의-위험성\" style=\"position:relative;\"><a href=\"#fetch-%ED%95%A8%EC%88%98%EC%9D%98-%EC%9C%84%ED%97%98%EC%84%B1\" aria-label=\"fetch 함수의 위험성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fetch() 함수의 위험성</h2>\n<p><code>fetch()</code> 함수를 사용할 때도 <code>JSON.parse()</code> 함수를 사용할 때와 비슷한 문제를 겪을 수 있는데요.\n<code>json()</code> 함수를 사용해서 읽어낸 응답 데이터가 <code>any</code> 타입이 되서 제대로 된 타입 검사가 이뤄지지 않는다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* 어떤 URL */</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">xyz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🫣 타입 에러가 발생하지 않음</span>\n<span class=\"token comment\">//       ^? (parameter) data: any</span></code></pre></div>\n<p><code>ts-reset</code> 라이브러리를 사용하면 <code>json()</code> 함수가 <code>any</code> 대신에 <code>unknown</code> 타입을 반환하기 때문에 이러한 위험을 피할 수 있습니다.</p>\n<blockquote>\n<p>자바스크립트에서 원격 API를 호출할 때 사용되는 <code>fetch()</code> 함수에 대해서는 <a href=\"/js-window-fetch/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"ts-reset-설치설정\" style=\"position:relative;\"><a href=\"#ts-reset-%EC%84%A4%EC%B9%98%EC%84%A4%EC%A0%95\" aria-label=\"ts reset 설치설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ts-reset 설치/설정</h2>\n<p>자 그럼 이렇게 다양한 타입스크립트의 버그를 고쳐주는 <code>ts-reset</code>은 어떻게 사용할까요?</p>\n<p>우선 npm을 이용하여 <code>@total-typescript/ts-reset</code>이라는 패키지를 개발 의존성으로 설치해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D @total-typescript/ts-reset</code></pre></div>\n<p>그 다음 프로젝트 최상위 디렉토리에 <code>reset.d.ts</code> 파일을 만들고, 그 안에 <code>@total-typescript/ts-reset</code> 패키지를 불러오면 설정 끝입니다!\n정말 간단하죠?</p>\n<div class=\"gatsby-code-title\">reset.d.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"@total-typescript/ts-reset\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"주의-사항\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\" aria-label=\"주의 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의 사항</h2>\n<p>라이브러리 개발을 하시고 계시다면 <code>ts-reset</code> 라이브러리를 사용하지 않도록 주의 바라겠습니다.\n왜냐하면 라이브러리 사용자도 <code>ts-reset</code>를 쓰도록 강제하는 효과가 생기기 때문입니다.\n따라서 <code>ts-reset</code> 라이브러리는 애플리케이션 개발할 때만 사용하셔야 합니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>굳게 믿었던 타입스크립트에 논리적으로 납득이 어려운 이러한 자잘한 문제들이 여기저기 숨어 있다는 게 재미있지 않나요?</p>\n<p>제가 이 것을 타입스크립트의 버그라고 표현한 부분에 대해서는 오해가 있을 수 있을 것 같아서 첨언드리고 싶은데요.\n사실 제가 본 포스팅에서 다룬 문제 하나 하나를 깊게 파고 들어가시면 타입스크립트가 그렇게 동작하는데는 다 나름의 그럴뜻한 이유가 있다는 것을 알 수 있습니다.</p>\n<p>타입스크립트가 현재 v5로 나온지가 벌써 10년이 넘었고 워낙 대중적으로 사용되는 자바스크립트 컴파일러다 보니 이미 이러한 동작에 의존하고 있는 코드가 너무나도 방대하죠.\n따라서 과거에 했던 결정이 실수든 아니든 하위 호환성을 보장하려면 쉽게 번복하기가 쉽지가 않다는 부분을 감안할 필요가 있겠습니다.</p>\n<p>다행이도 이러한 황당한 문제를 피할 수 있도록 도와주는 <code>ts-reset</code>이라는 고마운 라이브러리가 있으니, 개발자로서 타입스크립트 코딩 경험을 개선하시는데 잘 활용하셨으면 좋겠습니다.</p>","timeToRead":8,"fields":{"slug":"/ts-reset/","tags":["TypeScript","JavaScript","library"]},"frontmatter":{"title":"ts-reset: 타입스크립트한테 뒤통수 맞지 않기","date":"May 25, 2023"}},"next":{"fields":{"slug":"/css-object-fit/"},"frontmatter":{"title":"CSS의 object-fit 속성으로 이미지를 왜곡없이 보여주기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}