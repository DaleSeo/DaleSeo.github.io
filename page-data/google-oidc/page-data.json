{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/google-oidc/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-asyncio/"},"frontmatter":{"title":"파이썬에서 asyncio로 비동기 처리하기"}},"node":{"html":"<p>최근에는 아이디와 비밀번호 입력없이도 구글이나 페이스북과 같은 대형 플랫폼을 통해서 로그인 할 수 있는 서비스들을 많이 볼 수 있습니다.\n이번 포스팅에서는 이렇게 사용자 인증을 다른 서비스에 위임하기 위해서 사용되는 프로토콜인 OpenID Connect에 대해서 알아보겠습니다.</p>\n<h2 id=\"openid-connect란\" style=\"position:relative;\"><a href=\"#openid-connect%EB%9E%80\" aria-label=\"openid connect란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OpenID Connect란?</h2>\n<p>예전에는 사용자 데이터를 서비스에서 직접 관리하는 경우가 많았지만, 개인 정보가 유출되는 보안 사고가 잇달아 발생함에 따라, 요즘에는 사용자 데이터를 자체적으로 보관하는 것 자체가 부담스러운 작업이 되어가고 있습니다. 이 때문에, 최근에는 사용자 데이터를 안전하게 관리할 역량이 있는 구글과 같은 대형 플랫폼을 통해서 로그인 처리를 하는 서비스들이 점점 많아지고 있는 추세입니다.</p>\n<p>거의 왠만한 사용자는 구글이나 페이스북, 트위터에 이미 가입을 해서 계정이 있기 때문에 이러한 대형 플랫폼 통해 로그인 처리를 하면 사용자 데이터를 직접 관리하지 않고도 사용자를 인증을 구현할 수 있습니다. 사용자 입장에서도 서비스마다 아이디와 패스워드를 기억할 필요가 없고 귀찮은 회원 가입 절차도 거치지 않을 수 있어서 전통적인 로그인 방법보다 편리하게 느껴지는 장점이 있습니다.</p>\n<p>OpenID Connect(OIDC)는 현재 구글 뿐만 아니라 많은 글로벌 플랫폼들이 다른 서비스에게 사용자 인증을 제공을 위해 사용하고 있는 프토콜입니다. 우리는 애플리케이션 개발자로서 OIDC 프로토콜을 이용하여 이러한 대형 플랫폼을 통해 사용자를 안전하게 인증하고 사용자의 동의 하에 해당 플랫폼에서 관리되고 있는 개인 정보에 접근할 수 있습니다.</p>\n<h2 id=\"oauth와의-차이\" style=\"position:relative;\"><a href=\"#oauth%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"oauth와의 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OAuth와의 차이</h2>\n<p>OpenID Connect는 기본적으로 OAuth 프로토콜을 기반으로 작동하는 프로토콜이기 때문에 기술적으로 사용하는 방법이 매우 유사하지만 사용하는 목적에서는 큰 차이가 있습니다.</p>\n<p>OIDC는 인증(Authentication)을 위해서 사용하고, OAuth는 인가(Authroization)를 위해서 사용합니다. 다시말해, OIDC는 다른 플랫폼을 통해서 사용자가 누구인지를 확인하기 위해서 사용하는 반면에, OAuth는 해당 플랫폼에 저장된 사용자의 데이터에 접근하기 위해서 사용합니다.</p>\n<p>따라서, OAuth의 목적은 다른 플랫폼의 다른 API를 호출하기 위해서 access token을 확보하는 것입니다. 하지만 OIDC의 경우, 사용자의 개인 정보가 담긴 id token을 확보라는 다른 목적을 가지고 있습니다.</p>\n<h2 id=\"구글-oauth-20-설정\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EA%B8%80-oauth-20-%EC%84%A4%EC%A0%95\" aria-label=\"구글 oauth 20 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구글 OAuth 2.0 설정</h2>\n<p>구글 OpenID Connect를 사용하려면 OAuth 2.0과 마찬가지로 <a href=\"https://console.developers.google.com/apis\">구글 API 콘솔</a>에서 클라이언트 등록 후에 클라이언트 아이디(client id)를 발급 받아야 합니다.</p>\n<p>이에 대해서는 별도로 <a href=\"/google-oauth\">OAuth 2.0 관련 포스팅</a>에 자세히 설명해 두었으니 참고바라겠습니다.</p>\n<h2 id=\"인가-서버-url\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EA%B0%80-%EC%84%9C%EB%B2%84-url\" aria-label=\"인가 서버 url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인가 서버 URL</h2>\n<p>OIDC의 시작은 사용자가 구글 인가 서버(Authorization Server)에 접속하여 로그인하는 것입니다.\n이를 위해서는 먼저 사용자가 접속해야하는 구글 인가 서버의 URL을 만들어야 하는데요.\n여러 개의 쿼리 파라미터가 있지만, 필수 파라미터인 <code>client_id</code>, <code>redirect_uri</code>, <code>response_type</code>, <code>scope</code>, <code>nonce</code>는 반드시 지정해줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> qs <span class=\"token keyword\">from</span> <span class=\"token string\">\"qs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">CLIENT_ID</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;자신의 애플리케이션이 발급받은 클라이언트 아이디>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AUTHORIZE_URI</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"https://accounts.google.com/o/oauth2/v2/auth\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> queryStr <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  client_id<span class=\"token operator\">:</span> <span class=\"token constant\">CLIENT_ID</span><span class=\"token punctuation\">,</span>\n  redirect_uri<span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">,</span>\n  response_type<span class=\"token operator\">:</span> <span class=\"token string\">\"token id_token\"</span><span class=\"token punctuation\">,</span>\n  scope<span class=\"token operator\">:</span> <span class=\"token string\">\"openid profile email\"</span><span class=\"token punctuation\">,</span>\n  nonce<span class=\"token operator\">:</span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> loginUrl <span class=\"token operator\">=</span> <span class=\"token constant\">AUTHORIZE_URI</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"?\"</span> <span class=\"token operator\">+</span> queryStr<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>client_id</code>는 구글 클라이언트를 등록하면 누구나 바로 얻을 수 있고, <code>redirect_uri</code>는 구글 API 콘솔에서 직접 설정한 내 애플리케이션의 URL입니다.\n실습 애플리케이션은 페이지가 하나 밖에 없는 SPA이기 때문에, 현재 URL을 <code>redirect_uri</code>로 설정하였습니다.\n<code>response_type</code>은 어떤 OAuth 방식을 사용하는지를 결정하는데, <code>token id_token</code>로 설정하면 보통 자바스크립트 애플리케이션에서 사용하는 implicit grant 방식이 적용됩니다.\n<code>scope</code>은 구글 사용자의 어떤 데이터에 대한 권한을 요청하는지를 나타내는데, <code>openid</code>는 반드시 필요하며, <code>profile</code>과 <code>email</code>을 추가할 수 있습니다.</p>\n<h2 id=\"id-token-획득\" style=\"position:relative;\"><a href=\"#id-token-%ED%9A%8D%EB%93%9D\" aria-label=\"id token 획득 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ID Token 획득</h2>\n<p>사용자가 구글 인가 서버 URL을 통해 애플리케이션에서 요청하는 권한을 허용해주면, 구글 인가 서버는 <code>redirect_uri</code>로 access token과 id token을 보내줍니다.\naccess token과 id token 값은 <code>redirect_uri</code>의 hash 부분에 포함되어 있기 때문에 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location\">DOM의 Location API</a>를 통해 여럽지 않게 읽을 수 있습니다.\nOIDC에서는 access token에는 큰 관심이 없기 때문에, 사용자 정보가 담긴 id token 값만 읽어오면 됩니다.\nid token이 없는 경우에는 인가 서버 URL(<code>loginUrl</code>)로 사용자를 리다이렉트 시켜서 사용자가 구글 로그인을 할 수 있도록 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> qs <span class=\"token keyword\">from</span> <span class=\"token string\">\"qs\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id_token <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id_token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>loginUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"id-token-디코딩\" style=\"position:relative;\"><a href=\"#id-token-%EB%94%94%EC%BD%94%EB%94%A9\" aria-label=\"id token 디코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ID Token 디코딩</h2>\n<p>확보된 id token 값은 <a href=\"https://jwt.io\">JSON Web Tokens(JWT)</a> 방식으로 인코딩이 되어 있는 문자열이므로 먼저 디코딩을 해줘야 합니다.\n<a href=\"https://www.npmjs.com/package/jwt-decode\"><code>jwt-decode</code></a>와 같은 라이브러리를 사용해서 이 id token을 디코딩하면 여러 가지 사용자 데이터가 담긴 객체를 얻을 수 있습니다.\n이 중 사용자의 이메일과 이름, 프로필 사진을 읽어서 화면에 출력해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> jwtDecode <span class=\"token keyword\">from</span> <span class=\"token string\">\"jwt-decode\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 생략</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> email<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> picture <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">jwtDecode</span><span class=\"token punctuation\">(</span>id_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Google Profile<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dt<span class=\"token operator\">></span>email<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dt<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dd<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>email<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dd<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dt<span class=\"token operator\">></span>name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dt<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dd<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dd<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dt<span class=\"token operator\">></span>picture<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dt<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>dd<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>picture<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dd<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>JWT(JSON Web Token)에 대한 자세한 설명은 <a href=\"/jwt/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<ul>\n<li>테스트: <a href=\"https://google-oidc.stackblitz.io\">https://google-oidc.stackblitz.io</a></li>\n</ul>\n<iframe src=\"https://stackblitz.com/edit/google-oidc?embed=1&file=App.js&view=editor\"\nstyle=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Google API를 직접 호출해보면서 OpenID Connect가 어떻게 동작하는지 간단하게 살펴보았습니다.\n실습 프로젝트에서는 내부 동작을 이해하기 위해서 직접 API를 호출하였지만, 실제 프로젝트에서는 반드시 <a href=\"https://developers.google.com/identity/protocols/OAuth2#libraries\">구글에서 언어별로 제공하는 SDK</a>를 사용하셔야 합니다.</p>\n<p>구글 OpenID Connect에 대한 좀 더 자세한 내용은 아래 공식 레퍼런스를 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://developers.google.com/identity/protocols/OpenIDConnect\">OpenID Connect</a></li>\n</ul>","timeToRead":4,"fields":{"slug":"/google-oidc/","tags":["JavaScript","security","authentication","OIDC","OpenID Connect","OAuth","OAuth2.0","구글 API","Google API","JWT","React","리액트"]},"frontmatter":{"title":"구글 OpenID Connect 사용법","date":"Dec 29, 2019"}},"next":{"fields":{"slug":"/google-oauth/"},"frontmatter":{"title":"OAuth 2.0으로 구글 API 호출하기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}