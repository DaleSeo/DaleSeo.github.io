{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/nestjs/","result":{"pageContext":{"previous":null,"node":{"html":"<p>최근에 NestJS로 시작하는 백앤드(backend) 프로젝트가 부쩍 많아진 느낌입니다.\n이번 포스팅에서는 차세대 웹 프레임워크로 각광받고 있는 NestJS에 대해서 함께 알아보려고 합니다.</p>\n<h2 id=\"nestjs란\" style=\"position:relative;\"><a href=\"#nestjs%EB%9E%80\" aria-label=\"nestjs란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS란?</h2>\n<p><a href=\"https://nestjs.com/\">NestJS</a>는 자바스크립트나 타입스크립트로 서버 애플리케이션을 개발할 수 있는 백앤드 웹 프레임워크(Web framework)입니다.\n다른 프로그래밍 언어에서 넘어오신 분이라면 자바의 스프링(Spring)이나 파이썬의 장고(Django)를 생각하시면 이해가 쉬우실 것 같네요.</p>\n<p>자바스크립트 쪽에서는 상당히 오랫동안 <a href=\"https://expressjs.com/\">Express</a>라는 웹 프레임워크가 서버 애플리케이션 개발에 있어서 압도적인 점유율을 차지했었는데요.\nExpress가 워낙 경량화된 프레임워크여서 정말 핵심적인 기능만 제공하다보니 간단한 서버 애플리케이션을 개발하는데는 큰 문제가 없었지만,\n어느정도 규모가 있는 프로젝트에서는 직접 구현해야하는 기능이 너무 많고 다른 라이브러리를 추가로 필요로 하는 경우도 많아서 불편했었습니다.</p>\n<p>이러한 문제를 해결하기위해서 등장한 것이 NestJS라는 프레임워크인데요.\nNestJS는 기업용 애플리케이션을 개발하기에도 무리가 없을 정도로 왠만한 기능은 내장하고 있고 플러그인(plugin)을 통해서 쉽게 확장도 할 수 있습니다.\n뿐만 아니라 OOP(객체 지향 프로그래밍), DI(의존성 주입), AOP(과점 지향 프로그래밍)와 같은 백앤드 개발 트랜드 충실히 반영하고 있기 때문에 고품질의 코드를 작성하는데도 도움을 주는 것으로 알려져있습니다.</p>\n<p>참고로 많은 분들이 이름이 비슷해서 NestJS를 <a href=\"https://nextjs.org/\">NextJS</a>로 착각하시곤 하는데요.\nNextJS는 리액트(React) 기반 SSR 프레임워크이며, NestJS는 주로 서버 사이드 애플리케이션이나 백앤드(backend) API를 개발할 때 사용되오니 착오없으시길 바라겠습니다.</p>\n<blockquote>\n<p>SSR(Server-side rendering)에 대해서는 <a href=\"/spa-ssg-ssr/\">관련 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<p>그럼 서론은 여기서 줄이고 간단한 실습을 통해서 NestJS를 어떻게 시작할 수 있는지 알아볼까요? 🏇</p>\n<h2 id=\"nestjs-cli-설치\" style=\"position:relative;\"><a href=\"#nestjs-cli-%EC%84%A4%EC%B9%98\" aria-label=\"nestjs cli 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS CLI 설치</h2>\n<p>NestJS는 개발자가 좀 더 편리하게 NestJS 프로젝트를 개발하고 설정할 수 있도록 강력한 CLI(명령 줄 인터페이스) 도구를 제공하고 있습니다.\n따라서 NestJS CLI를 통해서 NestJS를 시작하시는 것을 강력하게 추천드리고 싶습니다.</p>\n<p>그럼 터미널을 열고 다음 명령어를 실행하여 NestJS CLI 도구를 전역(global)에 설치해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -g @nestjs/cli\nadded <span class=\"token number\">251</span> packages, and audited <span class=\"token number\">252</span> packages <span class=\"token keyword\">in</span> 11s\n\n<span class=\"token number\">41</span> packages are looking <span class=\"token keyword\">for</span> funding\n  run <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> fund<span class=\"token variable\">`</span></span> <span class=\"token keyword\">for</span> details\n\nfound <span class=\"token number\">0</span> vulnerabilities</code></pre></div>\n<p>이제 터미널에서 <code>nest</code>라는 명령어를 사용할 수 있는데요.\n단순히 <code>nest</code> 명령어를 실행해보면 간단한 설명서를 보실 수 있으실 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest\nnest\nUsage: nest <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span>\n\nOptions:\n  -v, --version                                   Output the current version.\n  -h, --help                                      Output usage information.\n\nCommands:\n  new<span class=\"token operator\">|</span>n <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>                          Generate Nest application.\n  build <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>app<span class=\"token punctuation\">]</span>                           Build Nest application.\n  start <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>app<span class=\"token punctuation\">]</span>                           Run Nest application.\n  info<span class=\"token operator\">|</span>i                                          Display Nest project details.\n  <span class=\"token function\">add</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>library<span class=\"token operator\">></span>                         Adds support <span class=\"token keyword\">for</span> an external library to your project.\n  generate<span class=\"token operator\">|</span>g <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>schematic<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span>  Generate a Nest element.\n    Schematics available on @nestjs/schematics collection:\n      ┌───────────────┬─────────────┬──────────────────────────────────────────────┐\n      │ name          │ <span class=\"token builtin class-name\">alias</span>       │ description                                  │\n      │ application   │ application │ Generate a new application workspace         │\n      │ class         │ cl          │ Generate a new class                         │\n      │ configuration │ config      │ Generate a CLI configuration <span class=\"token function\">file</span>            │\n      │ controller    │ co          │ Generate a controller declaration            │\n      │ decorator     │ d           │ Generate a custom decorator                  │\n      │ filter        │ f           │ Generate a filter declaration                │\n      │ gateway       │ ga          │ Generate a gateway declaration               │\n      │ guard         │ gu          │ Generate a guard declaration                 │\n      │ interceptor   │ itc         │ Generate an interceptor declaration          │\n      │ interface     │ itf         │ Generate an interface                        │\n      │ middleware    │ mi          │ Generate a middleware declaration            │\n      │ module        │ mo          │ Generate a module declaration                │\n      │ pipe          │ pi          │ Generate a pipe declaration                  │\n      │ provider      │ <span class=\"token function\">pr</span>          │ Generate a provider declaration              │\n      │ resolver      │ r           │ Generate a GraphQL resolver declaration      │\n      │ <span class=\"token function\">service</span>       │ s           │ Generate a <span class=\"token function\">service</span> declaration               │\n      │ library       │ lib         │ Generate a new library within a monorepo     │\n      │ sub-app       │ app         │ Generate a new application within a monorepo │\n      │ resource      │ res         │ Generate a new CRUD resource                 │\n      └───────────────┴─────────────┴──────────────────────────────────────────────┘</code></pre></div>\n<h2 id=\"nestjs-프로젝트-구성\" style=\"position:relative;\"><a href=\"#nestjs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"nestjs 프로젝트 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS 프로젝트 구성</h2>\n<p>다음으로 NestJS CLI를 이용해서 새로운 NestJS 프로젝트를 구성해보겠습니다.</p>\n<p><code>nest new</code> 명령어 뒤에 프로젝트 명을 넘기면 해당 이름의 디렉토리가 생기고 그 안에 NestJS 프로젝트가 자등으로 구성이 될 것입니다.\n저는 <code>our-nestjs</code>를 프로젝트 이름으로 사용할께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest new our-nestjs\n⚡  We will scaffold your app <span class=\"token keyword\">in</span> a few seconds<span class=\"token punctuation\">..</span>\n\n? Which package manager would you ❤️  to use? <span class=\"token punctuation\">(</span>Use arrow keys<span class=\"token punctuation\">)</span>\n❯ <span class=\"token function\">npm</span>\n  <span class=\"token function\">yarn</span>\n  <span class=\"token function\">pnpm</span></code></pre></div>\n<p>명령어를 실행하면 자바스크립트 패키지 매니저로 무엇을 사용할 건지 물어볼건데요\n저는 그냥 Node.js에 기본 내장된 npm을 사용할께요.\n여러분은 원하시는 옵션을 선택하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">⚡  We will scaffold your app <span class=\"token keyword\">in</span> a few seconds<span class=\"token punctuation\">..</span>\n\n? Which package manager would you ❤️  to use? <span class=\"token function\">npm</span>\nCREATE our-nestjs/.eslintrc.js <span class=\"token punctuation\">(</span><span class=\"token number\">663</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/.prettierrc <span class=\"token punctuation\">(</span><span class=\"token number\">51</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/README.md <span class=\"token punctuation\">(</span><span class=\"token number\">3340</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/nest-cli.json <span class=\"token punctuation\">(</span><span class=\"token number\">171</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/package.json <span class=\"token punctuation\">(</span><span class=\"token number\">1941</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/tsconfig.build.json <span class=\"token punctuation\">(</span><span class=\"token number\">97</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/tsconfig.json <span class=\"token punctuation\">(</span><span class=\"token number\">546</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/src/app.controller.spec.ts <span class=\"token punctuation\">(</span><span class=\"token number\">617</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/src/app.controller.ts <span class=\"token punctuation\">(</span><span class=\"token number\">274</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/src/app.module.ts <span class=\"token punctuation\">(</span><span class=\"token number\">249</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/src/app.service.ts <span class=\"token punctuation\">(</span><span class=\"token number\">142</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/src/main.ts <span class=\"token punctuation\">(</span><span class=\"token number\">208</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/test/app.e2e-spec.ts <span class=\"token punctuation\">(</span><span class=\"token number\">630</span> bytes<span class=\"token punctuation\">)</span>\nCREATE our-nestjs/test/jest-e2e.json <span class=\"token punctuation\">(</span><span class=\"token number\">183</span> bytes<span class=\"token punctuation\">)</span>\n\n✔ Installation <span class=\"token keyword\">in</span> progress<span class=\"token punctuation\">..</span>. ☕\n\n🚀  Successfully created project our-nestjs\n👉  Get started with the following commands:\n\n$ <span class=\"token builtin class-name\">cd</span> our-nestjs\n$ <span class=\"token function\">npm</span> run start\n\n\n                          Thanks <span class=\"token keyword\">for</span> installing Nest 🙏\n                 Please consider donating to our <span class=\"token function\">open</span> collective\n                        to <span class=\"token builtin class-name\">help</span> us maintain this package.\n\n\n               🍷  Donate: https://opencollective.com/nest</code></pre></div>\n<p>그러면 프로젝트 디렉토리에 여러가지 파일이 자동으로 생성되는 것을 볼 수 있으실 거에요.\n정말 편하죠? 😁</p>\n<h2 id=\"nestjs-애플리케이션-구동\" style=\"position:relative;\"><a href=\"#nestjs-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EA%B5%AC%EB%8F%99\" aria-label=\"nestjs 애플리케이션 구동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS 애플리케이션 구동</h2>\n<p>이제 시키는대로 프로젝트 디렉토리로 들어가서 <code>npm run start</code> 명령어를 실행해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> our-nestjs\n$ <span class=\"token function\">npm</span> run start\n\n<span class=\"token operator\">></span> our-nestjs@0.0.1 start\n<span class=\"token operator\">></span> nest start\n\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">23176</span>  - <span class=\"token number\">2022</span>-12-31, <span class=\"token number\">4</span>:23:39 p.m.     LOG <span class=\"token punctuation\">[</span>NestFactory<span class=\"token punctuation\">]</span> Starting Nest application<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">23176</span>  - <span class=\"token number\">2022</span>-12-31, <span class=\"token number\">4</span>:23:39 p.m.     LOG <span class=\"token punctuation\">[</span>InstanceLoader<span class=\"token punctuation\">]</span> AppModule dependencies initialized +16ms\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">23176</span>  - <span class=\"token number\">2022</span>-12-31, <span class=\"token number\">4</span>:23:39 p.m.     LOG <span class=\"token punctuation\">[</span>RoutesResolver<span class=\"token punctuation\">]</span> AppController <span class=\"token punctuation\">{</span>/<span class=\"token punctuation\">}</span>: +2ms\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">23176</span>  - <span class=\"token number\">2022</span>-12-31, <span class=\"token number\">4</span>:23:39 p.m.     LOG <span class=\"token punctuation\">[</span>RouterExplorer<span class=\"token punctuation\">]</span> Mapped <span class=\"token punctuation\">{</span>/, GET<span class=\"token punctuation\">}</span> route +1ms\n<span class=\"token punctuation\">[</span>Nest<span class=\"token punctuation\">]</span> <span class=\"token number\">23176</span>  - <span class=\"token number\">2022</span>-12-31, <span class=\"token number\">4</span>:23:39 p.m.     LOG <span class=\"token punctuation\">[</span>NestApplication<span class=\"token punctuation\">]</span> Nest application successfully started +0ms</code></pre></div>\n<p>그러면 NestJS 애플케이션이 구동되는 것을 볼 수 있는데요.\n다른 터미널창을 열고 <code>curl</code> 명령어로 <code>http://localhost:3000</code>을 찔러보면 <code>Hello World!</code>가 응답되는 것을 확인할 수 있으실 겁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> http://localhost:3000\nHello World<span class=\"token operator\">!</span>%</code></pre></div>\n<h2 id=\"maints\" style=\"position:relative;\"><a href=\"#maints\" aria-label=\"maints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main.ts</h2>\n<p>자동으로 생성된 파일 중에서 제일 먼저 살펴볼 파일은 <code>src</code> 디렉토리 안에 있는 <code>main.ts</code> 파일입니다.\n이 파일은 NestJS 애플리케이션이 시작되는 진입 지점(entry point)이 되는데요.\n파일을 열어보면 매우 짧은 코드가 들어있습니다.</p>\n<div class=\"gatsby-code-title\">src/main.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/core\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.module\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드의 마지막 줄에는 결국 <code>bootstrap()</code>이라는 함수를 호출하고 있는데요.\n<code>bootstrap()</code> 함수 안에서는 <code>app.module</code> 파일로 부터 <code>AppModule</code>를 불러와서 <code>NestFactory</code>가 애플리케이션을 객체를 생성하고 3000 포트로 HTTP 요청을 받고 있습니다.</p>\n<p>이 것이 아까 전에 위에서 <code>http://localhost:3000</code>에 접속이 가능했던 이유입니다.</p>\n<h2 id=\"모듈module\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88module\" aria-label=\"모듈module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈(Module)</h2>\n<p><code>main.ts</code> 파일에서 불러오고 있는 <code>app.module.ts</code> 파일을 열어보면 <code>AppModule</code> 클래스를 찾을 수 있습니다.</p>\n<div class=\"gatsby-code-title\">src/app.module.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.controller\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 클래스 위에는 <code>@Module()</code>이라는 데코레이터(decorator)가 호출되고 있는데요.\n데코레이터는 기존에 Angular를 써보신 분이라면 익숙하시겠지만 자바스크립트에서는 비교적 새로운 문법이기 때문에 생소하게 느끼는 분들도 많을 것 같습니다.</p>\n<p>NestJS에서 데코레이터는 일반적으로 클래스나 메서드에 어떤 정보를 추가해줄 때 많이 활용이 되고 있는데요.\n파이썬에서도 비슷한 데코레이터 문법이 있고, 자바에서는 어노테이션(annotation)이라고 부르는 문법 요소랑 비슷하다고 생각하시면 됩니다.\n궁금하신 분들은 추가로 검색을 해보시기를 추천드릴께요.</p>\n<p>아무튼 <code>@Module()</code> 데코레이터는 <code>imports</code>, <code>controllers</code>, <code>providers</code> 속성으로 이루어진 객체를 인자로 받는데요.\n<code>controllers</code> 속성에는 HTTP 요청을 받아서 응답을 보내는 컨트롤러 클래스를 나열해줄 수 있고요.\n<code>providers</code> 속성에는 컨트롤러가 사용하는 다양한 일반 클래스(주로 서비스 클래스)를 나열해줄 수 있습니다.\n여기서는 비어있는 <code>imports</code> 속성에는 해당 모듈이 의존하고 있는 다른 모듈을 나열해줄 수 있습니다.</p>\n<p>모듈(module)은 NestJS에 매우 중요한 개념이라서 잘 이해하고 있어야 하는데요.\n하나의 NestJS 애플리케이션은 보통 여러 개의 모듈로 이루어지는데 기능 단위로 애플리케이션을 쪼개놓은 단위라로 생각할 수 있습니다.</p>\n<p>여기서 중요한 것은 모듈은 서로 의존할 수 있다는 것인데요.\n바로 <code>@Module()</code> 데코레이터에 인자로 넘기는 객체의 <code>imports</code> 속성을 통해서 이 의존 관계를 명시하도록 되었습니다.</p>\n<p><code>nestjs new</code> 명령어로 NestJS 프로젝트를 생성하면 기본적으로 최상위 모듈인 <code>AppModule</code> 하나 밖에 없지만,\n프로젝트 규모가 점점 커지게 되면 다른 모듈을 작성한 후 <code>AppModule</code>이 불러올 수 있도록 <code>@Module()</code> 데코레이터를 호출할 때 <code>imports</code> 속성을 사용하게 됩니다.</p>\n<p>정리하면 NestJS는 일종의 IoC(Inversion of Control) 컨테이너의 역할을 하면서 여러 모듈을 DI(의존성 주입)을 통해서 엮어준다고 보시면 됩니다.\n어떻게 엮어야 하는지는 개발자가 각 모듈에 <code>@Module()</code> 데코레이터의 <code>imports</code> 속성으로 NestJS에 알려줘야 하고요.</p>\n<h2 id=\"컨트롤러controller\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%ACcontroller\" aria-label=\"컨트롤러controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨트롤러(Controller)</h2>\n<p>다음으로 NestJS에서 하나의 축을 담당하고 있는 컨트롤러에 대해서 알아보겠습니다.</p>\n<p>컨트롤러는 HTTP 요청을 받아서 처리하고 응답을 해주는 역할을 담하고 있는 클래스인데요.\n<code>src</code> 디렉토리 안에 있는 <code>app.controller.ts</code> 파일을 열어서 컨트롤러가 어떻게 생겼는지 확인해보겠습니다.</p>\n<div class=\"gatsby-code-title\">src/app.controller.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./app.service\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> appService<span class=\"token operator\">:</span> AppService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appService<span class=\"token punctuation\">.</span><span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 클래스 위에다가 <code>@Controller()</code> 데코레이터를 호출해주면 NestJS가 해당 클래스는 컨트롤러로 인식을 하게 되는데요.\n클래스 내의 각 메서드에는 <code>@Get()</code>, <code>@Post()</code>, <code>@Delete()</code>와 같은 HTTP 방식(method)에 해당하는 데코레이터를 붙여주게 됩니다.</p>\n<p>또한 이러한 데코레이터들은 URL 경로를 나타내는 문자열을 인자로 받는데요.\nNestJS는 데코레이터로 명시된 HTTP 방식과 URL 경로를 기준으로 부합하는 클래스의 메서드를 호출해줍니다.</p>\n<p>예를 들어, <code>@Controller(\"aaa\")</code>가 붙어있는 클래스의 <code>@Post(\"bbb\")</code>가 붙어있는 메서드가 있었다면,\nPOST 방식으로 <code>http://localhost:3000/aaa/bbb</code>을 찔렀을 대 해당 메소드가 호출되었을 것입니다.</p>\n<p>이를 통해 아까 전에 위에서 <code>http://localhost:3000</code>을 찔렀을 때, <code>AppController</code> 클래스의 <code>getHello()</code> 함수가 이를 받아서 <code>Hello World!</code>라는 응답을 해줬다는 것을 알 수 있습니다.</p>\n<h2 id=\"서비스service\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4service\" aria-label=\"서비스service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서비스(Service)</h2>\n<p>마지막으로 살펴볼 서비스 클래스는 일반적으로 비지니스 로직을 수행하는 역할을 담당합니다.</p>\n<p><code>src</code> 디렉토리 안에 있는 <code>app.service.ts</code>를 열오보면 <code>AppController</code> 클래스가 사용하고 있던 <code>AppService</code> 클래스를 확인할 수 있는데요.</p>\n<div class=\"gatsby-code-title\">src/app.service.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nestjs/common\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 클래스 위에는 <code>@Injectable()</code> 데코레이터가 사용되고 있죠?\n<code>@Injectable()</code> 데코레이터가 붙어있는 클래스는 NestJS가 인스턴스를 생성하여 다른 클래스에 생성자를 통해서 주입을 해줄 수 있습니다.</p>\n<p>위에서 <code>AppModule</code> 위에서 <code>@Module()</code> 데코레이터를 호출할 때 <code>providers</code> 속성에 <code>AppService</code> 클래스를 명시해줬었죠?\n그렇게 때문에 <code>AppController</code> 클래스의 생성자의 인자로 <code>AppService</code> 클래스의 인스턴스가 주입이 되었고,\n<code>AppController</code> 클래스의 <code>getHello</code> 메서드 내애서 <code>AppService</code> 클래스의 <code>getHello</code> 메서드를 호출할 수 있었던 것입니다.</p>\n<p>이렇게 컨트롤러의 역할과 서비스의 역할을 분리함으로써 좀 더 유지보수가 용이한 애플리케이션을 개발할 수가 있는 것입니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 간단한 실습을 통해서 NestJS 프로젝트를 시작하고 관련된 핵심 개념에 대해서 살펴보았습니다.\n기존에 스프링이나 장고와 같은 웹 프레임워크를 써보셨다면 특별히 새로울 것이 없겠지만,\n이러한 MVC 개념을 처음 접하시는 분들에게는 조금 어려운 내용이 되었을 것 같기도 합니다.</p>\n<p>본 포스팅에서 다룬 부분은 사실 NestJS가 제공하는 방대한 기능의 빙산의 일각이라고 볼 수 있는데요.\n추후 다른 포스팅을 통해서 NestJS의 여러가지 기능들을 좀 더 깊게 알아보는 시간을 갖도록 하겠습니다.</p>","timeToRead":9,"fields":{"slug":"/nestjs/","tags":["NestJS","Node.js","framework","JavaScript","TypeScript"]},"frontmatter":{"title":"NestJS 시작하기","date":"Jan 4, 2023"}},"next":{"fields":{"slug":"/aws-container-services/"},"frontmatter":{"title":"AWS 컨테이너 서비스 훑어보기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}