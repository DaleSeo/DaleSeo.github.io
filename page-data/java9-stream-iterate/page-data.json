{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/java9-stream-iterate/","result":{"pageContext":{"previous":{"fields":{"slug":"/css-display-inline-block/"},"frontmatter":{"title":"[CSS] display 속성: inline, block, inline-block"}},"node":{"html":"<p>Java9에서는 기존 Java8 때 부터 있었던 <code>Stream</code> 클래스의 <code>iterate()</code> 메서드를 오버로드(overload)한 신규 메서드가 추가되었습니다. 이번 포스트에서는 <code>Stream</code> 클래스의 정적 메서드인 <code>iterate()</code>에 대해서 얘기해보고자 합니다.</p>\n<p>메서드 이름이 암시하듯 <code>iterate()</code>는 어떤 연산을 반복적으로 수행할 때 사용되는 메서드이며, 명령형 프로그래밍(imperative programming)에서 <code>for</code>나 <code>while</code>과 같은 루프문으로 해결하던 코드를 함수형 프로그래밍(functional programming) 방식으로 작성할 때 유용하게 사용할 수 있습니다.</p>\n<p>이게 도대체 무슨 말인지 간단하게 0과 9 사이의 홀수를 더하는 예제 코드(1 + 3 + 5 + 7 + 9 = 25)를 통해서 살펴보겠습니다.</p>\n<h2 id=\"for-루프\" style=\"position:relative;\"><a href=\"#for-%EB%A3%A8%ED%94%84\" aria-label=\"for 루프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for 루프</h2>\n<p>먼저 <code>for</code> 루프를 사용하여 0과 9 사이의 모든 홀수를 더하는 더하는 전형적인 코드를 살펴보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"합: \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 합: 25</span></code></pre></div>\n<p>이 코드를 읽어보면, “일단 <code>sum</code> 변수를 <code>0</code>으로 초기화 후, <code>i</code> 변수를 <code>0</code>부터 <code>10</code>보다 작다면 <code>1</code>씩 계속 증가시키되, 만약 <code>i</code>가 홀수이면 <code>sum</code> 값에 더한다.” 처럼 될 것 입니다. 명령형 프로그래밍에서는 이처럼 지속적으로 변수의 상태를 변경하면서 수행해야 하는 단계를 매우 자세히 설명합니다.</p>\n<h2 id=\"java8의-iterate\" style=\"position:relative;\"><a href=\"#java8%EC%9D%98-iterate\" aria-label=\"java8의 iterate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java8의 iterate()</h2>\n<p>Java8에서는 <code>Stream</code> 클래스의 <code>iterate()</code> 메서드는 2개의 인자만 받았습니다. 첫번째 인자는 초기 값이고, 두번째 인자는 값이 어떻게 변경될지를 나타내는 람다 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-></span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"합: \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 합: 25</span></code></pre></div>\n<p>이 코드를 읽어보면, “초기 값 <code>0</code>에서 <code>1</code>씩 증가되는 값들을 담고 있는 스트림에서 홀수값을 처음 5개만 남기고 언박싱(unboxing) 후 더해서 <code>sum</code> 변수에 할당하라.” 처럼 될 것 입니다. 이 코드에서 <code>limit()</code>를 통해 스트림을 끊는 부분 상당히 눈에 거슬리지만, 이 부분이 없으면 이 코드는 멈추지 않고 영원히 돌아가게 됩니다.</p>\n<p>이처럼 Java8에서 <code>iterate()</code> 메서드는 조심스럽게 사용하지 않으면 무한 스트림을 만들어낼 수 있기 때문에 개발자들에게 많이 사랑 받지는 못했던 것 같습니다.</p>\n<h2 id=\"java9의-iterate\" style=\"position:relative;\"><a href=\"#java9%EC%9D%98-iterate\" aria-label=\"java9의 iterate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java9의 iterate()</h2>\n<p>Java9에서는 추가로 스트림 종료 조건을 인자로 받는 <code>iterate()</code> 메서드가 <code>Stream</code> 클래스에 추가되었습니다. 첫번째 인자는 초기 값이고, 두번째 인자는 종료 조건을 나타내는 람다 함수, 세번째 인자는 값이 어떻게 변경될지를 나타내는 람다 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-></span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-></span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"합: \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 합: 25</span></code></pre></div>\n<p>이 코드를 읽어보면, “초기 값 <code>0</code>에서 <code>10</code>보다 작다면 <code>1</code>씩 증가되는 값들을 담고 있는 스트림에서 홀수값만 남기고 언박싱(unboxing) 후 더해서 <code>sum</code> 변수에 할당하라.” 처럼 될 것 입니다.</p>\n<p>이처럼 Java9에서는 <code>iterate()</code> 메서드의 사용성이 개선되었기 때문에 예전보다는 좀 더 많이 사용되지 않을까 기대해봅니다. 특히, 기존에 <code>for</code> 루프문과 문법이 상당히 유사하기 때문에, 함수형 프로그래밍 방식의 코드를 선호하시는 분들께는 <code>iterate()</code> 메서드가 크게 어필할 수 있을 것 같습니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#iterate-T-java.util.function.Predicate-java.util.function.UnaryOperator-\">https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.html#iterate-T-java.util.function.Predicate-java.util.function.UnaryOperator-</a></li>\n</ul>","timeToRead":2,"fields":{"slug":"/java9-stream-iterate/","tags":["Java","자바","자바9","Java9","JDK9","Stream","FP","스트림","iterate"]},"frontmatter":{"title":"Java9에서 강화된 Stream 클래스의 iterate 정적 메서드","date":"Sep 1, 2018"}},"next":{"fields":{"slug":"/java9-optional/"},"frontmatter":{"title":"Java9에서 추가된 Optional 기능 소개"}}}}}