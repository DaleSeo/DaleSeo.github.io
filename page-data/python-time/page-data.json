{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-time/","result":{"pageContext":{"previous":{"fields":{"slug":"/git-push/"},"frontmatter":{"title":"git push 사용법/팁"}},"node":{"html":"<p>간단한 시간 데이터를 처리하기 위해서 사용되는 파이썬의 내장 모듈인 <code>time</code>에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"epoch-time\" style=\"position:relative;\"><a href=\"#epoch-time\" aria-label=\"epoch time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Epoch Time</h2>\n<p>파이썬의 <code>time</code> 내장 모듈은 주로 epoch time(Unix time, POSIX time)을 다룰 때 사용합니다.<br>\nepoch time은 UTC(GMT+0) 기준으로 1970년 1월 1일 0시 0분 0초부터의 경과 시간을 나타내는데 흔히 timestamp라고 불리기도 합니다.</p>\n<p>인간이 사용하는 사용하는 날짜와 시간에는 시간대(time zone), 일괄절약타임(date light saving), 윤년/윤달, 양력/음력 등 여러가지 복잡한 개념들이 많이 들어가 있습니다.<br>\n따라서 전산 시스템에서는 이렇게 복잡한 날짜와 시간을 모델링하는 대신에, epoch time을 이용해서 시간을 단순하게 숫자로 저장하고 처리하는 경우가 많습니다.</p>\n<h2 id=\"time_struct-클래스\" style=\"position:relative;\"><a href=\"#time_struct-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"time_struct 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>time_struct 클래스</h2>\n<p>컴퓨터 친화적인 Unix timestamp 값은 인간에게는 직관적이지 않습니다.<br>\n예를 들어, timestamp <code>1575142526.500323</code>를 보고, 무슨 날짜와 시간을 나타내는지를 바로 알아차릴 수 있는 사람은 많지 않을 것입니다.</p>\n<p>따라서, <code>time</code> 모듈은 timestamp가 주어졌을 때, 날짜와 시간을 알아내기 위한 API를 제공하는데요.<br>\n이를 위해 <code>time</code> 모듈은 내부적으로 날짜와 시간을 표현하기 위해서 9개의 속성를 갖는 <code>time_struct</code> 클래스를 사용합니다.</p>\n<table>\n<thead>\n<tr>\n<th>이름</th>\n<th>값</th>\n<th>비고</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tm_year</td>\n<td>연</td>\n<td>예: 1993, 2019</td>\n</tr>\n<tr>\n<td>tm_mon</td>\n<td>달</td>\n<td>범위: 1~12</td>\n</tr>\n<tr>\n<td>tm_mday</td>\n<td>일</td>\n<td>범위: 1~31</td>\n</tr>\n<tr>\n<td>tm_hour</td>\n<td>시</td>\n<td>범위: 0~23</td>\n</tr>\n<tr>\n<td>tm_min</td>\n<td>분</td>\n<td>범위: 0~59</td>\n</tr>\n<tr>\n<td>tm_sec</td>\n<td>초</td>\n<td>범위: 0~61</td>\n</tr>\n<tr>\n<td>tm_wday</td>\n<td>요일</td>\n<td>범위: 0~6 (0: 월요일)</td>\n</tr>\n<tr>\n<td>tm_yday</td>\n<td>연중 경과일</td>\n<td>범위: 1~366</td>\n</tr>\n<tr>\n<td>tm_isdst</td>\n<td>일광절약타임 적용여부</td>\n<td>0: 미적용 1: 적용 -1: 모름</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"time-함수-현재-timestamp-얻기\" style=\"position:relative;\"><a href=\"#time-%ED%95%A8%EC%88%98-%ED%98%84%EC%9E%AC-timestamp-%EC%96%BB%EA%B8%B0\" aria-label=\"time 함수 현재 timestamp 얻기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>time() 함수: 현재 timestamp 얻기</h2>\n<p><code>time</code> 모듈의 <code>time()</code> 함수는 현재 Unix timestamp을 소수로 리턴하는데요. 정수부는 초단위이고, 소수부는 마이크로(micro) 초단위 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\nsecs <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>secs<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>출력 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1575142526.500323</code></pre></div>\n<p>타임 머신을 타고 과거로 가지 않는 이상 매번 호출할 때 마다 더 큰 수가 리턴이 되겠죠?</p>\n<h2 id=\"gmtime-localtime-함수-timestamp를-time_struct-타입으로-변환\" style=\"position:relative;\"><a href=\"#gmtime-localtime-%ED%95%A8%EC%88%98-timestamp%EB%A5%BC-time_struct-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"gmtime localtime 함수 timestamp를 time_struct 타입으로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gmtime(), localtime() 함수: timestamp를 time_struct 타입으로 변환</h2>\n<p><code>gmtime()</code> 함수는 주어진 timestamp 값을 GMT 기준의 <code>time_struct</code> 타입 데이터로 변환해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\ntm <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>gmtime<span class=\"token punctuation\">(</span><span class=\"token number\">1575142526.500323</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tm<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>출력 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time.struct_time(tm_year=2019, tm_mon=11, tm_mday=30, tm_hour=19, tm_min=35, tm_sec=26, tm_wday=5, tm_yday=334, tm_isdst=0)</code></pre></div>\n<p><code>localtime()</code> 함수는 주어진 timestamp 값을 현지 시간대 기준의 <code>time_struct</code> 타입 데이터로 변환해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\ntm <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token number\">1575142526.500323</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year:\"</span><span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">.</span>tm_year<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"month:\"</span><span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">.</span>tm_mon<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"day:\"</span><span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">.</span>tm_mday<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hour:\"</span><span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">.</span>tm_hour<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minute:\"</span><span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">.</span>tm_min<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second:\"</span><span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">.</span>tm_sec<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>출력 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">year: 2019\nmonth: 11\nday: 30\nhour: 14\nminute: 35\nsecond: 26</code></pre></div>\n<p>저는 현재 북미의 동부 표준 시간대(EST, GMT-5)에서 이 포스트를 작성하고 있기 때문에, 위의 GMT 기준 19시보다 5시간 느린 14시로 변환된 것을 알 수 있습니다.</p>\n<p>참고로 <code>gmtime()</code>와 <code>localtime()</code> 함수 모두 timestamp를 넘기지 않고 호출하면, 현재 시간을 <code>time_struct</code>으로 변환을 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">time<span class=\"token punctuation\">.</span>gmtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">## time.gmtime(time.time()) 와 동일</span>\ntime<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">## time.localtime(time.time()) 와 동일</span></code></pre></div>\n<h2 id=\"ctime-timestamp를-문자열로-변환\" style=\"position:relative;\"><a href=\"#ctime-timestamp%EB%A5%BC-%EB%AC%B8%EC%9E%90%EC%97%B4%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"ctime timestamp를 문자열로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ctime(): timestamp를 문자열로 변환</h2>\n<p><code>ctime()</code> 함수는 주어진 timestamp를 현지 시간대 기준으로 소위 미국에서 흔히 사용되는 <code>요 월 일 시:분:초 년</code> 포멧으로 변환해줍니다.<br>\n그냥 간단하게 timestamp가 나타내는 날짜와 시간을 확인해보는 용도로 쓰기에 좋습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\nstring <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>ctime<span class=\"token punctuation\">(</span><span class=\"token number\">1575142526.500323</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>출력 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Sat Nov 30 14:35:26 2019</code></pre></div>\n<h2 id=\"strftime-time_struct-타입-데이터를-특정-포멧의-문자열로-변환\" style=\"position:relative;\"><a href=\"#strftime-time_struct-%ED%83%80%EC%9E%85-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%ED%8A%B9%EC%A0%95-%ED%8F%AC%EB%A9%A7%EC%9D%98-%EB%AC%B8%EC%9E%90%EC%97%B4%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"strftime time_struct 타입 데이터를 특정 포멧의 문자열로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>strftime(): time_struct 타입 데이터를 특정 포멧의 문자열로 변환</h2>\n<p><code>strftime()</code> 함수는 <code>ctime()</code> 함수처럼 정해진 포멧인 아닌 다양한 포멧의 문자열 변환이 가능하게 해줍니다.<br>\n첫번째 인자로 포멧을 넘겨야 하는데, 포멧 규칙은 <a href=\"https://docs.python.org/3.8/library/time.html#time.strftime\">파이썬 공식 레펀러스</a>를 참고 바랍니다.<br>\n두번째 인자로는 timestamp가 아닌 <code>time_struct</code> 타입 데이터를 받으므로 주의해야 합니다.<br>\n위에서 다룬 <code>gmttime()</code>이나 <code>localtime()</code> 같은 함수를 사용해서 <code>time_struct</code> 타입 데이터를 확보 후에 <code>strftime()</code> 함수의 두번째 인자로 넘기면 됩니다.</p>\n<p><code>strftime()</code> 함수를 이용해서 한국에서 자주 쓰이는 날짜/시간 포멧의 문자열로 변환을 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\ntm <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token number\">1575142526.500323</span><span class=\"token punctuation\">)</span>\nstring <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %I:%M:%S %p'</span><span class=\"token punctuation\">,</span> tm<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>출력 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2019-11-30 02:35:26 PM</code></pre></div>\n<h2 id=\"strptime-특정-포멧의-문자열을-time_struct-타입-데이터로-변환\" style=\"position:relative;\"><a href=\"#strptime-%ED%8A%B9%EC%A0%95-%ED%8F%AC%EB%A9%A7%EC%9D%98-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-time_struct-%ED%83%80%EC%9E%85-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"strptime 특정 포멧의 문자열을 time_struct 타입 데이터로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>strptime(): 특정 포멧의 문자열을 time_struct 타입 데이터로 변환</h2>\n<p><code>strptime()</code> 함수는 <code>strftime()</code> 함수와 정반대로 특정 포멧의 문자열을 <code>time_struct</code> 타입으로 변환을 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\nstring <span class=\"token operator\">=</span> <span class=\"token string\">'2019-11-30 02:35:26 PM'</span>\ntm <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> <span class=\"token string\">'%Y-%m-%d %I:%M:%S %p'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tm<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>출력 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time.struct_time(tm_year=2019, tm_mon=11, tm_mday=30, tm_hour=14, tm_min=35, tm_sec=26, tm_wday=5, tm_yday=334, tm_isdst=-1)</code></pre></div>\n<h2 id=\"sleep-일정-시간동안-실행-지연-시키기\" style=\"position:relative;\"><a href=\"#sleep-%EC%9D%BC%EC%A0%95-%EC%8B%9C%EA%B0%84%EB%8F%99%EC%95%88-%EC%8B%A4%ED%96%89-%EC%A7%80%EC%97%B0-%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"sleep 일정 시간동안 실행 지연 시키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sleep(): 일정 시간동안 실행 지연 시키기</h2>\n<p><code>sleep()</code> 함수는 프로그램의 실행을 일정 시간동안 지연시키고 싶을 때 사용됩니다.<br>\n지연시키고 싶은 시간을 초단위로 넘기면, 그 시간동안 프로그램의 실행이 멈췄다가 다시 실행됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"응용-프로그램-수행-시간-측정\" style=\"position:relative;\"><a href=\"#%EC%9D%91%EC%9A%A9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%88%98%ED%96%89-%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95\" aria-label=\"응용 프로그램 수행 시간 측정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[응용] 프로그램 수행 시간 측정</h2>\n<p><code>time</code> 내장 모듈을 사용하면 간단하게 프로그램의 특정 구간의 수행 시간을 측정해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'time elapsed:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>출력 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time elapsed: 1.5007548332214355</code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬의 <code>time</code> 모듈을 사용해서 간단한 시간 데이터를 다루는 방법에 대해서 살펴보았습니다.<br>\n파이썬은 좀 더 복잡한 날짜와 시간 처리를 위해서 <code>datetime</code>과 <code>calendar</code> 내장모듈도 지원하고 있습니다.<br>\n이 2개의 모듈에 대해서는 추후 기회가 되면 다뤄보도록 하겠습니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/time.html\">파이썬 공식 레퍼런스: time — Time access and conversions</a></li>\n</ul>","timeToRead":6,"fields":{"slug":"/python-time/","tags":["Python","파이썬","time","epoch","timestamp"]},"frontmatter":{"title":"[파이썬] time 모듈로 시간 데이터 다루기","date":"Nov 30, 2019"}},"next":{"fields":{"slug":"/python-json/"},"frontmatter":{"title":"[파이썬] json 모듈로 JSON 데이터 다루기"}}}}}