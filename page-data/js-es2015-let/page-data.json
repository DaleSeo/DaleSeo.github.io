{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-es2015-let/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-es2015-let-in-for/"},"frontmatter":{"title":"[ES2015] let으로 변수 선언하기 2"}},"node":{"html":"<p>본 포스팅에서는 ES2015를 통해 자바스크립트에 추가된 <code>let</code> 키워드에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"문제의-코드\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%EC%BD%94%EB%93%9C\" aria-label=\"문제의 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제의 코드</h2>\n<p>먼저 다음 예제 코드를 살펴보시죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> successMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"사용자를 조회하였습니다.\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>successMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"사용자 #\"</span> <span class=\"token operator\">+</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> failureMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"잘못된 아이디입니다!\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>failureMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패 메시지:\"</span><span class=\"token punctuation\">,</span> failureMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>findUser</code> 함수는 사용자 아이디가 0보다 크면 성공 메시지를 출력하고 아니면 실패 메시지를 출력합니다.\n그리고 <code>if-else</code> 문을 빠져나온 후, 실패 메시지를 다시 한 번 출력하고 있습니다.</p>\n<p>자, 그럼 다음과 같이 1을 인자로 이 함수를 호출하면 마지막에 출력하는 실패 메시지는 뭐라고 출력이 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같이 오류가 발생하지 않고 <code>undefined</code>가 출력이 됩니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">사용자를 조회하였습니다.\n<span class=\"token punctuation\">{</span> id: <span class=\"token number\">1</span>, name: <span class=\"token string\">'사용자 #1'</span> <span class=\"token punctuation\">}</span>\n실패 메시지: undefined</code></pre></div>\n<p>첫 개발 언어가 자바스크립트인 분들은 이 결과가 당연하게 느낄 수도 있겠지만, 저처럼 다른 언어에서 넘어온 개발자들은 당황스럽게 느껴질 수 있는 결과입니다.</p>\n<p><code>else</code> 블록은 실행되지 않았기 때문에, <code>failureMsg</code> 변수는 선언된 적도 없는데 어떻게 이런 결과가 나오는 것일까요?</p>\n<p>또한 설사 어떤 연유로 <code>else</code> 블록이 실행되었다고 쳐도, 어떻게 <code>else</code> 블록 외부에서 <code>else</code> 블록 내부에서 선언되었던 <code>failureMsg</code>에 접근이 가능할까요?</p>\n<h2 id=\"var의-function-scope과-variable-hosting\" style=\"position:relative;\"><a href=\"#var%EC%9D%98-function-scope%EA%B3%BC-variable-hosting\" aria-label=\"var의 function scope과 variable hosting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>var의 Function Scope과 Variable Hosting</h2>\n<p>정답은 자바스크립트의 <code>var</code> 키워드에서 찾을 수 있습니다.\n<a href=\"/js-var-issues\">이전 포스팅</a>에서 설명드렸던 것 처럼, <code>var</code>로 선언된 변수는 Function 범위에서 Hosting이 됩니다.</p>\n<p>따라서 위 코드는 자바스크립트 엔진에 의해서 다음과 같이 해석이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> successMsg<span class=\"token punctuation\">;</span> <span class=\"token comment\">// hosting</span>\n  <span class=\"token keyword\">var</span> failureMsg<span class=\"token punctuation\">;</span> <span class=\"token comment\">// hosting</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    successMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"사용자를 조회하였습니다.\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>successMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"사용자 #\"</span> <span class=\"token operator\">+</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    failureMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"잘못된 아이디입니다!\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>failureMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패 메시지:\"</span><span class=\"token punctuation\">,</span> failureMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>왜 결과가 그렇게 나왔는지 위 코드가 모든 것을 설명해주는데요.</p>\n<p><code>successMsg</code> 변수와 <code>failureMsg</code> 변수가 <code>findUser</code> 함수의 최상단으로 hoisting 되기 때문에, <code>if-else</code> 내부, 외부 가리지 않고 접근이 가능합니다.\n기 선언된 변수에 접근하는 것이므로 오류를 일으킬 이유도 없고요.</p>\n<h2 id=\"var-대신-let-사용하기\" style=\"position:relative;\"><a href=\"#var-%EB%8C%80%EC%8B%A0-let-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"var 대신 let 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>var 대신 let 사용하기</h2>\n<p>위 문제를 해결할 수 있는 가장 간단한 방법은 변수를 선언할 때, let 대신에 var를 사용하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> successMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"사용자를 조회하였습니다.\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>successMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"사용자 #\"</span> <span class=\"token operator\">+</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> failureMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"잘못된 아이디입니다!\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>failureMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"실패 메시지:\"</span><span class=\"token punctuation\">,</span> failureMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><code>let</code>으로 선언된 변수는 함수가 아닌 <code>if</code>나 <code>else</code>문 같은 블록 단위로 Scoping이 됩니다.</strong>\n<strong>그리고 <code>var</code>처럼 변수 Hosting을 일으키기 않습니다.</strong>\n따라서 위 코드를 실행시키면 예상대로 오류를 발생시킵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">console.log<span class=\"token punctuation\">(</span><span class=\"token string\">'실패 메시지:'</span>, failureMsg<span class=\"token punctuation\">)</span>\n                       ^\nReferenceError: failureMsg is not defined</code></pre></div>\n<h2 id=\"let-사용-시-주의-사항\" style=\"position:relative;\"><a href=\"#let-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\" aria-label=\"let 사용 시 주의 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let 사용 시 주의 사항</h2>\n<p><code>let</code>으로 선언된 변수는 다시 선언될 수가 없습니다.\n즉 다음과 같은 코드를 실행하면 오류가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let failureMsg = '잘못된 아이디입니다!'\nlet failureMsg = 'Wrong ID!'</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let failureMsg = 'Wrong ID!'\n                 ^^^^^^^^^^^\nSyntaxError: Identifier 'failureMsg' has already been declared</code></pre></div>\n<p><code>var</code>는 어차피 변수를 hosting 해버리기 때문에 여러 번 선언하는 게 큰 의미가 없겠지만,\nhosting을 하지 않는 <code>let</code> 경우에는 좀 더 엄격하게 변수 선언을 해주셔야 합니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서…</h2>\n<p>이상으로 <code>let</code> 사용하여 좀 더 안정적으로 변수 선언을 하는 방법을 살펴보았습니다.\n<code>let</code>을 사용하면 좀 더 예측가능한 코드를 작성할 수 있기 때문에 var보다는 가급적 let을 사용하시는 게 어떨까요?\n(물론 코드를 돌릴 자바스크립트 엔진에 ES2015를 지원한다면…)</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let</a></p>","timeToRead":3,"fields":{"slug":"/js-es2015-let/","tags":["JavaScript","자바스크립트","ES6"]},"frontmatter":{"title":"[ES2015] let으로 변수 선언하기 1","date":"Feb 12, 2017"}},"next":{"fields":{"slug":"/js-var-issues/"},"frontmatter":{"title":"[자바스크립트] var를 사용할 때 발생하는 문제들"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}