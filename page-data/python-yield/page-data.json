{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-yield/","result":{"pageContext":{"previous":{"fields":{"slug":"/css-background/"},"frontmatter":{"title":"CSS 배경(background) 관련 속성"}},"node":{"html":"<p>다른 프로그래밍 언어에서 넘어오신 개발자 분들께서 파이썬의 <code>yield</code> 키워드 때문에 당혹스러워하시는 것을 종종 목격하게 되는데요.</p>\n<p>이번 포스팅에서는 파이썬에서 제네레이터(generator)를 만드는데 사용되는 <code>yield</code> 키워드에 대해서 이해하기 쉽게 설명드리겠습니다.</p>\n<h2 id=\"yield-키워드\" style=\"position:relative;\"><a href=\"#yield-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"yield 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yield 키워드</h2>\n<p>대부분의 프로그래밍 언어에서 일반적으로 함수는 어떤 결과 값을 <code>return</code> 키워드를 이용해서 반환을 하는데요.\n하지만 파이썬에서는 함수가 <code>yield</code> 키워드를 이용해서 다소 <strong>다른 방식으로</strong> 결과 값을 제공할 수 있습니다.</p>\n<p>장황한 설명보다는 간단한 예제 코드부터 살펴보는 것이 좀 더 이해가 쉬울 것 같습니다.</p>\n<p>알파벳 <code>A</code>, <code>B</code>, <code>C</code>를 결과 값으로 반환하는 함수를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">return_abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 함수를 <code>yield</code> 키워드를 이용해서 작성해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">yield_abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">\"A\"</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">\"B\"</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">\"C\"</span></code></pre></div>\n<p>가장 먼저 눈에 두드러지는 차이는 <code>return</code> 키워드를 사용할 때는 결과값을 딱 한 번만 제공하는데, <code>yield</code> 키워드는 결과값을 여러 번 나누어서 제공한다는 것입니다.</p>\n<p><code>for</code> 루프를 사용해서 위 함수를 호출하여 얻은 결과를 화면에 출력해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> return_abc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">A\nB\nC</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> yield_abc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">A\nB\nC</code></pre></div>\n<p>함수를 사용하는 측면에서 보면 두 함수는 큰 차이가 없어보이는데요.</p>\n<p>함수를 호출한 결과 값을 바로 출력하여 도대체 각 함수가 정확히 무엇을 반환하는지 알아보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>return_abc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>yield_abc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> yield_abc at <span class=\"token number\">0x7f4ed03e6040</span><span class=\"token operator\">></span></code></pre></div>\n<p><code>return_abc()</code> 함수는 리스트(list)를 반환하고, <code>yield_abc()</code> 함수는 제너레이터(generator)를 반환하다는 것을 알 수 있습니다.</p>\n<p>여기서 우리는 <code>yield</code> 키워드를 사용하면 제너레이터를 반환한다는 것을 알 수 있는데요.\n과연 generator는 어떤 개념일까요?</p>\n<blockquote>\n<p>파이썬에서 가장 널리 사용되는 자료형인 리스트(list)에 대해서는 <a href=\"https://www.daleseo.com/python-list/\">관련 포스팅</a>을 참고바랍니다.</p>\n</blockquote>\n<h2 id=\"제너레이터generator\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0generator\" aria-label=\"제너레이터generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너레이터(generator)</h2>\n<p>파이썬에서 제너레이터는 쉽게 말해서 여러 개의 데이터를 미리 만들어 놓지 않고 필요할 때마다 즉석해서 하나씩 만들어낼 수 있는 객체를 의미하는데요.</p>\n<p>예를 들어, 위에서 작성한 예제 코드를 알파벳 하나를 만드는데 1초가 걸리도록 수정해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">return_abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  alphabets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    alphabets<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> alphabets</code></pre></div>\n<p>위 함수를 호출한 결과를 <code>for</code> 루프로 돌려보면 3초가 후가 흐른 후에 <code>A</code>, <code>B</code>, <code>C</code>가 한 번에 출력이 되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> return_abc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 3초 경과</span>\nA\nB\nC</code></pre></div>\n<p>이 번에는 <code>yield</code> 키워드를 이용해서 동일한 결과 값을 제공하는 함수를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">yield_abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> ch</code></pre></div>\n<p>위 함수를 호출한 결과를 <code>for</code> 루프로 돌려보면 1초 후에 <code>A</code>를 출력되고, 또 1초 후에 <code>B</code>를 출력되고, 또 1초 후에 <code>C</code>가 출력이 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> yield_abc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1초 경과</span>\nA\n<span class=\"token comment\"># 1초 경과</span>\nB\n<span class=\"token comment\"># 1초 경과</span>\nC</code></pre></div>\n<p>만약에 세개의 알파벳이 아닌 백개, 천개, 만개의 알페벳을 제공해야하는 경우에는 어떨까요?\n첫번째 방식에서는 첫번째 결과값을 얻는데 백초, 천초, 만초가 걸리는 반면에, 두번째 방식에서는 항상 일초가 걸릴 것입니다.\n즉, 제너레이터를 통해서는 결과값을 나누어서 얻을 수 있기 때문에 성능 측면에서 큰 이점이 있습니다.</p>\n<p>메모리 효율 측면에서도 이 두가지 방식은 큰 차이를 보이는데요.\n<code>return</code> 키워드를 사용할 때는 모든 결과 값을 메모리에 올려놓아야 하는 반면에, <code>yield</code> 키워드를 사용할 때는 결과 값을 하나씩 메모리에 올려놓습니다.</p>\n<p>제너레이터(generator)는 이러한 특성 때문에 흔히 게으른 반복자(lazy iterator)라고도 불리는데요.\n이 제너레이터의 게으른 특성을 잘 활용하면 좀 더 효율적인 프로그램을 작성할 수 있는 경우가 많습니다.</p>\n<p>특히 메모리에 한 번에 올리기에는 부담스럽게 대용량의 파일을 읽거나, 스트림 데이터를 처리할 때 상당히 유용하게 사용될 수 있습니다.</p>\n<blockquote>\n<p>예제 코드에서 실행 지연을 위해서 사용한 <code>time</code> 모듈에 대한 자세한 내용은 <a href=\"/python-time/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"무한-데이터-생산\" style=\"position:relative;\"><a href=\"#%EB%AC%B4%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%82%B0\" aria-label=\"무한 데이터 생산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>무한 데이터 생산</h2>\n<p>제너레이터를 사용하면 이론적으로 무한한 데이터를 계속해서 만들어낼 수도 있는데요.</p>\n<p>예를 들어, 알파벳 <code>A</code>, <code>B</code>, <code>C</code>를 계속해서 무한하게 제공하는 함수를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">yield_infinite_abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token string\">\"A\"</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token string\">\"B\"</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token string\">\"C\"</span></code></pre></div>\n<p>이 함수를 호출한 결과를 <code>for</code> 루프로 돌리면 <code>A</code>, <code>B</code>, <code>C</code>가 화면에 끊임없이 출력이 될 것입니다.\n(<code>Ctrl + C</code>를 눌러서 빠져나올 수 있습니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> yield_infinite_abc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">A\nB\nC\nA\nB\nC\nA\nB\nC\nA\n^C\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"main.py\"</span>, line <span class=\"token number\">8</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    print<span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\nKeyboardInterrupt</code></pre></div>\n<p>이렇게 데이터를 무한하게 제공하는 함수는 사실 <code>yield</code> 키워드가 없이는 작성하는 것이 거의 불가능에 가깝습니다.\n컴퓨터의 물리적인 메모리에는 언제나 한계가 있으며 제 아무리 큰 리스트를 만들더라도 이 한계를 초과할 수는 때문입니다.</p>\n<h2 id=\"yield-from\" style=\"position:relative;\"><a href=\"#yield-from\" aria-label=\"yield from permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yield from</h2>\n<p>제너레이터를 반환하는 함수를 작성하다 보면 아래와 같이 리스트를 제너레이터로 변환해야 할 일이 자주 생깁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">yield_abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">yield</span> ch</code></pre></div>\n<p><code>yield from</code>를 사용하면 리스트를 바로 제너레이터로 변환할 수 있어서 매우 편리하니 한 번 꼭 사용해보세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">yield_abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"generator-comprehension\" style=\"position:relative;\"><a href=\"#generator-comprehension\" aria-label=\"generator comprehension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generator Comprehension</h2>\n<p>지금까지는 함수 안에서는 <code>yield</code> 키워드를 사용해서 제너레이터를 만들어내는 방법에 대해서 살펴보았는데요.\n제너레이터를 만드는 또 다른 방법으로 제너레이터 표현식(generator comprehension/expression)이라는 것도 있습니다.</p>\n<p>리스트 표현식(list comprehension)과 사용 방법이 매우 유사한데요.\n단지 차이점이라고 하면 리스트 표현식은 대괄호를 사용하고 제너레이터 표현식은 소괄호를 사용한다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">abc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>abc<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> abc<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>generator object <span class=\"token operator\">&lt;</span>genexpr<span class=\"token operator\">></span> at 0x7f2dab21ff9<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span>\nA\nB\nC</code></pre></div>\n<blockquote>\n<p>list comprehension에 대한 좀 더 자세한 내용은 아래 관련 포스팅을 참고 바랍니다.</p>\n<ul>\n<li><a href=\"/python-map\">파이썬 map 내장 함수 사용법 (feat. List Comprehension)</a></li>\n<li><a href=\"/python-filter\">파이썬 filter 내장 함수 사용법 (feat. List Comprehension)</a></li>\n</ul>\n</blockquote>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 제가 작성한 전체 코드는 아래에서 직접 확인하고 실행해보실 수 있습니다.</p>\n<p><a href=\"https://dales.link/4vt\">https://dales.link/4vt</a></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 파이썬에서 <code>yield</code> 키워드 사용법과 제너레이터의 기본 개념과 실제로 어떻게 활용하는지에 대해서 여러가지 예제를 통해서 자세히 알아보도록 하겠습니다.</p>\n<p>사실 알고보면 그리 어려운 개념은 아니오니 이번 기회에 <code>yield</code> 키워드 사용법 잘 학습하셔서 파이썬으로 좀 더 효율적인 코드를 작성하시는데 도움이 되었으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/python-yield/","tags":["Python","generators","comprehensions"]},"frontmatter":{"title":"파이썬의 yield 키워드와 제너레이터(generator)","date":"Oct 2, 2021"}},"next":{"fields":{"slug":"/create-react-app/"},"frontmatter":{"title":"Create React App: 손쉽게 프로젝트 만들기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}