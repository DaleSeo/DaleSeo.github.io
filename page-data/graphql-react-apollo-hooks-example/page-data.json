{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/graphql-react-apollo-hooks-example/","result":{"pageContext":{"previous":{"fields":{"slug":"/react-router-authentication/"},"frontmatter":{"title":"React Router로 사용자 인증하기 (로그인/로그아웃)"}},"node":{"html":"<p><a href=\"/graphql-react-apollo-hooks\">지난 포스트</a>에서는 Apollo Hooks라는 새로운 방법을 통해 React 앱에서 어떻게 GraphQL API를 호출할 수 있는지 간단히 살펴보았습니다.\n이번 포스트에서는 지난 포스트에서 다뤘던 <code>useQuery()</code> 함수 뿐만 아니라 <code>useMuation()</code> 함수까지 사용해서 간단한 노트(Note) 앱을 React로 작성해보도록 하겠습니다.</p>\n<blockquote>\n<p>Apollo Hooks가 생소하신 분들은 아래 포스트를 통해 먼저 기본 개념을 잡으시고 이 포스트로 돌아오시기를 추천드립니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/graphql-react-apollo-hooks\">[GraphQL/React] Apollo Hooks 소개/사용법</a></li>\n</ul>\n<blockquote>\n<p>기존에 React 앱에서 Apollo Client를 사용하여 GraphQL API를 호출하던 방법은 아래 포스트를 참고 바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/graphql-react-apollo-client\">[GraphQL] Apollo Client로 React 앱 개발하기</a></li>\n</ul>\n<h2 id=\"react-앱에-apollo-client-연결\" style=\"position:relative;\"><a href=\"#react-%EC%95%B1%EC%97%90-apollo-client-%EC%97%B0%EA%B2%B0\" aria-label=\"react 앱에 apollo client 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 앱에 Apollo Client 연결</h2>\n<p>우선, 앱의 최상위 컴포넌트를 <code>@apollo/react-hooks</code> 패키지에서 임포트한 <code>&#x3C;ApolloProvider/></code> 컴포넌트로 감싸줘야 합니다.\n예를 들어, <code>create-react-app</code>으로 생성한 React 앱이라면 <code>App.js</code> 파일에서 이 작업을 해야합니다.\n<code>&#x3C;ApolloProvider/></code> 컴포넌트는 <code>client</code> prop을 통해 연결할 Apollo Client 객체를 받습니다.</p>\n<p>예제에서는 <code>SchemaLink</code>를 사용하여 원격 서버 없이 스키마만을 이용해서 클라이언트 단에서 Apollo Client 객체를 생성하였습니다.\nApollo Client 객체를 생성하는 방법은 이번 포스트에서 다루고자 내용은 아니기 때문에 <code>createApolloClient()</code> 함수로 따로 빼내였습니다.</p>\n<blockquote>\n<p>서버 없이도 클라이언트에서 GraphQL API를 호출할 수 있도록 도와주는 <code>SchemaLink</code>에 대한 자세한 설명은 아래 포스트를 참고바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/graphql-apollo-link-schema\">[GraphQL] SchemaLink 사용법 - 서버없는 클라이언트</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@apollo/react-hooks\"</span>\n<span class=\"token keyword\">import</span> createApolloClient <span class=\"token keyword\">from</span> <span class=\"token string\">\"./createApolloClient\"</span>\n\n<span class=\"token keyword\">import</span> NoteList <span class=\"token keyword\">from</span> <span class=\"token string\">\"./NoteList\"</span>\n<span class=\"token keyword\">import</span> NoteInput <span class=\"token keyword\">from</span> <span class=\"token string\">\"./NoteInput\"</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token function\">createApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApolloProvider</span></span> <span class=\"token attr-name\">client</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Notes with Apollo Hooks</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NoteList</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NoteInput</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ApolloProvider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>노트 앱은 <code>&#x3C;NoteInput/></code>, <code>&#x3C;NoteList/></code> 크게 2개의 React 컴포넌트로 구성됩니다.</p>\n<h2 id=\"usequery-사용한-notelist-컴포넌트\" style=\"position:relative;\"><a href=\"#usequery-%EC%82%AC%EC%9A%A9%ED%95%9C-notelist-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"usequery 사용한 notelist 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useQuery 사용한 NoteList 컴포넌트</h2>\n<p><code>&#x3C;NoteList/></code> 컴포넌트는 노트의 목록을 보여주기 위한 함수 컴포넌트입니다.\n노트의 목록은 <code>notes</code>라는 GraphQL 쿼리를 호출해서 가져와야 합니다.\n해당 쿼리는 <code>common.js</code> 파일에 정의해놓고, <code>&#x3C;NoteList/></code> 컴포넌트에서 임포트합니다.</p>\n<ul>\n<li>common.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">GET_NOTES</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query getNotes {\n    notes {\n      id\n      content\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p><code>GET_NOTES</code>에 저장된 쿼리는, Apollo Hooks의 <code>useQuery()</code> 함수를 이용해서 호출할 수 있습니다.\n<code>useQuery()</code> 함수의 리턴값으로 부터 결과 데이터(<code>data</code>) 뿐만 아니라, 로딩 여부(<code>loading</code>)와 오류 데이터(<code>error</code>) 읽어올 수 있습니다.</p>\n<p>쿼리가 실행 중이라서 아직 보여줄 데이터가 없는 동안에는 <code>loading</code> 값이 <code>true</code>이기 되기 때문에 <code>로딩 중...</code> 메세지를 보여줍니다.\n쿼리가 호출이 실패한 경우에는 <code>error</code>에 오류 데이터가 저장되기 때문에, <code>오류 :(</code> 메세지를 보여줍니다.</p>\n<p>정상적으로 쿼리가 실행이 완료되어 노트 목록이 확보가 되었을 때는 <code>loading</code>이 <code>false</code>, <code>error</code>가 <code>undefined</code>이기 때문에 처음 2개의 <code>if</code>문은 모두 건너 뛰고 그 이후에 로직이 실행됩니다.\n따라서 <code>&#x3C;ul/></code>과 <code>&#x3C;li/></code> 태그를 이용해서 노트 목록이 화면에 랜더링 됩니다.</p>\n<ul>\n<li>NoteList.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@apollo/react-hooks\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">GET_NOTES</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./common\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NoteList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GET_NOTES</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">로딩 중...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">오류 :(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> notes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> NoteList</code></pre></div>\n<h2 id=\"usemutation-사용한-noteinput-컴포넌트\" style=\"position:relative;\"><a href=\"#usemutation-%EC%82%AC%EC%9A%A9%ED%95%9C-noteinput-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"usemutation 사용한 noteinput 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useMutation 사용한 NoteInput 컴포넌트</h2>\n<p><code>&#x3C;NoteList/></code> 컴포넌트는 노트를 추가하기 위한 함수 컴포넌트입니다.\n노트를 추가할 때는 <code>addNote</code>라는 GraphQL 뮤테이션(mutation)을 사용하며, 역시 <code>common.js</code>에 정의해놓고 <code>&#x3C;NoteList/></code> 컴포넌트에서 임포트합니다.</p>\n<ul>\n<li>common.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> gql <span class=\"token keyword\">from</span> <span class=\"token string\">\"graphql-tag\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_NOTE</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  mutation addNote($content: String) {\n    addNote(content: $content) {\n      id\n      content\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p><code>ADD_NOTE</code>에 저장된 mutation은, Apollo Hooks의 <code>useMutation()</code> 함수를 이용해서 호출할 수 있습니다.\n<code>useMutation()</code> 함수의 경우 <code>useQuery()</code>처럼 객체를 리턴하는 것이 아니라, 배열을 리턴합니다.\n배열의 첫번째 원소는 mutation을 호출해야하는 순간에 호출해야하는 함수이고, 두번째 원소는 <code>useQuery()</code>가 리턴하던 것과 같은 형태의 객체입니다.</p>\n<p>여기서는 첫번째 원소를 <code>addNote</code>에 할당해놓고, <code>추가</code> 버튼이 클릭되었을 때 <code>handleClick()</code> 함수 내에서 호출되게 하였습니다.\n유저는 입력 필드에 추가할 노트의 내용을 작성할 수 있으며, 이 것은 <code>content</code>라는 state에 바인딩되어 있습니다.\n그리고 이 <code>content</code>는 <code>addNote()</code> 함수를 호출할 때, 입력 변수로 넘어갑니다.</p>\n<p>여기서 쿼리와 달리 mutation의 경우, <code>loading</code>과 <code>error</code>를 어디에다 써야할지 궁금하신 분들이 있으실텐데요.\n<code>loading</code>은 유저가 mutation 실행 중에 입력 필드나 버튼을 사용할 수 없도록 disabled처리할 때 쓸 수 있고, <code>error</code>는 mutation 실행이 실패했을 경우 입력 필드 주변에 오류 정보를 보여주기 위해서 쓸 수 있습니다.</p>\n<ul>\n<li>NoteInput.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@apollo/react-hooks\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ADD_NOTE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">GET_NOTES</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./common\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NoteInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>content<span class=\"token punctuation\">,</span> setContent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>addNote<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_NOTE</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> variables<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> content <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>new note<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>loading<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>loading<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        추가\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>error <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Error :(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> NoteInput</code></pre></div>\n<h2 id=\"usemutation-호출-후-캐시-업데이트\" style=\"position:relative;\"><a href=\"#usemutation-%ED%98%B8%EC%B6%9C-%ED%9B%84-%EC%BA%90%EC%8B%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"usemutation 호출 후 캐시 업데이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useMutation() 호출 후 캐시 업데이트</h2>\n<p>입력 필드에 새로운 노트를 입력하고 추가 버튼을 클릭하면 추가된 노트가 바로 목록이 뜨지 않을텐데요.\n브라우저에서 새로 고침을 해줘야 비로서 추가된 노트가 목록에 추가되어 있음을 알 수 있으실 것 입니다.</p>\n<p>이는 <code>useMutation()</code>을 호출하여 추가된 데이터가 Apollo Cache는 반영이 되지 않아 생기는 문제인데요.\n추가된 데이터가 바로 목록에 뜨기를 원한다면 <code>useMutation()</code>의 <code>update</code> 옵션을 이용해서 캐시를 직접 갱신해줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>addNote<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_NOTE</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> addNote <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> notes <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">readQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query<span class=\"token operator\">:</span> <span class=\"token constant\">GET_NOTES</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    cache<span class=\"token punctuation\">.</span><span class=\"token function\">writeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      query<span class=\"token operator\">:</span> <span class=\"token constant\">GET_NOTES</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> notes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>notes<span class=\"token punctuation\">,</span> addNote<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>노트 목록을 가져올 때 사용하는 쿼리가 저장되어 있는 <code>GET_NOTES</code>에 대한 캐시를 읽어온 후, 막 추가한 노트 데이터를 추가하여 캐시에 다시 저장해줍니다.\n이렇게 한 후, 다시 노트를 추가해보면 추가한 노트가 바로 목록에 뜨는 것을 확인하실 수 있으실 것 입니다.</p>\n<h2 id=\"usemutation-호출-후-id-피드백\" style=\"position:relative;\"><a href=\"#usemutation-%ED%98%B8%EC%B6%9C-%ED%9B%84-id-%ED%94%BC%EB%93%9C%EB%B0%B1\" aria-label=\"usemutation 호출 후 id 피드백 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useMutation() 호출 후 ID 피드백</h2>\n<p>유저에게 추가된 데이터의 ID를 피드백 해주고 싶다면, <code>useMutation()</code>의 <code>onCompleted</code> 옵션을 사용할 수 있습니다.\n<code>onCompleted</code>로 콜백 함수를 지정하는데, 막 추가된 노트 데이터를 인자로 넘어오기 때문에, 노트 ID를 읽어서 유저에게 피드백을 줄 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>addNote<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> loading<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_NOTE</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> addNote<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">노트가 추가되었습니다. (ID: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<iframe src=\"https://stackblitz.com/edit/graphql-react-apollo-hooks-example?embed=1&file=App.js\"\nstyle=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>기존에 <code>react-apollo</code> 패키지에서 제공하는 <code>&#x3C;Query/></code>나 <code>&#x3C;Mutation/></code>과 같은 HOC(Higher-Order Components)를 사용해서 React 앱을 개발해보신 분이라면,\nApollo Hooks를 이용하면 얼마나 깨끗하게 코드를 작성할 수 있는지 느끼실 수 있으실 것입니다.</p>","timeToRead":6,"fields":{"slug":"/graphql-react-apollo-hooks-example/","tags":["JavaScript","자바스크립트","GraphQL","Apollo","ApolloClient","ApolloHooks","React","리액트","useQuery","useMutatino"]},"frontmatter":{"title":"[GraphQL/React] Apollo Hooks로 React 앱 개발하기","date":"Sep 14, 2019"}},"next":{"fields":{"slug":"/graphql-react-apollo-hooks/"},"frontmatter":{"title":"[GraphQL/React] Apollo Hooks 소개/사용법"}}}}}