{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-babel-resolver/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-enum/"},"frontmatter":{"title":"파이썬 enum 타입 사용법"}},"node":{"html":"<p>자바스크립트 프로젝트의 규모가 커지면 디렉토리 구조도 복잡해지기 마련입니다.\n혹시 다음과 같은 코드 때문에 해당 모듈을 찾으려고 상위 디렉토리를 하나씩 짚어가며 올라가다가 스트레스 받으신 적이 있으신가요? 😝</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> whereIsThis <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../../../aaa/bbb/ccc\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"상대-경로\" style=\"position:relative;\"><a href=\"#%EC%83%81%EB%8C%80-%EA%B2%BD%EB%A1%9C\" aria-label=\"상대 경로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상대 경로</h2>\n<p>Node.js에서 내무 모듈을 불러올 때 가장 흔히 사용되는 방법은 상대 경로를 사용하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../common/utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위에서 보시는 것 처럼 상대 경로를 사용해서 모듈을 불러오면 모듈이 어느 경로에 위치하는지 파악하기가 난해해지는 경우가 생깁니다.\n뿐만 아니라, 이 자바스크립트 파일을 다른 디렉토리로 옮기려면 상대 경로를 그에 따라 모두 수정해줘야 해서 코드 리펙토링(refactoring)이 상당히 불편합니다.\n왜냐하면, 상대 경로는 현재 파일이 어디에 위치하느냐에 따라서 변해야 하기 때문입니다.</p>\n<h2 id=\"절대-경로\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EB%8C%80-%EA%B2%BD%EB%A1%9C\" aria-label=\"절대 경로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절대 경로</h2>\n<p>Node.js는 내무 모듈을 불러올 때 절대 경로도 지원하기 때문에 다음과 같이 코드를 변경하면 되지 않을까 생각하는 분들도 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"/Users/dale/Projects/our-project/src/common/utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 절대 경로로 모듈을 불러오는 것은 혼자 개발하는 프로젝트가 아닌 이상 현실적으로 적용하기 어려운 방법입니다.\n왜냐하면 개발자들마다 해당 프로젝트를 다른 디렉토리에 저장해놓을 것이기 때문입니다.</p>\n<h2 id=\"별칭-경로\" style=\"position:relative;\"><a href=\"#%EB%B3%84%EC%B9%AD-%EA%B2%BD%EB%A1%9C\" aria-label=\"별칭 경로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>별칭 경로</h2>\n<p>자바스크립트 트랜스파일(transpile) 도구인 Babel(바벨)을 사용하면 이 문제를 비교적 간단하게 해결할 수 있습니다.</p>\n<blockquote>\n<p>Babel을 사용하는 기본적인 방법은 아래 두 개의 포스팅 참고 바랍니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/js-babel\">바벨(Babel 7) 기본 사용법</a></li>\n<li><a href=\"/js-babel-node\">Node.js로 ES6 코드 실행하기 (Babel)</a></li>\n</ul>\n<p>바로, Babel의 플러그인을 사용해서 별칭(alias) 경로를 설정해주면 되는데요.\n먼저 기본적인 Babel 셋업이 되어 있는 프로젝트에서 Babel의 module resolver 플러그인을 개발 의존성으로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D babel-plugin-module-resolver</code></pre></div>\n<p>그 다음 <code>.babelrc</code> 설정 파일을 열고, <code>plugins</code> 항목에 <code>module-resolver</code> 설정을 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/env\"</span><span class=\"token punctuation\">,</span> ...생략...<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"module-resolver\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"alias\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t    <span class=\"token property\">\"@\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>./src</code> 상대 경로를 Vue나 Angular 프로젝트에서 흔히 볼 수 있는 <code>@</code> 별칭 경로로 맵핑해주었습니다.</p>\n<p>이렇게 설정을 하면 다음과 같이 상대 경로 대신에 <code>@</code> 별칭 경로를 이용해서 모듈을 볼러올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// import { add } from \"../../../../common/utilities/math\";</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/common/utilities/math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>어떤가요? 모듈울 불러올 때 경로 부분이 참 깔끔해졌죠? ✨\n게다가 이제는 이 파일을 프로젝트 내에서 자유롭게 디렉토리 변경을 할 수 있습니다.\n왜냐하면, 별칭 경로를 이용하면 절대 경로처럼 해당 모듈을 어디에서 불러오더라도 동일한 위치를 가리키기 때문입니다.</p>\n<h2 id=\"경로-축약\" style=\"position:relative;\"><a href=\"#%EA%B2%BD%EB%A1%9C-%EC%B6%95%EC%95%BD\" aria-label=\"경로 축약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>경로 축약</h2>\n<p>별칭 경로를 이용하면 모듈 경로를 좀 더 파격적으로 축약시킬 수도 있습니다.\n예를 들어, 다음과 같이 <code>./src/common/utilities/math</code> 상대 경로를 <code>#utils-math</code>로 맵핑해주면,</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/env\"</span><span class=\"token punctuation\">,</span> ...생략...<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"module-resolver\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"alias\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t    <span class=\"token property\">\"@\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"#utils-math\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/common/utilities/math\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>동일한 모듈을 매우 간결한 경로를 사용해서 불러올 수 있게 됩니다. 🏎</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// import { add } from \"../../../../common/utilities/math\";</span>\n<span class=\"token comment\">// import { add } from \"@/common/utilities/math\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"#utils-math\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"예제-프로젝트\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"예제 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 프로젝트</h2>\n<p>본 포스팅에서 다룬 Babel 설정을 적용하여 간단한 자바스크립트 프로젝트를 구성해보으니 참고 바랍니다.</p>\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@DaleSeo/js-babel-resolver?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 Babel의 module resolver 플러그인을 이용하여 별칭 경로를 사용하는 방법에 대해서 살펴보았습니다.\n별칭 경로를 잘 활용하셔서 모듈 불러올 때 상대 경로 때문에 개발하다가 스트레스 받는 일이 적었으면 좋겠습니다.</p>\n<p>해당 플러그인에 대한 좀 더 자세한 내용은 <a href=\"https://github.com/tleunen/babel-plugin-module-resolver\">Github 리파지토리</a>를 참고 바랍니다.추가적으로 본인 프로젝트에서 ESLint를 사용하고 계시다면 별칭 경로를 사용할 때 오류가 발생할 것입니다.\n이럴 때는 <a href=\"https://github.com/tleunen/eslint-import-resolver-babel-module\">eslint-plugin-module-resolver</a> 패키지도 설치하셔서 함께 사용하시길 바랍니다.</p>","timeToRead":3,"fields":{"slug":"/js-babel-resolver/","tags":["JavaScript","ES6","Node.js","Babel","CLI"]},"frontmatter":{"title":"Babel로 별칭 경로 설정하기 (Module Resolver)","date":"Jul 5, 2020"}},"next":{"fields":{"slug":"/js-babel-node/"},"frontmatter":{"title":"Node.js로 ES6 코드 실행하기 (Babel)"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}