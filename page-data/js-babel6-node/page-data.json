{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-babel6-node/","result":{"pageContext":{"previous":{"fields":{"slug":"/css-position-absolute/"},"frontmatter":{"title":"[CSS] Absolute Position - 자유로운 엘리먼트 배치"}},"node":{"html":"<p>ES6(ES2105) 이상의 최신 자바스크립트 문법으로 작성된 코드가 노드JS(NodeJS)에서 실행이 안 되는 경우가 종종있습니다. 이럴 경우 어쩔 수 없이 예전 자바스크립트 문법으로 코드를 재작성하기도 하는데요. 이번 포스팅에서는 자바스크립트 Transpiler인 Babel을 이용하여 이 문제를 해결해보겠습니다.</p>\n<h2 id=\"nodejs에서-es6-코드-실행-오류\" style=\"position:relative;\"><a href=\"#nodejs%EC%97%90%EC%84%9C-es6-%EC%BD%94%EB%93%9C-%EC%8B%A4%ED%96%89-%EC%98%A4%EB%A5%98\" aria-label=\"nodejs에서 es6 코드 실행 오류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NodeJS에서 ES6 코드 실행 오류</h2>\n<p>먼저 간단한 예제 프로젝트를 하나를 만들겠습니다. <code>babel-test</code>라는 디렉터리에 NPM 패키지를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> babel-test\n$ <span class=\"token builtin class-name\">cd</span> babel-test\n$ <span class=\"token function\">npm</span> init -y</code></pre></div>\n<p>이제 다음과 같이 매우 간단한 자바스크립트 코드를 작성해보겠습니다. NodeJS 내장 모듈인 <code>path</code>를 이용해서 프로젝트의 <code>dist</code> 디렉터리의 절대 경로를 출력 후에 외부에서 불러올 수 있도록 내보내는 코드입니다.</p>\n<ul>\n<li>script.js</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> outputPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Output path is \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>outputPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\".</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> outputPath <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그런 다음 <code>node</code> 커맨드를 이용해서 콘솔에서 작성한 파일을 NodeJS 런타임으로 실행시켜봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node script.js\n/temp/babel-test/script.js:1\n<span class=\"token punctuation\">(</span>function <span class=\"token punctuation\">(</span>exports, require, module, __filename, __dirname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">import</span> path from <span class=\"token string\">'path'</span>\n                                                              ^^^^^^\n\nSyntaxError: Unexpected token <span class=\"token function\">import</span>\n    at createScript <span class=\"token punctuation\">(</span>vm.js:80:10<span class=\"token punctuation\">)</span>\n    at Object.runInThisContext <span class=\"token punctuation\">(</span>vm.js:139:10<span class=\"token punctuation\">)</span>\n    at Module._compile <span class=\"token punctuation\">(</span>module.js:616:28<span class=\"token punctuation\">)</span>\n    at Object.Module._extensions<span class=\"token punctuation\">..</span>js <span class=\"token punctuation\">(</span>module.js:663:10<span class=\"token punctuation\">)</span>\n    at Module.load <span class=\"token punctuation\">(</span>module.js:565:32<span class=\"token punctuation\">)</span>\n    at tryModuleLoad <span class=\"token punctuation\">(</span>module.js:505:12<span class=\"token punctuation\">)</span>\n    at Function.Module._load <span class=\"token punctuation\">(</span>module.js:497:3<span class=\"token punctuation\">)</span>\n    at Function.Module.runMain <span class=\"token punctuation\">(</span>module.js:693:10<span class=\"token punctuation\">)</span>\n    at startup <span class=\"token punctuation\">(</span>bootstrap_node.js:191:16<span class=\"token punctuation\">)</span>\n    at bootstrap_node.js:612:3</code></pre></div>\n<p>ES6에서 자바스크립트 모듈을 불러오기 위해서 사용되는 <code>import</code>라는 키워드 때문에 구문 예외가 발생하였습니다.</p>\n<p>웹 브라우저의 경우 자바스크립트 문법을 쫒아오는 속도가 중구난방이지만, NodeJS의 경우 최신 버전을 사용한다면 거의 왠만한 ES6 문법은 도입이 되어 있습니다. 그럼에도 불구하고 본 예제처럼 NodeJS는 아직 CommonJS 기반 모듈 시스템을 사용하기 때문에 ES6의 <code>import</code>나 <code>export</code>와 같은 키워드는 디폴트로 지원되지 않고 있습니다.</p>\n<p>아쉬운데로 파일의 확장자를 <code>.mjs</code>로 바꾸고 <code>--experimental-modules</code> 옵션을 이용하면 방법도 있긴한데 아직 실험적인(Experimental) 기능이므로 여기서는 다루지는 않겠습니다. 관심이 있으신 분들은 관련 NodeJS 레퍼런스인 <a href=\"https://nodejs.org/api/esm.html\">ECMAScript Modules</a>을 참조바랍니다.</p>\n<h2 id=\"babel-javascript-transpiler\" style=\"position:relative;\"><a href=\"#babel-javascript-transpiler\" aria-label=\"babel javascript transpiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel: JavaScript Transpiler</h2>\n<p>위에서 발생한 예외를 근본적으로 해결하려면 우리가 작성한 코드를 NodeJS 런타임이 실행가능한 형태로 변환해줘야 합니다. 이를 보통 <code>transpile</code>이라고 하는데요. 소스 코드를 머신 코드로 바꿔주는 <code>compile</code>과 달리, <code>transpile</code>은 같은 언어를 유지한체 다른 런타임에서 해당 코드가 정상적으로 해석될 수 있도록 형태만 바꿔준다는 차이가 있습니다. 실제 현장에서는 이 두 용어를 혼용해서 사용하고 있는 것 같습니다.</p>\n<p>여기서는 JavaScript Transpiler 중에서 가장 널리 사용되는 Babel을 사용해서 위 코드를 transpile하여 NodeJS 런타임이 예외없이 실행할 수 있도록 해보겠습니다.</p>\n<h2 id=\"babel-cli-실행\" style=\"position:relative;\"><a href=\"#babel-cli-%EC%8B%A4%ED%96%89\" aria-label=\"babel cli 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel CLI 실행</h2>\n<p>먼저 개발 의존성으로 바벨 커맨드 라인 도구를 설치하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D babel-cli</code></pre></div>\n<p>설치를 마치면 터미널에서 <code>babel</code>과 <code>babel-node</code> 커맨드를 실행가능할 수 있게 됩니다. 첫번째 커맨드는 단순히 어떤 코드를 transpile 시킬 때 사용하며, 두번째 커맨드는 transpile 뿐만 아니라 transpile된 코드를 NodeJS 런타임으로 실행까지 해주게 됩니다.</p>\n<p>먼저 <code>babel</code> 커맨드로 우리가 작성한 자바스크립트 파일을 transpile 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx babel script.js\n<span class=\"token function\">import</span> path from <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span>\nconst outputPath <span class=\"token operator\">=</span> path.resolve<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span>Output path is <span class=\"token string\">\"<span class=\"token variable\">${outputPath}</span>\"</span><span class=\"token builtin class-name\">.</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token punctuation\">{</span> outputPath <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>어라… 이상하네요? 각 라인의 끝에 <code>;</code>가 추가된 것 빼고는 소스 코드의 형태가 처음에 작성한 그대로 입니다. 그 이유는 아직 어떻게 변환할지에 대해서 바벨 설정을 해주지 않았기 때문입니다.</p>\n<h2 id=\"babel-preset-설정\" style=\"position:relative;\"><a href=\"#babel-preset-%EC%84%A4%EC%A0%95\" aria-label=\"babel preset 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel Preset 설정</h2>\n<p>바벨 설정은 여러 플러그인을 스스로 조합하거나 미리 준비된 프레셋을 사용할 수가 있습니다. 여기서는 <code>env</code>라는 가장 범용적으로 사용되는 프리셋을 사용하도록 하겠습니다. <code>env</code> 프리셋은 ES2015뿐만 아니라 ES2016과 ES2017까지 적용되어 있습니다.</p>\n<p>먼저 개발 의존성으로 프리셋을 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D babel-preset-env</code></pre></div>\n<p>그리고 프리셋 옵션을 줘서 다시 한 번 바벨로 우리가 작성한 자바스크립트 파일을 변환해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx babel --presets <span class=\"token function\">env</span> script.js\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nObject.defineProperty<span class=\"token punctuation\">(</span>exports, <span class=\"token string\">\"__esModule\"</span>, <span class=\"token punctuation\">{</span>\n  value: <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports.outputPath <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>\n\nvar _path <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvar _path2 <span class=\"token operator\">=</span> _interopRequireDefault<span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> _interopRequireDefault<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token builtin class-name\">return</span> obj <span class=\"token operator\">&amp;&amp;</span> obj.__esModule ? obj <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span> default: obj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nvar outputPath <span class=\"token operator\">=</span> _path2.default.resolve<span class=\"token punctuation\">(</span>__dirname, <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole.log<span class=\"token punctuation\">(</span><span class=\"token string\">'Output path is \"'</span> + outputPath + <span class=\"token string\">'\".'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports.outputPath <span class=\"token operator\">=</span> outputPath<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이번에는 다행히 원하는 형태로 소스 코드가 transpile 되었습니다. <code>import</code>를 사용하던 부분은 NodeJS에서 지원하는 <code>require</code>를 사용하도록 대체되었으며, <code>export</code>를 사용하던 부분 역시 <code>exports</code> 변수를 사용하도록 변경되었습니다. 그 밖에도 문자열 출력 부분이 interpolation 구문(<code>\"${outputPath}\"</code>)에서 concatenation(<code>\"' + outputPath + '\"</code>)으로 대체된 것도 확인할 수 있습니다.</p>\n<h2 id=\"nodejs로-es6-코드-실행-성공\" style=\"position:relative;\"><a href=\"#nodejs%EB%A1%9C-es6-%EC%BD%94%EB%93%9C-%EC%8B%A4%ED%96%89-%EC%84%B1%EA%B3%B5\" aria-label=\"nodejs로 es6 코드 실행 성공 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NodeJS로 ES6 코드 실행 성공</h2>\n<p>마지막으로 바벨에 의해서 transpiple된 코드를 노드 런타임으로 실행해보겠습니다. 다음과 같이 pipeline (<code>|</code>) 심볼을 이용해서 바벨 실행 결과를 노드 커맨드의 입력으로 전달해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx babel --presets <span class=\"token function\">env</span> script.js <span class=\"token operator\">|</span> node\nOutput path is <span class=\"token string\">\"/temp/babel-test/dist\"</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>윈도우 같이 pipeline 심볼을 사용할 수 없는 경우에는 다음과 같이 바벨 변환과 노드 실행을 한 번에 해주는 <code>babel-node</code> 커맨드를 이용하면됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx babel-node --presets <span class=\"token function\">env</span> script.js\nOutput path is <span class=\"token string\">\"/temp/babel-test/dist\"</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<h2 id=\"tip-바벨-설정-파일\" style=\"position:relative;\"><a href=\"#tip-%EB%B0%94%EB%B2%A8-%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC\" aria-label=\"tip 바벨 설정 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[TIP] 바벨 설정 파일</h2>\n<p>바벨 커맨드를 실행할 때 마다 매번 프리셋 옵션을 붙이기가 번거롭다면 바벨 설정 파일인 <code>.babelrc</code>를 프로젝트 최상위 디렉터리에 작성하시면 됩니다.</p>\n<ul>\n<li>.babelrc</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"env\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다른 방법으로 <code>.babelrc</code> 파일 대신에 다음과 같이 <code>package.json</code> 파일에 바벨 설정을 추가할 수도 있습니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">...</span> 생략 <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n  <span class=\"token string\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"babel-cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.26.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"babel-preset-env\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.7.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">+</span>  <span class=\"token string\">\"babel\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">+</span>    <span class=\"token string\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"env\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">+</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">...</span> 생략 <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 두가지 방법 중 원하시는 방법으로 설정 후에는 프리셋 옵션을 주지 않고도 바벨 커맨드를 실행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx babel-node script.js\nOutput path is <span class=\"token string\">\"/temp/babel-test/dist\"</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>아무래도 프로젝트 규모가 커지고 바벨 설정이 복잡해지는 상황에서는 설정 파일을 이용하는 편이 훨씬 이점이 많을 것입니다.</p>\n<h2 id=\"tip-npm-스크립트로-등록\" style=\"position:relative;\"><a href=\"#tip-npm-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-%EB%93%B1%EB%A1%9D\" aria-label=\"tip npm 스크립트로 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[TIP] NPM 스크립트로 등록</h2>\n<p>바벨 커맨드를 자주 사용하는 상황이라면 NPM 스크립트로 등록해두고 사용하시는 게 더 간편할 수 있습니다.</p>\n<ul>\n<li>package.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">...</span> 생략 <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-node script.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">...</span> 생략 <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> start\n\n<span class=\"token operator\">></span> babel-test@1.0.0 start /temp/babel-test\n<span class=\"token operator\">></span> babel-node script.js\n\nOutput path is <span class=\"token string\">\"/temp/babel-test/dist\"</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>이상으로 NodeJS로 ES6 코드를 실행하는 방법에 대해서 알아보았습니다.</p>","timeToRead":5,"fields":{"slug":"/js-babel6-node/","tags":["JavaScript","ES6","Node.js","Babel","CLI"]},"frontmatter":{"title":"Node.js로 ES6 코드 실행하기 (Babel6)","date":"Apr 14, 2018"}},"next":{"fields":{"slug":"/js-module-import/"},"frontmatter":{"title":"자바스크립트 ES6 모듈 내보내기/불러오기 (import)"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}