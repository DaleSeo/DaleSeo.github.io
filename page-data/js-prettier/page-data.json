{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-prettier/","result":{"pageContext":{"previous":{"fields":{"slug":"/react-hooks-use-memo/"},"frontmatter":{"title":"React Hooks: useMemo 사용법"}},"node":{"html":"<p>\b자바스크립트에서 최근 가장 인기를 얻고 있는 코드 포멧터인 Prettier에서 대해서 알아보겠습니다.</p>\n<h2 id=\"코딩-스타일\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%94%A9-%EC%8A%A4%ED%83%80%EC%9D%BC\" aria-label=\"코딩 스타일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코딩 스타일</h2>\n<p>자바스크립트와 같이 사용자층이 넓은 범용 프로그래밍 언어의 경우, 개발자들이 선호하는 코딩 스타일이 다양해지게 됩니다.\n예를 들어, 개발자 A는 문자열을 쌍따움표로 감싸줘야 한다고 주장하는 반면에, 개발자 B는 홑따옴표를 사용해야 된다고 주장합니다.\n이 두 개발자가 한 팀에서 일 할 경우, 코드 리뷰 중에 이러한 사소한 코딩 스타일 차이로 키보드 배틀이 일어나는 걸 어렵지 않게 볼 수 있습니다.\n대게 이런 코딩 스타일에 대한 논쟁은 답이 없을 분더러, 소모적인 자존심 싸움으로 번지게 되기 쉬워서 팀워크와 생산성에 나쁜 영향을 주게 됩니다.</p>\n<h2 id=\"prettier\" style=\"position:relative;\"><a href=\"#prettier\" aria-label=\"prettier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prettier</h2>\n<p>코드 포멧터(Code Formatter)란 개발자가 작성한 코드를 정해진 코딩 스타일을 따르도록 변환해주는 도구를 말합니다.\nPrettier는 이러한 코드 포멧터 중에서도 최근에 가장 인기를 많이 얻어 거의 표준이 되고 가고 있는 자바스크립트 라이브러리 입니다.\n쟁쟁한 오픈 소스 프로젝트들과 수많은 기업들이 Prettier를 정식 코드 포멧터를 채택해서 사용하고 있습니다.\n(Facebook, React, Jest, Yarn, Babel, Webpack, Dropbox, Storybook, Paypal, MongoDB, Salesforce)</p>\n<p>Prettier가 많은 개발자들에게서 급속히 사랑받게 된 이유는 기존 코드 포멧터와 달리 설정 여지가 거의 없다는 것입니다.\n다시 말해서 Prettier에서 디폴트로 정해놓은 코딩 스타일에서 크게 벗어나기가 어렵다는 얘기입니다.\n이 말은 일단 Prettier를 쓰기 시작하면 더 이상 코딩 스타일에 대해서 팀원 간에 왈가왈부할 여지가 없다는 것입니다.</p>\n<p>그래서 처음에 Prettier를 접했을 때는 Prettier에서 강요하는 코딩 스타일이 불편하게 느껴질 수도 있습니다.\n하지만 Prettier에서 정해놓은 코딩 스타일들은 오랜시간 개발자 커뮤니티의 의견이 수렴되어 결정이 된 것이기 때문에 대부분 타당한 경우가 많습니다.</p>\n<p>Prettier의 또 다른 차별점은 단순히 개발자가 작성한 코드를 수정해주는 게 아니라 구문 분석 후에 완전히 재작성을 해준다는 것입니다.\n따라서 변환된 코드가 원래 코드의 동작이 정확히 일치하는 것을 항상 보장해주면 성능도 매우 뛰어납니다.</p>\n<h2 id=\"cli-도구로-사용하기\" style=\"position:relative;\"><a href=\"#cli-%EB%8F%84%EA%B5%AC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"cli 도구로 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI 도구로 사용하기</h2>\n<p>Prettier가 어떻게 작동하는지 직관적으로 이해하기 위해서 먼저 CLI 도구를 간단히 돌려보겠습니다.</p>\n<p>일단 <code>index.js</code> 파일을 하나에 포멧팅이 엉망인 자바스크립트 코드를 작성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n  greeted <span class=\"token operator\">=</span> <span class=\"token string\">'\"World\"'</span><span class=\"token punctuation\">,</span>\n  silent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  onMouseOver<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// TODO: Don't use random in render</span>\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1e7</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\.\\d+/gi</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      className<span class=\"token operator\">=</span><span class=\"token string\">\"HelloWorld\"</span>\n      title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You are visitor number </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      onMouseOver<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseOver<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\" \"</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"grey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token string\">\", \"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>greeted<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>em<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>silent <span class=\"token operator\">?</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 터미널에 <code>npx prettier \"index.js\"</code> 커맨드를 실행하면 위 코드가 포멧팅되어 출력이됩니다.</p>\n<blockquote>\n<p><code>npx</code>나 <code>npm</code> 커맨드에 대한 자세한 설명은 <a href=\"/js-npm-cli\">관련 포스트</a>를 참고 바랍니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx prettier <span class=\"token string\">\"index.js\"</span>\n<span class=\"token keyword\">function</span> HelloWorld<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>,\n  greeted <span class=\"token operator\">=</span> <span class=\"token string\">'\"World\"'</span>,\n  silent <span class=\"token operator\">=</span> false,\n  onMouseOver\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">return</span> null<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  // TODO: Don't use random <span class=\"token keyword\">in</span> render\n  <span class=\"token builtin class-name\">let</span> num <span class=\"token operator\">=</span> Math.floor<span class=\"token punctuation\">(</span>Math.random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * 1e7<span class=\"token punctuation\">)</span>\n    .toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    .replace<span class=\"token punctuation\">(</span>/<span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">\\</span>d+/gi, <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      <span class=\"token assign-left variable\">className</span><span class=\"token operator\">=</span><span class=\"token string\">\"HelloWorld\"</span>\n      <span class=\"token assign-left variable\">title</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token variable\"><span class=\"token variable\">`</span>You are visitor number $<span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">}</span>\n      <span class=\"token assign-left variable\">onMouseOver</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseOver<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>greeting.slice<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.toUpperCase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> + greeting.slice<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.toLowerCase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>/strong<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>greeting.endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> ? <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\" \"</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>span <span class=\"token assign-left variable\">style</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color: <span class=\"token string\">\"grey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token string\">\", \"</span><span class=\"token operator\">&lt;</span>/span<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>greeted<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span>/em<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>silent ? <span class=\"token string\">\".\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 <code>--write</code> 옵션으로 위 커맨드를 실행하면 <code>index.js</code> 파일의 내용이 포멧팅된 코드로 바로 대체됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npx prettier --write &quot;index.js&quot;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n  greeted <span class=\"token operator\">=</span> <span class=\"token string\">'\"World\"'</span><span class=\"token punctuation\">,</span>\n  silent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  onMouseOver<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// TODO: Don't use random in render</span>\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1e7</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\.\\d+/gi</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      className<span class=\"token operator\">=</span><span class=\"token string\">\"HelloWorld\"</span>\n      title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You are visitor number </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      onMouseOver<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseOver<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\" \"</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> <span class=\"token string\">\"grey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token string\">\", \"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>greeted<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>em<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>silent <span class=\"token operator\">?</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 것이 Prettier가 동작하는 기본적인 방식입니다. Prettier에게 소스 코드를 건내주면 Prettier는 코드를 포멧팅해서 돌려줍니다.</p>\n<h2 id=\"es-lint와-통합하기\" style=\"position:relative;\"><a href=\"#es-lint%EC%99%80-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0\" aria-label=\"es lint와 통합하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Lint와 통합하기</h2>\n<p>실제 프로젝트에서는 Prettier는 단독 CLI 도구가 아닌 일반적으로 ESLint와 같은 린터(Linter)와 통합(itegration)해서 사용하는 경우가 많습니다.</p>\n<p>먼저 자신의 자바스크립트 프로젝트에 <code>prettier</code> NPM 패키지를 개발 의존성으로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D prettier</code></pre></div>\n<p>그 다음 ESLint와 통합을 위해서 2개의 NPM 패키지를 추가로 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i -D eslint-config-prettier eslint-plugin-prettier</code></pre></div>\n<p>마지막으로 해당 프로젝트의 <code>.eslintrc.js</code>나 <code>.eslintrc.json</code>과 같은 ESLint의 설정 파일을 열어서 다음 설정을 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:prettier/recommended\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기존에 <code>extends</code> 옵션에 다른 값들이 있는 경우, 기존 설정보다 우선하려면 배열 내에 맨 뒤에 위치시키야 함을 주의 바랍니다.</p>\n<blockquote>\n<p>프로젝트에 ESLint가 셋업되어 있지 않거나, ESLint가 생소하신 분들은, 아래 포스트를 통해 먼저 ESLint를 이해하고 돌아오시면 도움이 되실 겁니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"/js-eslint\">[자바스크립트] ESLint로 소스 코드의 문제 찾기</a></li>\n</ul>\n<h2 id=\"포멧팅-예외\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EB%A9%A7%ED%8C%85-%EC%98%88%EC%99%B8\" aria-label=\"포멧팅 예외 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포멧팅 예외</h2>\n<p>Prettier로 프로젝트 전체를 포멧팅을 할 때, <code>.prettierignore</code> 설정 파일을 생성하면 예외 시키고 싶은 파일이나 디렉터리를 지정할 수 있습니다.\n예를 들어, <code>node_modules/</code> 디렉터리의 경우, 외부 라이브러리의 소스 코드가 위치하고 있기 때문에 포멧팅을 할 필요가 없습니다.\n또한 <code>package-lock.json</code> 파일도 NPM으로 패키지를 설치할 때 자동으로 업데이트는 되는 파일이므로 구지 포멧팅을 할 이유가 없습니다.</p>\n<ul>\n<li>.prettierignore</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">node_modules <span class=\"token operator\">/</span> <span class=\"token keyword\">package</span> <span class=\"token operator\">-</span> lock<span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>이렇게 두 줄을 <code>.prettierignore</code> 설정 파일에 추가하면 Prettier는 포멧팅할 때 지정된 디렉터리와 파일을 무시하게 됩니다.</p>\n<h2 id=\"코드-편집기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%ED%8E%B8%EC%A7%91%EA%B8%B0\" aria-label=\"코드 편집기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 편집기</h2>\n<p>대부분의 코드 편집기에서는 Prettier를 플러그인 또는 익스텐션 형태로 제공해주고 있습니다.\n그래서 사실 위에서 다루었던 것 처럼 매번 터미널에 커맨드를 날려 코드 포멧팅을 할 일은 거의 없습니다.</p>\n<p>본인이 사용하는 편집기에서 제공하는 Prettier 플러그인을 찾아서 설치만 해주시면 됩니다.</p>\n<ul>\n<li>VS Code: <a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</a></li>\n<li>Atom: <a href=\"https://atom.io/packages/mprettier\">https://atom.io/packages/mprettier</a></li>\n<li>Sublime Text: <a href=\"https://packagecontrol.io/packages/JsPrettier\">https://packagecontrol.io/packages/JsPrettier</a></li>\n</ul>\n<p>이러한 플러그인/익스텐션을 활용하면 Prettier를 실행하기 전에 편집기 내에서 피드백을 받을 수 있기 때문에 매우 편리합니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 자바스크립트 코드 포멧터인 Prettier를 어떻게 사용하는지에 대해서 알아보았습니다.\nPrettier를 잘 활용하셔서 여러 명의 개발자가 하나의 프로젝트에서 일관적인 코딩 스타일을 유지하셨으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/js-prettier/","tags":["JavaScript","자바스크립트","Prettier","Format","ESLint"]},"frontmatter":{"title":"[자바스크립트] Prettier로 코딩 스타일 통일하기","date":"Sep 29, 2019"}},"next":{"fields":{"slug":"/webpack-plugins-define-environment/"},"frontmatter":{"title":"웹팩(Webpack) DefinePlugin, EnvironmentPlugin 사용법"}}}}}