{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-prettier/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/react-hooks-use-memo/"},"frontmatter":{"title":"React Hooks: useMemo 사용법"}},"node":{"html":"<p>자바스크립트 개발자들 간에 선호하는 코딩 스타일이 다를 수 있죠?\n예를 들어, 개발자 A는 문자열을 쌍따옴표(<code>\"</code>)로 감싸줘야 한다고 주장하는 반면에, 개발자 B는 홑따옴표(<code>'</code>)를 사용해야 된다고 주장합니다.\n이러한 두 개발자가 한 팀에서 일하면 코드 리뷰 중에 이러한 사소한 코딩 스타일 차이로 키보드 배틀이 일어나는 걸 보게 되죠… 😅</p>\n<p>그런데 대게 이런 코딩 스타일에 대한 논쟁은 정답이 없을 분더러, 괜히 소모적인 자존심 싸움으로 번지기 쉬워서 팀워크와 생산성에 나쁜 영향을 줄 수 있습니다.\n이번 글에서는 협업 프로젝트에서 이러한 포멧팅 고민을 해결해주는 편리한 개발 도구인 Prettier에 대해서 소개해드리겠습니다.</p>\n<h2 id=\"코드-포멧터-prettier\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%ED%8F%AC%EB%A9%A7%ED%84%B0-prettier\" aria-label=\"코드 포멧터 prettier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 포멧터 Prettier</h2>\n<p>코드 포멧터(Code Formatter)란 개발자가 작성한 코드를 정해진 코딩 스타일을 따르도록 자동으로 변환해주는 도구를 말합니다.\nPrettier는 이러한 코드 포멧터 중에서도 최근에 가장 인기를 많이 얻어 거의 표준이 되고 가고 있는 자바스크립트 라이브러리 입니다.\n쟁쟁한 오픈 소스 프로젝트들과 수많은 기업들이 Prettier를 정식 코드 포멧터를 채택해서 사용하고 있습니다.\n(Facebook, React, Jest, Yarn, Babel, Webpack, Dropbox, Storybook, Paypal, MongoDB, Salesforce, …)</p>\n<p>Prettier가 많은 개발자들에게서 급속히 사랑받게 된 이유는 기존 코드 포멧터와 달리 설정 여지가 거의 없다는 것입니다.\n다시 말해서 Prettier에서 디폴트로 정해놓은 코딩 스타일에서 크게 벗어나기가 어렵다는 얘기입니다.\n이 말은 일단 Prettier를 쓰기 시작하면 더 이상 코딩 스타일에 대해서 팀원 간에 왈가왈부할 여지가 없다는 것입니다.</p>\n<p>그래서 처음에 Prettier를 접했을 때는 Prettier에서 강요하는 코딩 스타일이 불편하게 느껴질 수도 있습니다.\n하지만 Prettier에서 정해놓은 코딩 스타일들은 오랜시간 개발자 커뮤니티의 의견이 수렴되어 결정이 된 것이기 때문에 대부분 타당한 경우가 많습니다.</p>\n<p>Prettier의 또 다른 차별점은 단순히 개발자가 작성한 코드를 수정해주는 게 아니라 구문 분석 후에 완전히 재작성을 해준다는 것입니다.\n따라서 변환된 코드가 원래 코드의 동작이 정확히 일치하는 것을 항상 보장해주면 성능도 매우 뛰어납니다.</p>\n<h2 id=\"prettier-라이브러리-설치\" style=\"position:relative;\"><a href=\"#prettier-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\" aria-label=\"prettier 라이브러리 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prettier 라이브러리 설치</h2>\n<p>Prettier 라이브러리는 npm 공개 저장소에 <code>prettier</code>라는 이름의 패키지로 올라와 있습니다.\n따라서 npm 패키지 매지저를 통해서 어떤 자바스크립트 프로젝트에서도 쉽게 설치해서 사용해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> prettier</code></pre></div>\n<p>Prettier는 애플리케이션 실행 시점에는 필요가 없기 때문에 <code>-D</code> 옵션을 통해 개발 의존성으로 설치해주세요.</p>\n<h2 id=\"cli-도구로-사용하기\" style=\"position:relative;\"><a href=\"#cli-%EB%8F%84%EA%B5%AC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"cli 도구로 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI 도구로 사용하기</h2>\n<p>Prettier가 어떻게 작동하는지 직관적으로 이해하기 위해서 먼저 CLI 도구를 간단히 돌려보겠습니다.</p>\n<p>일단 <code>index.js</code> 파일을 하나에 포멧팅이 엉망인 자바스크립트 코드를 작성하겠습니다.</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n  greeted <span class=\"token operator\">=</span> <span class=\"token string\">'\"World\"'</span><span class=\"token punctuation\">,</span>\n  silent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  onMouseOver<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// TODO: Don't use random in render</span>\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1e7</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.\\d+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      className<span class=\"token operator\">=</span><span class=\"token string\">\"HelloWorld\"</span>\n      title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You are visitor number </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      onMouseOver<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseOver<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\" \"</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"grey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token string\">\", \"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>greeted<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>em<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>silent <span class=\"token operator\">?</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 터미널에 <code>npx prettier \"index.js\"</code> 커맨드를 실행하면 위 코드가 포멧팅되어 출력이됩니다.</p>\n<blockquote>\n<p><code>npx</code>나 <code>npm</code> 커맨드에 대한 자세한 설명은 <a href=\"/js-npm-cli/\">관련 포스팅</a>를 참고 바랍니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx prettier <span class=\"token string\">\"index.js\"</span>\n<span class=\"token keyword\">function</span> HelloWorld<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>,\n  greeted <span class=\"token operator\">=</span> <span class=\"token string\">'\"World\"'</span>,\n  silent <span class=\"token operator\">=</span> false,\n  onMouseOver\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin class-name\">return</span> null<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  // TODO: Don't use random <span class=\"token keyword\">in</span> render\n  <span class=\"token builtin class-name\">let</span> num <span class=\"token operator\">=</span> Math.floor<span class=\"token punctuation\">(</span>Math.random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * 1e7<span class=\"token punctuation\">)</span>\n    .toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    .replace<span class=\"token punctuation\">(</span>/<span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">\\</span>d+/gi, <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      <span class=\"token assign-left variable\">className</span><span class=\"token operator\">=</span><span class=\"token string\">\"HelloWorld\"</span>\n      <span class=\"token assign-left variable\">title</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token variable\"><span class=\"token variable\">`</span>You are visitor number $<span class=\"token punctuation\">{</span>num<span class=\"token punctuation\">}</span><span class=\"token variable\">`</span></span><span class=\"token punctuation\">}</span>\n      <span class=\"token assign-left variable\">onMouseOver</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseOver<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>greeting.slice<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.toUpperCase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> + greeting.slice<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.toLowerCase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>/strong<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>greeting.endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> ? <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\" \"</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>span <span class=\"token assign-left variable\">style</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color: <span class=\"token string\">\"grey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token string\">\", \"</span><span class=\"token operator\">&lt;</span>/span<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>greeted<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span>/em<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>silent ? <span class=\"token string\">\".\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 <code>--write</code> 옵션으로 위 커맨드를 실행하면 <code>index.js</code> 파일의 내용이 포멧팅된 코드로 바로 대체됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx prettier <span class=\"token parameter variable\">--write</span> <span class=\"token string\">\"index.js\"</span></code></pre></div>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n  greeted <span class=\"token operator\">=</span> <span class=\"token string\">'\"World\"'</span><span class=\"token punctuation\">,</span>\n  silent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  onMouseOver<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// TODO: Don't use random in render</span>\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1e7</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.\\d+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      className<span class=\"token operator\">=</span><span class=\"token string\">\"HelloWorld\"</span>\n      title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You are visitor number </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      onMouseOver<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseOver<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>strong<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>strong<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\" \"</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"grey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token string\">\", \"</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>greeted<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>em<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>silent <span class=\"token operator\">?</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이것이 Prettier가 동작하는 기본적인 방식입니다. 정말 간단하죠?\n우리가 소스 코드를 건내주면 Prettier는 코드를 포멧팅해서 돌려줍니다.</p>\n<h2 id=\"es-lint와-통합하기\" style=\"position:relative;\"><a href=\"#es-lint%EC%99%80-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0\" aria-label=\"es lint와 통합하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES Lint와 통합하기</h2>\n<p>실제 프로젝트에서는 Prettier는 단독 CLI 도구가 아닌 일반적으로 ESLint와 같은 린터(Linter)와 통합(integration)해서 사용하는 경우가 많습니다.</p>\n<p>ESLint와 통합을 위해서는 2개의 npm 패키지를 추가로 설치해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> eslint-config-prettier eslint-plugin-prettier</code></pre></div>\n<p>마지막으로 해당 프로젝트의 <code>.eslintrc.js</code>나 <code>.eslintrc.json</code>과 같은 ESLint의 설정 파일을 열어서 다음 설정을 추가해줍니다.</p>\n<div class=\"gatsby-code-title\">.eslintrc.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:prettier/recommended\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기존에 <code>extends</code> 옵션에 다른 값들이 있는 경우, 기존 설정보다 우선하려면 배열 내에 맨 뒤에 위치시키야 함을 주의 바랍니다.</p>\n<blockquote>\n<p>프로젝트에 ESLint가 셋업되어 있지 않거나, ESLint가 생소하신 분들은 먼저 <a href=\"/js-eslint/\">관련 글</a>을 보시고 돌아시면 도움이 될 것 같습니다.</p>\n</blockquote>\n<h2 id=\"ci와-통합하기\" style=\"position:relative;\"><a href=\"#ci%EC%99%80-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0\" aria-label=\"ci와 통합하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI와 통합하기</h2>\n<p>Prettier와 같은 자동 포멧팅 도구는 CI(Continuous Integration, 지속 통합) 과정의 일부로 통합하기도 하는데요.\nCI에서 Prettier를 실행하면 포멧팅이 적절히 되지 않은 코드가 코드 저장소의 <code>main</code> 또는 <code>master</code> 브랜치에 머지(merge)되는 것을 효과적으로 예방할 수 있기 때문입니다.</p>\n<p>이 부분에 대해서는 <a href=\"/github-actions-setup-node/\">별도의 글</a>에서 GitHub의 CI 서비스인 GitHub Actions를 사용하여 자바스크립트 프로젝트에서 CI를 구성하는 방법에 대해서 다루고 있으니 참고 바랍니다.</p>\n<h2 id=\"포멧팅-예외\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EB%A9%A7%ED%8C%85-%EC%98%88%EC%99%B8\" aria-label=\"포멧팅 예외 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포멧팅 예외</h2>\n<p>Prettier로 프로젝트 전체를 포멧팅을 할 때, <code>.prettierignore</code> 설정 파일을 생성하면 예외 시키고 싶은 파일이나 디렉터리를 지정할 수 있습니다.\n예를 들어, <code>node_modules/</code> 디렉터리의 경우, 외부 라이브러리의 소스 코드가 위치하고 있기 때문에 포멧팅을 할 필요가 없습니다.\n또한 <code>package-lock.json</code> 파일도 NPM으로 패키지를 설치할 때 자동으로 업데이트는 되는 파일이므로 굳이 포멧팅을 할 이유가 없습니다.</p>\n<div class=\"gatsby-code-title\">.prettierignore</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node_modules/\npackage-lock.json</code></pre></div>\n<p>이렇게 두 줄을 <code>.prettierignore</code> 설정 파일에 추가하면 Prettier는 포멧팅할 때 지정된 디렉터리와 파일을 무시하게 됩니다.</p>\n<h2 id=\"코드-편집기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%ED%8E%B8%EC%A7%91%EA%B8%B0\" aria-label=\"코드 편집기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 편집기</h2>\n<p>코드 포멧팅이 필요할 때 마다 매번 터미널에 커맨드를 날리려면 매우 번거롭겠죠? 걱정마세요!\n다행이도 대부분의 코드 편집기에서는 Prettier과의 상당히 매끄러운 통합을 지원하고 있습니다.</p>\n<p>따라서 본인이 사용하는 편집기에서 제공하는 Prettier 플러그인 또는 익스텐션을 찾아서 설치만 해주시면 됩니다.</p>\n<ul>\n<li>VS Code: <a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</a></li>\n<li>Atom: <a href=\"https://atom.io/packages/mprettier\">https://atom.io/packages/mprettier</a></li>\n<li>Sublime Text: <a href=\"https://packagecontrol.io/packages/JsPrettier\">https://packagecontrol.io/packages/JsPrettier</a></li>\n</ul>\n<p>이러한 Prettier의 편집기 통합을 활용하면 코드를 작성하면서 실시간으로 포멧팅이 되기 때문에 정말 편리합니다. 👍</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 코드 포멧터 Prettier를 사용하는 방법에 대해서 간단하게 살펴보았습니다.\n참고로 Prettier는 자바스크립트 뿐만 아니라 타입스크립트, CSS, HTML, JSON, YAML, Markdown 등을 다양한 언어를 지원하고 있습니다.</p>\n<p>이제 우리 그만 싸우고 코드 포멧팅은 그냥 Prettier에게 맡기면 어떨까요?\n코딩 포멧팅 때문에 싸우기엔 프로젝트의 일정은 빠뜻하고 기능 구현하기에도 너무 빠쁘잖아요 😁</p>","timeToRead":6,"fields":{"slug":"/js-prettier/","tags":["JavaScript","Prettier","Format","ESLint"]},"frontmatter":{"title":"코드 포멧팅은 그냥 Prettier에게 맡기세요","date":"Sep 29, 2019"}},"next":{"fields":{"slug":"/webpack-plugins-define-environment/"},"frontmatter":{"title":"웹팩(Webpack) DefinePlugin, EnvironmentPlugin 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}