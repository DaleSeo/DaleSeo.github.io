{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-range/","result":{"pageContext":{"previous":null,"node":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/qCmSYOSWWY8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>다른 프로그래밍 언어를 쓰시다가 파이썬으로 넘어온 분들이 <code>for</code> 루프 때문에 적지 않게 당황하시는 것을 자주 보게 됩니다.</p>\n<p>다른 언어에서는 일반적으로 <code>for</code> 루프를 작성할 때 항상 다음 3가지를 명시를 하면서 시작하죠?</p>\n<ul>\n<li>인덱스 변수의 초기 값</li>\n<li>반복 지속 조건</li>\n<li>인덱스 변수 갱신 방법</li>\n</ul>\n<p>예를 들어, 자바의 경우 보통 다음과 같은 형태로 <code>for</code> 루프를 돌고요.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> letters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바스크립트에서 <code>for</code> 루프를 돌리는 모습이 크게 다르지는 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> letters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 파이썬에서는 이러한 전형적인 <code>for</code> 문법을 제공하지 않고, 비교적 다른 언어에서는 나중에 추가된 <code>for-in</code> 문법이 기본으로 채택이 되었어요.</p>\n<p>그래서 위에서 다른 언어로 작성된 <code>for</code> 루프를 굳이 파이썬의 문법으로 옮겨보면 아래와 같은 작성할 수 있을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서 눈에 띄는 부분은 바로 <code>in</code> 키워드 바로 뒷 부분에 <code>range()</code>라는 함수가 사용되고 있다는 것인데요. 👀</p>\n<p>이번 포스팅에서는 파이썬에서 이 <code>range()</code> 함수가 도대체 뭐길래 이렇게 <code>for</code> 루프에서 자주 보이는지 자세히 파해쳐보도록 할께요.</p>\n<h2 id=\"기본-문법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95\" aria-label=\"기본 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 문법</h2>\n<p><code>range()</code> 함수는 파이썬이라는 언어 자체에 내장이 되어 있어서 마치 <code>for</code>나 <code>in</code> 키워드를 사용하듯이 어디서나 사용할 수 있습니다.</p>\n<p>파이썬에서 <code>range()</code> 함수는 말 그대로 “범위”를 만들 때 사용하는 함수인데요.\n좀 더 정확히 얘기하면 정수로 이뤄진 범위를 만들어주죠.</p>\n<p>정수로 범위를 정의하려면 범위가 어느 숫자에서 시작하고 어느 숫자에서 끝나는지, 그리고 숫자 간에 간격을 설정해야 하겠죠?\n그래서 <code>range()</code> 내장 함수는 최대 3개의 인자를 받는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>시작값<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>종료값<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>증분<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>2개의 인자를 넘기면 각각 시작값과 종료값으로 사용되며, 증분은 기본값인 <code>1</code>이 적용되고요. (범위 내의 숫자가 1씩 커집니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>시작값<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>종료값<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>1개의 인자를 넘기면 종료값으로 사용되며, 시작값은 기본값인 <code>0</code>이 적용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>종료값<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 가변 인자를 받는 <code>range()</code> 함수는 인자를 어떻게 넘기느냐에 따라 다양한 범위를 반환하게 됩니다.</p>\n<h2 id=\"범위의-시작과-종료\" style=\"position:relative;\"><a href=\"#%EB%B2%94%EC%9C%84%EC%9D%98-%EC%8B%9C%EC%9E%91%EA%B3%BC-%EC%A2%85%EB%A3%8C\" aria-label=\"범위의 시작과 종료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>범위의 시작과 종료</h2>\n<p>아마 제일 흔하게 볼 수 있는 <code>range()</code> 함수의 사용 방법은 범위가 종료되야 할 숫자 하나만 인자로 넘기는 건데요.\n이럴 경우, 시작값은 자동으로 <code>0</code>이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>종료값<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서 주의 사항은 <code>range()</code> 함수가 반환하는 범위에는 인자로 넘어간 종료값이 포함이 되지 않는다는 거에요.\n다시 말해, 범위는 <code>0</code>에서 시작하고 종료값에서 <code>1</code>을 뺀 값에서 끝납니다.</p>\n<p>예를 들어, <code>0</code>부터 <code>9</code>까지의 범위를 만들고 싶다면 <code>range()</code> 함수에 <code>10</code>을 인자로 넘기면 되겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">5</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">7</span>\n<span class=\"token number\">8</span>\n<span class=\"token number\">9</span></code></pre></div>\n<p>만약에 <code>0</code> 대신에 다를 숫자에서 범위를 시작하고 싶다면 어떻게 해야할까요?\n그럴 때는 <code>range()</code> 함수에 첫번째 인자로 시작값를 넘기고, 두번째 인자로 종료값를 넘기면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>시작값<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>종료값<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>예를 들어, <code>3</code>에서 시작해서 <code>7</code>에서 끝나는 범위를 만들고 싶다면, <code>range()</code> 함수의 첫번째 인자로 <code>3</code>을 넘기고 두번째 인자로 <code>8</code>을 넘기면 되겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">3</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">5</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">7</span></code></pre></div>\n<p>종료값은 범위에 포함되지 않는다는 거 까먹지 않게 조심하세요 😛</p>\n<h2 id=\"범위의-증가와-감소\" style=\"position:relative;\"><a href=\"#%EB%B2%94%EC%9C%84%EC%9D%98-%EC%A6%9D%EA%B0%80%EC%99%80-%EA%B0%90%EC%86%8C\" aria-label=\"범위의 증가와 감소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>범위의 증가와 감소</h2>\n<p>여태까지는 범위 내의 숫자가 <code>1</code>씩 커지고 있죠?\n<code>range()</code> 함수를 호출 할 때 세번째 인자까지 넘기면 숫자가 얼마큼씩 커질지도 조정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>시작값<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>종료값<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>증분<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>예를 들어, <code>10</code>부터 <code>35</code>까지 <code>5</code>씩 늘어나는 범위을 만들어볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">10</span>\n<span class=\"token number\">15</span>\n<span class=\"token number\">20</span>\n<span class=\"token number\">25</span>\n<span class=\"token number\">30</span>\n<span class=\"token number\">35</span></code></pre></div>\n<p>만약에 <code>range()</code> 함수의 세번째 인자로 음수를 넘기면 어떻게 될까요?\n네, 맞습니다. 숫자가 줄어드는 간격이 만들어집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">60</span>\n<span class=\"token number\">55</span>\n<span class=\"token number\">50</span>\n<span class=\"token number\">45</span>\n<span class=\"token number\">40</span>\n<span class=\"token number\">35</span></code></pre></div>\n<p>증분으로 음수를 사용할 때는 당연히 첫번째 인자가 두번째 인자보다 커야겠죠?\n범위의 시작 값이 범위의 종료 값보다 커야 숫자가 점점 작아질 수 있을테니까요.</p>\n<h2 id=\"기본-응용\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%9D%91%EC%9A%A9\" aria-label=\"기본 응용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 응용</h2>\n<p>그럼 지금까지 배운 방법을 사용해서 <code>range()</code> 함수를 다양하게 응용해볼까요?</p>\n<p>먼저 홀수로 이로어진 범위를 만들어 출력해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> odd <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>odd<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">5</span> <span class=\"token number\">7</span> <span class=\"token number\">9</span></code></pre></div>\n<p>그럼 짝수도 어렵지 않겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> even <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>even<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">2</span> <span class=\"token number\">4</span> <span class=\"token number\">6</span> <span class=\"token number\">8</span> <span class=\"token number\">10</span></code></pre></div>\n<blockquote>\n<p>결과 값이 한줄이 출력이 되도록 <code>print()</code> 함수의 <code>end</code> 옵션을 사용했는데요. <code>print()</code> 함수에 대해서는 <a href=\"/python-print/\">별도의 포스팅</a>에서 자세히 다루었으니 참고 바랍니다.</p>\n</blockquote>\n<p>이중 루프를 이용하면 구구단도 어렵지 않게 출력할 수 있겠네요!</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> first <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> second <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>first<span class=\"token punctuation\">}</span></span><span class=\"token string\"> x </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>second<span class=\"token punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>first <span class=\"token operator\">*</span> second<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">2</span> x <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token number\">2</span> x <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token number\">2</span> x <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n<span class=\"token number\">2</span> x <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n<span class=\"token number\">2</span> x <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token number\">2</span> x <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n<span class=\"token number\">2</span> x <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n<span class=\"token number\">2</span> x <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">16</span>\n<span class=\"token number\">2</span> x <span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token number\">3</span> x <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token number\">3</span> x <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n<span class=\"token number\">3</span> x <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n<span class=\"token number\">3</span> x <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n<span class=\"token number\">3</span> x <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n<span class=\"token number\">3</span> x <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token number\">3</span> x <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n<span class=\"token number\">3</span> x <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\n<span class=\"token number\">3</span> x <span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token number\">27</span>\n<span class=\"token number\">4</span> x <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token number\">4</span> x <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n<span class=\"token number\">4</span> x <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n<span class=\"token number\">4</span> x <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">16</span>\n<span class=\"token number\">4</span> x <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token number\">4</span> x <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\n<span class=\"token number\">4</span> x <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">28</span>\n<span class=\"token number\">4</span> x <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">32</span>\n<span class=\"token number\">4</span> x <span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token number\">36</span>\n<span class=\"token number\">5</span> x <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token number\">5</span> x <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token number\">5</span> x <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n<span class=\"token number\">5</span> x <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token number\">5</span> x <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\n<span class=\"token number\">5</span> x <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n<span class=\"token number\">5</span> x <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">35</span>\n<span class=\"token number\">5</span> x <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">40</span>\n<span class=\"token number\">5</span> x <span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token number\">45</span>\n<span class=\"token number\">6</span> x <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n<span class=\"token number\">6</span> x <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n<span class=\"token number\">6</span> x <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token number\">6</span> x <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\n<span class=\"token number\">6</span> x <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n<span class=\"token number\">6</span> x <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">36</span>\n<span class=\"token number\">6</span> x <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n<span class=\"token number\">6</span> x <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">48</span>\n<span class=\"token number\">6</span> x <span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token number\">54</span>\n<span class=\"token number\">7</span> x <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n<span class=\"token number\">7</span> x <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n<span class=\"token number\">7</span> x <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n<span class=\"token number\">7</span> x <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">28</span>\n<span class=\"token number\">7</span> x <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">35</span>\n<span class=\"token number\">7</span> x <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n<span class=\"token number\">7</span> x <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">49</span>\n<span class=\"token number\">7</span> x <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">56</span>\n<span class=\"token number\">7</span> x <span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token number\">63</span>\n<span class=\"token number\">8</span> x <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n<span class=\"token number\">8</span> x <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">16</span>\n<span class=\"token number\">8</span> x <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\n<span class=\"token number\">8</span> x <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">32</span>\n<span class=\"token number\">8</span> x <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">40</span>\n<span class=\"token number\">8</span> x <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">48</span>\n<span class=\"token number\">8</span> x <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">56</span>\n<span class=\"token number\">8</span> x <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">64</span>\n<span class=\"token number\">8</span> x <span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token number\">72</span>\n<span class=\"token number\">9</span> x <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n<span class=\"token number\">9</span> x <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token number\">9</span> x <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">27</span>\n<span class=\"token number\">9</span> x <span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">36</span>\n<span class=\"token number\">9</span> x <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">45</span>\n<span class=\"token number\">9</span> x <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">54</span>\n<span class=\"token number\">9</span> x <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">63</span>\n<span class=\"token number\">9</span> x <span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token number\">72</span>\n<span class=\"token number\">9</span> x <span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token number\">81</span></code></pre></div>\n<blockquote>\n<p>위 코드에서 사용된 파이썬의 f-string에 대해서는 <a href=\"/python-f-strings\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h1 id=\"자료구조-루프-돌기\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%A3%A8%ED%94%84-%EB%8F%8C%EA%B8%B0\" aria-label=\"자료구조 루프 돌기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료구조 루프 돌기</h1>\n<p><code>range()</code> 함수는 여러 원소를 담고 있는 리스트나 터플, 문자열을 대상으로 루프 돌릴 때도 유용하게 사용할 수 있는데요.\n기본 아이디어는 <code>range()</code> 함수로 각 원소에 접근하기 위한 인덱스를 얻는 것입니다.</p>\n<p>예를 들어, 알파벳 대문자 첫 6개를 담은 리스트를 대상으로 루프를 돌려볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">letters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>리스트에 저장된 모든 요소를 출력해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">A\nB\nC\nD\nE\nF</code></pre></div>\n<p>물론 원하시다면 명시적으로 3개의 인자를 모두 넘겨도 상관은 없겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">A\nB\nC\nD\nE\nF</code></pre></div>\n<p>이번에는 리스트를 역방향으로 루프를 돌려보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">F\nE\nD\nC\nB\nA</code></pre></div>\n<p>부연 설명을 드리면, <code>range()</code> 함수에 첫번째 인자로 리스트에 담긴 마지막 원소의 인덱스를 넘기고 있고요, 두번째 인덱스로 <code>-1</code>을 넘겨 <code>0</code>에서 종료되도록 하고 있습니다.\n(아직 기억하시죠? 종료 값은 범위에 포함되지 않는다 것!)\n세번째 인자로 <code>-1</code>을 넘겨서 범위 내의 숫자가 <code>1</code>씩 감소되도록 하고 있습니다.</p>\n<p>이번에는 처음 3개의 원소만 출력해볼까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">A\nB\nC</code></pre></div>\n<p>반대로 마지막 3개의 원소만 출력해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">D\nE\nF</code></pre></div>\n<p>마지막으로 리스트로 부터 만들 수 있는 모든 문자의 쌍을 한 번 출력해볼께요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> letters<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">AA\nAB\nAC\nAD\nAE\nAF\nBB\nBC\nBD\nBE\nBF\nCC\nCD\nCE\nCF\nDD\nDE\nDF\nEE\nEF</code></pre></div>\n<p>이와 같이 <code>range()</code> 함수를 이용하면 여러 개의 원소를 담고 있는 자료 구조를 자유롭게 순방향/역방향으로 전체/부분 순회를 할 수가 있습니다.</p>\n<h2 id=\"주의-사항\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\" aria-label=\"주의 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의 사항</h2>\n<p>어떤가요? <code>range()</code> 함수 정말 강력하죠? 🦸</p>\n<p>하지만 파이썬 커뮤니티에서는 여러 개의 원소가 담긴 자료 구조를 대상으로 <code>for</code> 루프를 돌 때 <code>range()</code> 함수를 사용하는 것이 아주 좋은 코드라고 보지는 않습니다.\n왜냐하면 더 파이썬답게(Pythonic) <code>for</code> 루프를 작성할 수 있는 방법들이 있기 때문이죠.</p>\n<p>예를 들어, 리스트에 담긴 모든 원소를 출력하는 코드는 사실 <code>range()</code> 함수가 없이 아래처럼 작성할 수 있으며 이렇게 짜는 것이 오히려 더 깔끔합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">A\nB\nC\nD\nE\nF</code></pre></div>\n<p>리스트를 역방향으로 루프를 돌고 싶을 때는 어떻게 하냐고요? <code>reversed()</code> 내장 함수를 사용하면 되죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">F\nE\nD\nC\nB\nA</code></pre></div>\n<p>루프를 돌 때 원소 뿐만 아니라 반드시 인덱스도 필요한 상황에서도 <code>enmerate()</code> 내장 함수를 사용하는 것이 권장됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> letter <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> letter<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> A\n<span class=\"token number\">1</span> B\n<span class=\"token number\">2</span> C\n<span class=\"token number\">3</span> D\n<span class=\"token number\">4</span> E\n<span class=\"token number\">5</span> F</code></pre></div>\n<blockquote>\n<p>파이썬의 <code>enumerate()</code> 내장 함수로 <code>for</code> 루프를 돌리는 방법에 대해서는 <a href=\"/python-enumerate/\">별도 포스팅</a>에서 자세히 다루었으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"효율적인-게으름\" style=\"position:relative;\"><a href=\"#%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EA%B2%8C%EC%9C%BC%EB%A6%84\" aria-label=\"효율적인 게으름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>효율적인 게으름</h2>\n<p>혹시 <code>range()</code> 함수가 지금까지 항상 <code>for</code> 문 안에서만 사용되는 것을 눈치채셨나요?\n왜 그럴까요? <code>range()</code> 함수를 단독으로 사용하면 안 될까요?</p>\n<p>사실 <code>range()</code> 함수에 대해서 오해하기 쉬운 부분 중 하나가 숫자가 담긴 리스트를 반환한다고 생각하는 것인데요.</p>\n<p>사실 <code>range()</code> 함수는 리스트가 아니라 <code>range</code>라는 별도의 객체를 반환하는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">9</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>따라서 <code>range()</code> 함수로 부터 리스트를 얻으려면 <code>list()</code> 함수로 감싸줘야 하지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span>, <span class=\"token number\">4</span>, <span class=\"token number\">5</span>, <span class=\"token number\">6</span>, <span class=\"token number\">7</span>, <span class=\"token number\">8</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>여기서 <code>range()</code> 함수의 중요한 특징은 범위에 내에 있는 숫자들을 필요할 때 마다 하나씩 만들어낸다는 건데요.\n이러한 특징이 <code>range()</code> 함수와 <code>for</code> 반복문의 궁합을 좋게 만들어요.\n<code>for</code> 루프를 돌 때는 각 단계마다 하나의 숫자만 필요하니까요.</p>\n<p>이러한 <code>range()</code> 함수의 특징을 게으르다고 볼 수도 있지만 범위가 큰 데이터를 다룰 때 큰 이점으로 작용을 하는데요.\n예를 들어, <code>range()</code> 함수에 종료값으로 1조를 넘기더라도 범위 내의 숫자는 0부터 필요할 때 마다 하나씩 차례로 만들어집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">num_iter <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>1_000_000_000_000<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>num_iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>num_iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>num_iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span></code></pre></div>\n<p>만약에 <code>range()</code> 함수를 사용하는 대신에 1조 크기의 범위를 리스트로 만들어서 메모리에 몽땅 올리고 같은 작업을 한다고 상상해보세요.\n메모리 활용 측면에서 매우 비효율적이겠죠?</p>\n<p>특히 <code>for</code> 루프를 돌다가 범위의 끝까지 도달할 필요가 없이 중간에 루프를 빠져나올 수 있는 상황이라면 더욱 그렇겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>1_000_000_000_000<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span></code></pre></div>\n<p>(오로지 예제를 위한 멍청한 코드입니다 😂)</p>\n<h2 id=\"고급-활용\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EA%B8%89-%ED%99%9C%EC%9A%A9\" aria-label=\"고급 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고급 활용</h2>\n<p><code>range()</code> 함수가 반환하는 <code>range</code> 객체는 마치 리스트와 같은 유연한 문법을 제공하기 때문에 활용 가능성이 무궁무진해요.</p>\n<p>더 큰 범위로 부터 더 작은 범위를 얻고 싶다면 리스트처럼 대괄호를 뒤에 붙여서 범위를 좁힐 수 있습니다.</p>\n<p>예를 들어, <code>0</code>부터 <code>9</code>까지의 범위에서 처음 절반인 <code>0</code>부터 <code>4</code>까지의 범위만 얻고 싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span></code></pre></div>\n<p>반대로 동일한 범위에서 나중 절반인 <code>5</code>부터 <code>9</code>까지의 범위만 얻고 싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span> <span class=\"token number\">9</span></code></pre></div>\n<p>심지어 기존 범위를 역순으로 뒤짚을 수도 있지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">9</span> <span class=\"token number\">8</span> <span class=\"token number\">7</span> <span class=\"token number\">6</span> <span class=\"token number\">5</span> <span class=\"token number\">4</span> <span class=\"token number\">3</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span> <span class=\"token number\">0</span></code></pre></div>\n<p>위에서 설명드린 것처럼 이렇게 <code>range</code> 객체로 부터 새로운 <code>range</code> 객체를 도출하더라도 실제로 숫자를 담은 리스트가 메모리에 올라가는 것은 아니기 때문에 메모리 걱정없이 큰 범위를 상대로도 이러한 작업들을 부담없이 할 수 있습니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 작성한 코드는 아래에서 직접 확인하고 실행해보실 수 있습니다.</p>\n<p><a href=\"https://deepnote.com/project/Blog-Yd3-DsV_QeGqo4AUZ7FyHg/%2Fpython-range.ipynb\">https://deepnote.com/project/Blog-Yd3-DsV_QeGqo4AUZ7FyHg/%2Fpython-range.ipynb</a></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>반복 작업을 위해서 루프를 도는 것은 어느 프로그래밍 언어로 코딩을 하든 빠질 수 없는 부분일텐데요.\n사실 <code>for</code> 루프에서 <code>range()</code> 함수를 사용하는 것은 워낙 빈번하게 하는 작업이라서 파이썬을 오래 사용한 분들도 별 생각없이 코딩을 하기 쉬운 것 같습니다.\n이 글이 습관적으로 사용하는 <code>range()</code> 내장 함수에 대해서 한 번 깊게 생각하게 보는 기회가 되었으면 좋겠습니다.</p>","timeToRead":11,"fields":{"slug":"/python-range/","tags":["Python","BIF","for","range"]},"frontmatter":{"title":"파이썬의 range() 내장 함수로 정수 범위 만들기 (feat. for 루프)","date":"Mar 26, 2022"}},"next":{"fields":{"slug":"/http-session/"},"frontmatter":{"title":"쿠키 2부: 세션은 쿠키가 필요해~"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}