{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-optional-chaining/","result":{"pageContext":{"previous":null,"node":{"html":"<p>optional chaining을 지원하기 위해서 ES2020에서 추가된 문법인 <code>?.</code> 연산자에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"-연산자를-통한-속성값-접근의-문제점\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%86%8D%EC%84%B1%EA%B0%92-%EC%A0%91%EA%B7%BC%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\" 연산자를 통한 속성값 접근의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>. 연산자를 통한 속성값 접근의 문제점</h2>\n<p>그동안 자바스크립트에서는 주로 <code>.</code> 연산자(chaining)를 사용해서 객체의 속성값에 접근했었습니다.</p>\n<p>간단한 예로, <code>user</code> 객체의 <code>name</code> 속성의 <code>first</code> 속성값은 다음과 같이 접근할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>first<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>first\n<span class=\"token string\">'John'</span></code></pre></div>\n<p>하지만 이렇게 여러 단계로 이루어진 객체를 탐색할 때는 항상 <code>TypeError</code>가 발생할 확률이 생깁니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street\nUncaught TypeError<span class=\"token operator\">:</span> Cannot read property <span class=\"token string\">'street'</span> <span class=\"token keyword\">of</span> <span class=\"token keyword\">undefined</span></code></pre></div>\n<p>이를 방지하기 위해서 일반적으로 다음과 같은 방어 로직을 넣게 되는데 보시다시피 코드가 지저분하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> user<span class=\"token punctuation\">.</span>address <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street\n<span class=\"token keyword\">undefined</span></code></pre></div>\n<p>그래서 기존에는 <code>lodash</code>와 같은 유틸리티 라이브러리를 이용하여 이 문제를 해결했었습니다. 😝</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span>\n\n<span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">\"address.street\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"-연산자를-통한-안전한-속성값-접근\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%95%88%EC%A0%84%ED%95%9C-%EC%86%8D%EC%84%B1%EA%B0%92-%EC%A0%91%EA%B7%BC\" aria-label=\" 연산자를 통한 안전한 속성값 접근 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>?. 연산자를 통한 안전한 속성값 접근</h2>\n<p><code>?.</code> 연산자를 사용하면 지저분한 방어 로직이나 유틸리티 라이브러리 없이 안전하고 깔끔하게 속성값에 접근할 수 있습니다.</p>\n<p>객체의 속성을 접근할 때 <code>.</code> 연산자 대신에 <code>?.</code> 연산자를 사용하면, 해당 객체가 nullish 즉, <code>undefined</code>나 <code>null</code>인 경우에 <code>TypeError</code> 대신에 <code>undefined</code>를 얻게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> user<span class=\"token operator\">?.</span>name<span class=\"token operator\">?.</span>first\n<span class=\"token string\">'John'</span>\n<span class=\"token operator\">></span> user<span class=\"token operator\">?.</span>address<span class=\"token operator\">?.</span>street\n<span class=\"token keyword\">undefined</span></code></pre></div>\n<p><code>?.</code> 연산자는 배열이나 함수에서도 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span> arr<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">undefined</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> func <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> func<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">undefined</span></code></pre></div>\n<h2 id=\"-연산자와-함께-사용하기\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90%EC%99%80-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\" 연산자와 함께 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>?? 연산자와 함께 사용하기</h2>\n<p><code>?.</code> 연산자는 ES2020에서 함께 도입된 <code>??</code> 연산자와 함께 사용하면 더욱 시너지를 발휘합니다.<br>\nnullish coalescing을 위해 사용되는 <code>??</code> 연산자에 대한 내용은 <a href=\"/js-nullish-coalescing\">관련 포스트</a>를 참고 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> user<span class=\"token operator\">?.</span>country <span class=\"token operator\">??</span> <span class=\"token string\">\"Korea\"</span>\n<span class=\"token string\">'Korea'</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>2020년 현재 대부분의 최신 브라우저는 optional chaining을 지원하기 때문에 <code>?.</code> 연산자를 사용할 수 있습니다.<br>\nNode.js의 경우 버전 14부터 지원하며, 그 이전 버전에서는 <a href=\"/?tag=Babel\">Babel</a>과 같은 트랜스파일러(transfiler)를 통해서 접해볼 수 있습니다.</p>\n<p>optional chaining에 대한 좀 더 자세한 내용은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">관련 MDN 공식 문서</a>를 참고바라겠습니다.</p>","timeToRead":2,"fields":{"slug":"/js-optional-chaining/","tags":["JavaScript","ES6","ES2020"]},"frontmatter":{"title":"[ES2020] ?. 연산자 - Optional Chaining","date":"Jul 26, 2020"}},"next":{"fields":{"slug":"/js-nullish-coalescing/"},"frontmatter":{"title":"[ES2020] ?? 연산자 - Nullish Coalescing"}}}}}