{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/glob-patterns/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/react-hooks-use-script/"},"frontmatter":{"title":"React에서 <script> 태그로 자바스크립트 불러오기"}},"node":{"html":"<p>이번 포스팅에서는 Glob Patterns, 흔히 줄여서 Globs라고 불리는 패턴 매칭에 대해서 알아보도록 하겠습니다.</p>\n<h2 id=\"globsglob-patterns란\" style=\"position:relative;\"><a href=\"#globsglob-patterns%EB%9E%80\" aria-label=\"globsglob patterns란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Globs(Glob Patterns)란?</h2>\n<p>Globs은 오래전부터 리눅스 운영체제에서 한 번에 여러 개의 파일을 찾을 때 사용해온 패턴 매칭 기법인데요.\n많은 리눅스 명령어가 인자로 Glob 패턴을 받기 때문에 알게 모르게 많이 사용하고 있으실 거에요.\n예를 들어, 터미널에서 <code>ls src/*.java</code>와 유사한 커맨드를 날려보신 적이 있으시면 이미 어느 정도 Globs 문법을 자연스럽게 체득하셨다고 볼 수 있을 것 같습니다.</p>\n<p>Glob 패턴 매칭은 현재 리눅스 뿐만 아니라 Shell, Java, Python, NodeJS, Go, Ruby, PHP 등 대부분의 프로그래밍 언어에서 지원하고 있는데요.\n특히, 운영 체제와 프로그래밍 언어를 가리지 않고 프레임워크나 라이브러리를 설정할 때 광범위하게 사용되고 있습니다.\n주로 설정 내용을 프로젝트 내의 일부 파일에만 적용하고 싶을 때 Globs가 사용되는데요.\n대표적인 사례로, Git에서 코드 저장소(repository) 내에 일부 파일을 추적하지 않기 위해서 사용하는 <code>.gitignore</code> 파일을 들 수 있겠습니다.</p>\n<p>또한 개발자들이 거의 매일 사용하는 코드 편집기에서도 Globs가 사용되는 것을 쉽게 볼 수 있는데요.\n예를 들어, VSCode에서 파일 검색할 때, 검색 범위에 일부 파일을 포함하거나 제외시킬 수 있는 기능이 있는데 이 때도 Globs 문법으로 패턴을 입력하도록 되어있습니다. (<a href=\"https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options\">관련 매뉴얼</a>)</p>\n<p>그럼 지금부터 Globs에서 어떤 와일드카드(wildcard, 특수 기호/괄호)를 제공하고 어떻게 활용하는지에 대해서 함께 살펴볼까요?</p>\n<h2 id=\"-기호\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%ED%98%B8\" aria-label=\" 기호 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>? 기호</h2>\n<p>Glob 패턴에서 <code>?</code> 기호는 문자의 종류와 상관없이 정확히 한 글자와 매칭이되는데요.\n예를 들어 <code>a?</code>라는 패턴으로는 <code>ab</code>, <code>ac</code>, <code>ad</code> 등과 같은 이름의 파일을 찾을 수 있습니다.\n하지만 <code>abc</code>나 <code>abab</code> 등과 같은 이름을 가진 파일은 찾을 수 없을 것입니다.</p>\n<p><code>?</code> 기호는 연달아 사용할 수도 있는데요.\n예를 들어, <code>data/ma??.txt</code>라는 패턴으로는 <code>data/main.txt</code>, <code>data/math.txt</code>, <code>data/mail.txt</code> 등과 같은 이름의 파일을 찾을 수 있을 것입니다.\n하지만 <code>data/map.txt</code>나 <code>data/maple.txt</code> 등과 같은 이름을 가진 찾아지지 않겠죠?</p>\n<p><code>?</code> 기호는 아무래도 매칭 범위가 짧다보니 그렇게 자주 사용되는 편은 아닙니다.\n하나의 패턴으로 최대한 많은 파일을 찾는 것이 Globs의 주 용도이기 때문입니다.</p>\n<h2 id=\"-기호-1\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%ED%98%B8-1\" aria-label=\" 기호 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>* 기호</h2>\n<p>아마 Globs에서 가장 많이 사용되는 와일드카드는 <code>*</code> 기호는 일텐데요.\n<code>*</code> 기호는 길이와 상관없이 어떤 문자열과도 부합합니다.\n심지어 공백까지도요. (공백은 길이가 0인 문자열이라고 생각하면 쉽습니다.)\n단, 예외가 있는데 디렉토리 구분자로 사용되는 특수 기호, 즉 리눅스 계열에서는 <code>/</code>, 윈도우즈 계열에서는 <code>\\</code>과는 부합하지 않습니다.</p>\n<p>예를 들어, <code>a*</code>라는 패턴으로는 <code>a</code>, <code>ab</code>, <code>abc</code>, <code>abc.txt</code>, <code>abc.mp3</code> 등과 같이 이름이 <code>a</code>로 시작하는 모든 파일을 찾을 수 있습니다.</p>\n<p>또 다른 예로, <code>img</code>라는 폴더 안에서 파일 이름은 <code>abc</code>로 동일한데 확장자만 다른 파일을 찾고 싶다면 <code>img/abc.*</code>라는 패턴을 사용하면 됩니다.\n그러면 <code>img/abc.jpg</code>, <code>img/abc.png</code>, <code>img/abc.gif</code>와 같은 파일들이 검색될 것입니다.</p>\n<h2 id=\"-기호-2\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%ED%98%B8-2\" aria-label=\" 기호 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>** 기호</h2>\n<p>다음으로 Globs의 꽃이라고도 볼 수 있는 <code>**</code> 기호에 대해서 알아볼까요?\n<code>**</code> 기호는 0개 이상의 하위 디렉토리와 매칭이 되는데요.\n예를 들어, <code>logs/**/error.log</code>이라는 패턴을 통해 <code>logs/error.log</code>, <code>logs/a/error.log</code>, <code>logs/a/b/error.log</code>, <code>logs/a/b/c/error.log</code> 등의 파일을 모두 찾을 수 있습니다.</p>\n<p>특히 <code>**/</code>로 시작하는 패턴은 현재 디렉토리 뿐만 아니라 하위 디렉토리에 있는 파일까지 모두 재귀적으로 탐색할 수 있어서 매우 많이 쓰이는데요.\n예를 들어, 현재 디렉토리 하위에 존재하는 모든 CSS 파일을 찾고 싶다면 <code>**/*.css</code>라는 패턴을 사용하면 됩니다.\n반면에 <code>*.css</code> 패턴은 현재 디렉토리에 있는 CSS 파일만 찾고, 하위 디렉토리까지는 뒤지지 않습니다.</p>\n<p>참고로 편의를 위해서 일부 설정 파일이나 개발 도구에서는 패턴 맨 앞의 <code>**/</code> 기호를 생략해도 무방한 경우가 있는데요.\n아무래도 파일을 검색할 때, 현재 디렉토리만 검색하기 보다는 하위에 있는 모든 디렉토리를 검색하고 싶은 경우가 많이 때문일 것입니다.</p>\n<h2 id=\"-괄호\" style=\"position:relative;\"><a href=\"#-%EA%B4%84%ED%98%B8\" aria-label=\" 괄호 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>{} 괄호</h2>\n<p>리눅스에서는 파일 이름의 대소문자를 구분하기 때문에 어떤 확장자를 가진 파일을 찾을 때 소문자로 한 번 찾고 대문자로 한 번 더 찾아야하는 일이 발생하는데요.\n예를 들어, 현재 디렉토리 내에 파일 이름이 <code>jpg</code>로 끝나거나, <code>JPG</code>로 끝나는 파일을 검색하고 싶을 때는 어떻게 할까요?</p>\n<p>지금까지 배운 와일드카드를 활용해보면 <code>**/*.jpg</code> 패턴과 <code>**/*.JPG</code> 패턴을 이용해서 두 번 검색 후에 검색 결과를 합친 후 중복되는 파일을 제거해줘야 할 것입니다.</p>\n<p>하지만 <code>{}</code> 괄호를 활용하면 <code>**/*.{jpg,JPG}</code> 패턴 하나로 통합을 할 수가 있습니다.\n즉, <code>{}</code> 괄호는 동시에 여러 문자열을 매칭하는 것이 가능하게합니다.</p>\n<p>또 다른 예로, HTML 문서의 확장자는 <code>htm</code>과 <code>html</code>이 둘 다 사용되는데요.\n만약에 <code>public</code> 폴더에 있는 모든 HTML 파일을 검색하고 싶다면 <code>public/**/*.{htm,html}</code> 패턴을 사용할 수 있을 것입니다.</p>\n<h2 id=\"-괄호-1\" style=\"position:relative;\"><a href=\"#-%EA%B4%84%ED%98%B8-1\" aria-label=\" 괄호 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[] 괄호</h2>\n<p>간혹가다가 문자의 범위를 기준으로 파일 이름을 매칭하고 싶을 때가 있는데요.\n이럴 때는 <code>[]</code>괄호를 사용할 수 있습니다.\n예를 들어, 이름에 모음 소문자를 포함하는 파일을 검색하고 싶다면 <code>**/*[aeiou]*</code>이라는 패턴을 사용할 수 있습니다.</p>\n<p><code>-</code> 기호를 두 문자 사이에 넣으면 두 문자 사이에 있는 모든 문자가 매칭에 사용됩니다.\n예를 들어, 대문자로 이름이 시작하는 파일을 검색하고 싶다면 <code>**/[A-Z]*</code>이라는 패턴을 사용할 수 있습니다.</p>\n<p><code>!</code> 기호를 <code>[]</code> 괄호 맨 앞에 붙이면 그 뒤에 나오는 문자를 매칭에서 제외합니다.\n예를 들어, <code>**/[!A-Z]*</code> 패턴은 대문자로 이름이 시작하지 않는 파일만을 검색해줍니다.</p>\n<h2 id=\"-괄호-2\" style=\"position:relative;\"><a href=\"#-%EA%B4%84%ED%98%B8-2\" aria-label=\" 괄호 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>() 괄호</h2>\n<p><code>?</code>, <code>*</code> 바로 뒤에 <code>()</code> 괄호를 사용하면 와일드카드 매칭 시 어느 정도 선택지를 제한해줄 수 있습니다.</p>\n<p>예를 들어, <code>?(ab|cd)</code>라는 패턴은 <code>ab</code> 또는 <code>cd</code>와 매칭되며 빈문자열과도 매칭됩니다.\n반면에 <code>*(ab|cd)</code>라는 패턴은 <code>ab</code>, <code>abab</code>, <code>cd</code>, <code>cdcd</code>, <code>abcd</code>, <code>cdab</code>, <code>ababcdabcd</code> 등 다양한 문자열과 매칭될 수 있습니다.</p>\n<p>따라서 파일 이름에서 있어도 되고 없어도 되는 부분을 매칭할 때 유용하게 사용할 수 있는데요.</p>\n<p>예를 들어, React 프로젝트에서는 확장자가 <code>.js</code>와 <code>.jsx</code>인 파일이 공존하기 마련인데요.\n이 두 개의 확장자를 쓰고 있는 모든 파일을 찾고 싶다면 <code>**/*.js?(x)</code>라는 패턴을 사용할 수 있습니다.\n물론 살짝 패턴이 더 길어지지만 위에서 배운 <code>{}</code> 괄호를 사용해서 <code>**/*.{js,jsx}</code>를 사용해도 무방하겠죠?</p>\n<h2 id=\"globs-vs-regex\" style=\"position:relative;\"><a href=\"#globs-vs-regex\" aria-label=\"globs vs regex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Globs vs. Regex</h2>\n<p>많은 분들이 정규식(Regex, Regular Expression)을 Globs(Global Patterns)랑 혼동하시는데요.\n이 둘은 얼핏 보면 비슷해보이지만 사실 알고 보면 문법이 미묘하게 틀려서 각별히 주의가 필요합니다.\n예를 들어, <code>*</code> 기호는 Globs에서는 길이와 상관없이 모든 문자열과 매칭되지만, 정규식에서는 <code>.*</code>이라고 해줘야지 같은 효력이 발생합니다.</p>\n<p>무엇보다 두 가지 패턴 매칭 방법은 용도가 크게 다릅니다.\nGlobs는 파일 시스템을 검색하는데 특화되어 있는 반면에, 정규식은 좀 더 범용적으로 사용할 수 있는 매칭 방법입니다.\n따라서 정규식은 Globs보다 더 강력한 문자열 매칭을 제공하며 문법도 훨씬 더 복잡합니다.</p>\n<p>단순히 파일을 찾을 때는 Globs를 쓰시는 것이 훨씬 더 쉽고 실수할 확률도 그만큼 적을 것입니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Globs 문법에 대해서 한 번 정리를 해보았는데 어떠셨나요?\n생각보다 그렇게 많이 복잡하지는 않죠?\n(적어도 정규식 보다는 훨씬 간단하게 느껴지실 것입니다 😁)</p>\n<p>자주 사용되는 Glob 패턴은 인터넷에서 검색하면 어렵지 않게 구해서 그대로 복사해서 붙여넣기할 수 있기 때문에 실무에서 직접 Glob 패턴을 짤 일을 많지 않을 수도 있습니다.\n하지만 개발자로서 Glob 패턴을 일고 어떤 파일이 검색될지 스스로 파악할 수 있다면 업무에 작은 도움이 될 수 있지 않을까요?</p>","timeToRead":5,"fields":{"slug":"/glob-patterns/","tags":["Linux","CLI"]},"frontmatter":{"title":"Globs (Glob Patterns) 문법 정리","date":"Jul 1, 2022"}},"next":{"fields":{"slug":"/react-hook-form/"},"frontmatter":{"title":"React Hook Form 라이브러리 사용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}