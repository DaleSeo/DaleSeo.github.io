{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-black/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-pipenv/"},"frontmatter":{"title":"pipenv로 패키지 관리하기"}},"node":{"html":"<h2 id=\"코드-스타일\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC\" aria-label=\"코드 스타일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 스타일</h2>\n<p>파이썬과 같이 사용차층이 넓은 범용 프로그래밍 언어의 경우, 개발자들이 선호하는 코드 스타일이 다양해지게 됩니다.\n개인 프로젝트에서는 자신이 선호에 따라 어떤 방식으로 코드를 포멧팅하든지 코드가 돌아가기면 하면 큰 상관이 없지만,\n협업 프로젝트에서는 이러한 개발자 간의 사소한 코드 스타일 차이로 불필요한 감정 싸움이 발생하기도 합니다.</p>\n<p>예를 들어, 똑같은 문자열을 표현하기 위해서 개발자 A는 홑따옴표를 사용하고 싶은데, 개발자 B는 쌍따옴표를 사용하고 싶습니다.\n만약에 개발자 A가 작성한 코드를 나중에 개발자 B가 수정하면서 홑따옴표를 모두 쌍따움표로 바꿨는데, 코드 리뷰 과정에서 개발자 A가 이 사실을 알게된다면?\n이게 참 별 일도 아닌데 직접 곁어보면 따지기도 그렇고 모른체 하기도 찝찝하고…\n암튼 이렇게 협업 프로젝트에 표준화된 코드 스타일이 없으면 팀워크에 나쁜 영향을 줄 수 있습니다.</p>\n<p>이런 경우, 코드 포멧팅 도구(Code Formatter)를 사용해서 코드 스타일을 통일시키면 문제를 해결할 수 있습니다.</p>\n<h2 id=\"black이란\" style=\"position:relative;\"><a href=\"#black%EC%9D%B4%EB%9E%80\" aria-label=\"black이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Black이란?</h2>\n<p>Black은 최근 파이썬 커뮤니티에서 가장 널리 쓰이고 있는 있는 코드 포멧터입니다.\n기존 코드 포멧터와 달리 Black은 설정의 여지가 거의 없어서 정해놓은 특정 포멧팅 규칙을 그대로 따라야합니다.\n그래서 처음에 Black을 접햇을 때 Black이 모든 코드를 일률적으로 포멧팅하는 방식에 거부감이 느껴질 수도 있습니다.\n이처럼 유연하지 않은 코드 포멧터가 개발자들 사이에서 이렇게 인기를 얻을 수 있었던 이유는 무엇일까요?</p>\n<p>바로 팀 내에서 개발자간에 코드 스타일을 협의하고 동의 하에 표준화하는 과정 자체에 상당한 소모적이기 때문입니다.\n게다가 대부분의 개발자들이 문자열을 표현하기 위해서 홑따옴표를 사용하든 쌍따옴표를 사용하든 크게 개의치 않습니다.\n사실 정말 중요한 것은 하나의 코드 스타일을 기준으로 모든 개발자가 일관성 있는 코드를 작성하는 것입니다.</p>\n<p>협업 프로젝트에서 Black을 사용하게 되면 더 이상 코드 스타일에 대해서 개발자간에 왈가왈부 할 일이 없어집니다.\nBlack이 자신의 코드를 포멧팅 하는 방식이 좋든 싫든 더 이상 개인의 특정 선호는 중요하지 않게 됩니다.</p>\n<p>Black에서 정해놓은 코딩 스타일들은 오랜 커뮤니티의 다양한 의견이 수렴을하고 여러 프로젝트에서 여러가지 실험을 통해 결정었습니다.\n따라서, Black은 매우 특수한 프로젝트가 아닌 이상 대부분의 프로젝트에서 무난하게 사용할 수 있습니다.\n이 것이 수많은 오픈 소스 파이썬 프로젝트들과 파이썬을 사용하는 수많은 기업들에서 Black을 정식 코드 포멧터로 채택해서 사용하는 이유입니다.</p>\n<h2 id=\"black-cli\" style=\"position:relative;\"><a href=\"#black-cli\" aria-label=\"black cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Black CLI</h2>\n<p>Black은 기본적으로 터미널 상에서 CLI 도구로 손쉽게 접해볼 수 있습니다.\n먼저 pip 패키지 매니저를 이용해서 Black 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> black</code></pre></div>\n<p>그 다음, 파이썬 파일을 하나 생성 후에 다음과 같이 코드 스타일이 엉망인 코드를 작성합니다.</p>\n<ul>\n<li>main.py (black으로 포멧팅 전)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> seven_dwwarfs <span class=\"token keyword\">import</span> Grumpy<span class=\"token punctuation\">,</span> Happy<span class=\"token punctuation\">,</span> Sleepy<span class=\"token punctuation\">,</span> Bashful<span class=\"token punctuation\">,</span> Sneezy<span class=\"token punctuation\">,</span> Dopey<span class=\"token punctuation\">,</span> Doc\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">37</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token number\">927</span><span class=\"token punctuation\">}</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">123456789.123456789E123456789</span>\n\n<span class=\"token keyword\">if</span> very_long_variable_name <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> \\\n very_long_variable_name<span class=\"token punctuation\">.</span>field <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> \\\n very_long_variable_name<span class=\"token punctuation\">.</span>is_debug<span class=\"token punctuation\">:</span>\n z <span class=\"token operator\">=</span> <span class=\"token string\">'hello '</span><span class=\"token operator\">+</span><span class=\"token string\">'world'</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n world <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span>\n a <span class=\"token operator\">=</span> <span class=\"token string\">'hello {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>world<span class=\"token punctuation\">)</span>\n f <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">rf'hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>world<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>this\n<span class=\"token keyword\">and</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> y <span class=\"token operator\">=</span> <span class=\"token string\">'hello '</span><span class=\"token string\">'world'</span><span class=\"token comment\">#FIXME: https://github.com/python/black/issues/26</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span>  <span class=\"token punctuation\">(</span>     <span class=\"token builtin\">object</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">f</span>    <span class=\"token punctuation\">(</span>self   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span>       <span class=\"token number\">37</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span><span class=\"token number\">2</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> y\n<span class=\"token keyword\">def</span> <span class=\"token function\">f</span>  <span class=\"token punctuation\">(</span>   a<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span>      <span class=\"token number\">37</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">42</span><span class=\"token operator\">-</span>u <span class=\"token punctuation\">:</span>  y<span class=\"token operator\">**</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">very_important_function</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>variables<span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>PathLike<span class=\"token punctuation\">,</span>debug<span class=\"token punctuation\">:</span><span class=\"token builtin\">bool</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nregular_formatting <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>그 다음, 작성한 파일을 대상으로 <code>black</code> 커맨드를 <code>--check</code> 옵션을 줘서 실행해보면 하나의 파일이 포멧팅이 필요하다고 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ black --check main.py\nwould reformat main.py\nOh no<span class=\"token operator\">!</span> 💥 💔 💥\n<span class=\"token number\">1</span> <span class=\"token function\">file</span> would be reformatted.</code></pre></div>\n<p>이 번에는 <code>--check</code> 옵션을 빼고 실행을 해보면 black이 파일 내의 코드를 포멧팅하여 저장해주는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">black main.py\nreformatted main.py\nAll done<span class=\"token operator\">!</span> ✨ 🍰 ✨\n<span class=\"token number\">1</span> <span class=\"token function\">file</span> reformatted.</code></pre></div>\n<p>실제 파일을 열어보면 다음과 같이 읽기 쉽게 깔끔하게 정돈된 코드를 볼 수 있으실 겁니다. 💅</p>\n<ul>\n<li>main.py (black으로 포멧팅 후)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> seven_dwwarfs <span class=\"token keyword\">import</span> Grumpy<span class=\"token punctuation\">,</span> Happy<span class=\"token punctuation\">,</span> Sleepy<span class=\"token punctuation\">,</span> Bashful<span class=\"token punctuation\">,</span> Sneezy<span class=\"token punctuation\">,</span> Dopey<span class=\"token punctuation\">,</span> Doc\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">927</span><span class=\"token punctuation\">}</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">123456789.123456789e123456789</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    very_long_variable_name <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">and</span> very_long_variable_name<span class=\"token punctuation\">.</span>field <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">or</span> very_long_variable_name<span class=\"token punctuation\">.</span>is_debug\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    z <span class=\"token operator\">=</span> <span class=\"token string\">\"hello \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    world <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span>\n    a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>world<span class=\"token punctuation\">)</span>\n    f <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">rf\"hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>world<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token keyword\">if</span> this <span class=\"token keyword\">and</span> that<span class=\"token punctuation\">:</span>\n    y <span class=\"token operator\">=</span> <span class=\"token string\">\"hello \"</span> <span class=\"token string\">\"world\"</span>  <span class=\"token comment\"># FIXME: https://github.com/python/black/issues/26</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">37</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> y\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">37</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">42</span> <span class=\"token operator\">-</span> u <span class=\"token punctuation\">:</span> y <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">very_important_function</span><span class=\"token punctuation\">(</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>variables<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>PathLike<span class=\"token punctuation\">,</span> debug<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Applies `variables` to the `template` and writes to `file`.\"\"\"</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n\nregular_formatting <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"코드-편집기-설정\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%ED%8E%B8%EC%A7%91%EA%B8%B0-%EC%84%A4%EC%A0%95\" aria-label=\"코드 편집기 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 편집기 설정</h2>\n<p>코드의 양이 많은 실제 프로젝트에서는 위와 같이 터미널에서 매번 Black을 실행하여 포멧팅을 하는 것은 어리석은 일일 것입니다.\n다행이도 대부분의 파이썬 코드 편집기에서 변경된 코드를 저장할 때 마다 Black이 자동으로 샐행되도록 설정을 해줄 수 있습니다.</p>\n<p>예를 들어, 제가 주로 쓰는 VSCode의 경우, 다음과 같은 설정을 <code>.vscode/settings.json</code>에 추가해주기만 하면 됩니다.\n첫번째 설정은 코드가 저장할 때 마다 자동으로 포멧팅을 하기 위함이고, 두번째 설정은 VSCode의 기본 포멧터 대신에 Black을 사용하기 위함입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"python.formatting.provider\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"black\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다른 코드 편집기의 설정 방법에 대해서는 <a href=\"https://github.com/psf/black#editor-integration\">공식 레퍼런스</a>를 참고바라겠습니다.</p>\n<h2 id=\"git-hook-설정\" style=\"position:relative;\"><a href=\"#git-hook-%EC%84%A4%EC%A0%95\" aria-label=\"git hook 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git hook 설정</h2>\n<p>코드 편집기 설정은 어디까지나 개인의 선택 사항이기 때문에 프로젝트 차원에서 포멧팅이 되지 않은 코드를 커밋하려고 하는 것을 방지하는 것이 바람직할 것입니다.</p>\n<p>먼저, Git hook 스크립트를 실행해주는 <code>pre-commit</code> 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> pre-commit</code></pre></div>\n<p>그 다음, <code>.pre-commit-config.yaml</code> 파일을 생성 후에 다음과 같이 설정 내용을 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">repos</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/psf/black\n    <span class=\"token key atrule\">rev</span><span class=\"token punctuation\">:</span> stable\n    <span class=\"token key atrule\">hooks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> black</code></pre></div>\n<p>이제, <code>pre-commit</code> 커맨드를 실행하여 방금 작성한 Git hook 스크립트를 설치해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pre-commit <span class=\"token function\">install</span>\npre-commit installed at .git/hooks/pre-commit</code></pre></div>\n<p>마지막으로, 코드 에디터의 자동 포멧팅을 해제하고, 일부로 포멧팅이 엉망인 코드를 작성 후에 저장하고 커밋을 시도해봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit\nblack<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>Failed\n- hook id: black\n- files were modified by this hook\n\nreformatted /Users/dale/learn/learn-python/main.py\nAll done<span class=\"token operator\">!</span> ✨ 🍰 ✨\n<span class=\"token number\">1</span> <span class=\"token function\">file</span> reformatted, <span class=\"token number\">9</span> files left unchanged.</code></pre></div>\n<p>위에서 설정한 Git hook 스크립트가 실행되어 커밋이 실패하고 Black이 포멧팅을 해주었습니다! 🤗\n이제 Black이 만들어준 변경분을 다시 <code>git add</code> 후에 <code>git commit</code>하면 됩니다.</p>\n<p>이제부터 <code>git commit</code>을 할 때 마다 Black이 자동으로 포멧팅을 검사하고 필요 시에 코드를 수정해주기 때문에,\n코드 에디터에 자동 포멧팅 설정을 안 해놓은 개발자도 자연스럽게 Black을 통해 일관적인 코드 스타일을 유지할 수 있습니다.</p>\n<blockquote>\n<p>pre-commit 도구에 대한 자세한 설명은 <a href=\"/pre-commit\">관련 포스팅</a>를 참조바랍니다.</p>\n</blockquote>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬 코드 포멧터인 Black을 이용하는 방법에 대해서 간단히 살펴보았습니다.\nBlack에 대한 더 자세한 내용은 아래 링크를 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://black.readthedocs.io/en/stable/\">Black Website</a></li>\n<li><a href=\"https://black.now.sh/\">Black Playground</a></li>\n<li><a href=\"https://github.com/psf/black\">Black Github</a></li>\n</ul>","timeToRead":5,"fields":{"slug":"/python-black/","tags":["Python","파이썬","Black","CodeStyle","VSCode","Git"]},"frontmatter":{"title":"Black으로 파이썬 코드 스타일 통일하기","date":"Jan 18, 2020"}},"next":{"fields":{"slug":"/python-venv/"},"frontmatter":{"title":"파이썬에서 venv로 가상 환경 사용하기"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}