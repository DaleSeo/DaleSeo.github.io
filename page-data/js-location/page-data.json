{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-location/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/js-array-concat/"},"frontmatter":{"title":"자바스크립트 배열 합치기: concat() 메서드, spread 연산자"}},"node":{"html":"<p>웹에서 페이지 간의 이동은 일반적으로 하이퍼링크(Hyperlink)를 통해 이루어집니다.\n즉, 사용자가 웹 페이지 상의 링크를 클릭하면 브라우저에서 해당 페이지가 열리게 됩니다.\n웹 개발자는 이를 위해 HTML의 <code>&#x3C;a></code> 태그의 <code>href</code> 속성에 이동해야 할 URL을 명시해주죠.</p>\n<p>하지만 웹 개발을 하다보면 자바스크립트로 페이지 이동을 처리해야하는 경우가 생기기 마련인데요.\n좋은 예로 미인증 사용자가 접근했을 때 바로 로그인 페이지로 강제 이동 시키는 것을 들 수 있겠습니다.</p>\n<p>이번 글에서는 자바스크립트를 사용하여 페이지 이동을 구현하는 여러가지 방법을 알아보겠습니다.</p>\n<h2 id=\"windowlocation-프로퍼티\" style=\"position:relative;\"><a href=\"#windowlocation-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"windowlocation 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>window.location 프로퍼티</h2>\n<p>우선 브라우저 환경에서 자바스크립트 코드가 실행될 때 전역에서 접근이 가능한 <code>window</code> 객체의 <code>location</code> 프로퍼티에 대해서 간단하게 짚고 넘어가겠습니다.</p>\n<p><code>location</code>에는 말그대로 현재 브라우저 열려있는 페이지의 위치가 담겨 있는데요.\n인터넷에서는 기본적적으로 URL을 통해서 페이지를 식별하기 때문에, 쉽게 말해서 현재 페이지의 URL 정보라고 보시면 되겠습니다.</p>\n<p>URL은 프로토콜(protocol), 호스트네임(hostname), 포트(port), 경로명(pathname) 등 다양한 요소로 구성되며 <code>location</code>을 통해서 우리는 각 구성 요소에 편하게 접근할 수 있습니다.</p>\n<p>예를 들어, <code>location.href</code>에 접근하면 전체 URL을 문자열 형태로 얻을 수 있고, <code>location.pathname</code>에 접근하면 경로명을 얻을 수 있으며, <code>location.search</code>에 접근하면 쿼리 스트링(query string)을 얻을 수 있습니다.</p>\n<p>이 정보는 브라우저에서 보통 <code>window.location</code>이나 <code>document.location</code>으로 접근하며 그냥 간단하게 <code>location</code>으로도 접근이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'www.daleseo.com'</span>\ndocument<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'www.daleseo.com'</span>\nlocation<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'www.daleseo.com'</span></code></pre></div>\n<h2 id=\"location-이나-locationhref-변경\" style=\"position:relative;\"><a href=\"#location-%EC%9D%B4%EB%82%98-locationhref-%EB%B3%80%EA%B2%BD\" aria-label=\"location 이나 locationhref 변경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>location 이나 location.href 변경</h2>\n<p>오래 전부터 웹 페이지를 이동할 때는 <code>location</code> 객체나 <code>location</code> 객체의 <code>href</code> 프로퍼티에 새로운 URL을 할당하는 방법을 많이 사용해왔습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">location <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">;</span>\nlocation<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방법으로 페이지를 이동하면 방문 이력에 새로운 기록이 추가되며, 따라서 사용자는 브라우저에서 “뒤로 가기” 버튼을 눌러 이전 페이지로 돌아갈 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이전 페이지로 돌아감</span></code></pre></div>\n<p>그런데 이 페이지 이동 방법은 타입스크립트로 코드를 작성하기가 좀 까다롭다는 단점이 있는데요.</p>\n<p>예를 들어서, <code>location</code>에 URL을 할당하려고 하면 아래와 같은 타입 에러가 발생할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">location <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Type 'string' is not assignable to type 'Location'.</span></code></pre></div>\n<p>혹시나 해서 <code>window.location</code>에 URL을 할당해보면 하면 이번에는 다른 타입 에러가 발생할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">window<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Type 'string' is not assignable to type 'Location | (string &amp; Location)'.</span></code></pre></div>\n<p>그래서 이러한 타입 에러를 피하려면 다음과 같은 약간의 꼼수가 필요한데요. 😒</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span>window <span class=\"token keyword\">as</span> Window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그니마 <code>location.href</code>에 URL을 할당하는 것은 타입 에러는 일으키기 않는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 이번에는 테스트를 작성하는 게 조금 난감해집니다… 😅</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"navigates to Dale Seo's Blog\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 변경 전</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 꼼수</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">\"location\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>location<span class=\"token punctuation\">,</span>\n      href<span class=\"token operator\">:</span> location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 변경</span>\n  location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 변경 후</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"locationassign-메서드-호출\" style=\"position:relative;\"><a href=\"#locationassign-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%98%B8%EC%B6%9C\" aria-label=\"locationassign 메서드 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>location.assign() 메서드 호출</h2>\n<p>웹 페이지를 이동하는 두 번째 방법은 <code>location</code> 객체의 <code>assign()</code> 메서드를 호출하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">location<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방법도 첫 번째 방법처럼 방문 이력에 새로운 기록이 추가되기 때문에 이전 페이지로 돌아가는 것이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이전 페이지로 돌아감</span></code></pre></div>\n<p>첫 번째 방법과 달리 타입스크립트로 코딩할 때도 별 문제가 없고 테스트를 작성하기도 용이합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"navigates to Dale Seo's Blog\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 변경 전</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 스파이</span>\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> <span class=\"token string\">\"assign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 변경</span>\n  location<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 변경 후</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>간혹 이 방법이 첫 번째 방법보다 느려서 첫 번째 방법을 선호하신다는 분들이 있는데요.\n예전처럼 컴퓨터가 느릴 때면 몰라도 요즘에는 유의미한 성능 차이가 있다고 보기는 힘들 것 같습니다.</p>\n<p>프로퍼티를 할당하는 것보다는 이렇게 메서드를 호출하는 편이 더 명시적이고, 특히 타입스크립트를 사용한다면 정신 건강에 더 이로울 것입니다.</p>\n<h2 id=\"locationreplace-메서드-호출\" style=\"position:relative;\"><a href=\"#locationreplace-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%98%B8%EC%B6%9C\" aria-label=\"locationreplace 메서드 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>location.replace() 메서드 호출</h2>\n<p>웹 페이지를 이동하는 세 번째 방법은 <code>location</code> 객체의 <code>assign()</code> 메서드를 호출하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">location<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.daleseo.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방법은 첫 번째 방법과 두 번째 방법과 달리 현재 방문 기록을 덮어써버리기 때문에 이전 페이지로 돌아가는 것이 불가능합니다.\n만약에 사용자가 뒤로 가기 버튼으로 이전 페이지의 이전 페이지로 이동할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이전 이전 페이지로 돌아감</span></code></pre></div>\n<p>그러므로 이 방법은 사용자가 새로운 페이지가 이동한 후 이전 페이지로 돌아가는 것을 방지하고 싶은 경우에만 사용해야합니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 자바스크립트로 페이지를 이동하는 3가지 방법에 대해서 알아보았습니다.</p>\n<p>3가지 방법이 비슷한 것 같지만 미묘한 차이가 있으니 상황에 맞게 적절한 방법을 선택하는 것이 중요하겠습니다.\n저는 개인적으로는 이전 페이지로 이동이 필요한지에 따라서 <code>location.assign()</code> 메서드나 <code>location.replace()</code> 메서드를 주로 사용하고 있습니다.</p>\n<p>마지막으로 웹 접근성(accessibility) 측면에서 자바스크립트를 사용하여 페이지를 이동하는 것은 가능한 피하는 것이 좋습니다.\n예를 들어, 링크 대신 버튼을 클릭하여 페이지 이동을 구현하면 스크린 리더 사용자에게 예상하기 어려운 경험이 될 수 있겠죠?\nHTML의 <code>&#x3C;a></code> 요소를 써도 되는데 굳이 자바스크립트를 쓰는 게 아닌지 의심하시면서 개발을 하시면 도움이 될 것 같습니다.</p>","timeToRead":4,"fields":{"slug":"/js-location/","tags":["JavaScript","TypeScript","location"]},"frontmatter":{"title":"자바스크립트로 웹 페이지 이동하는 방법","date":"Aug 11, 2023"}},"next":{"fields":{"slug":"/js-url-search-params/"},"frontmatter":{"title":"자바스크립트의 URLSearchParams로 쿼리 스트링 다루기"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}