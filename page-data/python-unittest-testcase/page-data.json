{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-unittest-testcase/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-package-locks/"},"frontmatter":{"title":"패키지 잠금 파일 (package-lock.json, yarn.lock)"}},"node":{"html":"<p>어느 언어로 코딩을 하든 단위 테스트는 신뢰할 수 있는 애플리케이션을 개발하기 위해서 필수적으로 습득해야하는 기술입니다.\n파이썬에서는 내장 모듈인 <code>unittest</code>을 통해서 다른 라이브러리 없이 비교적 간단하게 단위 테스트를 작성할 수 있습니다.</p>\n<h2 id=\"unittest-모듈\" style=\"position:relative;\"><a href=\"#unittest-%EB%AA%A8%EB%93%88\" aria-label=\"unittest 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>unittest 모듈</h2>\n<p><code>unittest</code> 모듈은 Java의 <code>JUnit</code>, JavaScript의 <code>Jest</code> 또는 <code>Mocha</code>와 같은 단위 테스트 프레임워크입니다.\n다만 다른 언어와 달리 기본적으로 언어에 내장되어 있기 때문에 파이썬만 설치가 되어 있다면 바로 모듈을 불러와서(import) 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> unittest\n\n<span class=\"token comment\"># 바로 단위 테스트 작성</span></code></pre></div>\n<h2 id=\"testcase-클래스\" style=\"position:relative;\"><a href=\"#testcase-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"testcase 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TestCase 클래스</h2>\n<p><code>unittest</code> 모듈의 <code>TestCase</code> 클래스는 단위 테스트에 필요한 다양한 유틸리티 메소드를 제공합니다.\n따라서 새로운 테스트를 작성할 때는 <code>TestCase</code> 클래스를 상속하는 클래스를 먼저 작성해야 합니다.\n그리고 그 클래스 안에 테스트를 수행하는 로직을 메서드로 추가해주면 됩니다.</p>\n<p>예를 들어, <code>1</code>과 <code>2</code>를 더해서, <code>3</code>이 나오는지를 검증하는 테스트는 다음과 같이 작성할 수 있습니다.</p>\n<ul>\n<li>my_tests.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> unittest <span class=\"token keyword\">import</span> TestCase\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_one_plus_two</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>여기서 주의할 점은 테스트 메서드의 이름은 반드시 <code>test</code>로 시작을 해야 한다는 것입니다.\n그래야 테스트를 실행할 때 해당 메서드가 누락되지 않고 정확히 테스트 케이스로 인식이 됩니다.</p>\n<h2 id=\"테스트-실행\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-label=\"테스트 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 실행</h2>\n<p>작성한 테스트는 터미널에서 간단하게 실행해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python -m unittest my_tests.py\n<span class=\"token builtin class-name\">.</span>\n----------------------------------------------------------------------\nRan <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.000s\n\nOK</code></pre></div>\n<h2 id=\"테스트-실패\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%8C%A8\" aria-label=\"테스트 실패 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 실패</h2>\n<p>이번에는 한 번 실패하는 테스트를 작성해보겠습니다.\n<code>1 + 2</code>의 결과 값으로 <code>3</code> 대신에 <code>5</code>를 넘겨보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> unittest <span class=\"token keyword\">import</span> TestCase\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_one_plus_two</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다시 테스트를 실행해보면 테스트가 실패했다고 피드백을 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python -m unittest my_tests.py\nF\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nFAIL: test_one_plus_two <span class=\"token punctuation\">(</span>my_tests.MyTests<span class=\"token punctuation\">)</span>\n----------------------------------------------------------------------\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"/Users/dale/examples/python-unittest-testcase/my_tests.py\"</span>, line <span class=\"token number\">6</span>, <span class=\"token keyword\">in</span> test_one_plus_two\n    self.assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> + <span class=\"token number\">2</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nAssertionError: <span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">5</span>\n\n----------------------------------------------------------------------\nRan <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.000s\n\nFAILED <span class=\"token punctuation\">(</span>failures<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"asseretion-메소드\" style=\"position:relative;\"><a href=\"#asseretion-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"asseretion 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>asseretion 메소드</h2>\n<p><code>unittest</code> 모듈의 <code>TestCase</code> 클래스는 <code>assertEqual</code> 말고도 <code>assert</code>로 시작하는 많은 메서드를 제공합니다.\n그 중에서 많이 쓰이는 메서드를 이용해서 테스트를 추가로 작성해보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> unittest <span class=\"token keyword\">import</span> TestCase\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_one_plus_two</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_other_assertions</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertGreater<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertLess<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertIn<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertIsInstance<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>MyTests</code> 클래스는 <code>TestCase</code> 클래스를 상속하고 있기 때문에 부모 클래스인 <code>TestCase</code>가 제공하는 모든 메서드를 <code>self</code>를 통해 접근하여 호출할 수 있습니다.</p>\n<p>작성한 테스트를 실행해보면 이번에는 두개의 메서드가 통과했기 때문에 점(<code>.</code>)이 2개가 찍히는 것을 알 수 있습니다.\n테스트가 성공했을 때는 일반적으로 세부 사항이 크게 관심이 없기 때문에 이렇게 기본적인 피드백만 주도록 되어있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python -m unittest my_tests.py\n<span class=\"token punctuation\">..</span>\n----------------------------------------------------------------------\nRan <span class=\"token number\">2</span> tests <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.000s\n\nOK</code></pre></div>\n<p>참고로 이렇게 점(<code>.</code>) 대신에 좀 더 자세한 피드백을 받고 싶다면 <code>-v</code> 옵션을 붙여서 테스트를 실행하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python -m unittest -v my_tests.py\ntest_one_plus_two <span class=\"token punctuation\">(</span>my_tests.MyTests<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">..</span>. ok\ntest_other_assertions <span class=\"token punctuation\">(</span>my_tests.MyTests<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">..</span>. ok\n\n----------------------------------------------------------------------\nRan <span class=\"token number\">2</span> tests <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.000s\n\nOK</code></pre></div>\n<h2 id=\"파일의-일부로-테스트-실행\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC%EC%9D%98-%EC%9D%BC%EB%B6%80%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-label=\"파일의 일부로 테스트 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일의 일부로 테스트 실행</h2>\n<p>매번 터미널에 긴 커맨드를 쓰기가 불편하다면 파일이 실행될 때 테스트를 실행할 수 있습니다.\n파일 제일 하단에 다음과 같이 <code>unittest</code> 모듈의 <code>main</code> 메서드를 호출해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> unittest <span class=\"token keyword\">import</span> TestCase<span class=\"token punctuation\">,</span> main\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_one_plus_two</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 그냥 파일만 실행하면 테스트가 실행됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python my_tests.py\n<span class=\"token builtin class-name\">.</span>\n----------------------------------------------------------------------\nRan <span class=\"token number\">1</span> <span class=\"token builtin class-name\">test</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.000s\n\nOK</code></pre></div>\n<h2 id=\"예외-발생-테스트\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"예외 발생 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외 발생 테스트</h2>\n<p>예외가 발생하는지를 검증해야 할 때는 <code>assertRaises(exception)</code> 메서드를 사용합니다.\ncontext manager(컨텍스트 매니저)를 리턴하기 때문에 사용법이 약간 생소할 수 있는데요.</p>\n<p><code>with self.assertRaises(예상 예외):</code> 식으로 발생해야하는 예외를 먼저 명시하고,\n실제로 그 예외를 일으켜야 하는 로직을 <code>with</code> 절 안에 들여쓰기 하여 작성해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_exceptions</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ZeroDivisionError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">with</span> self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>TypeError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span></code></pre></div>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p><a href=\"https://github.com/DaleSeo/examples/tree/master/python-unittest-testcase\">https://github.com/DaleSeo/examples/tree/master/python-unittest-testcase</a></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬의 <code>unittest</code> 모듈을 이용해서 테스트를 작성하는 매우 기본적인 방법에 대해서 알아보았습니다.\n<code>unittest</code> 모듈에 대한 좀 더 자세한 내용은 아래 공식 레퍼런스를 참고바라겠습니다.</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/unittest.html\">https://docs.python.org/3/library/unittest.html</a></li>\n</ul>","timeToRead":4,"fields":{"slug":"/python-unittest-testcase/","tags":["Python","파이썬","Testing","unittest","TestCase","단위 테스트"]},"frontmatter":{"title":"[파이썬] 단위 테스트의 기본 (unittest)","date":"Nov 2, 2019"}},"next":{"fields":{"slug":"/js-npm-publish/"},"frontmatter":{"title":"패키지 배포하기 (npm publish)"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}