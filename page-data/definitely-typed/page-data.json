{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/definitely-typed/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>타입스크립트 프로젝트에서 <code>@types/</code>로 시작하는 패키지가 개발 의존성으로 여러 개가 설치되어 있는 것을 보신 적이 있으신가요?\n이번 포스팅에서는 이러한 패키지들이 왜 필요하며 어디서 오는 것인지에 대해서 알아보려고 합니다.</p>\n<h2 id=\"definitely-typed란\" style=\"position:relative;\"><a href=\"#definitely-typed%EB%9E%80\" aria-label=\"definitely typed란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definitely Typed란?</h2>\n<p>자바스크립트는 생겨난지 30년이 다 되가는 프로그래밍 언어이지만 타입스크립트는 이제 겨우 탄생한지 10년이 조금 넘었습니다.\n최근에 만들어진 자바스크립트 패키지는 대부분은 타입 선언(type definitions)이 내장되어 있지만, 타입스크립트가 등장하기 이전에 만들어진 많은 패키지들이 타입을 제공하지 않습니다.\n대표적인 예로 백엔드 개발에서 많이 사용되는 익스프레스(Express)와 프론트엔드 개발에 많이 사용되는 리액트(React)를 들 수 있죠.</p>\n<p><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">Definitely Typed</a>는 이렇게 타입 선언이 누락된 자바스크립트 패키지들를 위한 타입 저장소입니다.\n이 곳에는 익스프레스나 리액트 뿐만 아니라, 우리가 사용하는 대부분의 역사가 오래된 자바스크립트 라이브러리와 프레임워크에 대한 타입이 선언되어 있습니다.\n각 패키지에 대한 타입은 <code>.d.ts</code> 확장자를 가진 타입 선언 파일로 제공되면 <code>@types</code> 범위(scope)로 npm 저장소에 발행(publish)하도록 약속되어 있습니다.\n예를 들어, 익스프레스의 패키지 명은 <code>express</code>이기 때문에, 타입 선언을 담고있는 패키지의 이름은 <code>@types/express</code>입니다.\n마찬가지로, <code>react</code> 패키지에 대한 타입 선언은 <code>@types/react</code>에 담겨 있습니다.</p>\n<p>타입스크립트 프로젝트에서 이렇게 타입 선언이 누락된 자바스크립트를 사용할 때는 그에 상응하는 <code>@types</code>로 시작하는 타입 패키지도 설치해주는 것이 좋은데요.\n타입스크립트 컴파일러가 해당 프로젝트를 컴파일할 때 타입 오류를 잡아낼 수 있기 때문입니다.\n뿐만 아니라, 코드 편집기에서도 자동 완성과 같은 부가적인 기능이 제공되므로 개발자 실수를 줄임과 동시에 개발자 경험도 향상됩니다.\n굳이 API 문서를 보지 않더라도 코드 편집기 내에서 해당 패키지의 API를 빠르게 파악할 수 있기 때문에 개발 생산성 측면에서도 이점이 있습니다.</p>\n<p>자바스크립트 런타임의 경우 약간 다른 이유로 타입 선언을 별도의 패키지로 발행하는데요.\n바로 런타임 자체가 자바스크립트로 쓰여있지 않기 때문에 자바스크립트 패키지 저장소인 npm에 발행할 이유가 없기 때문입니다.</p>\n<h2 id=\"패키지-설치\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 설치</h2>\n<p>타입 선언이 누락된 패키지를 설치할 때는 해당 패키지 자체와 타입 선언을 담고 있는 패키지, 이렇게 총 2개의 패키지를 설치해줘야 합니다.</p>\n<p>여기서 주의할 점은 패키지 자체는 일반 의존성으로 설치하지만, 타입 선언을 담고 있는 패키지는 일반적으로 개발 의존성(dev dependency)로 설치한다는 점인데요.\n왜냐하면 애플리케이션이 실행할 때는 굳이 타입 선언 정보가 필요없기 때문입니다.\n타입 선언 정보는 코드 편집기와 같은 개발 도구와 타입스크립트 컴파일러가 타입스크립트 코드를 자바스크립트도 변환할 때만 필요합니다.</p>\n<p>그럼 프로젝트에 익스프레스에 리액트를 설치해볼까요?</p>\n<p><a href=\"/?tag=Node.js\">Node.js</a> 프로젝트에서는 터미널에서 <code>npm add</code> 명령어로 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">add</span> express react\n$ <span class=\"token function\">npm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> @types/express @types/react</code></pre></div>\n<p><a href=\"/?tag=Bun\">Bun</a>을 사용하는 프로젝트에서는 <code>bun add</code> 명령어로 패키지를 설치합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bun <span class=\"token function\">add</span> express react\n$ bun <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> @types/express @types/react</code></pre></div>\n<p><code>package.json</code> 파일을 열어보면 다음과 같이 설치 패키지가 명시되어 있는 것을 보실 수 있으실 것입니다.</p>\n<div class=\"gatsby-code-title\">packages.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.21\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.3.3\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.21\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@types/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^18.3.3\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2 id=\"타입스크립트-설정\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%A4%EC%A0%95\" aria-label=\"타입스크립트 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 설정</h2>\n<p>타입스크립트는 아무 설정을 해주지 않아도 컴파일할 때 기본적으로 프로젝트에 설치된 <code>@types/</code>로 시작하는 모든 패키지가 담고 있는 타입 선언을 참조하도록 되어 있습니다.\n하지만 특정 패키지의 타입 선언만 참조하게 하고 싶다면 다음과 같이 컴파일러 옵션의 <code>types</code> 항목에 해당 패키지를 나열해주면 됩니다.</p>\n<p>예를 들어, 익스프레스와 리액트의 타입 선언 패키지, 즉 <code>@types/express</code>와 <code>@types/react</code>만 타입스크립트 컴파일러가 참조하게 설정하고 싶다면 다음과 같이 <code>tsconfig.json</code> 파일에 명시해주면 됩니다.</p>\n<div class=\"gatsby-code-title\">tsconfig.json</div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 설정해줄 경우, <code>@types/axios</code>와 같은 다른 타입 선언 패키지가 프로젝트에 설치되어 있더라도 무시가 되므로 주의가 필요합니다.</p>\n<p>자, 여기까지만 진행해주시면 코드 편집기에서 <code>express</code>나 <code>react</code>를 불러와서 사용할 때, 빨간 줄이 그어지지 않고 자동 완성도 잘 될 것입니다.\n물론 타입스크립트 컴파일러도 아무 문제없이 자바스크립트 코드로 컴파일을 해줄 것입니다.</p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 Definitely Typed 활용하여 타입스크립트 프로젝트에서 어떻게 타입 선언이 누락되어 있는 자바스크립트 패키지를 타입 오류없이 사용할 수 있는지 살펴보았습니다.</p>\n<p>참고로 Definitely Typed는 오픈소스 프로젝트이기 때문에 누구나 기여할 수 있습니다.\n새로운 타입 정의를 추가하거나 기존 타입 정의를 개선하는 것에 참여할 수 있죠.\n또한, Definitely Typed 커뮤니티는 GitHub를 통해 활발하게 소통하고 있으며, 문제를 보고하거나 질문을 할 수 있는 공간을 제공하고 있습니다. 오픈소스 기여에 관심이 있으시다면 Definitely Typed 프로젝트에서 시작하시는 것도 좋은 방법일 것입니다.</p>","timeToRead":3,"fields":{"slug":"/definitely-typed/","tags":["TypeScript","JavaScript","library"]},"frontmatter":{"title":"Definitely Typed: TypeScript의 타입 정의 저장소","date":"May 22, 2024"}},"next":{"fields":{"slug":"/vscode-multi-cursor/"},"frontmatter":{"title":"VSCode 다중 편집을 위한 멀티 커서 활용법"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}