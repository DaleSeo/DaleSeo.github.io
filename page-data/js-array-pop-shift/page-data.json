{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/js-array-pop-shift/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/nestjs-versioning/"},"frontmatter":{"title":"NestJS에서 API 버전 관리하기(Versioning)"}},"node":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/guPtkYuZ-3c?si=G1_ATRVuHpfmB-L8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>배열에 원소를 제거하는 것은 자바스크립트 코딩할 때 매우 빈번하게 필요한 작업이죠?</p>\n<p>이번 포스팅에서는 자바스크립트 배열의 원소를 제거하는 다양한 방법에 대해서 간단히 정리해보겠습니다.</p>\n<h2 id=\"pop-메서드\" style=\"position:relative;\"><a href=\"#pop-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"pop 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pop() 메서드</h2>\n<p>자바스크립트 배열에 원소를 제거하는 방법 중에서 가장 널리 알려진 방법은 뭐니뭐니 해도 배열의 <code>pop()</code> 메서드일 것 같은데요.</p>\n<p>예를 들어, <code>pop()</code> 메서드로 과일 이름을 담은 배열로 부터 원소를 제거해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Coconut'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Apple', 'Banana']</span></code></pre></div>\n<p><code>pop()</code> 메서드는 배열에서 <strong>마지막 원소</strong>를 제거한 후에, 제거된 원소를 결과로 반환합니다.</p>\n<h2 id=\"shift-메서드\" style=\"position:relative;\"><a href=\"#shift-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"shift 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shift() 메서드</h2>\n<p>반대로 배열의 <strong>첫 번째 원소</strong>를 제거하고 싶을 때는 <code>shift()</code> 메서드를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Apple'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Banana', 'Coconut']</span></code></pre></div>\n<p><code>pop()</code> 메서드와 동일하게 <code>shift()</code> 메서드도 배열로 부터 제거된 원소를 반환합니다.</p>\n<p>여기에 꼭 기억해두셔야 할 <code>pop()</code>와 <code>shift()</code> 메서드의 가장 중요한 공통점이 있는데요.\n바로 별도로 사본 배열 생성한 후 원소를 제거하는 것이 아니라, 원본 배열로 부터 바로 원소를 제거한다는 것입니다.\n그러므로 원본 배열에 변경을 가해서는 안 되는 경우에는, 메서드를 호출하기 전에 반드시 배열을 복제해놔야 겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> clonedFruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclonedFruits<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Coconut'</span>\nclonedFruits<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Apple'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Apple', 'Banana', 'Coconut']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clonedFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Banana']</span></code></pre></div>\n<p><code>pop()</code> 메서드와 <code>shift()</code> 메서드는 성능 측면에서 중요한 차이점이 있는데요.\n<code>pop()</code> 메서드는 시간 복잡도는 <code>O(1)</code>이기 때문에 배열의 크기에 관계없이 상수 시간이 소모가 됩니다.\n반면에 <code>shift()</code> 메서드는 맨 앞에 있는 값을 제거한 후에 기존에 배열에 있던 모든 요소를 한 자리씩 왼쪽으로 이동시켜야 하기 때문에 시간 복잡도가 <code>O(n)</code>입니다.\n따라서 배열에 저장되어 있는 값의 개수가 많을수록, 그에 비례하여 시간이 오래 걸리게 됩니다.</p>\n<p>성능에 민감한 프로그램을 작성하시거나 크기가 아주 큰 배열을 다루는 상황에서는 이러한 성능 차이를 반드시 고려되야겠습니다.</p>\n<h2 id=\"splice-메서드\" style=\"position:relative;\"><a href=\"#splice-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"splice 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>splice() 메서드</h2>\n<p>그럼, <strong>배열의 중간</strong>에 원소를 제거하고 싶을 때는 어떻게 해야 할까요?\n이 때는 바로 <code>splice()</code>라는 배열의 다목적 메서드를 활용할 수 있습니다.\n(<code>slice()</code>가 아니고 <code>splice()</code>이오니 주의 바랍니다.)</p>\n<p><code>splice()</code> 메서드는 첫 번째 인자로 시작 인덱스(index), 두 번째 인자로 몇개의 값을 삭제할지, 그리고 세 번째 인자부터는 추가할 값을 가변 인자로 넘길 수 있으며, 삭제된 값을 담고 있는 배열을 반환하는데요.\n단순히 배열에 원소를 제거할 때는 제거할 위치를 첫 번째 인자로 넘기고, 두 번째 인자로는 한 개의 값을 삭제하길 원하므로 항상 <code>1</code>을 넘겨주면 됩니다.</p>\n<p>그럼 배열의 인덱스 <code>1</code>, 즉 두 번째 위치의 원소를 제거해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Banana']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Apple', 'Coconut']</span></code></pre></div>\n<p><code>splice()</code> 함수의 호출 결과로 삭제된 두 번째 원소가 담간 배열이 반환되는 것을 볼 수 있습니다.</p>\n<blockquote>\n<p>자바스크립트 배열의 slice()와 splice() 메서드에 대한 좀 더 자세한 설명은 <a href=\"/js-array-slice-splice/\">관련 포스팅</a>를 참고바랍니다.</p>\n</blockquote>\n<h2 id=\"filter-메서드\" style=\"position:relative;\"><a href=\"#filter-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"filter 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>filter() 메서드</h2>\n<p>배열에서 특정 조건에 해당하는 원소만 제거하고 싶을 때는 배열의 <code>filter()</code> 메서드가 많이 사용됩니다.</p>\n<p>예를 들어, 글자 수가 5개 이하인 원소를 배열에 제거해보겠습니다.\n<code>filter()</code> 메서드는 인자로 넘어온 함수에 부합하는 원소만 배열에 남기므로, 삭제할 때는 반대로 조건을 걸어줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> filteredFruits <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fruit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> fruit<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>filteredFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Banana', 'Coconut']</span></code></pre></div>\n<p><code>Apple</code>을 5개의 글자로 이루어졌기 때문에 배열에서 제거되는 것을 볼 수 있습니다.</p>\n<h2 id=\"spread-연산자\" style=\"position:relative;\"><a href=\"#spread-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"spread 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>spread 연산자</h2>\n<p>ES6부터는 배열을 다룰 때, spread 또는 전개 연산자로고 불리는 <code>...</code> 기호가 많이 사용되는데요.\nDestructuring 문법을 통해서 배열의 처음에 몇 개의 원소를 제외한 나머지 원소만 <code>...</code> 기호가 붙어있는 변수에 할당할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Coconut\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restFruits<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>restFruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Banana', 'Coconut']</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 예제를 통해 자바스크립트 배열에 원소를 제거하는 대표적인 4가지 방법에 대해서 살펴보았습니다.\n상황에 맞게 적절한 방법을 선택하셔서 보다 효율적으로 자바스크립트 배열을 다루실 수 있으셨으면 좋겠습니다.\n자바스크립트 배열에 원소 추가하는 방법에 대해서는 <a href=\"/js-array-push-unshift/\">별도 포스팅</a>을 통해 다루겠습니다.</p>","timeToRead":3,"fields":{"slug":"/js-array-pop-shift/","tags":["JavaScript","array","ES6"]},"frontmatter":{"title":"자바스크립트 배열의 원소 제거하기: pop()와 shift() 메서드","date":"Oct 1, 2023"}},"next":{"fields":{"slug":"/js-array-push-unshift/"},"frontmatter":{"title":"자바스크립트 배열에 원소 추가하기: push()와 unshift() 메서드"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}