{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/websocket/",
    "result": {"pageContext":{"previous":null,"node":{"html":"<p>요즘 웹을 보면 예전에는 상상하지도 못했던 방식으로 여러 사용자와 실시간으로 양방향 상호작용을 하는 애플리케이션을 볼 수 있습니다.\n대표적인 예로 다수의 참여자가 동시에 메시지를 주고 받는 채팅이나 실시간으로 게이머 간의 동기화해야 하는 온라인 게임을 들 수 있는데요.\n게다가 최근에는 ChatGPT가 등장하면서 AI 기반 채팅 기능을 제공하는 웹사이트들이 점점 늘고 있는 것 같습니다.</p>\n<p>이 블로그 글에서는 웹에서 이렇게 실시간 양방향 통신을 필요로 하는 애플리케이션을 구현하는데 필수적인 기술인 웹소켓(WebSocket)에 대해서 살펴보는 시간을 갖도록 하겠습니다.</p>\n<h2 id=\"웹소켓-프로토콜이란\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%EC%86%8C%EC%BC%93-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%B4%EB%9E%80\" aria-label=\"웹소켓 프로토콜이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹소켓 프로토콜이란?</h2>\n<p>우리가 웹 개발을 할 때 가장 흔하게 사용하는 HTTP 프로토콜은 기본적으로 요청-응답(request-response) 기반의 단방향 통신을 하게 됩니다.\n즉, 웹 브라우저와 같은 클라이언트에서 어떤 요청을 보내고, 서버에서는 그 요청을 처리하고 응답을 합니다.\n그리고, 클라이언트와 서버 간의 연결은 바로 끊깁니다.</p>\n<p>HTTP 프로토콜은 전통적인 웹사이트를 구현하는데 최적화된 통신 모델입니다.\n웹페이지를 제공할 때 서버에서는 클라이언트와 연결을 지속할 이유가 없습니다.\n따라서 다수의 클라이언트에서 들어오는 요청을 적은 하드웨어 리소스를 가지고 효율적으로 처리할 수 있습니다.</p>\n<p>하지만 HTTP 프로토콜로 실시간으로 여러 사용자와 양방향을 상호작용하는 애플리케이션을 만드는데는 크게 2가지 큰 제약 사항이 있습니다.</p>\n<p>첫 번째로, HTTP 프로토콜에서는 항상 클라이언트가 연결을 시작하는 주체가 됩니다.\n즉, 서버는 클라이언트의 요청을 마냥 기다려야하는 입장이며, 서버에서 먼저 클라이언트로 연결을 맺고 정보를 보낼 수 있는 방법이 없습니다.\n만약에 서버에서 데이터 변경과 같은 이벤트가 발생하여 반대로 클라이언트에게 알려줘야 할 때 매우 곤란해집니다.\n궁여지책으로 HTTP 폴링(Polling)과 같이 클라이언트가 주기적으로 서버를 계속해서 호출하는 기법도 있지만, 서버에서 이벤트가 잦지 않은 경우 무의미한 요청이 많아지게 되어 매우 비효율적입니다.</p>\n<p>두 번째로, HTTP 프로토콜에서는 서버와 클라이언트 간에 연결이 유지되지 않기 때문에 기존 문맥과 상태를 유지하면서 최소한 정보만 효과적으로 주고 받기가 어렵습니다.\n기본적으로 HTTP 요청/응답 메시지에는 헤더(header)가 차지하는 공간이 크기 때문에, 채팅 앱처럼 단문의 메시지를 주고 받을 경우 네트워크 대역폭의, 낭비가 심해져 배보다 배꼽이 더 커질 수 있는 상황이 될 수도 있습니다.</p>\n<p>이러한 HTTP 프로토콜의 태생적인 한계를 극복하기 위해 등장한 웹소켓 프로토콜은 클라이언트와 서버 간에 보다 효율적인 실시간 양방향 통신을 가능하게 하는 웹 표준 기술입니다.</p>\n<p>채팅이나 온라인 게임과 같은 다양한 애플리케이션에서 웹소켓을 사용하면 하나의 서버가 다수의 클라이언트와 효율적인 정보 교환이 가능해지죠.\n뿐만 아니라 실시간 알림 시스템이나 주식 트레이딩 시스템과 같이 수시로 바뀌는 정보를 웹페이지에 좀 더 기민하게 노출하기 위해서도 활용될 수 있습니다.</p>\n<h2 id=\"웹소켓-통신-과정\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%EC%86%8C%EC%BC%93-%ED%86%B5%EC%8B%A0-%EA%B3%BC%EC%A0%95\" aria-label=\"웹소켓 통신 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹소켓 통신 과정</h2>\n<p>웹소켓은 HTTP와 완전 별개의 프로토콜로 보시기 보다는 HTTP 통신이 진화(upgrade)한 형태라고 보시는 것이 좋습니다.</p>\n<p>실제로 웹소켓 연결을 맺으려면 일반 HTTP 통신과 마찬가지로 클라이언트는 서버로 GET 방식으로 요청을 보내야하는데요.\n이 때, <code>Connection</code>과 <code>Upgrade</code>와 같이 웹소켓에서만 쓰이는 조금 특별한 헤더를 함께 보내게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">GET /chat HTTP/1.1\nConnection: Upgrade\nUpgrade: websocket\nSec-WebSocket-Key: <span class=\"token assign-left variable\">cSwSSKmz0BgynEvfOdO2TA</span><span class=\"token operator\">==</span></code></pre></div>\n<p>웹소켓 연결을 지원하는 서버라면 이 경우 <code>101 Switching Protocols</code> 상태 코드를 응답해주는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">101</span> Switching Protocols\nConnection: Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: <span class=\"token assign-left variable\">cSwSSKmz0BgynEvfOdO2TA</span><span class=\"token operator\">==</span></code></pre></div>\n<p>이렇게 본격적인 웹소켓 통신을 시작하기 전에 클라이언트와 서버가 간단히 HTTP로 메시지를 주고 받는 것을 보통 핸드쉐이크(handshake)라고도 합니다.</p>\n<p>이 핸드쉐이크 과정이 끝나면 클라이언트와 서버는 이제 웹소켓 프로토콜을 통해서 양방향으로 메시지를 주고 받을 수 있게 됩니다.</p>\n<blockquote>\n<p>HTTP 상태 코드에 대해서는 <a href=\"/http-status-codes/\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"웹소켓-클라이언트\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%EC%86%8C%EC%BC%93-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8\" aria-label=\"웹소켓 클라이언트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹소켓 클라이언트</h2>\n<p>대부분의 경우 웹소켓 클라이언트는 자바스크립트를 실행할 수 있는 사용자의 브라우저 환경이 될 것입니다.\n따라서 우리는 WebSocket 웹 표준 API를 사용하여 브라우저에 작동하는 클라이언트 코드를 작성할 수 있습니다.</p>\n<p>서버와 웹소켓 통신을 하려면 우선 <code>WebSocket</code> 클래스를 사용해서 웹소켓 객체를 하나 만들어야 합니다.\n<code>ws</code>나 <code>wss</code> 프로토콜을 사용하는 서버의 URL을 <code>WebSocket</code> 클래스의 생성자에 넘기면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://www.test.com/socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>웹소켓 객체를 통해 우리는 서버에서 발생하는 4종류의 이벤트, <code>open</code>, <code>message</code>, <code>error</code>, <code>close</code>를 처리할 수 있습니다.\n<code>addEventListener</code> 메서드를 통해서 각 이벤트가 발생하였을 때 실행할 함수를 설정해주면 됩니다.</p>\n<p>이 중에서도 가장 빈번하게 발생하는 <code>message</code> 이벤트를 통해서 서버에서 보낸 메시지를 처리할 수 있습니다.</p>\n<blockquote>\n<p>자바스크립트로 이벤트 처리하는 방법에 대해서는 <a href=\"/js-dom-event-handling\">별도 포스팅</a>에서 자세히 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">socket<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"서버와 연결을 맺었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"서버에서 받은 메시지:\"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"에러:\"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsocket<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"서버와 연결을 끊었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>서버로 어떤 메시지를 보내고 싶을 때는 웹소켓 객체의 <code>send()</code> 메서드를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">socket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"하이 웹소켓!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"웹소켓-서버\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%EC%86%8C%EC%BC%93-%EC%84%9C%EB%B2%84\" aria-label=\"웹소켓 서버 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹소켓 서버</h2>\n<p>아무래도 서버 측에서는 다양한 프로그래밍 언어가 사용되므로 사용하는 언어와 프레임워크에 따라 사용하는 API가 상이합니다.</p>\n<p>예를 들어, 자바스크립트로 <a href=\"/?tag=Node.js\">Node.js</a>를 써서 웹소켓 서버를 구현할 때는 <code>ws</code>라는 npm 패키지가 많이 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> WebSocket <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> wss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket<span class=\"token punctuation\">.</span>Server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8080</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwss<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"클라이언트가 접속하였습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"받은 메세지:\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메세지 잘 받았습니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"클라이언트가 접속을 끊었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>차세대 자바스크립트 런타임인 <a href=\"/?tag=Bun\">Bun</a>은 추가적인 패키지 설치 없이도 웹소켓을 자체적으로 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">Bun<span class=\"token punctuation\">.</span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  websocket<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"클라이언트가 접속하였습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"받은 메세지:\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메세지 잘 받았습니다!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">클라이언트가 접속을 끊었습니다. (코드: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 메시지: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>실시간 양방향 통신을 위해서 웹소켓이 표준이 된지가 꽤 되었고, 현재 대부분의 모던 브라우저에서 웹소켓 API를 지원하고 있는데요.\n만약에 웹소켓을 지원하지 않는 구식 브라우저를 지원해야 한다면 <a href=\"https://socket.io/\">Socket.IO</a>와 같은 라이브러리를 사용할 수 있습니다.\n이러한 라이브러리는 웹소켓이 지원되는 환경에서는 웹소켓을 사용하고, 지원되지는 않는 환경에서는 대체 기술을 사용함으로써, 개발자들이 웹소켓 호환성을 걱정하지 않고 개발을 할 수 있도록 돕습니다.</p>\n<p>본 블로그 글이 웹소켓을 처음 접하시는 분들이 전반적인 기본 개념을 잡으시는데 도움이 되었으면 좋겠습니다.</p>","timeToRead":5,"fields":{"slug":"/websocket/","tags":["JavaScript","WebSocket","Node.js","Bun"]},"frontmatter":{"title":"실시간 양방향 통신을 위한 웹소켓(WebSocket)","date":"May 1, 2024"}},"next":{"fields":{"slug":"/vitest-fn-spy-on/"},"frontmatter":{"title":"Vitest의 함수 모킹과 스파잉"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}