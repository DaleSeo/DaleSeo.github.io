{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-unittest-mock/","result":{"pageContext":{"previous":{"fields":{"slug":"/python-float-decimal/"},"frontmatter":{"title":"파이썬 소수 연산 - float 타입과 decimal 모듈"}},"node":{"html":"<blockquote>\n<p>본 포스트의 내용을 문제없이 이해하려면 파이썬의 기본 테스팅에 대한 선수 지식이 필요합니다. 해당 지식이 부족하신 분들은 <a href=\"python-unittest-testcase\">관련 포스트</a>를 먼저 읽고 돌아오시는 것을 추천드립니다.</p>\n</blockquote>\n<h2 id=\"mocking이란\" style=\"position:relative;\"><a href=\"#mocking%EC%9D%B4%EB%9E%80\" aria-label=\"mocking이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mocking이란?</h2>\n<p>단위 테스트를 작성하다보면 데이터베이스 또는 외부 API에 의존하는 코드를 테스트해야 할 일이 필연적으로 생기기 마련입니다.<br>운영 환경 대비 제약이 많은 테스트 환경에서는 실제 데이터베이스와 연동하거나 실제 외부 API를 호출하기가 불가능한 경우가 많습니다.<br>가령 가능하더라도, 이렇게 외부 서비스에 의존하는 테스트는 해당 서비스에 문제가 있을 경우 깨질 수 있으며 실행 속도도 느릴 수 밖에 없습니다.</p>\n<p>따라서 단위 테스트를 작성할 때 외부에 의존하는 부분을 임의의 가짜로 대체하는 기법이 자주 사용되는데 이를 모킹(mocking)이라고 합니다.<br>다시 말해, 모킹(mocking)은 외부 서비스에 의존하지 않고 독립적으로 실행이 가능한 단위 테스트를 작성하기 위해서 사용되는 테스팅 기법입니다.</p>\n<h2 id=\"unittestmock-모듈\" style=\"position:relative;\"><a href=\"#unittestmock-%EB%AA%A8%EB%93%88\" aria-label=\"unittestmock 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>unittest.mock 모듈</h2>\n<p><code>unittest.mock</code> 모듈은 파이썬 3.3부터 언어 자체에 기본 내장되어 있는 모킹 라이브러리입니다.<br>따라서 별도의 외부 라이브러리 설치없이 파이썬 인터프리터에서 다음과 같이 임포트해서 바로 사용을해 볼 수 있습니다.<br>이 모듈을 이용하면 단위 테스트를 작성할 때 코드의 특정 부분을 mock 객체로 대체할 수 있으며, 해당 mock 객체가 어떻게 사용되었는 검증할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> Mock<span class=\"token punctuation\">,</span> MagicMock<span class=\"token punctuation\">,</span> call</code></pre></div>\n<h2 id=\"mock-객체-설정하기\" style=\"position:relative;\"><a href=\"#mock-%EA%B0%9D%EC%B2%B4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"mock 객체 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mock 객체 설정하기</h2>\n<p>mocking은 소외 mock이라고 불리는 가짜 객체를 생성하는 것부터 시작합니다.<br>우리는 이 mock 객체가 어떻게 작동을 할지를 지정해줄 수 있으며, 이 mock 객체는 자신을 상대로 어떤 작업이 일어났는지를 기억합니다.</p>\n<p>먼저 호출되었을 때 특정 값을 리턴하는 mock 객체는 <code>return_value</code> 옵션을 이용해서 생성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> Mock\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span>return_value<span class=\"token operator\">=</span><span class=\"token string\">'Hello, Mock!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Mock!'</span></code></pre></div>\n<p>반면에 호출되었을 때 예외가 발생하는 mock 객체는 <code>side_effect</code> 옵션을 이용해서 생성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span>side_effect<span class=\"token operator\">=</span>Exception<span class=\"token punctuation\">(</span><span class=\"token string\">'Oops!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n  File <span class=\"token string\">\"/Users/dale/.pyenv/versions/3.7.6/lib/python3.7/unittest/mock.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1011</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> __call__\n    <span class=\"token keyword\">return</span> _mock_self<span class=\"token punctuation\">.</span>_mock_call<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/Users/dale/.pyenv/versions/3.7.6/lib/python3.7/unittest/mock.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1071</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> _mock_call\n    <span class=\"token keyword\">raise</span> effect\nException<span class=\"token punctuation\">:</span> Oops!</code></pre></div>\n<p><code>side_effect</code> 옵션에 리스트를 넘기면 mock 객체가 호출될 때 마다 매 번 다른 값을 리턴할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span>side_effect<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n  File <span class=\"token string\">\"/Users/dale/.pyenv/versions/3.7.6/lib/python3.7/unittest/mock.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1011</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> __call__\n    <span class=\"token keyword\">return</span> _mock_self<span class=\"token punctuation\">.</span>_mock_call<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/Users/dale/.pyenv/versions/3.7.6/lib/python3.7/unittest/mock.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1073</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> _mock_call\n    result <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">)</span>\nStopIteration</code></pre></div>\n<p><code>side_effect</code> 옵션에 함수를 넘기면 mock 객체를 호출했을 때 주어진 인자에 따라 다른 값을 리턴할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span>side_effect<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">10</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">20</span></code></pre></div>\n<p><code>return_value</code>와 <code>side_effect</code> 옵션은 꼭 <code>Mock()</code> 생성자의 인자로 넘어갈 필요는 없습니다.<br>다음과 같이 mock 생성 이후에도 얼마든지 이 옵션 값은 바꿀 수가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>return_value <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>return_value <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span></code></pre></div>\n<p>이 mock이라는 녀석은 위와 같이 함수처럼 바로 호출을 할 수도 있지만, 객체처럼 속성도 가질 수 있는데 각 속성은 새로운 mock이 됩니다.<br>따라서 다음과 같이 특정 속성에 값을 할당해 수도 있고, 특정 메서드의 리턴 값을 지정해줄 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>attribute <span class=\"token operator\">=</span> <span class=\"token string\">'ATTRIBUTE'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>attribute\n<span class=\"token string\">'ATTRIBUTE'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>return_value <span class=\"token operator\">=</span> <span class=\"token string\">'METHOD RETURN VALUE'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'METHOD RETURN VALUE'</span></code></pre></div>\n<p>이렇게 mock 객체의 속성이나 메서드도 또 다른 mock 객체가 된다는 점을 잘 활용하면 매우 유연한 mocking이 가능해집니다.</p>\n<h2 id=\"mock-객체-검증-하기\" style=\"position:relative;\"><a href=\"#mock-%EA%B0%9D%EC%B2%B4-%EA%B2%80%EC%A6%9D-%ED%95%98%EA%B8%B0\" aria-label=\"mock 객체 검증 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mock 객체 검증 하기</h2>\n<p>mock 객체는 자신에게 발생했던 작업들을 검증할 수 있도록 다양한 메서드를 제공하고 있습니다.<br>대표적으로, <code>assert_called()</code> 메서드는 해당 mock이 호출된 이력이 있는지를 검증할 때 쓰입니다.</p>\n<p>예를 들어, mock을 한 번도 호출하지 않고 <code>assert_called()</code> 메서드를 호출하면 예외가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> Mock\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>assert_called<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n  File <span class=\"token string\">\"/Users/dale/.pyenv/versions/3.7.6/lib/python3.7/unittest/mock.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">845</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> assert_called\n    <span class=\"token keyword\">raise</span> AssertionError<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\nAssertionError<span class=\"token punctuation\">:</span> Expected <span class=\"token string\">'None'</span> to have been called<span class=\"token punctuation\">.</span></code></pre></div>\n<p>하지만 mock 객체를 한 번 호출한 후에 다시 <code>assert_called()</code> 메서드를 호출하면 예와가 발생하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Mock name<span class=\"token operator\">=</span><span class=\"token string\">'mock()'</span> <span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'4559483664'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>assert_called<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>assert_called_once()</code> 메서드는 해당 mock이 단 한 번 호출되었는지 검증할 때 쓰입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Mock name<span class=\"token operator\">=</span><span class=\"token string\">'mock()'</span> <span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'4559483280'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>assert_called_once<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Mock name<span class=\"token operator\">=</span><span class=\"token string\">'mock()'</span> <span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'4559483280'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>assert_called_once<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n  File <span class=\"token string\">\"/Users/dale/.pyenv/versions/3.7.6/lib/python3.7/unittest/mock.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">854</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> assert_called_once\n    <span class=\"token keyword\">raise</span> AssertionError<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\nAssertionError<span class=\"token punctuation\">:</span> Expected <span class=\"token string\">'mock'</span> to have been called once<span class=\"token punctuation\">.</span> Called <span class=\"token number\">2</span> times<span class=\"token punctuation\">.</span></code></pre></div>\n<p><code>assert_called_with()</code> 메서드를 사용하면 해당 mock이 호출되었을 때 어떤 인자가 넘어왔는지까지도 검증할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> B<span class=\"token operator\">=</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Mock name<span class=\"token operator\">=</span><span class=\"token string\">'mock()'</span> <span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'4559461968'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>assert_called_with<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> B<span class=\"token operator\">=</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>assert_not_called()</code> 메서드는 지금까지와 반대로 해당 mock이 호출된 적이 없는지 검증할 때 쓰입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>assert_not_called<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Mock name<span class=\"token operator\">=</span><span class=\"token string\">'mock()'</span> <span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'4559461712'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>assert_not_called<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n  File <span class=\"token string\">\"/Users/dale/.pyenv/versions/3.7.6/lib/python3.7/unittest/mock.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">836</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> assert_not_called\n    <span class=\"token keyword\">raise</span> AssertionError<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\nAssertionError<span class=\"token punctuation\">:</span> Expected <span class=\"token string\">'mock'</span> to <span class=\"token keyword\">not</span> have been called<span class=\"token punctuation\">.</span> Called <span class=\"token number\">1</span> times<span class=\"token punctuation\">.</span></code></pre></div>\n<p>mock 객체는 다양한 검증 메서드 뿐만 아니라 몇가지 유용히 속성들도 제공하고 있습니다.</p>\n<p><code>call_count</code>는 해당 mock이 호출된 횟수를 기억하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span>return_value<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>call_count\n<span class=\"token number\">2</span></code></pre></div>\n<p><code>call_args</code>는 해당 mock이 마지막 호출되었을 때 넘어온 인자를 기억하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span>return_value<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>call_args\ncall<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"magicmock\" style=\"position:relative;\"><a href=\"#magicmock\" aria-label=\"magicmock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MagicMock</h2>\n<p>파이썬에는 매직 메서드(magic method)라는 개념이 있는데, 모든 객체에는 언어 레벨에서 특수한 목적으로 쓰이는 메서드들을 정의할 수 있습니다.<br>대표적으로 <code>__str__</code>의 경우, 객체를 읽기 좋은 형태의 문자열로 출력하기 위해서 사용되는 매직 메서드입니다.</p>\n<p>기본적으로 <code>Mock</code> 클래스를 사용하면 이러한 매직 메서드가 자동으로 모킹되지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> Mock\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">.</span>return_value\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nAttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'method-wrapper'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'return_value'</span></code></pre></div>\n<p>따라서, 매직 메서드를 모킹하려면 다른 속성이나 메서드와 달리 다음과 같이 새로운 mock 객체를 직접 생성해서 할당을 해줘야 하는 불편함이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>__str__ <span class=\"token operator\">=</span> Mock<span class=\"token punctuation\">(</span>return_value <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm a mock.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>mock<span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"I'm a mock.\"</span></code></pre></div>\n<p>하지만 <code>Mock</code> 클래스의 확장 버전인 <code>MagicMock</code> 클래스를 사용하면 이러한 매직 메서드를 미리 알아서 모킹을 해놓기 때문에 편리합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> unittest<span class=\"token punctuation\">.</span>mock <span class=\"token keyword\">import</span> MagicMock\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock <span class=\"token operator\">=</span> MagicMock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">.</span>return_value\n<span class=\"token string\">\"&lt;MagicMock id='4556752144'>\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mock<span class=\"token punctuation\">.</span>__str__<span class=\"token punctuation\">.</span>return_value <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm a magic mock.\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>mock<span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"I'm a magic mock.\"</span></code></pre></div>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>지금까지 <code>unittest.mock</code> 모듈의 <code>Mock</code> 또는 <code>MagicMock</code> 클래스를 사용하여 mocking하는 방법에 대해서 알아보았습니다.<br>실제 프로젝트에서 단위 테스트를 작성할 때는 이렇게 직접 mock을 생성하는 것 보다는 <code>patch()</code> 데코레이터를 사용하는 것이 더 일반적입니다.<br>이 부분에 대해서는 추후 포스트를 통해 다뤄보도록 하겠습니다.</p>","timeToRead":6,"fields":{"slug":"/python-unittest-mock/","tags":["Python","파이썬","Testing","Mocking","unittest","Mock","MagicMock"]},"frontmatter":{"title":"[파이썬] 테스트 모킹 - unittest.mock","date":"Feb 7, 2020"}},"next":{"fields":{"slug":"/python-logging/"},"frontmatter":{"title":"파이썬 기본 로깅 - logging 내장 모듈"}}}}}