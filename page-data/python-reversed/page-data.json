{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/python-reversed/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-npm-config/"},"frontmatter":{"title":"npmrc 파일과 npm config 커맨드"}},"node":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/Sn6r7aGw_aU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>이번 포스팅에서는 파이썬에서 reversed() 함수를 이용해서 거꾸로 루프를 돌리는 방법에 대해서 알아보려고합니다.\n뿐만 아니라 reversed() 함수와 비슷해보이지만 오묘하게 틀린 리스트의 slicing 연산자와 reverse() 함수에 대해서 간단히 살펴보도록 하겠습니다.</p>\n<h2 id=\"거꾸로-루프-돌리기\" style=\"position:relative;\"><a href=\"#%EA%B1%B0%EA%BE%B8%EB%A1%9C-%EB%A3%A8%ED%94%84-%EB%8F%8C%EB%A6%AC%EA%B8%B0\" aria-label=\"거꾸로 루프 돌리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>거꾸로 루프 돌리기</h2>\n<p>다음과 같이 5개의 알파멧 문자를 담고 있는 리스트를 어떻게 루프 돌면서 각 문자를 출력할 수 있을까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">letters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>아마도 다음과 같이 간단한 <code>for</code> 문으로 어렵지 않게 각 문자에 순서대로 접근할 수 있을 것 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">A\nB\nC\nD\nE</code></pre></div>\n<p>그럼 역방향으로 각 문자에 접근하려면 어떻게 해야할까요?\n이럴 때는 다음과 같이 파이썬에 내장된 <code>reversed()</code> 함수를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">E\nD\nC\nB\nA</code></pre></div>\n<p>혹시 다음과 같이 <code>range()</code> 함수를 이용해서 인덱스를 역순으로 만들어내는 것을 먼저 떠올리셨나요?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>특히 다른 프로그래밍 언어를 사용하시다가 파이썬으로 넘어오신 분들이 역방향으로 루프를 돌릴 때 <code>range()</code> 함수를 쓰시는 것을 종종 목격하게 되는데요.</p>\n<p>보시다시피 <code>range()</code> 함수를 써서 역방향으로 루프를 돌리면 코드가 읽기 어려워져 파이썬 커뮤니티에서는 그리 좋은 코딩 스타일로 보지 않습니다.</p>\n<blockquote>\n<p>파이썬의 또 다른 내장 함수인 <code>range()</code> 함수에 대해서는 <a href=\"/python-range/\">별도의 포스팅</a>에서 자세히 다루었니 참고 바랍니다.</p>\n</blockquote>\n<p>다음과 같이 리스트의 슬라이싱(slicing) 연산자(<code>[::-1]</code>)를 쓰는 경우도 어렵지 않게 볼 수 있는데요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 방법은 가독성 측면에서는 나쁘지는 않지만 메모리 사용량 측면에서 크게 추천하고 싶지 않은 방법이에요.\n같은 원소를 역방향으로 담고 있는 동일한 크기의 리스트를 새로 만들기 때문에 불필요하게 추가 메모리를 소모하게 되기 때문입니다.</p>\n<h2 id=\"reversed-내장-함수\" style=\"position:relative;\"><a href=\"#reversed-%EB%82%B4%EC%9E%A5-%ED%95%A8%EC%88%98\" aria-label=\"reversed 내장 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reversed() 내장 함수</h2>\n<p>역방향으로 루프 돌릴 때 다른 방법 대비 <code>reversed()</code> 내장 함수를 쓰는 게 왜 좋은지 이해하려면\n<code>reversed()</code> 내장 함수의 특징을 알아야하는데요.</p>\n<p>기본적으로 <code>reversed()</code> 함수는 인자로 리스트(list) 뿐만 아니라 튜플(tuple), 문자열(string)과 같은 여러 원소로 이뤄진 자료구조를 받을 수 있습니다.</p>\n<p>그리고 주어진 자료구조에 담긴 원소들을 역순으로 순회할 수 있도록 반복자(iterator)를 결과값으로 반환하는데요.\n바로 여기서 특이한 부분은 반환 타입(return type)으로 인자로 넘어온 자료구조와 동일한 타입을 사용하지 않고, 대신에 <strong>반복자 타입</strong>을 사용한다는 점입니다.</p>\n<p>이를 직접 확인해보려면 <code>reversed()</code> 함수의 호출 결과를 그대로 출력해보면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">reversed_letters <span class=\"token operator\">=</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>reversed_letters<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>reversed object at 0x1050ca1d<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></code></pre></div>\n<p>반환된 반복자를 상대로 <code>next()</code> 함수를 호출해보면 <code>reversed()</code> 함수에 인자로 넘어갔던 리스트 내의 문자가 역순으로 하나씩 접근이 되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>reversed_letters<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">'E'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>reversed_letters<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">'D'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>reversed_letters<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">'C'</span></code></pre></div>\n<p>나머지 문자들은 <code>for</code> 문을 이용해서 마저 출력해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> reversed_letters<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">B\nA</code></pre></div>\n<p>이렇게 반복자를 반환하면 <code>for</code> 문으로 루프를 돌릴 때 메모리 사용량 측면에서 큰 이점이 있는데요.\n반복자는 미리 메모리에 모든 원소를 올려놓지 않고 필요할 때 마다 원소를 하나씩 제공해줍니다.</p>\n<p>당연한 얘기일 수도 있지만 세트(set)와 같이 순서 개념이 없어서 인덱스로 접근할 수 없는 자료구조를 상대로 <code>reversed()</code> 함수를 사용할 수 없으니 참고바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"&lt;stdin>\"</span>, line <span class=\"token number\">1</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nTypeError: <span class=\"token string\">'set'</span> object is not reversible</code></pre></div>\n<h2 id=\"리스트의-slicing-연산자\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%9D%98-slicing-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"리스트의 slicing 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트의 slicing 연산자</h2>\n<p>만약에 루프를 돌지 않고 같은 원소들을 단지 역방향으로 담고 있는 새로운 리스트를 얻고 싶을 때는 어떻게 해야할까요?\n그렇때는 <code>list()</code> 함수를 이용하여 <code>reversed()</code> 함수가 반환해준 반복자를 한번에 소비(consume)해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token string\">'E'</span>, <span class=\"token string\">'D'</span>, <span class=\"token string\">'C'</span>, <span class=\"token string\">'B'</span>, <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>하지만 거꾸로 돌아간 리스트를 만들기 위해서 두 개의 함수를 연속으로 호출하는 것이 좀 번거로워보이죠?\n사실 리스트에서 기본적으로 제공하는 슬라이싱(slicing) 연산자(<code>[::-1]</code>)를 이용하면 훨씬 간편하게 역전된 리스트를 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">letters<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>참고로 리스트 표현식(list comprehension)을 활용해서도 같은 효과를 낼 수는 있으나 이전 방법이 더 낫죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token punctuation\">[</span>letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"리스트의-reverse-함수\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%9D%98-reverse-%ED%95%A8%EC%88%98\" aria-label=\"리스트의 reverse 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트의 reverse() 함수</h2>\n<p>파이썬의 리스트(list)는 <code>reversed()</code> 내장 함수와 이름이 엇비슷한 <code>reverse()</code>라는 함수를 제공하는데요.\n많은 분들이 이 두 함수가 비슷할 거라고 예상하시는데 사실 이 두 함수는 본질적으로 큰 차이가 있기 때문에 짚고 넘어가려고 합니다.</p>\n<p>리스트의 <code>reverse()</code> 함수는 새로운 리스트를 생성하지 않고 기존 리스트 내의 원소들을 제자리에서(in place) 역방향으로 재배치해주는데요.\n이 함수를 호출하면 <code>reversed()</code> 내장 함수처럼 반복자를 반환하는 것이 아니라 단순히 리스트 내에 원소들이 제자리에서 역방향으로 재배치가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span>\nletters<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span>, <span class=\"token string\">'B'</span>, <span class=\"token string\">'C'</span>, <span class=\"token string\">'D'</span>, <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'E'</span>, <span class=\"token string\">'D'</span>, <span class=\"token string\">'C'</span>, <span class=\"token string\">'B'</span>, <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>같은 코드를 한 번 더 실행해보면 리스트가 두 번 거꾸로 뒤짚어져 최초의 모습으로 돌아오는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span>\nletters<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token string\">'E'</span>, <span class=\"token string\">'D'</span>, <span class=\"token string\">'C'</span>, <span class=\"token string\">'B'</span>, <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span>, <span class=\"token string\">'B'</span>, <span class=\"token string\">'C'</span>, <span class=\"token string\">'D'</span>, <span class=\"token string\">'E'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>여기서 조심할 부분은 어떤 리스트를 상대로 <code>reverse()</code> 함수를 호출하면 실제로 해당 리스트에 변경을 가해진다는 것입니다.\n즉, 리스트 내에 원소들 간에 자리가 서로 바뀌어서 리스트의 본래 구조를 잃어 버리게 됩니다.\n따라서 리스트의 본래 구조를 보존해야하는 경우에는 <code>reverse()</code> 함수를 사용하면 절대 안 되겠습니다.</p>\n<p>위와 같이 리스트 객체의 <code>reverse()</code> 함수가 아무것도 반환하지 않는 것도 같은 맥락으로 이해할 수 있는데요.\n역순으로 재배치된 새로운 리스트를 만들어내는 것이 아니기 때문에 <code>None</code>을 반환할 수 밖에 없는 것이지요.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-code-title\">결과</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">None</code></pre></div>\n<p>반면에 <code>reversed()</code> 내장 함수는 인자로 넘어온 리스트를 전혀 건드리지 않으며 대신 리스트의 원소에 역방향으로 접근할 수 있는 반복자를 반환합니다.\n이 두 함수의 이러한 본질적인 차이를 이해하지 않고 무분별하게 사용하시면 낭패를 볼 수 있으니 주의바라겠습니다.</p>\n<h2 id=\"전체-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\" aria-label=\"전체 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 코드</h2>\n<p>본 포스팅에서 제가 작성한 전체 코드는 아래에서 직접 확인하고 실행해보실 수 있습니다.</p>\n<p><a href=\"https://dales.link/o1h\">https://dales.link/o1h</a></p>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>파이썬에서 <code>reversed()</code> 내장 함수는 역방향으로 루프 돌리기 위해서 고안되었다고 말해도 과언이 아닐 정도인데요.\n<code>reversed()</code> 내장 함수를 사용해서 루프를 돌면 코드가 읽기 쉬울 뿐만 아니라 메모리도 적게 사용하기 때문에 성능도 좋아집니다.</p>\n<p>반면에 같은 원소들을 역방향으로 담고 있는 새로운 리스트 생성할 때는 슬라이싱(slicing) 연산자를 사용하는 편이 좋으며, 리스트 내의 원소들을 제자리에서 역방향으로 재배치할 때는 리스트가 제공하는 <code>reverse()</code>라는 함수를 사용하면 됩니다.</p>","timeToRead":5,"fields":{"slug":"/python-reversed/","tags":["Python","BIF"]},"frontmatter":{"title":"파이썬의 reversed() 함수로 거꾸로 루프 돌리기 (vs. slicing 연산자 & reverse() 함수)","date":"Apr 24, 2022"}},"next":{"fields":{"slug":"/github-actions-checkout/"},"frontmatter":{"title":"GitHub Actions의 체크아웃(Checkout) 액션으로 코드 내려받기"}}}},"staticQueryHashes":["2168229929","2362167539","3056348342"]}