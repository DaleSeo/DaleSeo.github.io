{
    "componentChunkName": "component---src-templates-detail-template-jsx",
    "path": "/python-venv/",
    "result": {"pageContext":{"previous":{"fields":{"slug":"/python-black/"},"frontmatter":{"title":"Black으로 파이썬 코드 스타일 통일하기"}},"node":{"html":"<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"https://www.youtube.com/embed/aljQwnMFapE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>이번 포스팅에서는 의존성 충돌없이 파이썬 개발을 할 수 있도록 도와주는 매우 유용한 도구인 <code>venv</code> 내장 모듈에서 대해서 알아보겠습니다.</p>\n<h2 id=\"의존성-충돌-문제\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%A9%EB%8F%8C-%EB%AC%B8%EC%A0%9C\" aria-label=\"의존성 충돌 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 충돌 문제</h2>\n<p>하나의 컴퓨터 상에서 Python으로 개발된 여러 개의 프로젝트 돌리는 경우 프로젝트 간에 의존성(dependency) 충돌이 발생하기 쉬운데요.</p>\n<p>예를 들어서 프로젝트 A에서 <code>Django</code> 패키지 3.x 버전을 사용하는데, 프로젝트 B에서 <code>Django</code> 패키지를 4.x 버전을 사용하고 있다면,\n둘 중 하나의 프로젝트에서는 <code>Django</code> 앱을 실행할 때 오류가 발생할 가능성이 높습니다.</p>\n<p>왜냐하면 두 개의 프로젝트가 동일한 컴퓨터에 설치된 하나의 파이썬 실행 환경(runtime)을 사용하므로 파이썬 패키지를 서로 공유하게 되기 때문인데요.\n만약에 프로젝트 B에서 마지막에 <code>Django</code> 패키지를 설치했다면 해당 컴퓨터에는 <code>Django</code> 4.x 버전이 설치되어 있기 때문에 <code>Django</code> 3.x 버전을 사용하도록 되어 있는 프로젝트 A에서 <code>Django</code> 앱을 실행할 때 패키지 버전이 맞지 않아 오류가 발생하는 것이지요.</p>\n<p>파이썬에서는 패키지를 설치할 때는 보통 <code>pip</code>라는 패키지 매니저를 사용하는데, 기본적으로 해당 컴퓨터 상에서 파이썬이 설치된 경로의 <code>site-packages</code> 디렉터리에 안에 설치됩니다.\n노드의 <code>npm</code>이나 자바의 <code>maven</code>과 같은 패키지 매니저가 프로젝트 별로 패키지 설치를 지원하는 반면에, 아직까지 파이썬의 <code>pip</code>는 시스템 전역으로만 패키지를 설치할 수 있습니다.</p>\n<blockquote>\n<p>파이썬의 패키지 매니저인 pip(Package Installer for Python)에 대해서는 <a href=\"/python-pip/\">별도 포스팅</a>에서 다루고 있으니 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"가상-환경과-venv-모듈\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD%EA%B3%BC-venv-%EB%AA%A8%EB%93%88\" aria-label=\"가상 환경과 venv 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 환경과 venv 모듈</h2>\n<p>다른 언어와 달리 파이썬에서는 일반적으로 프로젝트 별로 독립된 개발 환경을 구성하기 위해서 가상 환경 (virtual environment)을 이용하는데요.\n<code>venv</code>라는 내장 모듈을 통해서 쉽게 가상 환경을 만들 수 있으며 이를 통해 프로젝트 간 의존성 충돌 문제를 효과적으로 예방할 수 있습니다.</p>\n<p>파이썬에서 가상 환경(virtual environment)은 하나의 컴퓨터에서 프로젝트 별로 독룁된 파이썬 실행 환경(runtime)을 구성할 수 있도록 해줍니다.\n가상 환경을 사용하지 않으면 컴퓨터 내의 모든 프로젝트에서 하나의 파이썬 실행 환경을 사용하면서 동일한 경로에 외부 패키지를 설치하고 서로 공유하게 됩니다.\n이럴 경우, 하나의 프로젝트에서 설치한 패키지의 버전이 다른 프로젝트에서 설치한 동일 패키지의 다른 버전과 충동을 일으킬 소지가 생기기 때문에, 일반적으로 파이썬 프로젝트 별로 독립된 가상 환경을 구성하여 사용하는 것이 권장됩니다.</p>\n<h2 id=\"가상-환경-구성\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"가상 환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 환경 구성</h2>\n<p>파이썬 2에서는 <a href=\"https://virtualenv.pypa.io\">virtualenv</a>라는 외부 패키지를 사용해서 가상 환경을 구성했었는데, 파이썬 3.3 부터는 <a href=\"https://docs.python.org/3/library/venv.html\">venv</a> 모듈이 기본적으로 포함되어 있기 때문에 별도 외부 패키지 설치없이 파이썬만 설치되어 있으면 바로 가상 환경 구성이 가능하게 되었습니다.</p>\n<p>가상 환경을 구성할 프로젝트 디렉터리에 들어가서 아래와 같이 커맨드를 날리면 <code>.venv</code>라는 디렉터리가 생길 것입니다.\n여기서 반드시 디렉터리 이름을 <code>.venv</code>로 할 필요는 없지만, 대부분의 파이썬 프로젝트들이 따르는 관행이므로 지켜주시는 게 좋습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>프로젝트 디렉터리<span class=\"token operator\">></span>\n$ python <span class=\"token parameter variable\">-m</span> venv .venv\n$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span>\n<span class=\"token builtin class-name\">.</span>     <span class=\"token punctuation\">..</span>    .venv</code></pre></div>\n<p>가상 환경을 굳이 Git과 같은 소스 버전 관리 시스템에 올릴 필요는 없으므로 <code>.venv</code> 디렉터리를 <code>.gitignore</code> 파일에 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ echo '.venv' >> .gitignore</code></pre></div>\n<h2 id=\"가상-환경-활성화\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%ED%99%9C%EC%84%B1%ED%99%94\" aria-label=\"가상 환경 활성화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 환경 활성화</h2>\n<p>가상 환경을 활성화 하기 위해서는 <code>.venv</code> 디렉토리 안에 있는 스크립트를 실행해줘야 하는데요.\n저처럼 MacOS를 사용하시는 분들은 <code>bin</code> 디렉토리 안에 있는 <code>activate</code> 파일을 실행하면 됩니다.</p>\n<p>그러면 쉘 프롬프트 앞에 <code>(.venv)</code>라고 붙으면서 가상 환경이 활성화 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">.</span> .venv/bin/activate\n<span class=\"token punctuation\">(</span>.venv<span class=\"token punctuation\">)</span> $</code></pre></div>\n<p>혹시 <code>.</code> 커맨드가 안 먹는 분들은 <code>source</code> 커맨드를 쓰셔도 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">source</span> .venv/bin/activate\n<span class=\"token punctuation\">(</span>.venv<span class=\"token punctuation\">)</span> $</code></pre></div>\n<p>Windows 계열 컴퓨터에서는 <code>Scripts</code> 디렉토리 안에 있는 <code>activate.bat</code> 파일을 실행하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Scripts<span class=\"token punctuation\">\\</span>activate.bat</code></pre></div>\n<p>이제 <code>which</code> 커맨드를 통해 어떤 파이썬 인터프리터가 사용되는지 확인보겠습니다.\n<code>venv</code> 디렉터리 안에 있는 <code>bin/python</code>이 컴퓨터에 기본 설치된 파이썬 대신에 사용됨을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>.venv<span class=\"token punctuation\">)</span> $ <span class=\"token function\">which</span> python\n/Users/dale/temp/my-project/.venv/bin/python</code></pre></div>\n<p>가상 환경에서 제공하는 파이썬의 버전은 다음과 같이 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>.venv<span class=\"token punctuation\">)</span> $ python <span class=\"token parameter variable\">-V</span>\nPython <span class=\"token number\">3.11</span>.2</code></pre></div>\n<h2 id=\"가상-환경에-패키지-설치\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD%EC%97%90-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"가상 환경에 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 환경에 패키지 설치</h2>\n<p>가상 환경이 활성화된 상태에서 패키지를 설치하면, <code>.venv</code> 디렉터리 내부에 해당 패키지가 설치됩니다.\n즉, 컴퓨터에 설치되어 있는 파이썬 실행 환경이나 다른 파이썬 프로젝트에 아무 영향을 주지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>.venv<span class=\"token punctuation\">)</span> $ pip <span class=\"token function\">install</span> requests\nCollecting requests\n  Downloading requests-2.28.2-py3-none-any.whl <span class=\"token punctuation\">(</span><span class=\"token number\">62</span> kB<span class=\"token punctuation\">)</span>\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class=\"token number\">62.8</span>/62.8 kB <span class=\"token number\">2.7</span> MB/s eta <span class=\"token number\">0</span>:00:00\nCollecting charset-normalizer<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span>,<span class=\"token operator\">>=</span><span class=\"token number\">2</span>\n  Downloading charset_normalizer-3.1.0-cp311-cp311-macosx_11_0_arm64.whl <span class=\"token punctuation\">(</span><span class=\"token number\">121</span> kB<span class=\"token punctuation\">)</span>\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class=\"token number\">121.7</span>/121.7 kB <span class=\"token number\">5.9</span> MB/s eta <span class=\"token number\">0</span>:00:00\nCollecting idna<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span>,<span class=\"token operator\">>=</span><span class=\"token number\">2.5</span>\n  Downloading idna-3.4-py3-none-any.whl <span class=\"token punctuation\">(</span><span class=\"token number\">61</span> kB<span class=\"token punctuation\">)</span>\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class=\"token number\">61.5</span>/61.5 kB <span class=\"token number\">5.1</span> MB/s eta <span class=\"token number\">0</span>:00:00\nCollecting urllib<span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>&lt;</span><span class=\"token number\">1.27</span>,<span class=\"token operator\">>=</span><span class=\"token number\">1.21</span>.1\n  Downloading urllib3-1.26.15-py2.py3-none-any.whl <span class=\"token punctuation\">(</span><span class=\"token number\">140</span> kB<span class=\"token punctuation\">)</span>\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class=\"token number\">140.9</span>/140.9 kB <span class=\"token number\">7.3</span> MB/s eta <span class=\"token number\">0</span>:00:00\nCollecting certifi<span class=\"token operator\">>=</span><span class=\"token number\">2017.4</span>.17\n  Downloading certifi-2022.12.7-py3-none-any.whl <span class=\"token punctuation\">(</span><span class=\"token number\">155</span> kB<span class=\"token punctuation\">)</span>\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class=\"token number\">155.3</span>/155.3 kB <span class=\"token number\">6.8</span> MB/s eta <span class=\"token number\">0</span>:00:00\nInstalling collected packages: urllib3, idna, charset-normalizer, certifi, requests\nSuccessfully installed certifi-2022.12.7 charset-normalizer-3.1.0 idna-3.4 requests-2.28.2 urllib3-1.26.15\n\n<span class=\"token punctuation\">[</span>notice<span class=\"token punctuation\">]</span> A new release of pip available: <span class=\"token number\">22.3</span>.1 -<span class=\"token operator\">></span> <span class=\"token number\">23.0</span>.1\n<span class=\"token punctuation\">[</span>notice<span class=\"token punctuation\">]</span> To update, run: pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">--upgrade</span> pip</code></pre></div>\n<p><code>pip show</code> 커맨드로 설치된 패키지의 세부사항을 살펴보면 <code>.venv/lib/python3.7/site-packages</code>에 해당 패키지가 설치되었다는 것을 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip show requests\nName: requests\nVersion: <span class=\"token number\">2.28</span>.2\nSummary: Python HTTP <span class=\"token keyword\">for</span> Humans.\nHome-page: https://requests.readthedocs.io\nAuthor: Kenneth Reitz\nAuthor-email: me@kennethreitz.org\nLicense: Apache <span class=\"token number\">2.0</span>\nLocation: /Users/daleseo/temp/learn-venv/.venv/lib/python3.11/site-packages\nRequires: certifi, charset-normalizer, idna, urllib3\nRequired-by:</code></pre></div>\n<p>이렇게 독립된 가상 환경에 패키지를 설치하게 되면 다른 프로젝트에서 사용하고 있는 <code>requests</code> 패키지를 덮어쓸 일이 없습니다.\n반대로 다른 프로젝트에서도 이 프로젝트에서 사용하고 있는 <code>requests</code> 패키지를 덮어쓸 위험이 사라지게 됩니다.</p>\n<h2 id=\"가상-환경-비활성화\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94\" aria-label=\"가상 환경 비활성화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가상 환경 비활성화</h2>\n<p>가상 환경을 빠져나올 떄는 터밀널에 <code>deactivate</code>만 입력해주면 됩니다.\n가상 환경이 비활성화 되면 다시 원래대로 운영체제의 기본 파이썬 인터프리터를 사용하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>.venv<span class=\"token punctuation\">)</span> $ deactivate\n<span class=\"token function\">which</span> python\n/usr/local/bin/python3</code></pre></div>\n<p>저처럼 MacOS에서 <code>pyenv</code>를 사용하시는 분들은 다음과 같이 약간 다른 디렉토리가 보일 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>.venv<span class=\"token punctuation\">)</span> $ deactivate\n<span class=\"token function\">which</span> python\n/Users/daleseo/.pyenv/shims/python</code></pre></div>\n<blockquote>\n<p>하나의 Mac에서 여러 버전의 파이썬을 관리해주는 도구인 <code>pyenv</code>에 대해서는 <a href=\"/python-pyenv/\">관련 포스팅</a>을 참고 바랍니다.</p>\n</blockquote>\n<h2 id=\"마치면서\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h2>\n<p>이상으로 파이썬에 기본으로 내장된 <code>venv</code> 모듈을 이용하여 가상 환경을 사용하는 방법에 대해서 살펴보았습니다.\n<code>venv</code>를 잘 활용하셔서 의존성 충돌에 대한 걱정 없이 프로젝트 별로 서로 격리된 파이썬 환경에서 개발하실 수 있으셨으면 좋겠습니다.</p>\n<p>참고로 가상 환경 기반으로 좀 더 체계적인 의존성 관리가 필요하시다면 pipenv라는 별도로 설치가 필요한 강력한 도구도 있습니다.\n이 부분에 대해서는 <a href=\"/python-pipenv/\">별도 포스팅</a>에서 다루고 있으니 참고해보시면 좋을 것 같습니다.</p>","timeToRead":6,"fields":{"slug":"/python-venv/","tags":["Python","venv","pip"]},"frontmatter":{"title":"파이썬의 venv 모듈로 가상 환경 사용하기","date":"Jan 12, 2020"}},"next":{"fields":{"slug":"/python-pyenv/"},"frontmatter":{"title":"여러 버전의 파이썬 관리하기 (pyenv)"}}}},
    "staticQueryHashes": ["2168229929","2362167539","3056348342"]}