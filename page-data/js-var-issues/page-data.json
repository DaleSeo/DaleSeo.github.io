{"componentChunkName":"component---src-templates-detail-template-jsx","path":"/js-var-issues/","result":{"pageContext":{"previous":{"fields":{"slug":"/js-es2015-let/"},"frontmatter":{"title":"[ES2015] let으로 변수 선언하기 1"}},"node":{"html":"<p>많은 자바스크립트 강좌에서 가급적 <code>var</code> 대신에 <code>let</code>이나 <code>const</code> 키워드를 사용하여 변수를 선언하라고 가이드하고 있는데요.</p>\n<p>본 포스트에서는 <code>var</code>의 어떤 문제점 때문에 그런건지 알아보도록 하겠습니다.</p>\n<h2 id=\"아리송한-코드\" style=\"position:relative;\"><a href=\"#%EC%95%84%EB%A6%AC%EC%86%A1%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\"아리송한 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아리송한 코드</h2>\n<p>먼저 다음 코드를 살펴보도록 하겠습니다.\n무엇이 출력이 될지 예상이 되시나요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>첫번째 <code>console.log(n)</code>에서 오류가 발생할 것 같기도 하고, <code>1</code>과 <code>2</code>가 출력될 것 같기도 한데요.\n의외로 정답은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">undefined\n<span class=\"token number\">2</span></code></pre></div>\n<p>왜 이런 예상치못한 결과가 얻어지는 걸까요?\n원인은 <code>var</code> 키워드를 사용할 경우, 변수 Hoisting 현상이 발생하기 때문입니다.</p>\n<h2 id=\"변수-hoisting이란\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-hoisting%EC%9D%B4%EB%9E%80\" aria-label=\"변수 hoisting이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 Hoisting이란?</h2>\n<p>Hoisting이란 <code>var</code> 키워드를 사용하여 변수를 선언 시, 해당 변수가 속한 범위(scope) 최상단으로 올려버리는 현상을 일컽습니다.</p>\n<p><strong>그리고 주목할 점은 여기서 속한 범위는 다른 언어처럼 block 레벨이 아니라 function 레벨이라는 점입니다.</strong></p>\n<p>function 레벨로 변수 Hoisting 현상이 발생하면 위 코드는 다음과 같이 해석되어 집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// hosting</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>따라서, 첫번째 <code>console.log(n)</code>이 실행될 시점에서는 <code>n</code>에 어떤 값도 할당되지 않았기 때문에 <code>undefined</code>가 출력되었던 것입니다.</p>\n<h2 id=\"예측하기-어려운-코드\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%B8%A1%ED%95%98%EA%B8%B0-%EC%96%B4%EB%A0%A4%EC%9A%B4-%EC%BD%94%EB%93%9C\" aria-label=\"예측하기 어려운 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예측하기 어려운 코드</h2>\n<p><code>var</code>를 사용할 경우, 전반적으로 코드가 어떻게 작동될지 직관적으로 예측하기 어려운 경우가 자주 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 <code>ReferenceError</code>를 일으킵니다. 변수 <code>n</code>이 선언된적이 없기 때문이죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> n<span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 아래 코드는 <code>undefined</code>를 출력합니다. 변수 <code>n</code>의 선언이 Hosting되기 때문입니다.</p>\n<h2 id=\"for-문에서-var를-사용할-때-이슈-1\" style=\"position:relative;\"><a href=\"#for-%EB%AC%B8%EC%97%90%EC%84%9C-var%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-%EC%9D%B4%EC%8A%88-1\" aria-label=\"for 문에서 var를 사용할 때 이슈 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for 문에서 var를 사용할 때 이슈 1</h2>\n<p>특히, <code>for</code> 문에서 <code>var</code>를 사용하면 더 당황스러운 경우를 겪을 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  sum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum:\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sum: <span class=\"token number\">45</span>\ni: <span class=\"token number\">10</span></code></pre></div>\n<p>위 코드에서 변수 <code>i</code>의 값은 for 루프가 끝난 다음에도 유지가 됩니다.\n왜냐하면 위에 설명드린 것 처럼 <code>var</code>로 선언한 변수는 <code>if</code>나 <code>for</code>와 같은 block 레벨 아닌 function 레벨에서 범위가 정해지기 때문입니다.\n즉, for 문 안에서 <code>var</code>로 선언한 변수도 block을 벗어나서 유효하게 됩니다.</p>\n<h2 id=\"for-문에서-var를-사용할-때-이슈-2\" style=\"position:relative;\"><a href=\"#for-%EB%AC%B8%EC%97%90%EC%84%9C-var%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-%EC%9D%B4%EC%8A%88-2\" aria-label=\"for 문에서 var를 사용할 때 이슈 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for 문에서 var를 사용할 때 이슈 2</h2>\n<p>다음 코드는 사용자 아이디를 받아 가짜 사용자를 콜백 함수로 넘기는 비동기 함수입니다.\n마치 DB 연동처럼 <code>setTimeout</code> 함수를 이용하여 1초의 지연을 주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> fakeUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Joe#\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"@test.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>fakeUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 아래 코드는 사용자 아이디의 배열을 받아 여러 사용자의 정보를 출력해주는 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userIds</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> userIds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>userIds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found for id,\"</span><span class=\"token punctuation\">,</span> userIds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=> A user founded:\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 인자를 넘겨서 위 함수를 실행을 해보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">findUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같이 다소 황당한 출력 결과를 얻게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Found <span class=\"token keyword\">for</span> id, <span class=\"token number\">105</span>\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> A user founded: <span class=\"token punctuation\">{</span> id: <span class=\"token number\">3</span>, name: <span class=\"token string\">'Joe#3'</span>, email: <span class=\"token string\">'3@test.com'</span> <span class=\"token punctuation\">}</span>\nFound <span class=\"token keyword\">for</span> id, <span class=\"token number\">105</span>\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> A user founded: <span class=\"token punctuation\">{</span> id: <span class=\"token number\">7</span>, name: <span class=\"token string\">'Joe#7'</span>, email: <span class=\"token string\">'7@test.com'</span> <span class=\"token punctuation\">}</span>\nFound <span class=\"token keyword\">for</span> id, <span class=\"token number\">105</span>\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> A user founded: <span class=\"token punctuation\">{</span> id: <span class=\"token number\">29</span>, name: <span class=\"token string\">'Joe#29'</span>, email: <span class=\"token string\">'29@test.com'</span> <span class=\"token punctuation\">}</span>\nFound <span class=\"token keyword\">for</span> id, <span class=\"token number\">105</span>\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> A user founded: <span class=\"token punctuation\">{</span> id: <span class=\"token number\">105</span>, name: <span class=\"token string\">'Joe#105'</span>, email: <span class=\"token string\">'105@test.com'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>왜 사용자 아이디가 배열의 마지막 원소로 고정이 되어버린 걸까요?\n이 역시 <code>var</code>로 선언된 변수는 function scope을 가진다는 점과 비동기 함수의 non blocking 성질을 고려하면 이해할 수 있습니다.\n<code>for</code> 문에서 각 콜백 함수를 넘길 시점에는 <code>i</code> 값이 달랐겠지만, 각 콜백 함수가 실행될 시점에는 <code>for</code> 루프가 끝나서 <code>i</code>가 배열의 마지막 원소의 인덱스로 변경된 이후입니다.</p>\n<p>이 쯤에서 정리해보면, <code>var</code>를 사용하여 변수를 선언하면, 변수 Hosting과 함수 Scope를 고려하면서 코딩을 해야합니다.\n따라서 <code>var</code>를 사용하면 전반적으로 코드가 어떻게 작동할지 예상하기 어려운 상황이 발생하기 쉬워 집니다.</p>\n<p><a href=\"/js-es2015-let\">다음 포스트</a>에서는 ES6에서 도입된 <code>let</code>과 <code>const</code> 키워드를 사용하여 이러한 문제들을 해결하는 방법들에서 알아보도록 하겠습니다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\">https://developer.mozilla.org/en-US/docs/Glossary/Hoisting</a></li>\n</ul>","timeToRead":4,"fields":{"slug":"/js-var-issues/","tags":["JavaScript","자바스크립트","Hoisting"]},"frontmatter":{"title":"[자바스크립트] var를 사용할 때 발생하는 문제들","date":"Feb 5, 2017"}},"next":{"fields":{"slug":"/assertj/"},"frontmatter":{"title":"AssertJ 소개"}}}},"staticQueryHashes":["2362167539","3000541721","3056348342"]}